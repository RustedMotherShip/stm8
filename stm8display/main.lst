                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _gg
                                     13 	.globl _display_clean
                                     14 	.globl _display_buffer_fill_entire
                                     15 	.globl _display_draw_pixel
                                     16 	.globl _display_set_params_to_write
                                     17 	.globl _display_init
                                     18 	.globl _delay
                                     19 	.globl _set_bit
                                     20 	.globl _get_bit
                                     21 	.globl _setup
                                     22 	.globl _i2c_scan
                                     23 	.globl _i2c_write
                                     24 	.globl _i2c_send_byte
                                     25 	.globl _i2c_read
                                     26 	.globl _i2c_read_byte
                                     27 	.globl _i2c_send_address
                                     28 	.globl _i2c_stop
                                     29 	.globl _i2c_start
                                     30 	.globl _i2c_init
                                     31 	.globl _uart_read
                                     32 	.globl _uart_write_byte
                                     33 	.globl _uart_read_byte
                                     34 	.globl _uart_init
                                     35 	.globl _uart_reciever_irq
                                     36 	.globl _uart_transmission_irq
                                     37 	.globl _splash
                                     38 	.globl _I2C_IRQ
                                     39 	.globl _buf_size
                                     40 	.globl _buf_pos
                                     41 	.globl _rx_buf_pointer
                                     42 	.globl _tx_buf_pointer
                                     43 	.globl _uart_write
                                     44 ;--------------------------------------------------------
                                     45 ; ram data
                                     46 ;--------------------------------------------------------
                                     47 	.area DATA
      000000                         48 _tx_buf_pointer::
      000000                         49 	.ds 2
      000002                         50 _rx_buf_pointer::
      000002                         51 	.ds 2
      000004                         52 _buf_pos::
      000004                         53 	.ds 1
      000005                         54 _buf_size::
      000005                         55 	.ds 1
                                     56 ;--------------------------------------------------------
                                     57 ; ram data
                                     58 ;--------------------------------------------------------
                                     59 	.area INITIALIZED
      000000                         60 _I2C_IRQ::
      000000                         61 	.ds 1
      000001                         62 _splash::
      000001                         63 	.ds 512
                                     64 ;--------------------------------------------------------
                                     65 ; Stack segment in internal ram
                                     66 ;--------------------------------------------------------
                                     67 	.area SSEG
      000000                         68 __start__stack:
      000000                         69 	.ds	1
                                     70 
                                     71 ;--------------------------------------------------------
                                     72 ; absolute external ram data
                                     73 ;--------------------------------------------------------
                                     74 	.area DABS (ABS)
                                     75 
                                     76 ; default segment ordering for linker
                                     77 	.area HOME
                                     78 	.area GSINIT
                                     79 	.area GSFINAL
                                     80 	.area CONST
                                     81 	.area INITIALIZER
                                     82 	.area CODE
                                     83 
                                     84 ;--------------------------------------------------------
                                     85 ; interrupt vector
                                     86 ;--------------------------------------------------------
                                     87 	.area HOME
      000000                         88 __interrupt_vect:
      000000 82v00u00u00             89 	int s_GSINIT ; reset
      000004 82 00 00 00             90 	int 0x000000 ; trap
      000008 82 00 00 00             91 	int 0x000000 ; int0
      00000C 82 00 00 00             92 	int 0x000000 ; int1
      000010 82 00 00 00             93 	int 0x000000 ; int2
      000014 82 00 00 00             94 	int 0x000000 ; int3
      000018 82 00 00 00             95 	int 0x000000 ; int4
      00001C 82 00 00 00             96 	int 0x000000 ; int5
      000020 82 00 00 00             97 	int 0x000000 ; int6
      000024 82 00 00 00             98 	int 0x000000 ; int7
      000028 82 00 00 00             99 	int 0x000000 ; int8
      00002C 82 00 00 00            100 	int 0x000000 ; int9
      000030 82 00 00 00            101 	int 0x000000 ; int10
      000034 82 00 00 00            102 	int 0x000000 ; int11
      000038 82 00 00 00            103 	int 0x000000 ; int12
      00003C 82 00 00 00            104 	int 0x000000 ; int13
      000040 82 00 00 00            105 	int 0x000000 ; int14
      000044 82 00 00 00            106 	int 0x000000 ; int15
      000048 82 00 00 00            107 	int 0x000000 ; int16
      00004C 82v00u00u00            108 	int _uart_transmission_irq ; int17
      000050 82v00u00u3C            109 	int _uart_reciever_irq ; int18
                                    110 ;--------------------------------------------------------
                                    111 ; global & static initialisations
                                    112 ;--------------------------------------------------------
                                    113 	.area HOME
                                    114 	.area GSINIT
                                    115 	.area GSFINAL
                                    116 	.area GSINIT
      000000 CDr00r00         [ 4]  117 	call	___sdcc_external_startup
      000003 4D               [ 1]  118 	tnz	a
      000004 27 03            [ 1]  119 	jreq	__sdcc_init_data
      000006 CCr00r54         [ 2]  120 	jp	__sdcc_program_startup
      000009                        121 __sdcc_init_data:
                                    122 ; stm8_genXINIT() start
      000009 AEr00r00         [ 2]  123 	ldw x, #l_DATA
      00000C 27 07            [ 1]  124 	jreq	00002$
      00000E                        125 00001$:
      00000E 72 4FuFFuFF      [ 1]  126 	clr (s_DATA - 1, x)
      000012 5A               [ 2]  127 	decw x
      000013 26 F9            [ 1]  128 	jrne	00001$
      000015                        129 00002$:
      000015 AEr00r00         [ 2]  130 	ldw	x, #l_INITIALIZER
      000018 27 09            [ 1]  131 	jreq	00004$
      00001A                        132 00003$:
      00001A D6uFFuFF         [ 1]  133 	ld	a, (s_INITIALIZER - 1, x)
      00001D D7uFFuFF         [ 1]  134 	ld	(s_INITIALIZED - 1, x), a
      000020 5A               [ 2]  135 	decw	x
      000021 26 F7            [ 1]  136 	jrne	00003$
      000023                        137 00004$:
                                    138 ; stm8_genXINIT() end
                                    139 	.area GSFINAL
      000000 CCr00r54         [ 2]  140 	jp	__sdcc_program_startup
                                    141 ;--------------------------------------------------------
                                    142 ; Home
                                    143 ;--------------------------------------------------------
                                    144 	.area HOME
                                    145 	.area HOME
      000054                        146 __sdcc_program_startup:
      000054 CCr07rA7         [ 2]  147 	jp	_main
                                    148 ;	return from main will return to caller
                                    149 ;--------------------------------------------------------
                                    150 ; code
                                    151 ;--------------------------------------------------------
                                    152 	.area CODE
                                    153 ;	libs/uart_lib.c: 3: void uart_transmission_irq(void) __interrupt(UART1_T_vector)
                                    154 ;	-----------------------------------------
                                    155 ;	 function uart_transmission_irq
                                    156 ;	-----------------------------------------
      000000                        157 _uart_transmission_irq:
                                    158 ;	libs/uart_lib.c: 5: if(UART1_SR -> TXE) 
      000000 AE 52 30         [ 2]  159 	ldw	x, #0x5230
      000003 F6               [ 1]  160 	ld	a, (x)
      000004 4E               [ 1]  161 	swap	a
      000005 44               [ 1]  162 	srl	a
      000006 44               [ 1]  163 	srl	a
      000007 44               [ 1]  164 	srl	a
      000008 A5 01            [ 1]  165 	bcp	a, #0x01
      00000A 27 2F            [ 1]  166 	jreq	00107$
                                    167 ;	libs/uart_lib.c: 7: if(tx_buf_pointer[buf_pos] != '\0' && buf_size>buf_pos)
      00000C C6u00u01         [ 1]  168 	ld	a, _tx_buf_pointer+1
      00000F CBu00u04         [ 1]  169 	add	a, _buf_pos+0
      000012 97               [ 1]  170 	ld	xl, a
      000013 C6u00u00         [ 1]  171 	ld	a, _tx_buf_pointer+0
      000016 A9 00            [ 1]  172 	adc	a, #0x00
      000018 95               [ 1]  173 	ld	xh, a
      000019 F6               [ 1]  174 	ld	a, (x)
      00001A 27 1B            [ 1]  175 	jreq	00102$
      00001C C6u00u04         [ 1]  176 	ld	a, _buf_pos+0
      00001F C1u00u05         [ 1]  177 	cp	a, _buf_size+0
      000022 24 13            [ 1]  178 	jrnc	00102$
                                    179 ;	libs/uart_lib.c: 8: UART1_DR -> DR = tx_buf_pointer[buf_pos++];
      000024 C6u00u04         [ 1]  180 	ld	a, _buf_pos+0
      000027 72 5Cu00u04      [ 1]  181 	inc	_buf_pos+0
      00002B 5F               [ 1]  182 	clrw	x
      00002C 97               [ 1]  183 	ld	xl, a
      00002D 72 BBu00u00      [ 2]  184 	addw	x, _tx_buf_pointer+0
      000031 F6               [ 1]  185 	ld	a, (x)
      000032 C7 52 31         [ 1]  186 	ld	0x5231, a
      000035 20 04            [ 2]  187 	jra	00107$
      000037                        188 00102$:
                                    189 ;	libs/uart_lib.c: 10: UART1_CR2 -> TIEN = 0;
      000037 72 1F 52 35      [ 1]  190 	bres	0x5235, #7
      00003B                        191 00107$:
                                    192 ;	libs/uart_lib.c: 14: }
      00003B 80               [11]  193 	iret
                                    194 ;	libs/uart_lib.c: 15: void uart_reciever_irq(void) __interrupt(UART1_R_vector)
                                    195 ;	-----------------------------------------
                                    196 ;	 function uart_reciever_irq
                                    197 ;	-----------------------------------------
      00003C                        198 _uart_reciever_irq:
      00003C 88               [ 1]  199 	push	a
                                    200 ;	libs/uart_lib.c: 19: if(UART1_SR -> RXNE)
      00003D C6 52 30         [ 1]  201 	ld	a, 0x5230
      000040 4E               [ 1]  202 	swap	a
      000041 44               [ 1]  203 	srl	a
      000042 A5 01            [ 1]  204 	bcp	a, #0x01
      000044 27 27            [ 1]  205 	jreq	00107$
                                    206 ;	libs/uart_lib.c: 21: trash_reg = UART1_DR -> DR;
      000046 C6 52 31         [ 1]  207 	ld	a, 0x5231
                                    208 ;	libs/uart_lib.c: 22: if(trash_reg != '\n' && buf_size>buf_pos)
      000049 6B 01            [ 1]  209 	ld	(0x01, sp), a
      00004B A1 0A            [ 1]  210 	cp	a, #0x0a
      00004D 27 1A            [ 1]  211 	jreq	00102$
      00004F C6u00u04         [ 1]  212 	ld	a, _buf_pos+0
      000052 C1u00u05         [ 1]  213 	cp	a, _buf_size+0
      000055 24 12            [ 1]  214 	jrnc	00102$
                                    215 ;	libs/uart_lib.c: 23: rx_buf_pointer[buf_pos++] = trash_reg;
      000057 C6u00u04         [ 1]  216 	ld	a, _buf_pos+0
      00005A 72 5Cu00u04      [ 1]  217 	inc	_buf_pos+0
      00005E 5F               [ 1]  218 	clrw	x
      00005F 97               [ 1]  219 	ld	xl, a
      000060 72 BBu00u02      [ 2]  220 	addw	x, _rx_buf_pointer+0
      000064 7B 01            [ 1]  221 	ld	a, (0x01, sp)
      000066 F7               [ 1]  222 	ld	(x), a
      000067 20 04            [ 2]  223 	jra	00107$
      000069                        224 00102$:
                                    225 ;	libs/uart_lib.c: 25: UART1_CR2 -> RIEN = 0;
      000069 72 1B 52 35      [ 1]  226 	bres	0x5235, #5
      00006D                        227 00107$:
                                    228 ;	libs/uart_lib.c: 29: }
      00006D 84               [ 1]  229 	pop	a
      00006E 80               [11]  230 	iret
                                    231 ;	libs/uart_lib.c: 30: void uart_init(unsigned int baudrate,uint8_t stopbit)
                                    232 ;	-----------------------------------------
                                    233 ;	 function uart_init
                                    234 ;	-----------------------------------------
      00006F                        235 _uart_init:
      00006F 52 02            [ 2]  236 	sub	sp, #2
      000071 1F 01            [ 2]  237 	ldw	(0x01, sp), x
                                    238 ;	libs/uart_lib.c: 34: UART1_CR2 -> TEN = 1; // Transmitter enable
      000073 AE 52 35         [ 2]  239 	ldw	x, #0x5235
      000076 88               [ 1]  240 	push	a
      000077 F6               [ 1]  241 	ld	a, (x)
      000078 AA 08            [ 1]  242 	or	a, #0x08
      00007A F7               [ 1]  243 	ld	(x), a
      00007B 84               [ 1]  244 	pop	a
                                    245 ;	libs/uart_lib.c: 35: UART1_CR2 -> REN = 1; // Receiver enable
      00007C AE 52 35         [ 2]  246 	ldw	x, #0x5235
      00007F 88               [ 1]  247 	push	a
      000080 F6               [ 1]  248 	ld	a, (x)
      000081 AA 04            [ 1]  249 	or	a, #0x04
      000083 F7               [ 1]  250 	ld	(x), a
      000084 84               [ 1]  251 	pop	a
                                    252 ;	libs/uart_lib.c: 36: switch(stopbit)
      000085 A1 02            [ 1]  253 	cp	a, #0x02
      000087 27 06            [ 1]  254 	jreq	00101$
      000089 A1 03            [ 1]  255 	cp	a, #0x03
      00008B 27 0E            [ 1]  256 	jreq	00102$
      00008D 20 16            [ 2]  257 	jra	00103$
                                    258 ;	libs/uart_lib.c: 38: case 2:
      00008F                        259 00101$:
                                    260 ;	libs/uart_lib.c: 39: UART1_CR3 -> STOP = 2;
      00008F C6 52 36         [ 1]  261 	ld	a, 0x5236
      000092 A4 CF            [ 1]  262 	and	a, #0xcf
      000094 AA 20            [ 1]  263 	or	a, #0x20
      000096 C7 52 36         [ 1]  264 	ld	0x5236, a
                                    265 ;	libs/uart_lib.c: 40: break;
      000099 20 12            [ 2]  266 	jra	00104$
                                    267 ;	libs/uart_lib.c: 41: case 3:
      00009B                        268 00102$:
                                    269 ;	libs/uart_lib.c: 42: UART1_CR3 -> STOP = 3;
      00009B C6 52 36         [ 1]  270 	ld	a, 0x5236
      00009E AA 30            [ 1]  271 	or	a, #0x30
      0000A0 C7 52 36         [ 1]  272 	ld	0x5236, a
                                    273 ;	libs/uart_lib.c: 43: break;
      0000A3 20 08            [ 2]  274 	jra	00104$
                                    275 ;	libs/uart_lib.c: 44: default:
      0000A5                        276 00103$:
                                    277 ;	libs/uart_lib.c: 45: UART1_CR3 -> STOP = 0;
      0000A5 C6 52 36         [ 1]  278 	ld	a, 0x5236
      0000A8 A4 CF            [ 1]  279 	and	a, #0xcf
      0000AA C7 52 36         [ 1]  280 	ld	0x5236, a
                                    281 ;	libs/uart_lib.c: 47: }
      0000AD                        282 00104$:
                                    283 ;	libs/uart_lib.c: 48: switch(baudrate)
      0000AD 1E 01            [ 2]  284 	ldw	x, (0x01, sp)
      0000AF A3 08 00         [ 2]  285 	cpw	x, #0x0800
      0000B2 26 03            [ 1]  286 	jrne	00186$
      0000B4 CCr01r40         [ 2]  287 	jp	00110$
      0000B7                        288 00186$:
      0000B7 1E 01            [ 2]  289 	ldw	x, (0x01, sp)
      0000B9 A3 09 60         [ 2]  290 	cpw	x, #0x0960
      0000BC 27 28            [ 1]  291 	jreq	00105$
      0000BE 1E 01            [ 2]  292 	ldw	x, (0x01, sp)
      0000C0 A3 10 00         [ 2]  293 	cpw	x, #0x1000
      0000C3 26 03            [ 1]  294 	jrne	00192$
      0000C5 CCr01r50         [ 2]  295 	jp	00111$
      0000C8                        296 00192$:
      0000C8 1E 01            [ 2]  297 	ldw	x, (0x01, sp)
      0000CA A3 4B 00         [ 2]  298 	cpw	x, #0x4b00
      0000CD 27 31            [ 1]  299 	jreq	00106$
      0000CF 1E 01            [ 2]  300 	ldw	x, (0x01, sp)
      0000D1 A3 84 00         [ 2]  301 	cpw	x, #0x8400
      0000D4 27 5A            [ 1]  302 	jreq	00109$
      0000D6 1E 01            [ 2]  303 	ldw	x, (0x01, sp)
      0000D8 A3 C2 00         [ 2]  304 	cpw	x, #0xc200
      0000DB 27 43            [ 1]  305 	jreq	00108$
      0000DD 1E 01            [ 2]  306 	ldw	x, (0x01, sp)
      0000DF A3 E1 00         [ 2]  307 	cpw	x, #0xe100
      0000E2 27 2C            [ 1]  308 	jreq	00107$
      0000E4 20 7A            [ 2]  309 	jra	00112$
                                    310 ;	libs/uart_lib.c: 50: case (unsigned int)2400:
      0000E6                        311 00105$:
                                    312 ;	libs/uart_lib.c: 51: UART1_BRR2 -> MSB = 0x01;
      0000E6 C6 52 33         [ 1]  313 	ld	a, 0x5233
      0000E9 A4 0F            [ 1]  314 	and	a, #0x0f
      0000EB AA 10            [ 1]  315 	or	a, #0x10
      0000ED C7 52 33         [ 1]  316 	ld	0x5233, a
                                    317 ;	libs/uart_lib.c: 52: UART1_BRR1 -> DIV = 0xA0;
      0000F0 35 A0 52 32      [ 1]  318 	mov	0x5232+0, #0xa0
                                    319 ;	libs/uart_lib.c: 53: UART1_BRR2 -> LSB = 0x0B; 
      0000F4 C6 52 33         [ 1]  320 	ld	a, 0x5233
      0000F7 A4 F0            [ 1]  321 	and	a, #0xf0
      0000F9 AA 0B            [ 1]  322 	or	a, #0x0b
      0000FB C7 52 33         [ 1]  323 	ld	0x5233, a
                                    324 ;	libs/uart_lib.c: 54: break;
      0000FE 20 6E            [ 2]  325 	jra	00114$
                                    326 ;	libs/uart_lib.c: 55: case (unsigned int)19200:
      000100                        327 00106$:
                                    328 ;	libs/uart_lib.c: 56: UART1_BRR1 -> DIV = 0x34;
      000100 35 34 52 32      [ 1]  329 	mov	0x5232+0, #0x34
                                    330 ;	libs/uart_lib.c: 57: UART1_BRR2 -> LSB = 0x01;
      000104 C6 52 33         [ 1]  331 	ld	a, 0x5233
      000107 A4 F0            [ 1]  332 	and	a, #0xf0
      000109 AA 01            [ 1]  333 	or	a, #0x01
      00010B C7 52 33         [ 1]  334 	ld	0x5233, a
                                    335 ;	libs/uart_lib.c: 58: break;
      00010E 20 5E            [ 2]  336 	jra	00114$
                                    337 ;	libs/uart_lib.c: 59: case (unsigned int)57600:
      000110                        338 00107$:
                                    339 ;	libs/uart_lib.c: 60: UART1_BRR1 -> DIV = 0x11;
      000110 35 11 52 32      [ 1]  340 	mov	0x5232+0, #0x11
                                    341 ;	libs/uart_lib.c: 61: UART1_BRR2 -> LSB = 0x06;
      000114 C6 52 33         [ 1]  342 	ld	a, 0x5233
      000117 A4 F0            [ 1]  343 	and	a, #0xf0
      000119 AA 06            [ 1]  344 	or	a, #0x06
      00011B C7 52 33         [ 1]  345 	ld	0x5233, a
                                    346 ;	libs/uart_lib.c: 62: break;
      00011E 20 4E            [ 2]  347 	jra	00114$
                                    348 ;	libs/uart_lib.c: 63: case (unsigned int)115200:
      000120                        349 00108$:
                                    350 ;	libs/uart_lib.c: 64: UART1_BRR1 -> DIV = 0x08;
      000120 35 08 52 32      [ 1]  351 	mov	0x5232+0, #0x08
                                    352 ;	libs/uart_lib.c: 65: UART1_BRR2 -> LSB = 0x0B;
      000124 C6 52 33         [ 1]  353 	ld	a, 0x5233
      000127 A4 F0            [ 1]  354 	and	a, #0xf0
      000129 AA 0B            [ 1]  355 	or	a, #0x0b
      00012B C7 52 33         [ 1]  356 	ld	0x5233, a
                                    357 ;	libs/uart_lib.c: 66: break;
      00012E 20 3E            [ 2]  358 	jra	00114$
                                    359 ;	libs/uart_lib.c: 67: case (unsigned int)230400:
      000130                        360 00109$:
                                    361 ;	libs/uart_lib.c: 68: UART1_BRR1 -> DIV = 0x04;
      000130 35 04 52 32      [ 1]  362 	mov	0x5232+0, #0x04
                                    363 ;	libs/uart_lib.c: 69: UART1_BRR2 -> LSB = 0x05;
      000134 C6 52 33         [ 1]  364 	ld	a, 0x5233
      000137 A4 F0            [ 1]  365 	and	a, #0xf0
      000139 AA 05            [ 1]  366 	or	a, #0x05
      00013B C7 52 33         [ 1]  367 	ld	0x5233, a
                                    368 ;	libs/uart_lib.c: 70: break;
      00013E 20 2E            [ 2]  369 	jra	00114$
                                    370 ;	libs/uart_lib.c: 71: case (unsigned int)460800:
      000140                        371 00110$:
                                    372 ;	libs/uart_lib.c: 72: UART1_BRR1 -> DIV = 0x02;
      000140 35 02 52 32      [ 1]  373 	mov	0x5232+0, #0x02
                                    374 ;	libs/uart_lib.c: 73: UART1_BRR2 -> LSB = 0x03;
      000144 C6 52 33         [ 1]  375 	ld	a, 0x5233
      000147 A4 F0            [ 1]  376 	and	a, #0xf0
      000149 AA 03            [ 1]  377 	or	a, #0x03
      00014B C7 52 33         [ 1]  378 	ld	0x5233, a
                                    379 ;	libs/uart_lib.c: 74: break;
      00014E 20 1E            [ 2]  380 	jra	00114$
                                    381 ;	libs/uart_lib.c: 75: case (unsigned int)921600:
      000150                        382 00111$:
                                    383 ;	libs/uart_lib.c: 76: UART1_BRR1 -> DIV = 0x01;
      000150 35 01 52 32      [ 1]  384 	mov	0x5232+0, #0x01
                                    385 ;	libs/uart_lib.c: 77: UART1_BRR2 -> LSB = 0x01;
      000154 C6 52 33         [ 1]  386 	ld	a, 0x5233
      000157 A4 F0            [ 1]  387 	and	a, #0xf0
      000159 AA 01            [ 1]  388 	or	a, #0x01
      00015B C7 52 33         [ 1]  389 	ld	0x5233, a
                                    390 ;	libs/uart_lib.c: 78: break;
      00015E 20 0E            [ 2]  391 	jra	00114$
                                    392 ;	libs/uart_lib.c: 79: default:
      000160                        393 00112$:
                                    394 ;	libs/uart_lib.c: 80: UART1_BRR1 -> DIV = 0x68;
      000160 35 68 52 32      [ 1]  395 	mov	0x5232+0, #0x68
                                    396 ;	libs/uart_lib.c: 81: UART1_BRR2 -> LSB = 0x03;
      000164 C6 52 33         [ 1]  397 	ld	a, 0x5233
      000167 A4 F0            [ 1]  398 	and	a, #0xf0
      000169 AA 03            [ 1]  399 	or	a, #0x03
      00016B C7 52 33         [ 1]  400 	ld	0x5233, a
                                    401 ;	libs/uart_lib.c: 83: }
      00016E                        402 00114$:
                                    403 ;	libs/uart_lib.c: 84: }
      00016E 5B 02            [ 2]  404 	addw	sp, #2
      000170 81               [ 4]  405 	ret
                                    406 ;	libs/uart_lib.c: 86: int uart_read_byte(uint8_t *data)
                                    407 ;	-----------------------------------------
                                    408 ;	 function uart_read_byte
                                    409 ;	-----------------------------------------
      000171                        410 _uart_read_byte:
                                    411 ;	libs/uart_lib.c: 88: while(!(UART1_SR -> RXNE));
      000171                        412 00101$:
      000171 72 0B 52 30 FB   [ 2]  413 	btjf	0x5230, #5, 00101$
                                    414 ;	libs/uart_lib.c: 90: return 1;
      000176 5F               [ 1]  415 	clrw	x
      000177 5C               [ 1]  416 	incw	x
                                    417 ;	libs/uart_lib.c: 91: }
      000178 81               [ 4]  418 	ret
                                    419 ;	libs/uart_lib.c: 93: int uart_write_byte(uint8_t data)
                                    420 ;	-----------------------------------------
                                    421 ;	 function uart_write_byte
                                    422 ;	-----------------------------------------
      000179                        423 _uart_write_byte:
                                    424 ;	libs/uart_lib.c: 95: UART1_DR -> DR = data;
      000179 C7 52 31         [ 1]  425 	ld	0x5231, a
                                    426 ;	libs/uart_lib.c: 96: while(!(UART1_SR -> TXE));
      00017C                        427 00101$:
      00017C 72 0F 52 30 FB   [ 2]  428 	btjf	0x5230, #7, 00101$
                                    429 ;	libs/uart_lib.c: 97: return 1;
      000181 5F               [ 1]  430 	clrw	x
      000182 5C               [ 1]  431 	incw	x
                                    432 ;	libs/uart_lib.c: 98: }
      000183 81               [ 4]  433 	ret
                                    434 ;	libs/uart_lib.c: 100: void uart_write(uint8_t *data_buf)
                                    435 ;	-----------------------------------------
                                    436 ;	 function uart_write
                                    437 ;	-----------------------------------------
      000184                        438 _uart_write:
      000184 52 02            [ 2]  439 	sub	sp, #2
                                    440 ;	libs/uart_lib.c: 102: tx_buf_pointer = data_buf;
      000186 1F 01            [ 2]  441 	ldw	(0x01, sp), x
      000188 CFu00u00         [ 2]  442 	ldw	_tx_buf_pointer+0, x
                                    443 ;	libs/uart_lib.c: 103: buf_pos = 0;
      00018B 72 5Fu00u04      [ 1]  444 	clr	_buf_pos+0
                                    445 ;	libs/uart_lib.c: 104: buf_size = 0;
      00018F 72 5Fu00u05      [ 1]  446 	clr	_buf_size+0
                                    447 ;	libs/uart_lib.c: 105: while (data_buf[buf_size++] != '\0');
      000193                        448 00101$:
      000193 C6u00u05         [ 1]  449 	ld	a, _buf_size+0
      000196 72 5Cu00u05      [ 1]  450 	inc	_buf_size+0
      00019A 5F               [ 1]  451 	clrw	x
      00019B 97               [ 1]  452 	ld	xl, a
      00019C 72 FB 01         [ 2]  453 	addw	x, (0x01, sp)
      00019F F6               [ 1]  454 	ld	a, (x)
      0001A0 26 F1            [ 1]  455 	jrne	00101$
                                    456 ;	libs/uart_lib.c: 106: UART1_CR2 -> TIEN = 1;
      0001A2 72 1E 52 35      [ 1]  457 	bset	0x5235, #7
                                    458 ;	libs/uart_lib.c: 107: while(UART1_CR2 -> TIEN);
      0001A6                        459 00104$:
      0001A6 72 0E 52 35 FB   [ 2]  460 	btjt	0x5235, #7, 00104$
                                    461 ;	libs/uart_lib.c: 108: }
      0001AB 5B 02            [ 2]  462 	addw	sp, #2
      0001AD 81               [ 4]  463 	ret
                                    464 ;	libs/uart_lib.c: 109: void uart_read(uint8_t *data_buf,int size)
                                    465 ;	-----------------------------------------
                                    466 ;	 function uart_read
                                    467 ;	-----------------------------------------
      0001AE                        468 _uart_read:
                                    469 ;	libs/uart_lib.c: 111: rx_buf_pointer = data_buf;
      0001AE CFu00u02         [ 2]  470 	ldw	_rx_buf_pointer+0, x
                                    471 ;	libs/uart_lib.c: 112: uart_write("rx_buf_pointer\n");
      0001B1 AEr00r00         [ 2]  472 	ldw	x, #(___str_0+0)
      0001B4 CDr01r84         [ 4]  473 	call	_uart_write
                                    474 ;	libs/uart_lib.c: 113: buf_pos = 0;
      0001B7 72 5Fu00u04      [ 1]  475 	clr	_buf_pos+0
                                    476 ;	libs/uart_lib.c: 114: uart_write("buf_pos\n");
      0001BB AEr00r10         [ 2]  477 	ldw	x, #(___str_1+0)
      0001BE CDr01r84         [ 4]  478 	call	_uart_write
                                    479 ;	libs/uart_lib.c: 115: buf_size = size;
      0001C1 7B 04            [ 1]  480 	ld	a, (0x04, sp)
      0001C3 C7u00u05         [ 1]  481 	ld	_buf_size+0, a
                                    482 ;	libs/uart_lib.c: 116: uart_write("buf_size\n");
      0001C6 AEr00r19         [ 2]  483 	ldw	x, #(___str_2+0)
      0001C9 CDr01r84         [ 4]  484 	call	_uart_write
                                    485 ;	libs/uart_lib.c: 117: UART1_CR2 -> RIEN = 1;
      0001CC 72 1A 52 35      [ 1]  486 	bset	0x5235, #5
                                    487 ;	libs/uart_lib.c: 118: uart_write("RIEN\n");
      0001D0 AEr00r23         [ 2]  488 	ldw	x, #(___str_3+0)
      0001D3 CDr01r84         [ 4]  489 	call	_uart_write
                                    490 ;	libs/uart_lib.c: 119: while(UART1_CR2 -> RIEN);
      0001D6                        491 00101$:
      0001D6 C6 52 35         [ 1]  492 	ld	a, 0x5235
      0001D9 4E               [ 1]  493 	swap	a
      0001DA 44               [ 1]  494 	srl	a
      0001DB A4 01            [ 1]  495 	and	a, #0x01
      0001DD 26 F7            [ 1]  496 	jrne	00101$
                                    497 ;	libs/uart_lib.c: 120: }
      0001DF 1E 01            [ 2]  498 	ldw	x, (1, sp)
      0001E1 5B 04            [ 2]  499 	addw	sp, #4
      0001E3 FC               [ 2]  500 	jp	(x)
                                    501 ;	libs/i2c_lib.c: 3: void i2c_init(void)
                                    502 ;	-----------------------------------------
                                    503 ;	 function i2c_init
                                    504 ;	-----------------------------------------
      0001E4                        505 _i2c_init:
                                    506 ;	libs/i2c_lib.c: 7: I2C_CR1 -> PE = 0;// PE=0, disable I2C before setup
      0001E4 72 11 52 10      [ 1]  507 	bres	0x5210, #0
                                    508 ;	libs/i2c_lib.c: 8: I2C_FREQR -> FREQ = 16;// peripheral frequence =16MHz
      0001E8 C6 52 12         [ 1]  509 	ld	a, 0x5212
      0001EB A4 C0            [ 1]  510 	and	a, #0xc0
      0001ED AA 10            [ 1]  511 	or	a, #0x10
      0001EF C7 52 12         [ 1]  512 	ld	0x5212, a
                                    513 ;	libs/i2c_lib.c: 9: I2C_CCRH -> CCR = 0;// =0
      0001F2 C6 52 1C         [ 1]  514 	ld	a, 0x521c
      0001F5 A4 F0            [ 1]  515 	and	a, #0xf0
      0001F7 C7 52 1C         [ 1]  516 	ld	0x521c, a
                                    517 ;	libs/i2c_lib.c: 10: I2C_CCRL -> CCR = 80;// 100kHz for I2C
      0001FA 35 50 52 1B      [ 1]  518 	mov	0x521b+0, #0x50
                                    519 ;	libs/i2c_lib.c: 11: I2C_CCRH -> FS = 0;// set standart mode(100кHz)
      0001FE 72 1F 52 1C      [ 1]  520 	bres	0x521c, #7
                                    521 ;	libs/i2c_lib.c: 12: I2C_OARH -> ADDMODE = 0;// 7-bit address mode
      000202 72 1F 52 14      [ 1]  522 	bres	0x5214, #7
                                    523 ;	libs/i2c_lib.c: 13: I2C_OARH -> ADDCONF = 1;// see reference manual
      000206 72 10 52 14      [ 1]  524 	bset	0x5214, #0
                                    525 ;	libs/i2c_lib.c: 14: I2C_CR1 -> PE = 1;// PE=1, enable I2C
      00020A 72 10 52 10      [ 1]  526 	bset	0x5210, #0
                                    527 ;	libs/i2c_lib.c: 15: }
      00020E 81               [ 4]  528 	ret
                                    529 ;	libs/i2c_lib.c: 17: void i2c_start(void)
                                    530 ;	-----------------------------------------
                                    531 ;	 function i2c_start
                                    532 ;	-----------------------------------------
      00020F                        533 _i2c_start:
                                    534 ;	libs/i2c_lib.c: 19: I2C_CR2 -> START = 1;// Отправляем стартовый сигнал
      00020F 72 10 52 11      [ 1]  535 	bset	0x5211, #0
                                    536 ;	libs/i2c_lib.c: 20: while(!I2C_SR1 -> SB);// Ожидание отправки стартового сигнала
      000213                        537 00101$:
      000213 72 01 52 17 FB   [ 2]  538 	btjf	0x5217, #0, 00101$
                                    539 ;	libs/i2c_lib.c: 21: }
      000218 81               [ 4]  540 	ret
                                    541 ;	libs/i2c_lib.c: 23: void i2c_stop(void)
                                    542 ;	-----------------------------------------
                                    543 ;	 function i2c_stop
                                    544 ;	-----------------------------------------
      000219                        545 _i2c_stop:
                                    546 ;	libs/i2c_lib.c: 25: I2C_CR2 -> STOP = 1;// Отправка стопового сигнала  
      000219 72 12 52 11      [ 1]  547 	bset	0x5211, #1
                                    548 ;	libs/i2c_lib.c: 26: }
      00021D 81               [ 4]  549 	ret
                                    550 ;	libs/i2c_lib.c: 28: uint8_t i2c_send_address(uint8_t address,uint8_t rw_type) 
                                    551 ;	-----------------------------------------
                                    552 ;	 function i2c_send_address
                                    553 ;	-----------------------------------------
      00021E                        554 _i2c_send_address:
                                    555 ;	libs/i2c_lib.c: 33: address = address << 1;
      00021E 48               [ 1]  556 	sll	a
                                    557 ;	libs/i2c_lib.c: 30: switch(rw_type)
      00021F 88               [ 1]  558 	push	a
      000220 7B 04            [ 1]  559 	ld	a, (0x04, sp)
      000222 4A               [ 1]  560 	dec	a
      000223 84               [ 1]  561 	pop	a
      000224 26 02            [ 1]  562 	jrne	00102$
                                    563 ;	libs/i2c_lib.c: 33: address = address << 1;
                                    564 ;	libs/i2c_lib.c: 34: address |= 0x01; // Отправка адреса устройства с битом на чтение
      000226 AA 01            [ 1]  565 	or	a, #0x01
                                    566 ;	libs/i2c_lib.c: 35: break;
                                    567 ;	libs/i2c_lib.c: 36: default:
                                    568 ;	libs/i2c_lib.c: 37: address = address << 1; // Отправка адреса устройства с битом на запись
                                    569 ;	libs/i2c_lib.c: 39: }
      000228                        570 00102$:
                                    571 ;	libs/i2c_lib.c: 40: i2c_start();
      000228 88               [ 1]  572 	push	a
      000229 CDr02r0F         [ 4]  573 	call	_i2c_start
      00022C 84               [ 1]  574 	pop	a
                                    575 ;	libs/i2c_lib.c: 41: I2C_DR -> DR = address;
      00022D C7 52 16         [ 1]  576 	ld	0x5216, a
                                    577 ;	libs/i2c_lib.c: 42: while(!I2C_SR1 -> ADDR)
      000230                        578 00106$:
      000230 AE 52 17         [ 2]  579 	ldw	x, #0x5217
      000233 F6               [ 1]  580 	ld	a, (x)
      000234 44               [ 1]  581 	srl	a
      000235 A4 01            [ 1]  582 	and	a, #0x01
      000237 26 08            [ 1]  583 	jrne	00108$
                                    584 ;	libs/i2c_lib.c: 43: if(I2C_SR2 -> AF)
      000239 72 05 52 18 F2   [ 2]  585 	btjf	0x5218, #2, 00106$
                                    586 ;	libs/i2c_lib.c: 44: return 0;
      00023E 4F               [ 1]  587 	clr	a
      00023F 20 08            [ 2]  588 	jra	00109$
      000241                        589 00108$:
                                    590 ;	libs/i2c_lib.c: 45: clr_sr1();
      000241 C6 52 17         [ 1]  591 	ld	a,0x5217
                                    592 ;	libs/i2c_lib.c: 46: clr_sr3();
      000244 C6 52 19         [ 1]  593 	ld	a,0x5219
                                    594 ;	libs/i2c_lib.c: 47: return 1;
      000247 A6 01            [ 1]  595 	ld	a, #0x01
      000249                        596 00109$:
                                    597 ;	libs/i2c_lib.c: 48: }
      000249 85               [ 2]  598 	popw	x
      00024A 5B 01            [ 2]  599 	addw	sp, #1
      00024C FC               [ 2]  600 	jp	(x)
                                    601 ;	libs/i2c_lib.c: 50: uint8_t i2c_read_byte(void){
                                    602 ;	-----------------------------------------
                                    603 ;	 function i2c_read_byte
                                    604 ;	-----------------------------------------
      00024D                        605 _i2c_read_byte:
                                    606 ;	libs/i2c_lib.c: 51: while(!I2C_SR1 -> RXNE);
      00024D                        607 00101$:
      00024D 72 0D 52 17 FB   [ 2]  608 	btjf	0x5217, #6, 00101$
                                    609 ;	libs/i2c_lib.c: 52: return I2C_DR -> DR;
      000252 C6 52 16         [ 1]  610 	ld	a, 0x5216
                                    611 ;	libs/i2c_lib.c: 53: }
      000255 81               [ 4]  612 	ret
                                    613 ;	libs/i2c_lib.c: 55: void i2c_read(uint8_t dev_addr, uint8_t size,uint8_t *data)
                                    614 ;	-----------------------------------------
                                    615 ;	 function i2c_read
                                    616 ;	-----------------------------------------
      000256                        617 _i2c_read:
      000256 52 04            [ 2]  618 	sub	sp, #4
                                    619 ;	libs/i2c_lib.c: 57: if(i2c_send_address(dev_addr, 1))//проверка на ACK
      000258 4B 01            [ 1]  620 	push	#0x01
      00025A CDr02r1E         [ 4]  621 	call	_i2c_send_address
      00025D 4D               [ 1]  622 	tnz	a
      00025E 27 41            [ 1]  623 	jreq	00103$
                                    624 ;	libs/i2c_lib.c: 59: I2C_CR2 -> ACK = 1;//включение ответа на посылки 
      000260 72 14 52 11      [ 1]  625 	bset	0x5211, #2
                                    626 ;	libs/i2c_lib.c: 60: for(int i = 0;i < size-1;i++) //цикл чтения данных с шины
      000264 5F               [ 1]  627 	clrw	x
      000265 1F 03            [ 2]  628 	ldw	(0x03, sp), x
      000267                        629 00105$:
      000267 5F               [ 1]  630 	clrw	x
      000268 7B 07            [ 1]  631 	ld	a, (0x07, sp)
      00026A 97               [ 1]  632 	ld	xl, a
      00026B 5A               [ 2]  633 	decw	x
      00026C 1F 01            [ 2]  634 	ldw	(0x01, sp), x
      00026E 1E 03            [ 2]  635 	ldw	x, (0x03, sp)
      000270 13 01            [ 2]  636 	cpw	x, (0x01, sp)
      000272 2E 12            [ 1]  637 	jrsge	00101$
                                    638 ;	libs/i2c_lib.c: 62: data[i] = i2c_read_byte();//функция записи байта в элемент массива
      000274 1E 08            [ 2]  639 	ldw	x, (0x08, sp)
      000276 72 FB 03         [ 2]  640 	addw	x, (0x03, sp)
      000279 89               [ 2]  641 	pushw	x
      00027A CDr02r4D         [ 4]  642 	call	_i2c_read_byte
      00027D 85               [ 2]  643 	popw	x
      00027E F7               [ 1]  644 	ld	(x), a
                                    645 ;	libs/i2c_lib.c: 60: for(int i = 0;i < size-1;i++) //цикл чтения данных с шины
      00027F 1E 03            [ 2]  646 	ldw	x, (0x03, sp)
      000281 5C               [ 1]  647 	incw	x
      000282 1F 03            [ 2]  648 	ldw	(0x03, sp), x
      000284 20 E1            [ 2]  649 	jra	00105$
      000286                        650 00101$:
                                    651 ;	libs/i2c_lib.c: 64: I2C_CR2 -> ACK = 0;//выключение ответа на посылки
      000286 72 15 52 11      [ 1]  652 	bres	0x5211, #2
                                    653 ;	libs/i2c_lib.c: 65: uart_write_byte(0x00);
      00028A 4F               [ 1]  654 	clr	a
      00028B CDr01r79         [ 4]  655 	call	_uart_write_byte
                                    656 ;	libs/i2c_lib.c: 66: data[size-1] = i2c_read_byte();
      00028E 1E 08            [ 2]  657 	ldw	x, (0x08, sp)
      000290 72 FB 01         [ 2]  658 	addw	x, (0x01, sp)
      000293 89               [ 2]  659 	pushw	x
      000294 CDr02r4D         [ 4]  660 	call	_i2c_read_byte
      000297 85               [ 2]  661 	popw	x
      000298 F7               [ 1]  662 	ld	(x), a
                                    663 ;	libs/i2c_lib.c: 67: uart_write_byte(0x01);
      000299 A6 01            [ 1]  664 	ld	a, #0x01
      00029B CDr01r79         [ 4]  665 	call	_uart_write_byte
                                    666 ;	libs/i2c_lib.c: 68: i2c_stop();
      00029E CDr02r19         [ 4]  667 	call	_i2c_stop
      0002A1                        668 00103$:
                                    669 ;	libs/i2c_lib.c: 70: uart_write_byte(0x02);
      0002A1 A6 02            [ 1]  670 	ld	a, #0x02
      0002A3 CDr01r79         [ 4]  671 	call	_uart_write_byte
                                    672 ;	libs/i2c_lib.c: 71: i2c_stop();
      0002A6 CDr02r19         [ 4]  673 	call	_i2c_stop
                                    674 ;	libs/i2c_lib.c: 72: i2c_stop();
      0002A9 CDr02r19         [ 4]  675 	call	_i2c_stop
                                    676 ;	libs/i2c_lib.c: 73: uart_write_byte(0x03); 
      0002AC A6 03            [ 1]  677 	ld	a, #0x03
      0002AE 1E 05            [ 2]  678 	ldw	x, (5, sp)
      0002B0 1F 08            [ 2]  679 	ldw	(8, sp), x
      0002B2 5B 07            [ 2]  680 	addw	sp, #7
                                    681 ;	libs/i2c_lib.c: 74: }
      0002B4 CCr01r79         [ 2]  682 	jp	_uart_write_byte
                                    683 ;	libs/i2c_lib.c: 76: uint8_t i2c_send_byte(uint8_t data)
                                    684 ;	-----------------------------------------
                                    685 ;	 function i2c_send_byte
                                    686 ;	-----------------------------------------
      0002B7                        687 _i2c_send_byte:
                                    688 ;	libs/i2c_lib.c: 78: I2C_DR -> DR = data; //Отправка данных
      0002B7 C7 52 16         [ 1]  689 	ld	0x5216, a
                                    690 ;	libs/i2c_lib.c: 79: while(!I2C_SR1 -> TXE)
      0002BA                        691 00103$:
      0002BA 72 0E 52 17 08   [ 2]  692 	btjt	0x5217, #7, 00105$
                                    693 ;	libs/i2c_lib.c: 80: if(I2C_SR2 -> AF)
      0002BF 72 05 52 18 F6   [ 2]  694 	btjf	0x5218, #2, 00103$
                                    695 ;	libs/i2c_lib.c: 81: return 1;
      0002C4 A6 01            [ 1]  696 	ld	a, #0x01
      0002C6 81               [ 4]  697 	ret
      0002C7                        698 00105$:
                                    699 ;	libs/i2c_lib.c: 82: return 0;//флаг ответа
      0002C7 4F               [ 1]  700 	clr	a
                                    701 ;	libs/i2c_lib.c: 83: }
      0002C8 81               [ 4]  702 	ret
                                    703 ;	libs/i2c_lib.c: 85: void i2c_write(uint8_t dev_addr,uint8_t size,uint8_t *data)
                                    704 ;	-----------------------------------------
                                    705 ;	 function i2c_write
                                    706 ;	-----------------------------------------
      0002C9                        707 _i2c_write:
      0002C9 52 02            [ 2]  708 	sub	sp, #2
                                    709 ;	libs/i2c_lib.c: 87: if(i2c_send_address(dev_addr, 0))//Проверка на АСК бит
      0002CB 4B 00            [ 1]  710 	push	#0x00
      0002CD CDr02r1E         [ 4]  711 	call	_i2c_send_address
      0002D0 4D               [ 1]  712 	tnz	a
      0002D1 27 1D            [ 1]  713 	jreq	00105$
                                    714 ;	libs/i2c_lib.c: 88: for(int i = 0;i < size;i++)
      0002D3 5F               [ 1]  715 	clrw	x
      0002D4                        716 00107$:
      0002D4 7B 05            [ 1]  717 	ld	a, (0x05, sp)
      0002D6 6B 02            [ 1]  718 	ld	(0x02, sp), a
      0002D8 0F 01            [ 1]  719 	clr	(0x01, sp)
      0002DA 13 01            [ 2]  720 	cpw	x, (0x01, sp)
      0002DC 2E 12            [ 1]  721 	jrsge	00105$
                                    722 ;	libs/i2c_lib.c: 90: if(i2c_send_byte(data[i]))//Проверка на АСК бит
      0002DE 90 93            [ 1]  723 	ldw	y, x
      0002E0 72 F9 06         [ 2]  724 	addw	y, (0x06, sp)
      0002E3 90 F6            [ 1]  725 	ld	a, (y)
      0002E5 89               [ 2]  726 	pushw	x
      0002E6 CDr02rB7         [ 4]  727 	call	_i2c_send_byte
      0002E9 85               [ 2]  728 	popw	x
      0002EA 4D               [ 1]  729 	tnz	a
      0002EB 26 03            [ 1]  730 	jrne	00105$
                                    731 ;	libs/i2c_lib.c: 88: for(int i = 0;i < size;i++)
      0002ED 5C               [ 1]  732 	incw	x
      0002EE 20 E4            [ 2]  733 	jra	00107$
      0002F0                        734 00105$:
                                    735 ;	libs/i2c_lib.c: 95: i2c_stop();
      0002F0 1E 03            [ 2]  736 	ldw	x, (3, sp)
      0002F2 1F 06            [ 2]  737 	ldw	(6, sp), x
      0002F4 5B 05            [ 2]  738 	addw	sp, #5
                                    739 ;	libs/i2c_lib.c: 96: }
      0002F6 CCr02r19         [ 2]  740 	jp	_i2c_stop
                                    741 ;	libs/i2c_lib.c: 98: uint8_t i2c_scan(void) 
                                    742 ;	-----------------------------------------
                                    743 ;	 function i2c_scan
                                    744 ;	-----------------------------------------
      0002F9                        745 _i2c_scan:
      0002F9 52 02            [ 2]  746 	sub	sp, #2
                                    747 ;	libs/i2c_lib.c: 100: for (uint8_t addr = 1; addr < 127; addr++)
      0002FB A6 01            [ 1]  748 	ld	a, #0x01
      0002FD 6B 01            [ 1]  749 	ld	(0x01, sp), a
      0002FF                        750 00105$:
      0002FF A1 7F            [ 1]  751 	cp	a, #0x7f
      000301 24 22            [ 1]  752 	jrnc	00103$
                                    753 ;	libs/i2c_lib.c: 102: if(i2c_send_address(addr, 0))//отправка адреса на проверку 
      000303 88               [ 1]  754 	push	a
      000304 4B 00            [ 1]  755 	push	#0x00
      000306 CDr02r1E         [ 4]  756 	call	_i2c_send_address
      000309 6B 03            [ 1]  757 	ld	(0x03, sp), a
      00030B 84               [ 1]  758 	pop	a
      00030C 0D 02            [ 1]  759 	tnz	(0x02, sp)
      00030E 27 07            [ 1]  760 	jreq	00102$
                                    761 ;	libs/i2c_lib.c: 104: i2c_stop();//адрес совпал 
      000310 CDr02r19         [ 4]  762 	call	_i2c_stop
                                    763 ;	libs/i2c_lib.c: 105: return addr;// выход из цикла
      000313 7B 01            [ 1]  764 	ld	a, (0x01, sp)
      000315 20 12            [ 2]  765 	jra	00107$
      000317                        766 00102$:
                                    767 ;	libs/i2c_lib.c: 107: I2C_SR2 -> AF = 0;//очистка флага ошибки
      000317 AE 52 18         [ 2]  768 	ldw	x, #0x5218
      00031A 88               [ 1]  769 	push	a
      00031B F6               [ 1]  770 	ld	a, (x)
      00031C A4 FB            [ 1]  771 	and	a, #0xfb
      00031E F7               [ 1]  772 	ld	(x), a
      00031F 84               [ 1]  773 	pop	a
                                    774 ;	libs/i2c_lib.c: 100: for (uint8_t addr = 1; addr < 127; addr++)
      000320 4C               [ 1]  775 	inc	a
      000321 6B 01            [ 1]  776 	ld	(0x01, sp), a
      000323 20 DA            [ 2]  777 	jra	00105$
      000325                        778 00103$:
                                    779 ;	libs/i2c_lib.c: 109: i2c_stop();//совпадений нет выход из функции
      000325 CDr02r19         [ 4]  780 	call	_i2c_stop
                                    781 ;	libs/i2c_lib.c: 110: return 0;
      000328 4F               [ 1]  782 	clr	a
      000329                        783 00107$:
                                    784 ;	libs/i2c_lib.c: 111: }
      000329 5B 02            [ 2]  785 	addw	sp, #2
      00032B 81               [ 4]  786 	ret
                                    787 ;	main.c: 4: void setup(void)
                                    788 ;	-----------------------------------------
                                    789 ;	 function setup
                                    790 ;	-----------------------------------------
      00032C                        791 _setup:
                                    792 ;	main.c: 7: CLK_CKDIVR = 0;
      00032C 35 00 50 C6      [ 1]  793 	mov	0x50c6+0, #0x00
                                    794 ;	main.c: 9: uart_init(9600,0);
      000330 4F               [ 1]  795 	clr	a
      000331 AE 25 80         [ 2]  796 	ldw	x, #0x2580
      000334 CDr00r6F         [ 4]  797 	call	_uart_init
                                    798 ;	main.c: 10: i2c_init();
      000337 CDr01rE4         [ 4]  799 	call	_i2c_init
                                    800 ;	main.c: 12: enableInterrupts();
      00033A 9A               [ 1]  801 	rim
                                    802 ;	main.c: 13: }
      00033B 81               [ 4]  803 	ret
                                    804 ;	main.c: 15: int get_bit(int data,int bit)
                                    805 ;	-----------------------------------------
                                    806 ;	 function get_bit
                                    807 ;	-----------------------------------------
      00033C                        808 _get_bit:
                                    809 ;	main.c: 17: return ((data >> bit) & 1) ? 1 : 0;
      00033C 7B 04            [ 1]  810 	ld	a, (0x04, sp)
      00033E 27 04            [ 1]  811 	jreq	00113$
      000340                        812 00112$:
      000340 57               [ 2]  813 	sraw	x
      000341 4A               [ 1]  814 	dec	a
      000342 26 FC            [ 1]  815 	jrne	00112$
      000344                        816 00113$:
      000344 54               [ 2]  817 	srlw	x
      000345 24 03            [ 1]  818 	jrnc	00103$
      000347 5F               [ 1]  819 	clrw	x
      000348 5C               [ 1]  820 	incw	x
      000349 21                     821 	.byte 0x21
      00034A                        822 00103$:
      00034A 5F               [ 1]  823 	clrw	x
      00034B                        824 00104$:
                                    825 ;	main.c: 18: }
      00034B 90 85            [ 2]  826 	popw	y
      00034D 5B 02            [ 2]  827 	addw	sp, #2
      00034F 90 FC            [ 2]  828 	jp	(y)
                                    829 ;	main.c: 19: int set_bit(int data,int bit, int value)
                                    830 ;	-----------------------------------------
                                    831 ;	 function set_bit
                                    832 ;	-----------------------------------------
      000351                        833 _set_bit:
      000351 52 04            [ 2]  834 	sub	sp, #4
      000353 1F 01            [ 2]  835 	ldw	(0x01, sp), x
                                    836 ;	main.c: 21: int mask = 1 << bit ;
      000355 5F               [ 1]  837 	clrw	x
      000356 5C               [ 1]  838 	incw	x
      000357 1F 03            [ 2]  839 	ldw	(0x03, sp), x
      000359 7B 08            [ 1]  840 	ld	a, (0x08, sp)
      00035B 27 07            [ 1]  841 	jreq	00114$
      00035D                        842 00113$:
      00035D 08 04            [ 1]  843 	sll	(0x04, sp)
      00035F 09 03            [ 1]  844 	rlc	(0x03, sp)
      000361 4A               [ 1]  845 	dec	a
      000362 26 F9            [ 1]  846 	jrne	00113$
      000364                        847 00114$:
                                    848 ;	main.c: 22: switch(value)
      000364 1E 09            [ 2]  849 	ldw	x, (0x09, sp)
      000366 5A               [ 2]  850 	decw	x
      000367 26 0B            [ 1]  851 	jrne	00102$
                                    852 ;	main.c: 25: data |= mask;
      000369 7B 02            [ 1]  853 	ld	a, (0x02, sp)
      00036B 1A 04            [ 1]  854 	or	a, (0x04, sp)
      00036D 97               [ 1]  855 	ld	xl, a
      00036E 7B 01            [ 1]  856 	ld	a, (0x01, sp)
      000370 1A 03            [ 1]  857 	or	a, (0x03, sp)
                                    858 ;	main.c: 26: break;
      000372 20 09            [ 2]  859 	jra	00103$
                                    860 ;	main.c: 28: default:
      000374                        861 00102$:
                                    862 ;	main.c: 29: data &= ~mask;
      000374 1E 03            [ 2]  863 	ldw	x, (0x03, sp)
      000376 53               [ 2]  864 	cplw	x
      000377 9F               [ 1]  865 	ld	a, xl
      000378 14 02            [ 1]  866 	and	a, (0x02, sp)
      00037A 02               [ 1]  867 	rlwa	x
      00037B 14 01            [ 1]  868 	and	a, (0x01, sp)
                                    869 ;	main.c: 31: }
      00037D                        870 00103$:
                                    871 ;	main.c: 32: return data;
      00037D 95               [ 1]  872 	ld	xh, a
                                    873 ;	main.c: 33: }
      00037E 16 05            [ 2]  874 	ldw	y, (5, sp)
      000380 5B 0A            [ 2]  875 	addw	sp, #10
      000382 90 FC            [ 2]  876 	jp	(y)
                                    877 ;	main.c: 34: void delay(uint16_t ticks)
                                    878 ;	-----------------------------------------
                                    879 ;	 function delay
                                    880 ;	-----------------------------------------
      000384                        881 _delay:
                                    882 ;	main.c: 36: while(ticks > 0)
      000384                        883 00101$:
      000384 5D               [ 2]  884 	tnzw	x
      000385 26 01            [ 1]  885 	jrne	00120$
      000387 81               [ 4]  886 	ret
      000388                        887 00120$:
                                    888 ;	main.c: 38: ticks-=2;
      000388 5A               [ 2]  889 	decw	x
      000389 5A               [ 2]  890 	decw	x
                                    891 ;	main.c: 39: ticks+=1;
      00038A 5C               [ 1]  892 	incw	x
      00038B 20 F7            [ 2]  893 	jra	00101$
                                    894 ;	main.c: 41: }
      00038D 81               [ 4]  895 	ret
                                    896 ;	main.c: 43: void display_init(void)
                                    897 ;	-----------------------------------------
                                    898 ;	 function display_init
                                    899 ;	-----------------------------------------
      00038E                        900 _display_init:
      00038E 52 07            [ 2]  901 	sub	sp, #7
                                    902 ;	main.c: 45: uint8_t setup_buf[7] = {0x00,0xAE,0xD5,0x80,0xA8,0x1F,0xAF};
      000390 0F 01            [ 1]  903 	clr	(0x01, sp)
      000392 A6 AE            [ 1]  904 	ld	a, #0xae
      000394 6B 02            [ 1]  905 	ld	(0x02, sp), a
      000396 A6 D5            [ 1]  906 	ld	a, #0xd5
      000398 6B 03            [ 1]  907 	ld	(0x03, sp), a
      00039A A6 80            [ 1]  908 	ld	a, #0x80
      00039C 6B 04            [ 1]  909 	ld	(0x04, sp), a
      00039E A6 A8            [ 1]  910 	ld	a, #0xa8
      0003A0 6B 05            [ 1]  911 	ld	(0x05, sp), a
      0003A2 A6 1F            [ 1]  912 	ld	a, #0x1f
      0003A4 6B 06            [ 1]  913 	ld	(0x06, sp), a
      0003A6 A6 AF            [ 1]  914 	ld	a, #0xaf
      0003A8 6B 07            [ 1]  915 	ld	(0x07, sp), a
                                    916 ;	main.c: 46: i2c_write(I2C_DISPLAY_ADDR,5,setup_buf);
      0003AA 96               [ 1]  917 	ldw	x, sp
      0003AB 5C               [ 1]  918 	incw	x
      0003AC 89               [ 2]  919 	pushw	x
      0003AD 4B 05            [ 1]  920 	push	#0x05
      0003AF A6 3C            [ 1]  921 	ld	a, #0x3c
      0003B1 CDr02rC9         [ 4]  922 	call	_i2c_write
                                    923 ;	main.c: 47: setup_buf[1] = 0x1F;
      0003B4 A6 1F            [ 1]  924 	ld	a, #0x1f
      0003B6 6B 02            [ 1]  925 	ld	(0x02, sp), a
                                    926 ;	main.c: 48: i2c_write(I2C_DISPLAY_ADDR,2,setup_buf);
      0003B8 96               [ 1]  927 	ldw	x, sp
      0003B9 5C               [ 1]  928 	incw	x
      0003BA 89               [ 2]  929 	pushw	x
      0003BB 4B 02            [ 1]  930 	push	#0x02
      0003BD A6 3C            [ 1]  931 	ld	a, #0x3c
      0003BF CDr02rC9         [ 4]  932 	call	_i2c_write
                                    933 ;	main.c: 49: setup_buf[1] = 0xD3;
      0003C2 A6 D3            [ 1]  934 	ld	a, #0xd3
      0003C4 6B 02            [ 1]  935 	ld	(0x02, sp), a
                                    936 ;	main.c: 50: setup_buf[2] = 0x00;
      0003C6 0F 03            [ 1]  937 	clr	(0x03, sp)
                                    938 ;	main.c: 51: setup_buf[3] = 0x40;
      0003C8 A6 40            [ 1]  939 	ld	a, #0x40
      0003CA 6B 04            [ 1]  940 	ld	(0x04, sp), a
                                    941 ;	main.c: 52: setup_buf[4] = 0x8D;
      0003CC A6 8D            [ 1]  942 	ld	a, #0x8d
      0003CE 6B 05            [ 1]  943 	ld	(0x05, sp), a
                                    944 ;	main.c: 53: i2c_write(I2C_DISPLAY_ADDR,5,setup_buf);
      0003D0 96               [ 1]  945 	ldw	x, sp
      0003D1 5C               [ 1]  946 	incw	x
      0003D2 89               [ 2]  947 	pushw	x
      0003D3 4B 05            [ 1]  948 	push	#0x05
      0003D5 A6 3C            [ 1]  949 	ld	a, #0x3c
      0003D7 CDr02rC9         [ 4]  950 	call	_i2c_write
                                    951 ;	main.c: 54: setup_buf[1] = 0x14;
      0003DA A6 14            [ 1]  952 	ld	a, #0x14
      0003DC 6B 02            [ 1]  953 	ld	(0x02, sp), a
                                    954 ;	main.c: 55: i2c_write(I2C_DISPLAY_ADDR,2,setup_buf);
      0003DE 96               [ 1]  955 	ldw	x, sp
      0003DF 5C               [ 1]  956 	incw	x
      0003E0 89               [ 2]  957 	pushw	x
      0003E1 4B 02            [ 1]  958 	push	#0x02
      0003E3 A6 3C            [ 1]  959 	ld	a, #0x3c
      0003E5 CDr02rC9         [ 4]  960 	call	_i2c_write
                                    961 ;	main.c: 56: setup_buf[1] = 0xDB;
      0003E8 A6 DB            [ 1]  962 	ld	a, #0xdb
      0003EA 6B 02            [ 1]  963 	ld	(0x02, sp), a
                                    964 ;	main.c: 57: setup_buf[2] = 0x40;
      0003EC A6 40            [ 1]  965 	ld	a, #0x40
      0003EE 6B 03            [ 1]  966 	ld	(0x03, sp), a
                                    967 ;	main.c: 58: setup_buf[3] = 0xA4;
      0003F0 A6 A4            [ 1]  968 	ld	a, #0xa4
      0003F2 6B 04            [ 1]  969 	ld	(0x04, sp), a
                                    970 ;	main.c: 59: setup_buf[4] = 0xA6;
      0003F4 A6 A6            [ 1]  971 	ld	a, #0xa6
      0003F6 6B 05            [ 1]  972 	ld	(0x05, sp), a
                                    973 ;	main.c: 60: i2c_write(I2C_DISPLAY_ADDR,5,setup_buf);
      0003F8 96               [ 1]  974 	ldw	x, sp
      0003F9 5C               [ 1]  975 	incw	x
      0003FA 89               [ 2]  976 	pushw	x
      0003FB 4B 05            [ 1]  977 	push	#0x05
      0003FD A6 3C            [ 1]  978 	ld	a, #0x3c
      0003FF CDr02rC9         [ 4]  979 	call	_i2c_write
                                    980 ;	main.c: 61: setup_buf[1] = 0xDA;
      000402 A6 DA            [ 1]  981 	ld	a, #0xda
      000404 6B 02            [ 1]  982 	ld	(0x02, sp), a
                                    983 ;	main.c: 62: i2c_write(I2C_DISPLAY_ADDR,2,setup_buf);
      000406 96               [ 1]  984 	ldw	x, sp
      000407 5C               [ 1]  985 	incw	x
      000408 89               [ 2]  986 	pushw	x
      000409 4B 02            [ 1]  987 	push	#0x02
      00040B A6 3C            [ 1]  988 	ld	a, #0x3c
      00040D CDr02rC9         [ 4]  989 	call	_i2c_write
                                    990 ;	main.c: 63: setup_buf[1] = 0x02;
      000410 A6 02            [ 1]  991 	ld	a, #0x02
      000412 6B 02            [ 1]  992 	ld	(0x02, sp), a
                                    993 ;	main.c: 64: i2c_write(I2C_DISPLAY_ADDR,2,setup_buf);
      000414 96               [ 1]  994 	ldw	x, sp
      000415 5C               [ 1]  995 	incw	x
      000416 89               [ 2]  996 	pushw	x
      000417 4B 02            [ 1]  997 	push	#0x02
      000419 A6 3C            [ 1]  998 	ld	a, #0x3c
      00041B CDr02rC9         [ 4]  999 	call	_i2c_write
                                   1000 ;	main.c: 65: setup_buf[1] = 0x81;
      00041E A6 81            [ 1] 1001 	ld	a, #0x81
      000420 6B 02            [ 1] 1002 	ld	(0x02, sp), a
                                   1003 ;	main.c: 66: i2c_write(I2C_DISPLAY_ADDR,2,setup_buf);
      000422 96               [ 1] 1004 	ldw	x, sp
      000423 5C               [ 1] 1005 	incw	x
      000424 89               [ 2] 1006 	pushw	x
      000425 4B 02            [ 1] 1007 	push	#0x02
      000427 A6 3C            [ 1] 1008 	ld	a, #0x3c
      000429 CDr02rC9         [ 4] 1009 	call	_i2c_write
                                   1010 ;	main.c: 67: setup_buf[1] = 0x8F;
      00042C A6 8F            [ 1] 1011 	ld	a, #0x8f
      00042E 6B 02            [ 1] 1012 	ld	(0x02, sp), a
                                   1013 ;	main.c: 68: i2c_write(I2C_DISPLAY_ADDR,2,setup_buf);
      000430 96               [ 1] 1014 	ldw	x, sp
      000431 5C               [ 1] 1015 	incw	x
      000432 89               [ 2] 1016 	pushw	x
      000433 4B 02            [ 1] 1017 	push	#0x02
      000435 A6 3C            [ 1] 1018 	ld	a, #0x3c
      000437 CDr02rC9         [ 4] 1019 	call	_i2c_write
                                   1020 ;	main.c: 69: setup_buf[1] = 0xD9;
      00043A A6 D9            [ 1] 1021 	ld	a, #0xd9
      00043C 6B 02            [ 1] 1022 	ld	(0x02, sp), a
                                   1023 ;	main.c: 70: i2c_write(I2C_DISPLAY_ADDR,2,setup_buf);
      00043E 96               [ 1] 1024 	ldw	x, sp
      00043F 5C               [ 1] 1025 	incw	x
      000440 89               [ 2] 1026 	pushw	x
      000441 4B 02            [ 1] 1027 	push	#0x02
      000443 A6 3C            [ 1] 1028 	ld	a, #0x3c
      000445 CDr02rC9         [ 4] 1029 	call	_i2c_write
                                   1030 ;	main.c: 71: setup_buf[1] = 0xF1;
      000448 A6 F1            [ 1] 1031 	ld	a, #0xf1
      00044A 6B 02            [ 1] 1032 	ld	(0x02, sp), a
                                   1033 ;	main.c: 72: i2c_write(I2C_DISPLAY_ADDR,2,setup_buf);
      00044C 96               [ 1] 1034 	ldw	x, sp
      00044D 5C               [ 1] 1035 	incw	x
      00044E 89               [ 2] 1036 	pushw	x
      00044F 4B 02            [ 1] 1037 	push	#0x02
      000451 A6 3C            [ 1] 1038 	ld	a, #0x3c
      000453 CDr02rC9         [ 4] 1039 	call	_i2c_write
                                   1040 ;	main.c: 73: setup_buf[1] = 0x20;
      000456 A6 20            [ 1] 1041 	ld	a, #0x20
      000458 6B 02            [ 1] 1042 	ld	(0x02, sp), a
                                   1043 ;	main.c: 74: setup_buf[2] = 0x00;
      00045A 0F 03            [ 1] 1044 	clr	(0x03, sp)
                                   1045 ;	main.c: 75: setup_buf[3] = 0xA1;
      00045C A6 A1            [ 1] 1046 	ld	a, #0xa1
      00045E 6B 04            [ 1] 1047 	ld	(0x04, sp), a
                                   1048 ;	main.c: 76: setup_buf[4] = 0xC8;
      000460 A6 C8            [ 1] 1049 	ld	a, #0xc8
      000462 6B 05            [ 1] 1050 	ld	(0x05, sp), a
                                   1051 ;	main.c: 77: i2c_write(I2C_DISPLAY_ADDR,7,setup_buf);
      000464 96               [ 1] 1052 	ldw	x, sp
      000465 5C               [ 1] 1053 	incw	x
      000466 89               [ 2] 1054 	pushw	x
      000467 4B 07            [ 1] 1055 	push	#0x07
      000469 A6 3C            [ 1] 1056 	ld	a, #0x3c
      00046B CDr02rC9         [ 4] 1057 	call	_i2c_write
                                   1058 ;	main.c: 78: }
      00046E 5B 07            [ 2] 1059 	addw	sp, #7
      000470 81               [ 4] 1060 	ret
                                   1061 ;	main.c: 80: void display_set_params_to_write(void)
                                   1062 ;	-----------------------------------------
                                   1063 ;	 function display_set_params_to_write
                                   1064 ;	-----------------------------------------
      000471                       1065 _display_set_params_to_write:
      000471 52 08            [ 2] 1066 	sub	sp, #8
                                   1067 ;	main.c: 82: uint8_t set_params_buf[8] = {0x00,0x22,0x00,0x03,0x00,0x21,0x00,0x7F};
      000473 96               [ 1] 1068 	ldw	x, sp
      000474 5C               [ 1] 1069 	incw	x
      000475 7F               [ 1] 1070 	clr	(x)
      000476 A6 22            [ 1] 1071 	ld	a, #0x22
      000478 6B 02            [ 1] 1072 	ld	(0x02, sp), a
      00047A 0F 03            [ 1] 1073 	clr	(0x03, sp)
      00047C A6 03            [ 1] 1074 	ld	a, #0x03
      00047E 6B 04            [ 1] 1075 	ld	(0x04, sp), a
      000480 0F 05            [ 1] 1076 	clr	(0x05, sp)
      000482 A6 21            [ 1] 1077 	ld	a, #0x21
      000484 6B 06            [ 1] 1078 	ld	(0x06, sp), a
      000486 0F 07            [ 1] 1079 	clr	(0x07, sp)
      000488 A6 7F            [ 1] 1080 	ld	a, #0x7f
      00048A 6B 08            [ 1] 1081 	ld	(0x08, sp), a
                                   1082 ;	main.c: 83: i2c_write(I2C_DISPLAY_ADDR,8,set_params_buf);
      00048C 89               [ 2] 1083 	pushw	x
      00048D 4B 08            [ 1] 1084 	push	#0x08
      00048F A6 3C            [ 1] 1085 	ld	a, #0x3c
      000491 CDr02rC9         [ 4] 1086 	call	_i2c_write
                                   1087 ;	main.c: 84: }
      000494 5B 08            [ 2] 1088 	addw	sp, #8
      000496 81               [ 4] 1089 	ret
                                   1090 ;	main.c: 91: void display_draw_pixel(uint8_t *buffer, uint8_t x, uint8_t y, uint8_t color)
                                   1091 ;	-----------------------------------------
                                   1092 ;	 function display_draw_pixel
                                   1093 ;	-----------------------------------------
      000497                       1094 _display_draw_pixel:
      000497 52 08            [ 2] 1095 	sub	sp, #8
      000499 1F 07            [ 2] 1096 	ldw	(0x07, sp), x
                                   1097 ;	main.c: 93: buffer[x + ((y / 8) * SSD1306_LCDWIDTH)] = set_bit(buffer[x + ((y / 8) * SSD1306_LCDWIDTH)],(y % 8),color);
      00049B 6B 06            [ 1] 1098 	ld	(0x06, sp), a
      00049D 0F 05            [ 1] 1099 	clr	(0x05, sp)
      00049F 7B 0B            [ 1] 1100 	ld	a, (0x0b, sp)
      0004A1 0F 01            [ 1] 1101 	clr	(0x01, sp)
      0004A3 97               [ 1] 1102 	ld	xl, a
      0004A4 02               [ 1] 1103 	rlwa	x
      0004A5 4F               [ 1] 1104 	clr	a
      0004A6 01               [ 1] 1105 	rrwa	x
      0004A7 5D               [ 2] 1106 	tnzw	x
      0004A8 2A 03            [ 1] 1107 	jrpl	00103$
      0004AA 1C 00 07         [ 2] 1108 	addw	x, #0x0007
      0004AD                       1109 00103$:
      0004AD 57               [ 2] 1110 	sraw	x
      0004AE 57               [ 2] 1111 	sraw	x
      0004AF 57               [ 2] 1112 	sraw	x
      0004B0 58               [ 2] 1113 	sllw	x
      0004B1 58               [ 2] 1114 	sllw	x
      0004B2 58               [ 2] 1115 	sllw	x
      0004B3 58               [ 2] 1116 	sllw	x
      0004B4 58               [ 2] 1117 	sllw	x
      0004B5 58               [ 2] 1118 	sllw	x
      0004B6 58               [ 2] 1119 	sllw	x
      0004B7 72 FB 05         [ 2] 1120 	addw	x, (0x05, sp)
      0004BA 72 FB 07         [ 2] 1121 	addw	x, (0x07, sp)
      0004BD 1F 03            [ 2] 1122 	ldw	(0x03, sp), x
      0004BF 90 5F            [ 1] 1123 	clrw	y
      0004C1 61               [ 1] 1124 	exg	a, yl
      0004C2 7B 0C            [ 1] 1125 	ld	a, (0x0c, sp)
      0004C4 61               [ 1] 1126 	exg	a, yl
      0004C5 A4 07            [ 1] 1127 	and	a, #0x07
      0004C7 6B 06            [ 1] 1128 	ld	(0x06, sp), a
      0004C9 0F 05            [ 1] 1129 	clr	(0x05, sp)
      0004CB 1E 03            [ 2] 1130 	ldw	x, (0x03, sp)
      0004CD F6               [ 1] 1131 	ld	a, (x)
      0004CE 5F               [ 1] 1132 	clrw	x
      0004CF 90 89            [ 2] 1133 	pushw	y
      0004D1 16 07            [ 2] 1134 	ldw	y, (0x07, sp)
      0004D3 90 89            [ 2] 1135 	pushw	y
      0004D5 97               [ 1] 1136 	ld	xl, a
      0004D6 CDr03r51         [ 4] 1137 	call	_set_bit
      0004D9 9F               [ 1] 1138 	ld	a, xl
      0004DA 1E 03            [ 2] 1139 	ldw	x, (0x03, sp)
      0004DC F7               [ 1] 1140 	ld	(x), a
                                   1141 ;	main.c: 94: }
      0004DD 1E 09            [ 2] 1142 	ldw	x, (9, sp)
      0004DF 5B 0C            [ 2] 1143 	addw	sp, #12
      0004E1 FC               [ 2] 1144 	jp	(x)
                                   1145 ;	main.c: 96: void display_buffer_fill_entire(uint8_t *in_data) {
                                   1146 ;	-----------------------------------------
                                   1147 ;	 function display_buffer_fill_entire
                                   1148 ;	-----------------------------------------
      0004E2                       1149 _display_buffer_fill_entire:
      0004E2 52 8D            [ 2] 1150 	sub	sp, #141
      0004E4 1F 86            [ 2] 1151 	ldw	(0x86, sp), x
                                   1152 ;	main.c: 98: display_set_params_to_write();
      0004E6 CDr04r71         [ 4] 1153 	call	_display_set_params_to_write
                                   1154 ;	main.c: 99: uint8_t part[129]={0x40};
      0004E9 A6 40            [ 1] 1155 	ld	a, #0x40
      0004EB 6B 01            [ 1] 1156 	ld	(0x01, sp), a
      0004ED 0F 02            [ 1] 1157 	clr	(0x02, sp)
      0004EF 0F 03            [ 1] 1158 	clr	(0x03, sp)
      0004F1 0F 04            [ 1] 1159 	clr	(0x04, sp)
      0004F3 0F 05            [ 1] 1160 	clr	(0x05, sp)
      0004F5 0F 06            [ 1] 1161 	clr	(0x06, sp)
      0004F7 0F 07            [ 1] 1162 	clr	(0x07, sp)
      0004F9 0F 08            [ 1] 1163 	clr	(0x08, sp)
      0004FB 0F 09            [ 1] 1164 	clr	(0x09, sp)
      0004FD 0F 0A            [ 1] 1165 	clr	(0x0a, sp)
      0004FF 0F 0B            [ 1] 1166 	clr	(0x0b, sp)
      000501 0F 0C            [ 1] 1167 	clr	(0x0c, sp)
      000503 0F 0D            [ 1] 1168 	clr	(0x0d, sp)
      000505 0F 0E            [ 1] 1169 	clr	(0x0e, sp)
      000507 0F 0F            [ 1] 1170 	clr	(0x0f, sp)
      000509 0F 10            [ 1] 1171 	clr	(0x10, sp)
      00050B 0F 11            [ 1] 1172 	clr	(0x11, sp)
      00050D 0F 12            [ 1] 1173 	clr	(0x12, sp)
      00050F 0F 13            [ 1] 1174 	clr	(0x13, sp)
      000511 0F 14            [ 1] 1175 	clr	(0x14, sp)
      000513 0F 15            [ 1] 1176 	clr	(0x15, sp)
      000515 0F 16            [ 1] 1177 	clr	(0x16, sp)
      000517 0F 17            [ 1] 1178 	clr	(0x17, sp)
      000519 0F 18            [ 1] 1179 	clr	(0x18, sp)
      00051B 0F 19            [ 1] 1180 	clr	(0x19, sp)
      00051D 0F 1A            [ 1] 1181 	clr	(0x1a, sp)
      00051F 0F 1B            [ 1] 1182 	clr	(0x1b, sp)
      000521 0F 1C            [ 1] 1183 	clr	(0x1c, sp)
      000523 0F 1D            [ 1] 1184 	clr	(0x1d, sp)
      000525 0F 1E            [ 1] 1185 	clr	(0x1e, sp)
      000527 0F 1F            [ 1] 1186 	clr	(0x1f, sp)
      000529 0F 20            [ 1] 1187 	clr	(0x20, sp)
      00052B 0F 21            [ 1] 1188 	clr	(0x21, sp)
      00052D 0F 22            [ 1] 1189 	clr	(0x22, sp)
      00052F 0F 23            [ 1] 1190 	clr	(0x23, sp)
      000531 0F 24            [ 1] 1191 	clr	(0x24, sp)
      000533 0F 25            [ 1] 1192 	clr	(0x25, sp)
      000535 0F 26            [ 1] 1193 	clr	(0x26, sp)
      000537 0F 27            [ 1] 1194 	clr	(0x27, sp)
      000539 0F 28            [ 1] 1195 	clr	(0x28, sp)
      00053B 0F 29            [ 1] 1196 	clr	(0x29, sp)
      00053D 0F 2A            [ 1] 1197 	clr	(0x2a, sp)
      00053F 0F 2B            [ 1] 1198 	clr	(0x2b, sp)
      000541 0F 2C            [ 1] 1199 	clr	(0x2c, sp)
      000543 0F 2D            [ 1] 1200 	clr	(0x2d, sp)
      000545 0F 2E            [ 1] 1201 	clr	(0x2e, sp)
      000547 0F 2F            [ 1] 1202 	clr	(0x2f, sp)
      000549 0F 30            [ 1] 1203 	clr	(0x30, sp)
      00054B 0F 31            [ 1] 1204 	clr	(0x31, sp)
      00054D 0F 32            [ 1] 1205 	clr	(0x32, sp)
      00054F 0F 33            [ 1] 1206 	clr	(0x33, sp)
      000551 0F 34            [ 1] 1207 	clr	(0x34, sp)
      000553 0F 35            [ 1] 1208 	clr	(0x35, sp)
      000555 0F 36            [ 1] 1209 	clr	(0x36, sp)
      000557 0F 37            [ 1] 1210 	clr	(0x37, sp)
      000559 0F 38            [ 1] 1211 	clr	(0x38, sp)
      00055B 0F 39            [ 1] 1212 	clr	(0x39, sp)
      00055D 0F 3A            [ 1] 1213 	clr	(0x3a, sp)
      00055F 0F 3B            [ 1] 1214 	clr	(0x3b, sp)
      000561 0F 3C            [ 1] 1215 	clr	(0x3c, sp)
      000563 0F 3D            [ 1] 1216 	clr	(0x3d, sp)
      000565 0F 3E            [ 1] 1217 	clr	(0x3e, sp)
      000567 0F 3F            [ 1] 1218 	clr	(0x3f, sp)
      000569 0F 40            [ 1] 1219 	clr	(0x40, sp)
      00056B 0F 41            [ 1] 1220 	clr	(0x41, sp)
      00056D 0F 42            [ 1] 1221 	clr	(0x42, sp)
      00056F 0F 43            [ 1] 1222 	clr	(0x43, sp)
      000571 0F 44            [ 1] 1223 	clr	(0x44, sp)
      000573 0F 45            [ 1] 1224 	clr	(0x45, sp)
      000575 0F 46            [ 1] 1225 	clr	(0x46, sp)
      000577 0F 47            [ 1] 1226 	clr	(0x47, sp)
      000579 0F 48            [ 1] 1227 	clr	(0x48, sp)
      00057B 0F 49            [ 1] 1228 	clr	(0x49, sp)
      00057D 0F 4A            [ 1] 1229 	clr	(0x4a, sp)
      00057F 0F 4B            [ 1] 1230 	clr	(0x4b, sp)
      000581 0F 4C            [ 1] 1231 	clr	(0x4c, sp)
      000583 0F 4D            [ 1] 1232 	clr	(0x4d, sp)
      000585 0F 4E            [ 1] 1233 	clr	(0x4e, sp)
      000587 0F 4F            [ 1] 1234 	clr	(0x4f, sp)
      000589 0F 50            [ 1] 1235 	clr	(0x50, sp)
      00058B 0F 51            [ 1] 1236 	clr	(0x51, sp)
      00058D 0F 52            [ 1] 1237 	clr	(0x52, sp)
      00058F 0F 53            [ 1] 1238 	clr	(0x53, sp)
      000591 0F 54            [ 1] 1239 	clr	(0x54, sp)
      000593 0F 55            [ 1] 1240 	clr	(0x55, sp)
      000595 0F 56            [ 1] 1241 	clr	(0x56, sp)
      000597 0F 57            [ 1] 1242 	clr	(0x57, sp)
      000599 0F 58            [ 1] 1243 	clr	(0x58, sp)
      00059B 0F 59            [ 1] 1244 	clr	(0x59, sp)
      00059D 0F 5A            [ 1] 1245 	clr	(0x5a, sp)
      00059F 0F 5B            [ 1] 1246 	clr	(0x5b, sp)
      0005A1 0F 5C            [ 1] 1247 	clr	(0x5c, sp)
      0005A3 0F 5D            [ 1] 1248 	clr	(0x5d, sp)
      0005A5 0F 5E            [ 1] 1249 	clr	(0x5e, sp)
      0005A7 0F 5F            [ 1] 1250 	clr	(0x5f, sp)
      0005A9 0F 60            [ 1] 1251 	clr	(0x60, sp)
      0005AB 0F 61            [ 1] 1252 	clr	(0x61, sp)
      0005AD 0F 62            [ 1] 1253 	clr	(0x62, sp)
      0005AF 0F 63            [ 1] 1254 	clr	(0x63, sp)
      0005B1 0F 64            [ 1] 1255 	clr	(0x64, sp)
      0005B3 0F 65            [ 1] 1256 	clr	(0x65, sp)
      0005B5 0F 66            [ 1] 1257 	clr	(0x66, sp)
      0005B7 0F 67            [ 1] 1258 	clr	(0x67, sp)
      0005B9 0F 68            [ 1] 1259 	clr	(0x68, sp)
      0005BB 0F 69            [ 1] 1260 	clr	(0x69, sp)
      0005BD 0F 6A            [ 1] 1261 	clr	(0x6a, sp)
      0005BF 0F 6B            [ 1] 1262 	clr	(0x6b, sp)
      0005C1 0F 6C            [ 1] 1263 	clr	(0x6c, sp)
      0005C3 0F 6D            [ 1] 1264 	clr	(0x6d, sp)
      0005C5 0F 6E            [ 1] 1265 	clr	(0x6e, sp)
      0005C7 0F 6F            [ 1] 1266 	clr	(0x6f, sp)
      0005C9 0F 70            [ 1] 1267 	clr	(0x70, sp)
      0005CB 0F 71            [ 1] 1268 	clr	(0x71, sp)
      0005CD 0F 72            [ 1] 1269 	clr	(0x72, sp)
      0005CF 0F 73            [ 1] 1270 	clr	(0x73, sp)
      0005D1 0F 74            [ 1] 1271 	clr	(0x74, sp)
      0005D3 0F 75            [ 1] 1272 	clr	(0x75, sp)
      0005D5 0F 76            [ 1] 1273 	clr	(0x76, sp)
      0005D7 0F 77            [ 1] 1274 	clr	(0x77, sp)
      0005D9 0F 78            [ 1] 1275 	clr	(0x78, sp)
      0005DB 0F 79            [ 1] 1276 	clr	(0x79, sp)
      0005DD 0F 7A            [ 1] 1277 	clr	(0x7a, sp)
      0005DF 0F 7B            [ 1] 1278 	clr	(0x7b, sp)
      0005E1 0F 7C            [ 1] 1279 	clr	(0x7c, sp)
      0005E3 0F 7D            [ 1] 1280 	clr	(0x7d, sp)
      0005E5 0F 7E            [ 1] 1281 	clr	(0x7e, sp)
      0005E7 0F 7F            [ 1] 1282 	clr	(0x7f, sp)
      0005E9 0F 80            [ 1] 1283 	clr	(0x80, sp)
      0005EB 0F 81            [ 1] 1284 	clr	(0x81, sp)
                                   1285 ;	main.c: 101: for(int page = 0;page <= 384;page+=128)
      0005ED 5F               [ 1] 1286 	clrw	x
      0005EE 1F 88            [ 2] 1287 	ldw	(0x88, sp), x
      0005F0                       1288 00111$:
      0005F0 1E 88            [ 2] 1289 	ldw	x, (0x88, sp)
      0005F2 A3 01 80         [ 2] 1290 	cpw	x, #0x0180
      0005F5 2D 03            [ 1] 1291 	jrsle	00160$
      0005F7 CCr06r77         [ 2] 1292 	jp	00113$
      0005FA                       1293 00160$:
                                   1294 ;	main.c: 103: for (int height = 0; height < 8; height++) 
      0005FA 5F               [ 1] 1295 	clrw	x
      0005FB 1F 8A            [ 2] 1296 	ldw	(0x8a, sp), x
      0005FD                       1297 00108$:
      0005FD 1E 8A            [ 2] 1298 	ldw	x, (0x8a, sp)
      0005FF A3 00 08         [ 2] 1299 	cpw	x, #0x0008
      000602 2E 5F            [ 1] 1300 	jrsge	00102$
                                   1301 ;	main.c: 105: for (int width = 0; width < 128; width++) 
      000604 1E 8A            [ 2] 1302 	ldw	x, (0x8a, sp)
      000606 58               [ 2] 1303 	sllw	x
      000607 58               [ 2] 1304 	sllw	x
      000608 58               [ 2] 1305 	sllw	x
      000609 58               [ 2] 1306 	sllw	x
      00060A 72 FB 88         [ 2] 1307 	addw	x, (0x88, sp)
      00060D 1F 82            [ 2] 1308 	ldw	(0x82, sp), x
      00060F 5F               [ 1] 1309 	clrw	x
      000610 1F 8C            [ 2] 1310 	ldw	(0x8c, sp), x
      000612                       1311 00105$:
      000612 1E 8C            [ 2] 1312 	ldw	x, (0x8c, sp)
      000614 A3 00 80         [ 2] 1313 	cpw	x, #0x0080
      000617 2E 43            [ 1] 1314 	jrsge	00109$
                                   1315 ;	main.c: 108: display_draw_pixel(&part[1], width, height, get_bit(in_data[page+(height*16) + (width / 8)], 7 - (width % 8)));
      000619 4B 08            [ 1] 1316 	push	#0x08
      00061B 4B 00            [ 1] 1317 	push	#0x00
      00061D 1E 8E            [ 2] 1318 	ldw	x, (0x8e, sp)
      00061F CDr00r00         [ 4] 1319 	call	__modsint
      000622 1F 84            [ 2] 1320 	ldw	(0x84, sp), x
      000624 90 AE 00 07      [ 2] 1321 	ldw	y, #0x0007
      000628 72 F2 84         [ 2] 1322 	subw	y, (0x84, sp)
      00062B 1E 8C            [ 2] 1323 	ldw	x, (0x8c, sp)
      00062D 2A 03            [ 1] 1324 	jrpl	00163$
      00062F 1C 00 07         [ 2] 1325 	addw	x, #0x0007
      000632                       1326 00163$:
      000632 57               [ 2] 1327 	sraw	x
      000633 57               [ 2] 1328 	sraw	x
      000634 57               [ 2] 1329 	sraw	x
      000635 72 FB 82         [ 2] 1330 	addw	x, (0x82, sp)
      000638 72 FB 86         [ 2] 1331 	addw	x, (0x86, sp)
      00063B F6               [ 1] 1332 	ld	a, (x)
      00063C 5F               [ 1] 1333 	clrw	x
      00063D 90 89            [ 2] 1334 	pushw	y
      00063F 97               [ 1] 1335 	ld	xl, a
      000640 CDr03r3C         [ 4] 1336 	call	_get_bit
      000643 7B 8B            [ 1] 1337 	ld	a, (0x8b, sp)
      000645 02               [ 1] 1338 	rlwa	x
      000646 7B 8D            [ 1] 1339 	ld	a, (0x8d, sp)
      000648 01               [ 1] 1340 	rrwa	x
      000649 89               [ 2] 1341 	pushw	x
      00064A 5B 01            [ 2] 1342 	addw	sp, #1
      00064C 88               [ 1] 1343 	push	a
      00064D 9E               [ 1] 1344 	ld	a, xh
      00064E 96               [ 1] 1345 	ldw	x, sp
      00064F 1C 00 04         [ 2] 1346 	addw	x, #4
      000652 CDr04r97         [ 4] 1347 	call	_display_draw_pixel
                                   1348 ;	main.c: 105: for (int width = 0; width < 128; width++) 
      000655 1E 8C            [ 2] 1349 	ldw	x, (0x8c, sp)
      000657 5C               [ 1] 1350 	incw	x
      000658 1F 8C            [ 2] 1351 	ldw	(0x8c, sp), x
      00065A 20 B6            [ 2] 1352 	jra	00105$
      00065C                       1353 00109$:
                                   1354 ;	main.c: 103: for (int height = 0; height < 8; height++) 
      00065C 1E 8A            [ 2] 1355 	ldw	x, (0x8a, sp)
      00065E 5C               [ 1] 1356 	incw	x
      00065F 1F 8A            [ 2] 1357 	ldw	(0x8a, sp), x
      000661 20 9A            [ 2] 1358 	jra	00108$
      000663                       1359 00102$:
                                   1360 ;	main.c: 113: i2c_write(I2C_DISPLAY_ADDR, 129, part);
      000663 96               [ 1] 1361 	ldw	x, sp
      000664 5C               [ 1] 1362 	incw	x
      000665 89               [ 2] 1363 	pushw	x
      000666 4B 81            [ 1] 1364 	push	#0x81
      000668 A6 3C            [ 1] 1365 	ld	a, #0x3c
      00066A CDr02rC9         [ 4] 1366 	call	_i2c_write
                                   1367 ;	main.c: 101: for(int page = 0;page <= 384;page+=128)
      00066D 1E 88            [ 2] 1368 	ldw	x, (0x88, sp)
      00066F 1C 00 80         [ 2] 1369 	addw	x, #0x0080
      000672 1F 88            [ 2] 1370 	ldw	(0x88, sp), x
      000674 CCr05rF0         [ 2] 1371 	jp	00111$
      000677                       1372 00113$:
                                   1373 ;	main.c: 115: }
      000677 5B 8D            [ 2] 1374 	addw	sp, #141
      000679 81               [ 4] 1375 	ret
                                   1376 ;	main.c: 117: void display_clean(void)
                                   1377 ;	-----------------------------------------
                                   1378 ;	 function display_clean
                                   1379 ;	-----------------------------------------
      00067A                       1380 _display_clean:
      00067A 52 81            [ 2] 1381 	sub	sp, #129
                                   1382 ;	main.c: 119: uint8_t clean_buf[129] = {0x40};
      00067C A6 40            [ 1] 1383 	ld	a, #0x40
      00067E 6B 01            [ 1] 1384 	ld	(0x01, sp), a
      000680 0F 02            [ 1] 1385 	clr	(0x02, sp)
      000682 0F 03            [ 1] 1386 	clr	(0x03, sp)
      000684 0F 04            [ 1] 1387 	clr	(0x04, sp)
      000686 0F 05            [ 1] 1388 	clr	(0x05, sp)
      000688 0F 06            [ 1] 1389 	clr	(0x06, sp)
      00068A 0F 07            [ 1] 1390 	clr	(0x07, sp)
      00068C 0F 08            [ 1] 1391 	clr	(0x08, sp)
      00068E 0F 09            [ 1] 1392 	clr	(0x09, sp)
      000690 0F 0A            [ 1] 1393 	clr	(0x0a, sp)
      000692 0F 0B            [ 1] 1394 	clr	(0x0b, sp)
      000694 0F 0C            [ 1] 1395 	clr	(0x0c, sp)
      000696 0F 0D            [ 1] 1396 	clr	(0x0d, sp)
      000698 0F 0E            [ 1] 1397 	clr	(0x0e, sp)
      00069A 0F 0F            [ 1] 1398 	clr	(0x0f, sp)
      00069C 0F 10            [ 1] 1399 	clr	(0x10, sp)
      00069E 0F 11            [ 1] 1400 	clr	(0x11, sp)
      0006A0 0F 12            [ 1] 1401 	clr	(0x12, sp)
      0006A2 0F 13            [ 1] 1402 	clr	(0x13, sp)
      0006A4 0F 14            [ 1] 1403 	clr	(0x14, sp)
      0006A6 0F 15            [ 1] 1404 	clr	(0x15, sp)
      0006A8 0F 16            [ 1] 1405 	clr	(0x16, sp)
      0006AA 0F 17            [ 1] 1406 	clr	(0x17, sp)
      0006AC 0F 18            [ 1] 1407 	clr	(0x18, sp)
      0006AE 0F 19            [ 1] 1408 	clr	(0x19, sp)
      0006B0 0F 1A            [ 1] 1409 	clr	(0x1a, sp)
      0006B2 0F 1B            [ 1] 1410 	clr	(0x1b, sp)
      0006B4 0F 1C            [ 1] 1411 	clr	(0x1c, sp)
      0006B6 0F 1D            [ 1] 1412 	clr	(0x1d, sp)
      0006B8 0F 1E            [ 1] 1413 	clr	(0x1e, sp)
      0006BA 0F 1F            [ 1] 1414 	clr	(0x1f, sp)
      0006BC 0F 20            [ 1] 1415 	clr	(0x20, sp)
      0006BE 0F 21            [ 1] 1416 	clr	(0x21, sp)
      0006C0 0F 22            [ 1] 1417 	clr	(0x22, sp)
      0006C2 0F 23            [ 1] 1418 	clr	(0x23, sp)
      0006C4 0F 24            [ 1] 1419 	clr	(0x24, sp)
      0006C6 0F 25            [ 1] 1420 	clr	(0x25, sp)
      0006C8 0F 26            [ 1] 1421 	clr	(0x26, sp)
      0006CA 0F 27            [ 1] 1422 	clr	(0x27, sp)
      0006CC 0F 28            [ 1] 1423 	clr	(0x28, sp)
      0006CE 0F 29            [ 1] 1424 	clr	(0x29, sp)
      0006D0 0F 2A            [ 1] 1425 	clr	(0x2a, sp)
      0006D2 0F 2B            [ 1] 1426 	clr	(0x2b, sp)
      0006D4 0F 2C            [ 1] 1427 	clr	(0x2c, sp)
      0006D6 0F 2D            [ 1] 1428 	clr	(0x2d, sp)
      0006D8 0F 2E            [ 1] 1429 	clr	(0x2e, sp)
      0006DA 0F 2F            [ 1] 1430 	clr	(0x2f, sp)
      0006DC 0F 30            [ 1] 1431 	clr	(0x30, sp)
      0006DE 0F 31            [ 1] 1432 	clr	(0x31, sp)
      0006E0 0F 32            [ 1] 1433 	clr	(0x32, sp)
      0006E2 0F 33            [ 1] 1434 	clr	(0x33, sp)
      0006E4 0F 34            [ 1] 1435 	clr	(0x34, sp)
      0006E6 0F 35            [ 1] 1436 	clr	(0x35, sp)
      0006E8 0F 36            [ 1] 1437 	clr	(0x36, sp)
      0006EA 0F 37            [ 1] 1438 	clr	(0x37, sp)
      0006EC 0F 38            [ 1] 1439 	clr	(0x38, sp)
      0006EE 0F 39            [ 1] 1440 	clr	(0x39, sp)
      0006F0 0F 3A            [ 1] 1441 	clr	(0x3a, sp)
      0006F2 0F 3B            [ 1] 1442 	clr	(0x3b, sp)
      0006F4 0F 3C            [ 1] 1443 	clr	(0x3c, sp)
      0006F6 0F 3D            [ 1] 1444 	clr	(0x3d, sp)
      0006F8 0F 3E            [ 1] 1445 	clr	(0x3e, sp)
      0006FA 0F 3F            [ 1] 1446 	clr	(0x3f, sp)
      0006FC 0F 40            [ 1] 1447 	clr	(0x40, sp)
      0006FE 0F 41            [ 1] 1448 	clr	(0x41, sp)
      000700 0F 42            [ 1] 1449 	clr	(0x42, sp)
      000702 0F 43            [ 1] 1450 	clr	(0x43, sp)
      000704 0F 44            [ 1] 1451 	clr	(0x44, sp)
      000706 0F 45            [ 1] 1452 	clr	(0x45, sp)
      000708 0F 46            [ 1] 1453 	clr	(0x46, sp)
      00070A 0F 47            [ 1] 1454 	clr	(0x47, sp)
      00070C 0F 48            [ 1] 1455 	clr	(0x48, sp)
      00070E 0F 49            [ 1] 1456 	clr	(0x49, sp)
      000710 0F 4A            [ 1] 1457 	clr	(0x4a, sp)
      000712 0F 4B            [ 1] 1458 	clr	(0x4b, sp)
      000714 0F 4C            [ 1] 1459 	clr	(0x4c, sp)
      000716 0F 4D            [ 1] 1460 	clr	(0x4d, sp)
      000718 0F 4E            [ 1] 1461 	clr	(0x4e, sp)
      00071A 0F 4F            [ 1] 1462 	clr	(0x4f, sp)
      00071C 0F 50            [ 1] 1463 	clr	(0x50, sp)
      00071E 0F 51            [ 1] 1464 	clr	(0x51, sp)
      000720 0F 52            [ 1] 1465 	clr	(0x52, sp)
      000722 0F 53            [ 1] 1466 	clr	(0x53, sp)
      000724 0F 54            [ 1] 1467 	clr	(0x54, sp)
      000726 0F 55            [ 1] 1468 	clr	(0x55, sp)
      000728 0F 56            [ 1] 1469 	clr	(0x56, sp)
      00072A 0F 57            [ 1] 1470 	clr	(0x57, sp)
      00072C 0F 58            [ 1] 1471 	clr	(0x58, sp)
      00072E 0F 59            [ 1] 1472 	clr	(0x59, sp)
      000730 0F 5A            [ 1] 1473 	clr	(0x5a, sp)
      000732 0F 5B            [ 1] 1474 	clr	(0x5b, sp)
      000734 0F 5C            [ 1] 1475 	clr	(0x5c, sp)
      000736 0F 5D            [ 1] 1476 	clr	(0x5d, sp)
      000738 0F 5E            [ 1] 1477 	clr	(0x5e, sp)
      00073A 0F 5F            [ 1] 1478 	clr	(0x5f, sp)
      00073C 0F 60            [ 1] 1479 	clr	(0x60, sp)
      00073E 0F 61            [ 1] 1480 	clr	(0x61, sp)
      000740 0F 62            [ 1] 1481 	clr	(0x62, sp)
      000742 0F 63            [ 1] 1482 	clr	(0x63, sp)
      000744 0F 64            [ 1] 1483 	clr	(0x64, sp)
      000746 0F 65            [ 1] 1484 	clr	(0x65, sp)
      000748 0F 66            [ 1] 1485 	clr	(0x66, sp)
      00074A 0F 67            [ 1] 1486 	clr	(0x67, sp)
      00074C 0F 68            [ 1] 1487 	clr	(0x68, sp)
      00074E 0F 69            [ 1] 1488 	clr	(0x69, sp)
      000750 0F 6A            [ 1] 1489 	clr	(0x6a, sp)
      000752 0F 6B            [ 1] 1490 	clr	(0x6b, sp)
      000754 0F 6C            [ 1] 1491 	clr	(0x6c, sp)
      000756 0F 6D            [ 1] 1492 	clr	(0x6d, sp)
      000758 0F 6E            [ 1] 1493 	clr	(0x6e, sp)
      00075A 0F 6F            [ 1] 1494 	clr	(0x6f, sp)
      00075C 0F 70            [ 1] 1495 	clr	(0x70, sp)
      00075E 0F 71            [ 1] 1496 	clr	(0x71, sp)
      000760 0F 72            [ 1] 1497 	clr	(0x72, sp)
      000762 0F 73            [ 1] 1498 	clr	(0x73, sp)
      000764 0F 74            [ 1] 1499 	clr	(0x74, sp)
      000766 0F 75            [ 1] 1500 	clr	(0x75, sp)
      000768 0F 76            [ 1] 1501 	clr	(0x76, sp)
      00076A 0F 77            [ 1] 1502 	clr	(0x77, sp)
      00076C 0F 78            [ 1] 1503 	clr	(0x78, sp)
      00076E 0F 79            [ 1] 1504 	clr	(0x79, sp)
      000770 0F 7A            [ 1] 1505 	clr	(0x7a, sp)
      000772 0F 7B            [ 1] 1506 	clr	(0x7b, sp)
      000774 0F 7C            [ 1] 1507 	clr	(0x7c, sp)
      000776 0F 7D            [ 1] 1508 	clr	(0x7d, sp)
      000778 0F 7E            [ 1] 1509 	clr	(0x7e, sp)
      00077A 0F 7F            [ 1] 1510 	clr	(0x7f, sp)
      00077C 0F 80            [ 1] 1511 	clr	(0x80, sp)
      00077E 0F 81            [ 1] 1512 	clr	(0x81, sp)
                                   1513 ;	main.c: 121: display_set_params_to_write();
      000780 CDr04r71         [ 4] 1514 	call	_display_set_params_to_write
                                   1515 ;	main.c: 123: for(int i = 0;i<4;i++)
      000783 4F               [ 1] 1516 	clr	a
      000784                       1517 00103$:
      000784 A1 04            [ 1] 1518 	cp	a, #0x04
      000786 24 10            [ 1] 1519 	jrnc	00105$
                                   1520 ;	main.c: 124: i2c_write(I2C_DISPLAY_ADDR,129,clean_buf);
      000788 88               [ 1] 1521 	push	a
      000789 96               [ 1] 1522 	ldw	x, sp
      00078A 5C               [ 1] 1523 	incw	x
      00078B 5C               [ 1] 1524 	incw	x
      00078C 89               [ 2] 1525 	pushw	x
      00078D 4B 81            [ 1] 1526 	push	#0x81
      00078F A6 3C            [ 1] 1527 	ld	a, #0x3c
      000791 CDr02rC9         [ 4] 1528 	call	_i2c_write
      000794 84               [ 1] 1529 	pop	a
                                   1530 ;	main.c: 123: for(int i = 0;i<4;i++)
      000795 4C               [ 1] 1531 	inc	a
      000796 20 EC            [ 2] 1532 	jra	00103$
      000798                       1533 00105$:
                                   1534 ;	main.c: 126: }
      000798 5B 81            [ 2] 1535 	addw	sp, #129
      00079A 81               [ 4] 1536 	ret
                                   1537 ;	main.c: 128: void gg(void)
                                   1538 ;	-----------------------------------------
                                   1539 ;	 function gg
                                   1540 ;	-----------------------------------------
      00079B                       1541 _gg:
                                   1542 ;	main.c: 130: display_init();
      00079B CDr03r8E         [ 4] 1543 	call	_display_init
                                   1544 ;	main.c: 131: display_clean();
      00079E CDr06r7A         [ 4] 1545 	call	_display_clean
                                   1546 ;	main.c: 132: display_buffer_fill_entire(splash);
      0007A1 AEr00r01         [ 2] 1547 	ldw	x, #(_splash+0)
                                   1548 ;	main.c: 133: }
      0007A4 CCr04rE2         [ 2] 1549 	jp	_display_buffer_fill_entire
                                   1550 ;	main.c: 135: int main(void)
                                   1551 ;	-----------------------------------------
                                   1552 ;	 function main
                                   1553 ;	-----------------------------------------
      0007A7                       1554 _main:
                                   1555 ;	main.c: 137: setup();
      0007A7 CDr03r2C         [ 4] 1556 	call	_setup
                                   1557 ;	main.c: 138: gg();
      0007AA CDr07r9B         [ 4] 1558 	call	_gg
                                   1559 ;	main.c: 139: while(1);
      0007AD                       1560 00102$:
      0007AD 20 FE            [ 2] 1561 	jra	00102$
                                   1562 ;	main.c: 140: }
      0007AF 81               [ 4] 1563 	ret
                                   1564 	.area CODE
                                   1565 	.area CONST
                                   1566 	.area CONST
      000000                       1567 ___str_0:
      000000 72 78 5F 62 75 66 5F  1568 	.ascii "rx_buf_pointer"
             70 6F 69 6E 74 65 72
      00000E 0A                    1569 	.db 0x0a
      00000F 00                    1570 	.db 0x00
                                   1571 	.area CODE
                                   1572 	.area CONST
      000010                       1573 ___str_1:
      000010 62 75 66 5F 70 6F 73  1574 	.ascii "buf_pos"
      000017 0A                    1575 	.db 0x0a
      000018 00                    1576 	.db 0x00
                                   1577 	.area CODE
                                   1578 	.area CONST
      000019                       1579 ___str_2:
      000019 62 75 66 5F 73 69 7A  1580 	.ascii "buf_size"
             65
      000021 0A                    1581 	.db 0x0a
      000022 00                    1582 	.db 0x00
                                   1583 	.area CODE
                                   1584 	.area CONST
      000023                       1585 ___str_3:
      000023 52 49 45 4E           1586 	.ascii "RIEN"
      000027 0A                    1587 	.db 0x0a
      000028 00                    1588 	.db 0x00
                                   1589 	.area CODE
                                   1590 	.area INITIALIZER
      000000                       1591 __xinit__I2C_IRQ:
      000000 00                    1592 	.db #0x00	; 0
      000001                       1593 __xinit__splash:
      000001 FF                    1594 	.db #0xff	; 255
      000002 FF                    1595 	.db #0xff	; 255
      000003 FF                    1596 	.db #0xff	; 255
      000004 FF                    1597 	.db #0xff	; 255
      000005 FF                    1598 	.db #0xff	; 255
      000006 FF                    1599 	.db #0xff	; 255
      000007 FF                    1600 	.db #0xff	; 255
      000008 FF                    1601 	.db #0xff	; 255
      000009 FF                    1602 	.db #0xff	; 255
      00000A FF                    1603 	.db #0xff	; 255
      00000B FF                    1604 	.db #0xff	; 255
      00000C FF                    1605 	.db #0xff	; 255
      00000D FF                    1606 	.db #0xff	; 255
      00000E FF                    1607 	.db #0xff	; 255
      00000F FF                    1608 	.db #0xff	; 255
      000010 FF                    1609 	.db #0xff	; 255
      000011 80                    1610 	.db #0x80	; 128
      000012 00                    1611 	.db #0x00	; 0
      000013 00                    1612 	.db #0x00	; 0
      000014 00                    1613 	.db #0x00	; 0
      000015 00                    1614 	.db #0x00	; 0
      000016 00                    1615 	.db #0x00	; 0
      000017 00                    1616 	.db #0x00	; 0
      000018 00                    1617 	.db #0x00	; 0
      000019 00                    1618 	.db #0x00	; 0
      00001A 00                    1619 	.db #0x00	; 0
      00001B 00                    1620 	.db #0x00	; 0
      00001C 00                    1621 	.db #0x00	; 0
      00001D 00                    1622 	.db #0x00	; 0
      00001E 00                    1623 	.db #0x00	; 0
      00001F 00                    1624 	.db #0x00	; 0
      000020 01                    1625 	.db #0x01	; 1
      000021 80                    1626 	.db #0x80	; 128
      000022 FE                    1627 	.db #0xfe	; 254
      000023 03                    1628 	.db #0x03	; 3
      000024 FF                    1629 	.db #0xff	; 255
      000025 FF                    1630 	.db #0xff	; 255
      000026 FF                    1631 	.db #0xff	; 255
      000027 FF                    1632 	.db #0xff	; 255
      000028 80                    1633 	.db #0x80	; 128
      000029 FF                    1634 	.db #0xff	; 255
      00002A FF                    1635 	.db #0xff	; 255
      00002B F8                    1636 	.db #0xf8	; 248
      00002C 00                    1637 	.db #0x00	; 0
      00002D 1D                    1638 	.db #0x1d	; 29
      00002E 1D                    1639 	.db #0x1d	; 29
      00002F 5C                    1640 	.db #0x5c	; 92
      000030 ED                    1641 	.db #0xed	; 237
      000031 80                    1642 	.db #0x80	; 128
      000032 FE                    1643 	.db #0xfe	; 254
      000033 03                    1644 	.db #0x03	; 3
      000034 FF                    1645 	.db #0xff	; 255
      000035 FF                    1646 	.db #0xff	; 255
      000036 FF                    1647 	.db #0xff	; 255
      000037 FF                    1648 	.db #0xff	; 255
      000038 80                    1649 	.db #0x80	; 128
      000039 FF                    1650 	.db #0xff	; 255
      00003A FF                    1651 	.db #0xff	; 255
      00003B F8                    1652 	.db #0xf8	; 248
      00003C 00                    1653 	.db #0x00	; 0
      00003D 15                    1654 	.db #0x15	; 21
      00003E 15                    1655 	.db #0x15	; 21
      00003F 54                    1656 	.db #0x54	; 84	'T'
      000040 A5                    1657 	.db #0xa5	; 165
      000041 80                    1658 	.db #0x80	; 128
      000042 FE                    1659 	.db #0xfe	; 254
      000043 03                    1660 	.db #0x03	; 3
      000044 FF                    1661 	.db #0xff	; 255
      000045 FF                    1662 	.db #0xff	; 255
      000046 FF                    1663 	.db #0xff	; 255
      000047 FF                    1664 	.db #0xff	; 255
      000048 80                    1665 	.db #0x80	; 128
      000049 FF                    1666 	.db #0xff	; 255
      00004A FF                    1667 	.db #0xff	; 255
      00004B F8                    1668 	.db #0xf8	; 248
      00004C 00                    1669 	.db #0x00	; 0
      00004D 1D                    1670 	.db #0x1d	; 29
      00004E 1D                    1671 	.db #0x1d	; 29
      00004F DC                    1672 	.db #0xdc	; 220
      000050 A5                    1673 	.db #0xa5	; 165
      000051 80                    1674 	.db #0x80	; 128
      000052 FE                    1675 	.db #0xfe	; 254
      000053 03                    1676 	.db #0x03	; 3
      000054 FF                    1677 	.db #0xff	; 255
      000055 FF                    1678 	.db #0xff	; 255
      000056 FF                    1679 	.db #0xff	; 255
      000057 FF                    1680 	.db #0xff	; 255
      000058 80                    1681 	.db #0x80	; 128
      000059 FF                    1682 	.db #0xff	; 255
      00005A FF                    1683 	.db #0xff	; 255
      00005B F8                    1684 	.db #0xf8	; 248
      00005C 00                    1685 	.db #0x00	; 0
      00005D 15                    1686 	.db #0x15	; 21
      00005E D1                    1687 	.db #0xd1	; 209
      00005F 54                    1688 	.db #0x54	; 84	'T'
      000060 E5                    1689 	.db #0xe5	; 229
      000061 80                    1690 	.db #0x80	; 128
      000062 FE                    1691 	.db #0xfe	; 254
      000063 03                    1692 	.db #0x03	; 3
      000064 FF                    1693 	.db #0xff	; 255
      000065 FF                    1694 	.db #0xff	; 255
      000066 FF                    1695 	.db #0xff	; 255
      000067 FF                    1696 	.db #0xff	; 255
      000068 80                    1697 	.db #0x80	; 128
      000069 FF                    1698 	.db #0xff	; 255
      00006A FF                    1699 	.db #0xff	; 255
      00006B F8                    1700 	.db #0xf8	; 248
      00006C 00                    1701 	.db #0x00	; 0
      00006D 00                    1702 	.db #0x00	; 0
      00006E 00                    1703 	.db #0x00	; 0
      00006F 00                    1704 	.db #0x00	; 0
      000070 01                    1705 	.db #0x01	; 1
      000071 80                    1706 	.db #0x80	; 128
      000072 FE                    1707 	.db #0xfe	; 254
      000073 03                    1708 	.db #0x03	; 3
      000074 FF                    1709 	.db #0xff	; 255
      000075 FF                    1710 	.db #0xff	; 255
      000076 FF                    1711 	.db #0xff	; 255
      000077 FF                    1712 	.db #0xff	; 255
      000078 80                    1713 	.db #0x80	; 128
      000079 FF                    1714 	.db #0xff	; 255
      00007A FF                    1715 	.db #0xff	; 255
      00007B F8                    1716 	.db #0xf8	; 248
      00007C 00                    1717 	.db #0x00	; 0
      00007D 00                    1718 	.db #0x00	; 0
      00007E 00                    1719 	.db #0x00	; 0
      00007F 00                    1720 	.db #0x00	; 0
      000080 01                    1721 	.db #0x01	; 1
      000081 80                    1722 	.db #0x80	; 128
      000082 FE                    1723 	.db #0xfe	; 254
      000083 03                    1724 	.db #0x03	; 3
      000084 FF                    1725 	.db #0xff	; 255
      000085 FF                    1726 	.db #0xff	; 255
      000086 FF                    1727 	.db #0xff	; 255
      000087 FF                    1728 	.db #0xff	; 255
      000088 80                    1729 	.db #0x80	; 128
      000089 FF                    1730 	.db #0xff	; 255
      00008A FF                    1731 	.db #0xff	; 255
      00008B F8                    1732 	.db #0xf8	; 248
      00008C 00                    1733 	.db #0x00	; 0
      00008D 00                    1734 	.db #0x00	; 0
      00008E 00                    1735 	.db #0x00	; 0
      00008F 00                    1736 	.db #0x00	; 0
      000090 01                    1737 	.db #0x01	; 1
      000091 80                    1738 	.db #0x80	; 128
      000092 FF                    1739 	.db #0xff	; 255
      000093 FF                    1740 	.db #0xff	; 255
      000094 F8                    1741 	.db #0xf8	; 248
      000095 0F                    1742 	.db #0x0f	; 15
      000096 E0                    1743 	.db #0xe0	; 224
      000097 3F                    1744 	.db #0x3f	; 63
      000098 80                    1745 	.db #0x80	; 128
      000099 FE                    1746 	.db #0xfe	; 254
      00009A 03                    1747 	.db #0x03	; 3
      00009B F8                    1748 	.db #0xf8	; 248
      00009C 00                    1749 	.db #0x00	; 0
      00009D 00                    1750 	.db #0x00	; 0
      00009E 00                    1751 	.db #0x00	; 0
      00009F 00                    1752 	.db #0x00	; 0
      0000A0 01                    1753 	.db #0x01	; 1
      0000A1 80                    1754 	.db #0x80	; 128
      0000A2 FF                    1755 	.db #0xff	; 255
      0000A3 FF                    1756 	.db #0xff	; 255
      0000A4 F8                    1757 	.db #0xf8	; 248
      0000A5 0F                    1758 	.db #0x0f	; 15
      0000A6 E0                    1759 	.db #0xe0	; 224
      0000A7 3F                    1760 	.db #0x3f	; 63
      0000A8 80                    1761 	.db #0x80	; 128
      0000A9 FE                    1762 	.db #0xfe	; 254
      0000AA 03                    1763 	.db #0x03	; 3
      0000AB F8                    1764 	.db #0xf8	; 248
      0000AC 00                    1765 	.db #0x00	; 0
      0000AD 00                    1766 	.db #0x00	; 0
      0000AE 00                    1767 	.db #0x00	; 0
      0000AF 00                    1768 	.db #0x00	; 0
      0000B0 01                    1769 	.db #0x01	; 1
      0000B1 80                    1770 	.db #0x80	; 128
      0000B2 FF                    1771 	.db #0xff	; 255
      0000B3 FF                    1772 	.db #0xff	; 255
      0000B4 F8                    1773 	.db #0xf8	; 248
      0000B5 0F                    1774 	.db #0x0f	; 15
      0000B6 E0                    1775 	.db #0xe0	; 224
      0000B7 3F                    1776 	.db #0x3f	; 63
      0000B8 80                    1777 	.db #0x80	; 128
      0000B9 FE                    1778 	.db #0xfe	; 254
      0000BA 03                    1779 	.db #0x03	; 3
      0000BB F8                    1780 	.db #0xf8	; 248
      0000BC 00                    1781 	.db #0x00	; 0
      0000BD 00                    1782 	.db #0x00	; 0
      0000BE 00                    1783 	.db #0x00	; 0
      0000BF 00                    1784 	.db #0x00	; 0
      0000C0 01                    1785 	.db #0x01	; 1
      0000C1 80                    1786 	.db #0x80	; 128
      0000C2 FF                    1787 	.db #0xff	; 255
      0000C3 FF                    1788 	.db #0xff	; 255
      0000C4 F8                    1789 	.db #0xf8	; 248
      0000C5 0F                    1790 	.db #0x0f	; 15
      0000C6 E0                    1791 	.db #0xe0	; 224
      0000C7 3F                    1792 	.db #0x3f	; 63
      0000C8 80                    1793 	.db #0x80	; 128
      0000C9 FE                    1794 	.db #0xfe	; 254
      0000CA 03                    1795 	.db #0x03	; 3
      0000CB F8                    1796 	.db #0xf8	; 248
      0000CC 00                    1797 	.db #0x00	; 0
      0000CD 00                    1798 	.db #0x00	; 0
      0000CE 00                    1799 	.db #0x00	; 0
      0000CF 00                    1800 	.db #0x00	; 0
      0000D0 01                    1801 	.db #0x01	; 1
      0000D1 80                    1802 	.db #0x80	; 128
      0000D2 FF                    1803 	.db #0xff	; 255
      0000D3 FF                    1804 	.db #0xff	; 255
      0000D4 F8                    1805 	.db #0xf8	; 248
      0000D5 0F                    1806 	.db #0x0f	; 15
      0000D6 E0                    1807 	.db #0xe0	; 224
      0000D7 3F                    1808 	.db #0x3f	; 63
      0000D8 80                    1809 	.db #0x80	; 128
      0000D9 FE                    1810 	.db #0xfe	; 254
      0000DA 03                    1811 	.db #0x03	; 3
      0000DB F8                    1812 	.db #0xf8	; 248
      0000DC 00                    1813 	.db #0x00	; 0
      0000DD 00                    1814 	.db #0x00	; 0
      0000DE 00                    1815 	.db #0x00	; 0
      0000DF 00                    1816 	.db #0x00	; 0
      0000E0 01                    1817 	.db #0x01	; 1
      0000E1 80                    1818 	.db #0x80	; 128
      0000E2 FF                    1819 	.db #0xff	; 255
      0000E3 FF                    1820 	.db #0xff	; 255
      0000E4 F8                    1821 	.db #0xf8	; 248
      0000E5 0F                    1822 	.db #0x0f	; 15
      0000E6 E0                    1823 	.db #0xe0	; 224
      0000E7 3F                    1824 	.db #0x3f	; 63
      0000E8 80                    1825 	.db #0x80	; 128
      0000E9 FE                    1826 	.db #0xfe	; 254
      0000EA 03                    1827 	.db #0x03	; 3
      0000EB F8                    1828 	.db #0xf8	; 248
      0000EC 00                    1829 	.db #0x00	; 0
      0000ED 00                    1830 	.db #0x00	; 0
      0000EE 00                    1831 	.db #0x00	; 0
      0000EF 00                    1832 	.db #0x00	; 0
      0000F0 01                    1833 	.db #0x01	; 1
      0000F1 80                    1834 	.db #0x80	; 128
      0000F2 FF                    1835 	.db #0xff	; 255
      0000F3 FF                    1836 	.db #0xff	; 255
      0000F4 F8                    1837 	.db #0xf8	; 248
      0000F5 0F                    1838 	.db #0x0f	; 15
      0000F6 E0                    1839 	.db #0xe0	; 224
      0000F7 3F                    1840 	.db #0x3f	; 63
      0000F8 80                    1841 	.db #0x80	; 128
      0000F9 FE                    1842 	.db #0xfe	; 254
      0000FA 03                    1843 	.db #0x03	; 3
      0000FB F8                    1844 	.db #0xf8	; 248
      0000FC 00                    1845 	.db #0x00	; 0
      0000FD 00                    1846 	.db #0x00	; 0
      0000FE 00                    1847 	.db #0x00	; 0
      0000FF 00                    1848 	.db #0x00	; 0
      000100 01                    1849 	.db #0x01	; 1
      000101 80                    1850 	.db #0x80	; 128
      000102 FE                    1851 	.db #0xfe	; 254
      000103 03                    1852 	.db #0x03	; 3
      000104 F8                    1853 	.db #0xf8	; 248
      000105 0F                    1854 	.db #0x0f	; 15
      000106 E0                    1855 	.db #0xe0	; 224
      000107 3F                    1856 	.db #0x3f	; 63
      000108 FF                    1857 	.db #0xff	; 255
      000109 FF                    1858 	.db #0xff	; 255
      00010A FC                    1859 	.db #0xfc	; 252
      00010B 00                    1860 	.db #0x00	; 0
      00010C 00                    1861 	.db #0x00	; 0
      00010D 00                    1862 	.db #0x00	; 0
      00010E 00                    1863 	.db #0x00	; 0
      00010F 00                    1864 	.db #0x00	; 0
      000110 01                    1865 	.db #0x01	; 1
      000111 80                    1866 	.db #0x80	; 128
      000112 FE                    1867 	.db #0xfe	; 254
      000113 03                    1868 	.db #0x03	; 3
      000114 F8                    1869 	.db #0xf8	; 248
      000115 0F                    1870 	.db #0x0f	; 15
      000116 E0                    1871 	.db #0xe0	; 224
      000117 3F                    1872 	.db #0x3f	; 63
      000118 FF                    1873 	.db #0xff	; 255
      000119 FF                    1874 	.db #0xff	; 255
      00011A FC                    1875 	.db #0xfc	; 252
      00011B 00                    1876 	.db #0x00	; 0
      00011C 00                    1877 	.db #0x00	; 0
      00011D 00                    1878 	.db #0x00	; 0
      00011E 00                    1879 	.db #0x00	; 0
      00011F 00                    1880 	.db #0x00	; 0
      000120 01                    1881 	.db #0x01	; 1
      000121 80                    1882 	.db #0x80	; 128
      000122 FE                    1883 	.db #0xfe	; 254
      000123 03                    1884 	.db #0x03	; 3
      000124 F8                    1885 	.db #0xf8	; 248
      000125 0F                    1886 	.db #0x0f	; 15
      000126 E0                    1887 	.db #0xe0	; 224
      000127 3F                    1888 	.db #0x3f	; 63
      000128 FF                    1889 	.db #0xff	; 255
      000129 FF                    1890 	.db #0xff	; 255
      00012A FC                    1891 	.db #0xfc	; 252
      00012B 00                    1892 	.db #0x00	; 0
      00012C 00                    1893 	.db #0x00	; 0
      00012D 00                    1894 	.db #0x00	; 0
      00012E 00                    1895 	.db #0x00	; 0
      00012F 00                    1896 	.db #0x00	; 0
      000130 01                    1897 	.db #0x01	; 1
      000131 80                    1898 	.db #0x80	; 128
      000132 FE                    1899 	.db #0xfe	; 254
      000133 03                    1900 	.db #0x03	; 3
      000134 F8                    1901 	.db #0xf8	; 248
      000135 0F                    1902 	.db #0x0f	; 15
      000136 E0                    1903 	.db #0xe0	; 224
      000137 3F                    1904 	.db #0x3f	; 63
      000138 FF                    1905 	.db #0xff	; 255
      000139 FF                    1906 	.db #0xff	; 255
      00013A FC                    1907 	.db #0xfc	; 252
      00013B 00                    1908 	.db #0x00	; 0
      00013C 00                    1909 	.db #0x00	; 0
      00013D 00                    1910 	.db #0x00	; 0
      00013E 00                    1911 	.db #0x00	; 0
      00013F 00                    1912 	.db #0x00	; 0
      000140 01                    1913 	.db #0x01	; 1
      000141 80                    1914 	.db #0x80	; 128
      000142 FE                    1915 	.db #0xfe	; 254
      000143 03                    1916 	.db #0x03	; 3
      000144 F8                    1917 	.db #0xf8	; 248
      000145 0F                    1918 	.db #0x0f	; 15
      000146 E0                    1919 	.db #0xe0	; 224
      000147 3F                    1920 	.db #0x3f	; 63
      000148 FF                    1921 	.db #0xff	; 255
      000149 FF                    1922 	.db #0xff	; 255
      00014A FC                    1923 	.db #0xfc	; 252
      00014B 00                    1924 	.db #0x00	; 0
      00014C 00                    1925 	.db #0x00	; 0
      00014D 00                    1926 	.db #0x00	; 0
      00014E 00                    1927 	.db #0x00	; 0
      00014F 00                    1928 	.db #0x00	; 0
      000150 01                    1929 	.db #0x01	; 1
      000151 80                    1930 	.db #0x80	; 128
      000152 FE                    1931 	.db #0xfe	; 254
      000153 03                    1932 	.db #0x03	; 3
      000154 F8                    1933 	.db #0xf8	; 248
      000155 0F                    1934 	.db #0x0f	; 15
      000156 E0                    1935 	.db #0xe0	; 224
      000157 3F                    1936 	.db #0x3f	; 63
      000158 FF                    1937 	.db #0xff	; 255
      000159 FF                    1938 	.db #0xff	; 255
      00015A FC                    1939 	.db #0xfc	; 252
      00015B 00                    1940 	.db #0x00	; 0
      00015C 00                    1941 	.db #0x00	; 0
      00015D 00                    1942 	.db #0x00	; 0
      00015E 00                    1943 	.db #0x00	; 0
      00015F 00                    1944 	.db #0x00	; 0
      000160 01                    1945 	.db #0x01	; 1
      000161 80                    1946 	.db #0x80	; 128
      000162 FE                    1947 	.db #0xfe	; 254
      000163 03                    1948 	.db #0x03	; 3
      000164 F8                    1949 	.db #0xf8	; 248
      000165 0F                    1950 	.db #0x0f	; 15
      000166 E0                    1951 	.db #0xe0	; 224
      000167 3F                    1952 	.db #0x3f	; 63
      000168 FF                    1953 	.db #0xff	; 255
      000169 FF                    1954 	.db #0xff	; 255
      00016A FC                    1955 	.db #0xfc	; 252
      00016B 00                    1956 	.db #0x00	; 0
      00016C 00                    1957 	.db #0x00	; 0
      00016D 00                    1958 	.db #0x00	; 0
      00016E 00                    1959 	.db #0x00	; 0
      00016F 00                    1960 	.db #0x00	; 0
      000170 01                    1961 	.db #0x01	; 1
      000171 80                    1962 	.db #0x80	; 128
      000172 FE                    1963 	.db #0xfe	; 254
      000173 03                    1964 	.db #0x03	; 3
      000174 F8                    1965 	.db #0xf8	; 248
      000175 0F                    1966 	.db #0x0f	; 15
      000176 E0                    1967 	.db #0xe0	; 224
      000177 3F                    1968 	.db #0x3f	; 63
      000178 80                    1969 	.db #0x80	; 128
      000179 FE                    1970 	.db #0xfe	; 254
      00017A 03                    1971 	.db #0x03	; 3
      00017B F8                    1972 	.db #0xf8	; 248
      00017C FE                    1973 	.db #0xfe	; 254
      00017D 00                    1974 	.db #0x00	; 0
      00017E 00                    1975 	.db #0x00	; 0
      00017F 00                    1976 	.db #0x00	; 0
      000180 01                    1977 	.db #0x01	; 1
      000181 80                    1978 	.db #0x80	; 128
      000182 FE                    1979 	.db #0xfe	; 254
      000183 03                    1980 	.db #0x03	; 3
      000184 F8                    1981 	.db #0xf8	; 248
      000185 0F                    1982 	.db #0x0f	; 15
      000186 E0                    1983 	.db #0xe0	; 224
      000187 3F                    1984 	.db #0x3f	; 63
      000188 80                    1985 	.db #0x80	; 128
      000189 FE                    1986 	.db #0xfe	; 254
      00018A 03                    1987 	.db #0x03	; 3
      00018B F8                    1988 	.db #0xf8	; 248
      00018C FE                    1989 	.db #0xfe	; 254
      00018D 7C                    1990 	.db #0x7c	; 124
      00018E 7E                    1991 	.db #0x7e	; 126
      00018F 00                    1992 	.db #0x00	; 0
      000190 01                    1993 	.db #0x01	; 1
      000191 80                    1994 	.db #0x80	; 128
      000192 FE                    1995 	.db #0xfe	; 254
      000193 03                    1996 	.db #0x03	; 3
      000194 F8                    1997 	.db #0xf8	; 248
      000195 0F                    1998 	.db #0x0f	; 15
      000196 E0                    1999 	.db #0xe0	; 224
      000197 3F                    2000 	.db #0x3f	; 63
      000198 80                    2001 	.db #0x80	; 128
      000199 FE                    2002 	.db #0xfe	; 254
      00019A 03                    2003 	.db #0x03	; 3
      00019B F8                    2004 	.db #0xf8	; 248
      00019C 38                    2005 	.db #0x38	; 56	'8'
      00019D 7E                    2006 	.db #0x7e	; 126
      00019E 7E                    2007 	.db #0x7e	; 126
      00019F 00                    2008 	.db #0x00	; 0
      0001A0 01                    2009 	.db #0x01	; 1
      0001A1 80                    2010 	.db #0x80	; 128
      0001A2 FE                    2011 	.db #0xfe	; 254
      0001A3 03                    2012 	.db #0x03	; 3
      0001A4 F8                    2013 	.db #0xf8	; 248
      0001A5 0F                    2014 	.db #0x0f	; 15
      0001A6 E0                    2015 	.db #0xe0	; 224
      0001A7 3F                    2016 	.db #0x3f	; 63
      0001A8 80                    2017 	.db #0x80	; 128
      0001A9 FE                    2018 	.db #0xfe	; 254
      0001AA 03                    2019 	.db #0x03	; 3
      0001AB F8                    2020 	.db #0xf8	; 248
      0001AC 38                    2021 	.db #0x38	; 56	'8'
      0001AD 66                    2022 	.db #0x66	; 102	'f'
      0001AE 60                    2023 	.db #0x60	; 96
      0001AF 00                    2024 	.db #0x00	; 0
      0001B0 01                    2025 	.db #0x01	; 1
      0001B1 80                    2026 	.db #0x80	; 128
      0001B2 FE                    2027 	.db #0xfe	; 254
      0001B3 03                    2028 	.db #0x03	; 3
      0001B4 F8                    2029 	.db #0xf8	; 248
      0001B5 0F                    2030 	.db #0x0f	; 15
      0001B6 E0                    2031 	.db #0xe0	; 224
      0001B7 3F                    2032 	.db #0x3f	; 63
      0001B8 80                    2033 	.db #0x80	; 128
      0001B9 FE                    2034 	.db #0xfe	; 254
      0001BA 03                    2035 	.db #0x03	; 3
      0001BB F8                    2036 	.db #0xf8	; 248
      0001BC 38                    2037 	.db #0x38	; 56	'8'
      0001BD 66                    2038 	.db #0x66	; 102	'f'
      0001BE 60                    2039 	.db #0x60	; 96
      0001BF 00                    2040 	.db #0x00	; 0
      0001C0 01                    2041 	.db #0x01	; 1
      0001C1 80                    2042 	.db #0x80	; 128
      0001C2 FE                    2043 	.db #0xfe	; 254
      0001C3 03                    2044 	.db #0x03	; 3
      0001C4 F8                    2045 	.db #0xf8	; 248
      0001C5 0F                    2046 	.db #0x0f	; 15
      0001C6 E0                    2047 	.db #0xe0	; 224
      0001C7 3F                    2048 	.db #0x3f	; 63
      0001C8 80                    2049 	.db #0x80	; 128
      0001C9 FE                    2050 	.db #0xfe	; 254
      0001CA 03                    2051 	.db #0x03	; 3
      0001CB F8                    2052 	.db #0xf8	; 248
      0001CC FE                    2053 	.db #0xfe	; 254
      0001CD 66                    2054 	.db #0x66	; 102	'f'
      0001CE 7E                    2055 	.db #0x7e	; 126
      0001CF 18                    2056 	.db #0x18	; 24
      0001D0 01                    2057 	.db #0x01	; 1
      0001D1 80                    2058 	.db #0x80	; 128
      0001D2 FE                    2059 	.db #0xfe	; 254
      0001D3 03                    2060 	.db #0x03	; 3
      0001D4 F8                    2061 	.db #0xf8	; 248
      0001D5 0F                    2062 	.db #0x0f	; 15
      0001D6 E0                    2063 	.db #0xe0	; 224
      0001D7 3F                    2064 	.db #0x3f	; 63
      0001D8 80                    2065 	.db #0x80	; 128
      0001D9 FE                    2066 	.db #0xfe	; 254
      0001DA 03                    2067 	.db #0x03	; 3
      0001DB F8                    2068 	.db #0xf8	; 248
      0001DC FE                    2069 	.db #0xfe	; 254
      0001DD 66                    2070 	.db #0x66	; 102	'f'
      0001DE 7E                    2071 	.db #0x7e	; 126
      0001DF 18                    2072 	.db #0x18	; 24
      0001E0 01                    2073 	.db #0x01	; 1
      0001E1 80                    2074 	.db #0x80	; 128
      0001E2 00                    2075 	.db #0x00	; 0
      0001E3 00                    2076 	.db #0x00	; 0
      0001E4 00                    2077 	.db #0x00	; 0
      0001E5 00                    2078 	.db #0x00	; 0
      0001E6 00                    2079 	.db #0x00	; 0
      0001E7 00                    2080 	.db #0x00	; 0
      0001E8 00                    2081 	.db #0x00	; 0
      0001E9 00                    2082 	.db #0x00	; 0
      0001EA 00                    2083 	.db #0x00	; 0
      0001EB 00                    2084 	.db #0x00	; 0
      0001EC 00                    2085 	.db #0x00	; 0
      0001ED 00                    2086 	.db #0x00	; 0
      0001EE 00                    2087 	.db #0x00	; 0
      0001EF 00                    2088 	.db #0x00	; 0
      0001F0 01                    2089 	.db #0x01	; 1
      0001F1 FF                    2090 	.db #0xff	; 255
      0001F2 FF                    2091 	.db #0xff	; 255
      0001F3 FF                    2092 	.db #0xff	; 255
      0001F4 FF                    2093 	.db #0xff	; 255
      0001F5 FF                    2094 	.db #0xff	; 255
      0001F6 FF                    2095 	.db #0xff	; 255
      0001F7 FF                    2096 	.db #0xff	; 255
      0001F8 FF                    2097 	.db #0xff	; 255
      0001F9 FF                    2098 	.db #0xff	; 255
      0001FA FF                    2099 	.db #0xff	; 255
      0001FB FF                    2100 	.db #0xff	; 255
      0001FC FF                    2101 	.db #0xff	; 255
      0001FD FF                    2102 	.db #0xff	; 255
      0001FE FF                    2103 	.db #0xff	; 255
      0001FF FF                    2104 	.db #0xff	; 255
      000200 FF                    2105 	.db #0xff	; 255
                                   2106 	.area CABS (ABS)
