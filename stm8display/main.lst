                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _i2c_scan
                                     13 	.globl _i2c_read
                                     14 	.globl _i2c_write
                                     15 	.globl _i2c_send_address
                                     16 	.globl _i2c_stop
                                     17 	.globl _i2c_read_byte
                                     18 	.globl _i2c_send_byte
                                     19 	.globl _i2c_start
                                     20 	.globl _i2c_init
                                     21 	.globl _trash_clean
                                     22 	.globl _delay
                                     23 	.globl _uart_read
                                     24 	.globl _uart_write
                                     25 	.globl _uart_write_byte
                                     26 	.globl _uart_read_byte
                                     27 	.globl _uart_init
                                     28 ;--------------------------------------------------------
                                     29 ; ram data
                                     30 ;--------------------------------------------------------
                                     31 	.area DATA
                                     32 ;--------------------------------------------------------
                                     33 ; ram data
                                     34 ;--------------------------------------------------------
                                     35 	.area INITIALIZED
                                     36 ;--------------------------------------------------------
                                     37 ; Stack segment in internal ram
                                     38 ;--------------------------------------------------------
                                     39 	.area SSEG
      000000                         40 __start__stack:
      000000                         41 	.ds	1
                                     42 
                                     43 ;--------------------------------------------------------
                                     44 ; absolute external ram data
                                     45 ;--------------------------------------------------------
                                     46 	.area DABS (ABS)
                                     47 
                                     48 ; default segment ordering for linker
                                     49 	.area HOME
                                     50 	.area GSINIT
                                     51 	.area GSFINAL
                                     52 	.area CONST
                                     53 	.area INITIALIZER
                                     54 	.area CODE
                                     55 
                                     56 ;--------------------------------------------------------
                                     57 ; interrupt vector
                                     58 ;--------------------------------------------------------
                                     59 	.area HOME
      000000                         60 __interrupt_vect:
      000000 82v00u00u00             61 	int s_GSINIT ; reset
                                     62 ;--------------------------------------------------------
                                     63 ; global & static initialisations
                                     64 ;--------------------------------------------------------
                                     65 	.area HOME
                                     66 	.area GSINIT
                                     67 	.area GSFINAL
                                     68 	.area GSINIT
      000000 CDr00r00         [ 4]   69 	call	___sdcc_external_startup
      000003 4D               [ 1]   70 	tnz	a
      000004 27 03            [ 1]   71 	jreq	__sdcc_init_data
      000006 CCr00r04         [ 2]   72 	jp	__sdcc_program_startup
      000009                         73 __sdcc_init_data:
                                     74 ; stm8_genXINIT() start
      000009 AEr00r00         [ 2]   75 	ldw x, #l_DATA
      00000C 27 07            [ 1]   76 	jreq	00002$
      00000E                         77 00001$:
      00000E 72 4FuFFuFF      [ 1]   78 	clr (s_DATA - 1, x)
      000012 5A               [ 2]   79 	decw x
      000013 26 F9            [ 1]   80 	jrne	00001$
      000015                         81 00002$:
      000015 AEr00r00         [ 2]   82 	ldw	x, #l_INITIALIZER
      000018 27 09            [ 1]   83 	jreq	00004$
      00001A                         84 00003$:
      00001A D6uFFuFF         [ 1]   85 	ld	a, (s_INITIALIZER - 1, x)
      00001D D7uFFuFF         [ 1]   86 	ld	(s_INITIALIZED - 1, x), a
      000020 5A               [ 2]   87 	decw	x
      000021 26 F7            [ 1]   88 	jrne	00003$
      000023                         89 00004$:
                                     90 ; stm8_genXINIT() end
                                     91 	.area GSFINAL
      000000 CCr00r04         [ 2]   92 	jp	__sdcc_program_startup
                                     93 ;--------------------------------------------------------
                                     94 ; Home
                                     95 ;--------------------------------------------------------
                                     96 	.area HOME
                                     97 	.area HOME
      000004                         98 __sdcc_program_startup:
      000004 CCr02rFE         [ 2]   99 	jp	_main
                                    100 ;	return from main will return to caller
                                    101 ;--------------------------------------------------------
                                    102 ; code
                                    103 ;--------------------------------------------------------
                                    104 	.area CODE
                                    105 ;	libs/uart_lib.c: 3: void uart_init(unsigned int baudrate,uint8_t stopbit)
                                    106 ;	-----------------------------------------
                                    107 ;	 function uart_init
                                    108 ;	-----------------------------------------
      000000                        109 _uart_init:
      000000 52 02            [ 2]  110 	sub	sp, #2
      000002 1F 01            [ 2]  111 	ldw	(0x01, sp), x
                                    112 ;	libs/uart_lib.c: 7: UART1_CR2 -> TEN = 1; // Transmitter enable
      000004 AE 52 35         [ 2]  113 	ldw	x, #0x5235
      000007 88               [ 1]  114 	push	a
      000008 F6               [ 1]  115 	ld	a, (x)
      000009 AA 08            [ 1]  116 	or	a, #0x08
      00000B F7               [ 1]  117 	ld	(x), a
      00000C 84               [ 1]  118 	pop	a
                                    119 ;	libs/uart_lib.c: 8: UART1_CR2 -> REN = 1; // Receiver enable
      00000D AE 52 35         [ 2]  120 	ldw	x, #0x5235
      000010 88               [ 1]  121 	push	a
      000011 F6               [ 1]  122 	ld	a, (x)
      000012 AA 04            [ 1]  123 	or	a, #0x04
      000014 F7               [ 1]  124 	ld	(x), a
      000015 84               [ 1]  125 	pop	a
                                    126 ;	libs/uart_lib.c: 9: switch(stopbit)
      000016 A1 02            [ 1]  127 	cp	a, #0x02
      000018 27 06            [ 1]  128 	jreq	00101$
      00001A A1 03            [ 1]  129 	cp	a, #0x03
      00001C 27 0E            [ 1]  130 	jreq	00102$
      00001E 20 16            [ 2]  131 	jra	00103$
                                    132 ;	libs/uart_lib.c: 11: case 2:
      000020                        133 00101$:
                                    134 ;	libs/uart_lib.c: 12: UART1_CR3 -> STOP = 2;
      000020 C6 52 36         [ 1]  135 	ld	a, 0x5236
      000023 A4 CF            [ 1]  136 	and	a, #0xcf
      000025 AA 20            [ 1]  137 	or	a, #0x20
      000027 C7 52 36         [ 1]  138 	ld	0x5236, a
                                    139 ;	libs/uart_lib.c: 13: break;
      00002A 20 12            [ 2]  140 	jra	00104$
                                    141 ;	libs/uart_lib.c: 14: case 3:
      00002C                        142 00102$:
                                    143 ;	libs/uart_lib.c: 15: UART1_CR3 -> STOP = 3;
      00002C C6 52 36         [ 1]  144 	ld	a, 0x5236
      00002F AA 30            [ 1]  145 	or	a, #0x30
      000031 C7 52 36         [ 1]  146 	ld	0x5236, a
                                    147 ;	libs/uart_lib.c: 16: break;
      000034 20 08            [ 2]  148 	jra	00104$
                                    149 ;	libs/uart_lib.c: 17: default:
      000036                        150 00103$:
                                    151 ;	libs/uart_lib.c: 18: UART1_CR3 -> STOP = 0;
      000036 C6 52 36         [ 1]  152 	ld	a, 0x5236
      000039 A4 CF            [ 1]  153 	and	a, #0xcf
      00003B C7 52 36         [ 1]  154 	ld	0x5236, a
                                    155 ;	libs/uart_lib.c: 20: }
      00003E                        156 00104$:
                                    157 ;	libs/uart_lib.c: 21: switch(baudrate)
      00003E 1E 01            [ 2]  158 	ldw	x, (0x01, sp)
      000040 A3 08 00         [ 2]  159 	cpw	x, #0x0800
      000043 26 03            [ 1]  160 	jrne	00186$
      000045 CCr00rD1         [ 2]  161 	jp	00110$
      000048                        162 00186$:
      000048 1E 01            [ 2]  163 	ldw	x, (0x01, sp)
      00004A A3 09 60         [ 2]  164 	cpw	x, #0x0960
      00004D 27 28            [ 1]  165 	jreq	00105$
      00004F 1E 01            [ 2]  166 	ldw	x, (0x01, sp)
      000051 A3 10 00         [ 2]  167 	cpw	x, #0x1000
      000054 26 03            [ 1]  168 	jrne	00192$
      000056 CCr00rE1         [ 2]  169 	jp	00111$
      000059                        170 00192$:
      000059 1E 01            [ 2]  171 	ldw	x, (0x01, sp)
      00005B A3 4B 00         [ 2]  172 	cpw	x, #0x4b00
      00005E 27 31            [ 1]  173 	jreq	00106$
      000060 1E 01            [ 2]  174 	ldw	x, (0x01, sp)
      000062 A3 84 00         [ 2]  175 	cpw	x, #0x8400
      000065 27 5A            [ 1]  176 	jreq	00109$
      000067 1E 01            [ 2]  177 	ldw	x, (0x01, sp)
      000069 A3 C2 00         [ 2]  178 	cpw	x, #0xc200
      00006C 27 43            [ 1]  179 	jreq	00108$
      00006E 1E 01            [ 2]  180 	ldw	x, (0x01, sp)
      000070 A3 E1 00         [ 2]  181 	cpw	x, #0xe100
      000073 27 2C            [ 1]  182 	jreq	00107$
      000075 20 7A            [ 2]  183 	jra	00112$
                                    184 ;	libs/uart_lib.c: 23: case (unsigned int)2400:
      000077                        185 00105$:
                                    186 ;	libs/uart_lib.c: 24: UART1_BRR2 -> MSB = 0x01;
      000077 C6 52 33         [ 1]  187 	ld	a, 0x5233
      00007A A4 0F            [ 1]  188 	and	a, #0x0f
      00007C AA 10            [ 1]  189 	or	a, #0x10
      00007E C7 52 33         [ 1]  190 	ld	0x5233, a
                                    191 ;	libs/uart_lib.c: 25: UART1_BRR1 -> DIV = 0xA0;
      000081 35 A0 52 32      [ 1]  192 	mov	0x5232+0, #0xa0
                                    193 ;	libs/uart_lib.c: 26: UART1_BRR2 -> LSB = 0x0B; 
      000085 C6 52 33         [ 1]  194 	ld	a, 0x5233
      000088 A4 F0            [ 1]  195 	and	a, #0xf0
      00008A AA 0B            [ 1]  196 	or	a, #0x0b
      00008C C7 52 33         [ 1]  197 	ld	0x5233, a
                                    198 ;	libs/uart_lib.c: 27: break;
      00008F 20 6E            [ 2]  199 	jra	00114$
                                    200 ;	libs/uart_lib.c: 28: case (unsigned int)19200:
      000091                        201 00106$:
                                    202 ;	libs/uart_lib.c: 29: UART1_BRR1 -> DIV = 0x34;
      000091 35 34 52 32      [ 1]  203 	mov	0x5232+0, #0x34
                                    204 ;	libs/uart_lib.c: 30: UART1_BRR2 -> LSB = 0x01;
      000095 C6 52 33         [ 1]  205 	ld	a, 0x5233
      000098 A4 F0            [ 1]  206 	and	a, #0xf0
      00009A AA 01            [ 1]  207 	or	a, #0x01
      00009C C7 52 33         [ 1]  208 	ld	0x5233, a
                                    209 ;	libs/uart_lib.c: 31: break;
      00009F 20 5E            [ 2]  210 	jra	00114$
                                    211 ;	libs/uart_lib.c: 32: case (unsigned int)57600:
      0000A1                        212 00107$:
                                    213 ;	libs/uart_lib.c: 33: UART1_BRR1 -> DIV = 0x11;
      0000A1 35 11 52 32      [ 1]  214 	mov	0x5232+0, #0x11
                                    215 ;	libs/uart_lib.c: 34: UART1_BRR2 -> LSB = 0x06;
      0000A5 C6 52 33         [ 1]  216 	ld	a, 0x5233
      0000A8 A4 F0            [ 1]  217 	and	a, #0xf0
      0000AA AA 06            [ 1]  218 	or	a, #0x06
      0000AC C7 52 33         [ 1]  219 	ld	0x5233, a
                                    220 ;	libs/uart_lib.c: 35: break;
      0000AF 20 4E            [ 2]  221 	jra	00114$
                                    222 ;	libs/uart_lib.c: 36: case (unsigned int)115200:
      0000B1                        223 00108$:
                                    224 ;	libs/uart_lib.c: 37: UART1_BRR1 -> DIV = 0x08;
      0000B1 35 08 52 32      [ 1]  225 	mov	0x5232+0, #0x08
                                    226 ;	libs/uart_lib.c: 38: UART1_BRR2 -> LSB = 0x0B;
      0000B5 C6 52 33         [ 1]  227 	ld	a, 0x5233
      0000B8 A4 F0            [ 1]  228 	and	a, #0xf0
      0000BA AA 0B            [ 1]  229 	or	a, #0x0b
      0000BC C7 52 33         [ 1]  230 	ld	0x5233, a
                                    231 ;	libs/uart_lib.c: 39: break;
      0000BF 20 3E            [ 2]  232 	jra	00114$
                                    233 ;	libs/uart_lib.c: 40: case (unsigned int)230400:
      0000C1                        234 00109$:
                                    235 ;	libs/uart_lib.c: 41: UART1_BRR1 -> DIV = 0x04;
      0000C1 35 04 52 32      [ 1]  236 	mov	0x5232+0, #0x04
                                    237 ;	libs/uart_lib.c: 42: UART1_BRR2 -> LSB = 0x05;
      0000C5 C6 52 33         [ 1]  238 	ld	a, 0x5233
      0000C8 A4 F0            [ 1]  239 	and	a, #0xf0
      0000CA AA 05            [ 1]  240 	or	a, #0x05
      0000CC C7 52 33         [ 1]  241 	ld	0x5233, a
                                    242 ;	libs/uart_lib.c: 43: break;
      0000CF 20 2E            [ 2]  243 	jra	00114$
                                    244 ;	libs/uart_lib.c: 44: case (unsigned int)460800:
      0000D1                        245 00110$:
                                    246 ;	libs/uart_lib.c: 45: UART1_BRR1 -> DIV = 0x02;
      0000D1 35 02 52 32      [ 1]  247 	mov	0x5232+0, #0x02
                                    248 ;	libs/uart_lib.c: 46: UART1_BRR2 -> LSB = 0x03;
      0000D5 C6 52 33         [ 1]  249 	ld	a, 0x5233
      0000D8 A4 F0            [ 1]  250 	and	a, #0xf0
      0000DA AA 03            [ 1]  251 	or	a, #0x03
      0000DC C7 52 33         [ 1]  252 	ld	0x5233, a
                                    253 ;	libs/uart_lib.c: 47: break;
      0000DF 20 1E            [ 2]  254 	jra	00114$
                                    255 ;	libs/uart_lib.c: 48: case (unsigned int)921600:
      0000E1                        256 00111$:
                                    257 ;	libs/uart_lib.c: 49: UART1_BRR1 -> DIV = 0x01;
      0000E1 35 01 52 32      [ 1]  258 	mov	0x5232+0, #0x01
                                    259 ;	libs/uart_lib.c: 50: UART1_BRR2 -> LSB = 0x01;
      0000E5 C6 52 33         [ 1]  260 	ld	a, 0x5233
      0000E8 A4 F0            [ 1]  261 	and	a, #0xf0
      0000EA AA 01            [ 1]  262 	or	a, #0x01
      0000EC C7 52 33         [ 1]  263 	ld	0x5233, a
                                    264 ;	libs/uart_lib.c: 51: break;
      0000EF 20 0E            [ 2]  265 	jra	00114$
                                    266 ;	libs/uart_lib.c: 52: default:
      0000F1                        267 00112$:
                                    268 ;	libs/uart_lib.c: 53: UART1_BRR1 -> DIV = 0x68;
      0000F1 35 68 52 32      [ 1]  269 	mov	0x5232+0, #0x68
                                    270 ;	libs/uart_lib.c: 54: UART1_BRR2 -> LSB = 0x03;
      0000F5 C6 52 33         [ 1]  271 	ld	a, 0x5233
      0000F8 A4 F0            [ 1]  272 	and	a, #0xf0
      0000FA AA 03            [ 1]  273 	or	a, #0x03
      0000FC C7 52 33         [ 1]  274 	ld	0x5233, a
                                    275 ;	libs/uart_lib.c: 56: }
      0000FF                        276 00114$:
                                    277 ;	libs/uart_lib.c: 57: }
      0000FF 5B 02            [ 2]  278 	addw	sp, #2
      000101 81               [ 4]  279 	ret
                                    280 ;	libs/uart_lib.c: 59: int uart_read_byte(uint8_t *data)
                                    281 ;	-----------------------------------------
                                    282 ;	 function uart_read_byte
                                    283 ;	-----------------------------------------
      000102                        284 _uart_read_byte:
                                    285 ;	libs/uart_lib.c: 61: while(!(UART1_SR -> RXNE));
      000102                        286 00101$:
      000102 72 0B 52 30 FB   [ 2]  287 	btjf	0x5230, #5, 00101$
                                    288 ;	libs/uart_lib.c: 63: return 1;
      000107 5F               [ 1]  289 	clrw	x
      000108 5C               [ 1]  290 	incw	x
                                    291 ;	libs/uart_lib.c: 64: }
      000109 81               [ 4]  292 	ret
                                    293 ;	libs/uart_lib.c: 66: int uart_write_byte(uint8_t data)
                                    294 ;	-----------------------------------------
                                    295 ;	 function uart_write_byte
                                    296 ;	-----------------------------------------
      00010A                        297 _uart_write_byte:
                                    298 ;	libs/uart_lib.c: 68: UART1_DR -> DR = data;
      00010A C7 52 31         [ 1]  299 	ld	0x5231, a
                                    300 ;	libs/uart_lib.c: 69: while(!(UART1_SR -> TXE));
      00010D                        301 00101$:
      00010D 72 0F 52 30 FB   [ 2]  302 	btjf	0x5230, #7, 00101$
                                    303 ;	libs/uart_lib.c: 70: return 1;
      000112 5F               [ 1]  304 	clrw	x
      000113 5C               [ 1]  305 	incw	x
                                    306 ;	libs/uart_lib.c: 71: }
      000114 81               [ 4]  307 	ret
                                    308 ;	libs/uart_lib.c: 73: int uart_write(uint8_t *data_buf)
                                    309 ;	-----------------------------------------
                                    310 ;	 function uart_write
                                    311 ;	-----------------------------------------
      000115                        312 _uart_write:
      000115 52 04            [ 2]  313 	sub	sp, #4
      000117 1F 01            [ 2]  314 	ldw	(0x01, sp), x
                                    315 ;	libs/uart_lib.c: 75: int count = 0;
      000119 5F               [ 1]  316 	clrw	x
      00011A 1F 03            [ 2]  317 	ldw	(0x03, sp), x
                                    318 ;	libs/uart_lib.c: 76: for (int i = 0; data_buf[i] != '\0'; i++) // Цикл до нулевого терминатора
      00011C 5F               [ 1]  319 	clrw	x
      00011D                        320 00103$:
      00011D 90 93            [ 1]  321 	ldw	y, x
      00011F 72 F9 01         [ 2]  322 	addw	y, (0x01, sp)
      000122 90 F6            [ 1]  323 	ld	a, (y)
      000124 27 0E            [ 1]  324 	jreq	00101$
                                    325 ;	libs/uart_lib.c: 77: count += uart_write_byte(data_buf[i]);
      000126 89               [ 2]  326 	pushw	x
      000127 CDr01r0A         [ 4]  327 	call	_uart_write_byte
      00012A 51               [ 1]  328 	exgw	x, y
      00012B 85               [ 2]  329 	popw	x
      00012C 72 F9 03         [ 2]  330 	addw	y, (0x03, sp)
      00012F 17 03            [ 2]  331 	ldw	(0x03, sp), y
                                    332 ;	libs/uart_lib.c: 76: for (int i = 0; data_buf[i] != '\0'; i++) // Цикл до нулевого терминатора
      000131 5C               [ 1]  333 	incw	x
      000132 20 E9            [ 2]  334 	jra	00103$
      000134                        335 00101$:
                                    336 ;	libs/uart_lib.c: 78: return count;
      000134 1E 03            [ 2]  337 	ldw	x, (0x03, sp)
                                    338 ;	libs/uart_lib.c: 79: }
      000136 5B 04            [ 2]  339 	addw	sp, #4
      000138 81               [ 4]  340 	ret
                                    341 ;	libs/uart_lib.c: 80: int uart_read(uint8_t *data_buf)
                                    342 ;	-----------------------------------------
                                    343 ;	 function uart_read
                                    344 ;	-----------------------------------------
      000139                        345 _uart_read:
      000139 52 04            [ 2]  346 	sub	sp, #4
      00013B 1F 01            [ 2]  347 	ldw	(0x01, sp), x
                                    348 ;	libs/uart_lib.c: 82: int count = 0;
      00013D 5F               [ 1]  349 	clrw	x
      00013E 1F 03            [ 2]  350 	ldw	(0x03, sp), x
                                    351 ;	libs/uart_lib.c: 83: for (int i = 0; data_buf[i] != '\0'; i++) // Цикл до нулевого терминатора
      000140 5F               [ 1]  352 	clrw	x
      000141                        353 00103$:
      000141 90 93            [ 1]  354 	ldw	y, x
      000143 72 F9 01         [ 2]  355 	addw	y, (0x01, sp)
      000146 90 F6            [ 1]  356 	ld	a, (y)
      000148 27 13            [ 1]  357 	jreq	00101$
                                    358 ;	libs/uart_lib.c: 84: count += uart_read_byte((unsigned char *)data_buf[i]);
      00014A 90 5F            [ 1]  359 	clrw	y
      00014C 90 97            [ 1]  360 	ld	yl, a
      00014E 89               [ 2]  361 	pushw	x
      00014F 93               [ 1]  362 	ldw	x, y
      000150 CDr01r02         [ 4]  363 	call	_uart_read_byte
      000153 51               [ 1]  364 	exgw	x, y
      000154 85               [ 2]  365 	popw	x
      000155 72 F9 03         [ 2]  366 	addw	y, (0x03, sp)
      000158 17 03            [ 2]  367 	ldw	(0x03, sp), y
                                    368 ;	libs/uart_lib.c: 83: for (int i = 0; data_buf[i] != '\0'; i++) // Цикл до нулевого терминатора
      00015A 5C               [ 1]  369 	incw	x
      00015B 20 E4            [ 2]  370 	jra	00103$
      00015D                        371 00101$:
                                    372 ;	libs/uart_lib.c: 85: return count;
      00015D 1E 03            [ 2]  373 	ldw	x, (0x03, sp)
                                    374 ;	libs/uart_lib.c: 86: }
      00015F 5B 04            [ 2]  375 	addw	sp, #4
      000161 81               [ 4]  376 	ret
                                    377 ;	libs/i2c_lib.c: 10: void delay(uint16_t ticks)
                                    378 ;	-----------------------------------------
                                    379 ;	 function delay
                                    380 ;	-----------------------------------------
      000162                        381 _delay:
                                    382 ;	libs/i2c_lib.c: 12: while(ticks > 0)
      000162                        383 00101$:
      000162 5D               [ 2]  384 	tnzw	x
      000163 26 01            [ 1]  385 	jrne	00120$
      000165 81               [ 4]  386 	ret
      000166                        387 00120$:
                                    388 ;	libs/i2c_lib.c: 14: ticks-=2;
      000166 5A               [ 2]  389 	decw	x
      000167 5A               [ 2]  390 	decw	x
                                    391 ;	libs/i2c_lib.c: 15: ticks+=1;
      000168 5C               [ 1]  392 	incw	x
      000169 20 F7            [ 2]  393 	jra	00101$
                                    394 ;	libs/i2c_lib.c: 17: }
      00016B 81               [ 4]  395 	ret
                                    396 ;	libs/i2c_lib.c: 18: void trash_clean(void)
                                    397 ;	-----------------------------------------
                                    398 ;	 function trash_clean
                                    399 ;	-----------------------------------------
      00016C                        400 _trash_clean:
                                    401 ;	libs/i2c_lib.c: 23: trash_reg = (uint8_t)I2C_SR2;
                                    402 ;	libs/i2c_lib.c: 25: }
      00016C 81               [ 4]  403 	ret
                                    404 ;	libs/i2c_lib.c: 26: void i2c_init(void) {
                                    405 ;	-----------------------------------------
                                    406 ;	 function i2c_init
                                    407 ;	-----------------------------------------
      00016D                        408 _i2c_init:
                                    409 ;	libs/i2c_lib.c: 29: I2C_CR1 -> PE = 0;// PE=0, disable I2C before setup
      00016D 72 11 52 10      [ 1]  410 	bres	0x5210, #0
                                    411 ;	libs/i2c_lib.c: 30: I2C_FREQR -> FREQ = 16;// peripheral frequence =16MHz
      000171 C6 52 12         [ 1]  412 	ld	a, 0x5212
      000174 A4 C0            [ 1]  413 	and	a, #0xc0
      000176 AA 10            [ 1]  414 	or	a, #0x10
      000178 C7 52 12         [ 1]  415 	ld	0x5212, a
                                    416 ;	libs/i2c_lib.c: 31: I2C_CCRH -> CCR = 0;// =0
      00017B C6 52 1C         [ 1]  417 	ld	a, 0x521c
      00017E A4 F0            [ 1]  418 	and	a, #0xf0
      000180 C7 52 1C         [ 1]  419 	ld	0x521c, a
                                    420 ;	libs/i2c_lib.c: 32: I2C_CCRL -> CCR = 80;// 100kHz for I2C
      000183 35 50 52 1B      [ 1]  421 	mov	0x521b+0, #0x50
                                    422 ;	libs/i2c_lib.c: 33: I2C_CCRH -> FS = 0;// set standart mode(100кHz)
      000187 72 1F 52 1C      [ 1]  423 	bres	0x521c, #7
                                    424 ;	libs/i2c_lib.c: 34: I2C_OARH -> ADDMODE = 0;// 7-bit address mode
      00018B 72 1F 52 14      [ 1]  425 	bres	0x5214, #7
                                    426 ;	libs/i2c_lib.c: 35: I2C_OARH -> ADDCONF = 1;// see reference manual
      00018F 72 10 52 14      [ 1]  427 	bset	0x5214, #0
                                    428 ;	libs/i2c_lib.c: 36: I2C_CR1 -> PE = 1;// PE=1, enable I2C
      000193 72 10 52 10      [ 1]  429 	bset	0x5210, #0
                                    430 ;	libs/i2c_lib.c: 37: }
      000197 81               [ 4]  431 	ret
                                    432 ;	libs/i2c_lib.c: 39: void i2c_start(void) {
                                    433 ;	-----------------------------------------
                                    434 ;	 function i2c_start
                                    435 ;	-----------------------------------------
      000198                        436 _i2c_start:
                                    437 ;	libs/i2c_lib.c: 40: I2C_CR2 -> START = 1; // Отправляем стартовый сигнал
      000198 72 10 52 11      [ 1]  438 	bset	0x5211, #0
                                    439 ;	libs/i2c_lib.c: 41: while(!(I2C_SR1 -> SB));// Ожидание отправки стартового сигнала
      00019C                        440 00101$:
      00019C 72 01 52 17 FB   [ 2]  441 	btjf	0x5217, #0, 00101$
                                    442 ;	libs/i2c_lib.c: 42: }
      0001A1 81               [ 4]  443 	ret
                                    444 ;	libs/i2c_lib.c: 44: uint8_t i2c_send_byte(unsigned char data){
                                    445 ;	-----------------------------------------
                                    446 ;	 function i2c_send_byte
                                    447 ;	-----------------------------------------
      0001A2                        448 _i2c_send_byte:
      0001A2 88               [ 1]  449 	push	a
                                    450 ;	libs/i2c_lib.c: 45: uart_write("start send byte\n");
      0001A3 AEr00r00         [ 2]  451 	ldw	x, #(___str_0+0)
      0001A6 CDr01r15         [ 4]  452 	call	_uart_write
                                    453 ;	libs/i2c_lib.c: 48: trash_clean();
      0001A9 CDr01r6C         [ 4]  454 	call	_trash_clean
                                    455 ;	libs/i2c_lib.c: 49: uart_write("byte -");
      0001AC AEr00r11         [ 2]  456 	ldw	x, #(___str_1+0)
      0001AF CDr01r15         [ 4]  457 	call	_uart_write
                                    458 ;	libs/i2c_lib.c: 50: uart_write((unsigned char *)I2C_DR);
      0001B2 AE 52 16         [ 2]  459 	ldw	x, #0x5216
      0001B5 CDr01r15         [ 4]  460 	call	_uart_write
                                    461 ;	libs/i2c_lib.c: 51: uart_write("\n");
      0001B8 AEr00r18         [ 2]  462 	ldw	x, #(___str_2+0)
      0001BB CDr01r15         [ 4]  463 	call	_uart_write
                                    464 ;	libs/i2c_lib.c: 52: I2C_DR -> DR = 0x28;
      0001BE 35 28 52 16      [ 1]  465 	mov	0x5216+0, #0x28
                                    466 ;	libs/i2c_lib.c: 53: trash_clean();
      0001C2 CDr01r6C         [ 4]  467 	call	_trash_clean
                                    468 ;	libs/i2c_lib.c: 54: uart_write("byte send\n");
      0001C5 AEr00r1A         [ 2]  469 	ldw	x, #(___str_3+0)
      0001C8 CDr01r15         [ 4]  470 	call	_uart_write
                                    471 ;	libs/i2c_lib.c: 55: delay(500);
      0001CB AE 01 F4         [ 2]  472 	ldw	x, #0x01f4
      0001CE CDr01r62         [ 4]  473 	call	_delay
                                    474 ;	libs/i2c_lib.c: 57: trash_clean();
      0001D1 CDr01r6C         [ 4]  475 	call	_trash_clean
                                    476 ;	libs/i2c_lib.c: 59: int result = I2C_SR2 -> AF;
      0001D4 C6 52 18         [ 1]  477 	ld	a, 0x5218
      0001D7 44               [ 1]  478 	srl	a
      0001D8 44               [ 1]  479 	srl	a
      0001D9 A4 01            [ 1]  480 	and	a, #0x01
      0001DB 6B 01            [ 1]  481 	ld	(0x01, sp), a
                                    482 ;	libs/i2c_lib.c: 60: uart_write("DR byte\n");
      0001DD AEr00r25         [ 2]  483 	ldw	x, #(___str_4+0)
      0001E0 CDr01r15         [ 4]  484 	call	_uart_write
                                    485 ;	libs/i2c_lib.c: 64: uart_write("AF -> ");
      0001E3 AEr00r2E         [ 2]  486 	ldw	x, #(___str_5+0)
      0001E6 CDr01r15         [ 4]  487 	call	_uart_write
                                    488 ;	libs/i2c_lib.c: 65: uart_write((result ? "1" : "0"));
      0001E9 0D 01            [ 1]  489 	tnz	(0x01, sp)
      0001EB 27 04            [ 1]  490 	jreq	00103$
      0001ED AEr00r35         [ 2]  491 	ldw	x, #___str_6+0
      0001F0 BC                     492 	.byte 0xbc
      0001F1                        493 00103$:
      0001F1 AEr00r37         [ 2]  494 	ldw	x, #___str_7+0
      0001F4                        495 00104$:
      0001F4 CDr01r15         [ 4]  496 	call	_uart_write
                                    497 ;	libs/i2c_lib.c: 66: uart_write("\n");
      0001F7 AEr00r18         [ 2]  498 	ldw	x, #(___str_2+0)
      0001FA CDr01r15         [ 4]  499 	call	_uart_write
                                    500 ;	libs/i2c_lib.c: 67: return result;
      0001FD 7B 01            [ 1]  501 	ld	a, (0x01, sp)
                                    502 ;	libs/i2c_lib.c: 68: }
      0001FF 5B 01            [ 2]  503 	addw	sp, #1
      000201 81               [ 4]  504 	ret
                                    505 ;	libs/i2c_lib.c: 70: uint8_t i2c_read_byte(unsigned char *data){
                                    506 ;	-----------------------------------------
                                    507 ;	 function i2c_read_byte
                                    508 ;	-----------------------------------------
      000202                        509 _i2c_read_byte:
                                    510 ;	libs/i2c_lib.c: 71: while (!(I2C_SR1 -> RXNE));
      000202                        511 00101$:
      000202 72 0D 52 17 FB   [ 2]  512 	btjf	0x5217, #6, 00101$
                                    513 ;	libs/i2c_lib.c: 73: return 0;
      000207 4F               [ 1]  514 	clr	a
                                    515 ;	libs/i2c_lib.c: 75: }
      000208 81               [ 4]  516 	ret
                                    517 ;	libs/i2c_lib.c: 77: void i2c_stop(void) {
                                    518 ;	-----------------------------------------
                                    519 ;	 function i2c_stop
                                    520 ;	-----------------------------------------
      000209                        521 _i2c_stop:
                                    522 ;	libs/i2c_lib.c: 78: I2C_CR2 -> STOP = 1;// Отправка стопового сигнала
      000209 72 12 52 11      [ 1]  523 	bset	0x5211, #1
                                    524 ;	libs/i2c_lib.c: 79: }
      00020D 81               [ 4]  525 	ret
                                    526 ;	libs/i2c_lib.c: 82: uint8_t i2c_send_address(uint8_t address,uint8_t rw_type) 
                                    527 ;	-----------------------------------------
                                    528 ;	 function i2c_send_address
                                    529 ;	-----------------------------------------
      00020E                        530 _i2c_send_address:
                                    531 ;	libs/i2c_lib.c: 87: address = address << 1;
      00020E 48               [ 1]  532 	sll	a
                                    533 ;	libs/i2c_lib.c: 84: switch(rw_type)
      00020F 88               [ 1]  534 	push	a
      000210 7B 04            [ 1]  535 	ld	a, (0x04, sp)
      000212 4A               [ 1]  536 	dec	a
      000213 84               [ 1]  537 	pop	a
      000214 26 02            [ 1]  538 	jrne	00102$
                                    539 ;	libs/i2c_lib.c: 87: address = address << 1;
                                    540 ;	libs/i2c_lib.c: 88: address |= 0x01; // Отправка адреса устройства с битом на чтение
      000216 AA 01            [ 1]  541 	or	a, #0x01
                                    542 ;	libs/i2c_lib.c: 89: break;
                                    543 ;	libs/i2c_lib.c: 90: default:
                                    544 ;	libs/i2c_lib.c: 91: address = address << 1; // Отправка адреса устройства с битом на запись
                                    545 ;	libs/i2c_lib.c: 93: }
      000218                        546 00102$:
                                    547 ;	libs/i2c_lib.c: 94: i2c_start();
      000218 88               [ 1]  548 	push	a
      000219 CDr01r98         [ 4]  549 	call	_i2c_start
      00021C 84               [ 1]  550 	pop	a
                                    551 ;	libs/i2c_lib.c: 95: I2C_DR -> DR = address;
      00021D C7 52 16         [ 1]  552 	ld	0x5216, a
                                    553 ;	libs/i2c_lib.c: 96: uart_write("WHILE start\n");
      000220 AEr00r39         [ 2]  554 	ldw	x, #(___str_8+0)
      000223 CDr01r15         [ 4]  555 	call	_uart_write
                                    556 ;	libs/i2c_lib.c: 97: while (!(I2C_SR1 -> ADDR) && !(I2C_SR2 -> AF));
      000226                        557 00105$:
      000226 72 02 52 17 05   [ 2]  558 	btjt	0x5217, #1, 00107$
      00022B 72 05 52 18 F6   [ 2]  559 	btjf	0x5218, #2, 00105$
      000230                        560 00107$:
                                    561 ;	libs/i2c_lib.c: 99: uart_write("WHILE passed\n");  
      000230 AEr00r46         [ 2]  562 	ldw	x, #(___str_9+0)
      000233 CDr01r15         [ 4]  563 	call	_uart_write
                                    564 ;	libs/i2c_lib.c: 100: return I2C_SR1 -> ADDR;
      000236 C6 52 17         [ 1]  565 	ld	a, 0x5217
      000239 44               [ 1]  566 	srl	a
      00023A A4 01            [ 1]  567 	and	a, #0x01
                                    568 ;	libs/i2c_lib.c: 101: }
      00023C 85               [ 2]  569 	popw	x
      00023D 5B 01            [ 2]  570 	addw	sp, #1
      00023F FC               [ 2]  571 	jp	(x)
                                    572 ;	libs/i2c_lib.c: 103: void i2c_write(uint8_t dev_addr,uint8_t size,uint8_t *data)
                                    573 ;	-----------------------------------------
                                    574 ;	 function i2c_write
                                    575 ;	-----------------------------------------
      000240                        576 _i2c_write:
      000240 88               [ 1]  577 	push	a
                                    578 ;	libs/i2c_lib.c: 105: if(i2c_send_address(dev_addr, 0))//Проверка на АСК бит
      000241 4B 00            [ 1]  579 	push	#0x00
      000243 CDr02r0E         [ 4]  580 	call	_i2c_send_address
      000246 4D               [ 1]  581 	tnz	a
      000247 27 29            [ 1]  582 	jreq	00103$
                                    583 ;	libs/i2c_lib.c: 108: uart_write("PIVO\n");
      000249 AEr00r54         [ 2]  584 	ldw	x, #(___str_10+0)
      00024C CDr01r15         [ 4]  585 	call	_uart_write
                                    586 ;	libs/i2c_lib.c: 109: uart_write("predfor\n");
      00024F AEr00r5A         [ 2]  587 	ldw	x, #(___str_11+0)
      000252 CDr01r15         [ 4]  588 	call	_uart_write
                                    589 ;	libs/i2c_lib.c: 113: for(int i = 0;i < 25;i++)
      000255 0F 01            [ 1]  590 	clr	(0x01, sp)
      000257                        591 00105$:
      000257 7B 01            [ 1]  592 	ld	a, (0x01, sp)
      000259 A1 19            [ 1]  593 	cp	a, #0x19
      00025B 24 0F            [ 1]  594 	jrnc	00101$
                                    595 ;	libs/i2c_lib.c: 115: uart_write("for\n");
      00025D AEr00r63         [ 2]  596 	ldw	x, #(___str_12+0)
      000260 CDr01r15         [ 4]  597 	call	_uart_write
                                    598 ;	libs/i2c_lib.c: 116: i2c_send_byte(0x29);//Проверка на АСК бит
      000263 A6 29            [ 1]  599 	ld	a, #0x29
      000265 CDr01rA2         [ 4]  600 	call	_i2c_send_byte
                                    601 ;	libs/i2c_lib.c: 113: for(int i = 0;i < 25;i++)
      000268 0C 01            [ 1]  602 	inc	(0x01, sp)
      00026A 20 EB            [ 2]  603 	jra	00105$
      00026C                        604 00101$:
                                    605 ;	libs/i2c_lib.c: 125: uart_write("postforif\n");
      00026C AEr00r68         [ 2]  606 	ldw	x, #(___str_13+0)
      00026F CDr01r15         [ 4]  607 	call	_uart_write
      000272                        608 00103$:
                                    609 ;	libs/i2c_lib.c: 127: uart_write("predstop\n");
      000272 AEr00r73         [ 2]  610 	ldw	x, #(___str_14+0)
      000275 CDr01r15         [ 4]  611 	call	_uart_write
                                    612 ;	libs/i2c_lib.c: 129: i2c_stop();
      000278 CDr02r09         [ 4]  613 	call	_i2c_stop
                                    614 ;	libs/i2c_lib.c: 130: uart_write("poststop\n");
      00027B AEr00r7D         [ 2]  615 	ldw	x, #(___str_15+0)
      00027E 16 02            [ 2]  616 	ldw	y, (2, sp)
      000280 17 05            [ 2]  617 	ldw	(5, sp), y
      000282 5B 04            [ 2]  618 	addw	sp, #4
                                    619 ;	libs/i2c_lib.c: 131: }
      000284 CCr01r15         [ 2]  620 	jp	_uart_write
                                    621 ;	libs/i2c_lib.c: 133: void i2c_read(uint8_t dev_addr, uint8_t size,uint8_t *data){
                                    622 ;	-----------------------------------------
                                    623 ;	 function i2c_read
                                    624 ;	-----------------------------------------
      000287                        625 _i2c_read:
      000287 52 02            [ 2]  626 	sub	sp, #2
                                    627 ;	libs/i2c_lib.c: 134: I2C_CR2 -> ACK = 1;
      000289 AE 52 11         [ 2]  628 	ldw	x, #0x5211
      00028C 88               [ 1]  629 	push	a
      00028D F6               [ 1]  630 	ld	a, (x)
      00028E AA 04            [ 1]  631 	or	a, #0x04
      000290 F7               [ 1]  632 	ld	(x), a
      000291 84               [ 1]  633 	pop	a
                                    634 ;	libs/i2c_lib.c: 135: if(i2c_send_address(dev_addr,1))
      000292 4B 01            [ 1]  635 	push	#0x01
      000294 CDr02r0E         [ 4]  636 	call	_i2c_send_address
      000297 4D               [ 1]  637 	tnz	a
      000298 27 1F            [ 1]  638 	jreq	00103$
                                    639 ;	libs/i2c_lib.c: 136: for(int i = 0;i < size;i++)
      00029A 5F               [ 1]  640 	clrw	x
      00029B                        641 00105$:
      00029B 7B 05            [ 1]  642 	ld	a, (0x05, sp)
      00029D 6B 02            [ 1]  643 	ld	(0x02, sp), a
      00029F 0F 01            [ 1]  644 	clr	(0x01, sp)
      0002A1 13 01            [ 2]  645 	cpw	x, (0x01, sp)
      0002A3 2E 14            [ 1]  646 	jrsge	00103$
                                    647 ;	libs/i2c_lib.c: 138: i2c_read_byte((unsigned char *)data[i]);
      0002A5 90 93            [ 1]  648 	ldw	y, x
      0002A7 72 F9 06         [ 2]  649 	addw	y, (0x06, sp)
      0002AA 90 F6            [ 1]  650 	ld	a, (y)
      0002AC 90 5F            [ 1]  651 	clrw	y
      0002AE 90 97            [ 1]  652 	ld	yl, a
      0002B0 89               [ 2]  653 	pushw	x
      0002B1 93               [ 1]  654 	ldw	x, y
      0002B2 CDr02r02         [ 4]  655 	call	_i2c_read_byte
      0002B5 85               [ 2]  656 	popw	x
                                    657 ;	libs/i2c_lib.c: 136: for(int i = 0;i < size;i++)
      0002B6 5C               [ 1]  658 	incw	x
      0002B7 20 E2            [ 2]  659 	jra	00105$
      0002B9                        660 00103$:
                                    661 ;	libs/i2c_lib.c: 140: I2C_CR2 -> ACK = 0;
      0002B9 C6 52 11         [ 1]  662 	ld	a, 0x5211
      0002BC A4 FB            [ 1]  663 	and	a, #0xfb
      0002BE C7 52 11         [ 1]  664 	ld	0x5211, a
                                    665 ;	libs/i2c_lib.c: 141: }
      0002C1 1E 03            [ 2]  666 	ldw	x, (3, sp)
      0002C3 5B 07            [ 2]  667 	addw	sp, #7
      0002C5 FC               [ 2]  668 	jp	(x)
                                    669 ;	libs/i2c_lib.c: 142: uint8_t i2c_scan(void) 
                                    670 ;	-----------------------------------------
                                    671 ;	 function i2c_scan
                                    672 ;	-----------------------------------------
      0002C6                        673 _i2c_scan:
      0002C6 52 02            [ 2]  674 	sub	sp, #2
                                    675 ;	libs/i2c_lib.c: 144: for (uint8_t addr = 1; addr < 127; addr++)
      0002C8 A6 01            [ 1]  676 	ld	a, #0x01
      0002CA 6B 01            [ 1]  677 	ld	(0x01, sp), a
      0002CC 6B 02            [ 1]  678 	ld	(0x02, sp), a
      0002CE                        679 00105$:
      0002CE 7B 02            [ 1]  680 	ld	a, (0x02, sp)
      0002D0 A1 7F            [ 1]  681 	cp	a, #0x7f
      0002D2 24 23            [ 1]  682 	jrnc	00103$
                                    683 ;	libs/i2c_lib.c: 146: if(i2c_send_address(addr, 0))
      0002D4 4B 00            [ 1]  684 	push	#0x00
      0002D6 7B 03            [ 1]  685 	ld	a, (0x03, sp)
      0002D8 CDr02r0E         [ 4]  686 	call	_i2c_send_address
      0002DB 4D               [ 1]  687 	tnz	a
      0002DC 27 07            [ 1]  688 	jreq	00102$
                                    689 ;	libs/i2c_lib.c: 148: i2c_stop();
      0002DE CDr02r09         [ 4]  690 	call	_i2c_stop
                                    691 ;	libs/i2c_lib.c: 149: return addr;
      0002E1 7B 01            [ 1]  692 	ld	a, (0x01, sp)
      0002E3 20 16            [ 2]  693 	jra	00107$
      0002E5                        694 00102$:
                                    695 ;	libs/i2c_lib.c: 151: I2C_SR2 -> AF = 0;
      0002E5 72 15 52 18      [ 1]  696 	bres	0x5218, #2
                                    697 ;	libs/i2c_lib.c: 152: uart_write("error addr\n"); //Очистка флага ошибки
      0002E9 AEr00r87         [ 2]  698 	ldw	x, #(___str_16+0)
      0002EC CDr01r15         [ 4]  699 	call	_uart_write
                                    700 ;	libs/i2c_lib.c: 144: for (uint8_t addr = 1; addr < 127; addr++)
      0002EF 0C 02            [ 1]  701 	inc	(0x02, sp)
      0002F1 7B 02            [ 1]  702 	ld	a, (0x02, sp)
      0002F3 6B 01            [ 1]  703 	ld	(0x01, sp), a
      0002F5 20 D7            [ 2]  704 	jra	00105$
      0002F7                        705 00103$:
                                    706 ;	libs/i2c_lib.c: 154: i2c_stop();
      0002F7 CDr02r09         [ 4]  707 	call	_i2c_stop
                                    708 ;	libs/i2c_lib.c: 155: return 0;
      0002FA 4F               [ 1]  709 	clr	a
      0002FB                        710 00107$:
                                    711 ;	libs/i2c_lib.c: 156: }
      0002FB 5B 02            [ 2]  712 	addw	sp, #2
      0002FD 81               [ 4]  713 	ret
                                    714 ;	main.c: 3: int main(void)
                                    715 ;	-----------------------------------------
                                    716 ;	 function main
                                    717 ;	-----------------------------------------
      0002FE                        718 _main:
      0002FE 90 96            [ 1]  719 	ldw	y, sp
      000300 72 A2 00 0A      [ 2]  720 	subw	y, #10
      000304 52 FF            [ 2]  721 	sub	sp, #255
      000306 52 03            [ 2]  722 	sub	sp, #3
                                    723 ;	main.c: 6: CLK_CKDIVR = 0;
      000308 35 00 50 C6      [ 1]  724 	mov	0x50c6+0, #0x00
                                    725 ;	main.c: 7: uart_init(9600,0);
      00030C 90 89            [ 2]  726 	pushw	y
      00030E 4F               [ 1]  727 	clr	a
      00030F AE 25 80         [ 2]  728 	ldw	x, #0x2580
      000312 CDr00r00         [ 4]  729 	call	_uart_init
      000315 CDr01r6D         [ 4]  730 	call	_i2c_init
      000318 90 85            [ 2]  731 	popw	y
                                    732 ;	main.c: 11: buf[0] = 0xA4;
      00031A A6 A4            [ 1]  733 	ld	a, #0xa4
      00031C 6B 01            [ 1]  734 	ld	(0x01, sp), a
                                    735 ;	main.c: 12: buf[1] = 0xA5;
      00031E A6 A5            [ 1]  736 	ld	a, #0xa5
      000320 6B 02            [ 1]  737 	ld	(0x02, sp), a
                                    738 ;	main.c: 15: uint8_t buf1[256] = {0};
      000322 96               [ 1]  739 	ldw	x, sp
      000323 1C 00 03         [ 2]  740 	addw	x, #3
      000326 7F               [ 1]  741 	clr	(x)
      000327 0F 04            [ 1]  742 	clr	(0x04, sp)
      000329 0F 05            [ 1]  743 	clr	(0x05, sp)
      00032B 0F 06            [ 1]  744 	clr	(0x06, sp)
      00032D 0F 07            [ 1]  745 	clr	(0x07, sp)
      00032F 0F 08            [ 1]  746 	clr	(0x08, sp)
      000331 0F 09            [ 1]  747 	clr	(0x09, sp)
      000333 0F 0A            [ 1]  748 	clr	(0x0a, sp)
      000335 0F 0B            [ 1]  749 	clr	(0x0b, sp)
      000337 0F 0C            [ 1]  750 	clr	(0x0c, sp)
      000339 0F 0D            [ 1]  751 	clr	(0x0d, sp)
      00033B 0F 0E            [ 1]  752 	clr	(0x0e, sp)
      00033D 0F 0F            [ 1]  753 	clr	(0x0f, sp)
      00033F 0F 10            [ 1]  754 	clr	(0x10, sp)
      000341 0F 11            [ 1]  755 	clr	(0x11, sp)
      000343 0F 12            [ 1]  756 	clr	(0x12, sp)
      000345 0F 13            [ 1]  757 	clr	(0x13, sp)
      000347 0F 14            [ 1]  758 	clr	(0x14, sp)
      000349 0F 15            [ 1]  759 	clr	(0x15, sp)
      00034B 0F 16            [ 1]  760 	clr	(0x16, sp)
      00034D 0F 17            [ 1]  761 	clr	(0x17, sp)
      00034F 0F 18            [ 1]  762 	clr	(0x18, sp)
      000351 0F 19            [ 1]  763 	clr	(0x19, sp)
      000353 0F 1A            [ 1]  764 	clr	(0x1a, sp)
      000355 0F 1B            [ 1]  765 	clr	(0x1b, sp)
      000357 0F 1C            [ 1]  766 	clr	(0x1c, sp)
      000359 0F 1D            [ 1]  767 	clr	(0x1d, sp)
      00035B 0F 1E            [ 1]  768 	clr	(0x1e, sp)
      00035D 0F 1F            [ 1]  769 	clr	(0x1f, sp)
      00035F 0F 20            [ 1]  770 	clr	(0x20, sp)
      000361 0F 21            [ 1]  771 	clr	(0x21, sp)
      000363 0F 22            [ 1]  772 	clr	(0x22, sp)
      000365 0F 23            [ 1]  773 	clr	(0x23, sp)
      000367 0F 24            [ 1]  774 	clr	(0x24, sp)
      000369 0F 25            [ 1]  775 	clr	(0x25, sp)
      00036B 0F 26            [ 1]  776 	clr	(0x26, sp)
      00036D 0F 27            [ 1]  777 	clr	(0x27, sp)
      00036F 0F 28            [ 1]  778 	clr	(0x28, sp)
      000371 0F 29            [ 1]  779 	clr	(0x29, sp)
      000373 0F 2A            [ 1]  780 	clr	(0x2a, sp)
      000375 0F 2B            [ 1]  781 	clr	(0x2b, sp)
      000377 0F 2C            [ 1]  782 	clr	(0x2c, sp)
      000379 0F 2D            [ 1]  783 	clr	(0x2d, sp)
      00037B 0F 2E            [ 1]  784 	clr	(0x2e, sp)
      00037D 0F 2F            [ 1]  785 	clr	(0x2f, sp)
      00037F 0F 30            [ 1]  786 	clr	(0x30, sp)
      000381 0F 31            [ 1]  787 	clr	(0x31, sp)
      000383 0F 32            [ 1]  788 	clr	(0x32, sp)
      000385 0F 33            [ 1]  789 	clr	(0x33, sp)
      000387 0F 34            [ 1]  790 	clr	(0x34, sp)
      000389 0F 35            [ 1]  791 	clr	(0x35, sp)
      00038B 0F 36            [ 1]  792 	clr	(0x36, sp)
      00038D 0F 37            [ 1]  793 	clr	(0x37, sp)
      00038F 0F 38            [ 1]  794 	clr	(0x38, sp)
      000391 0F 39            [ 1]  795 	clr	(0x39, sp)
      000393 0F 3A            [ 1]  796 	clr	(0x3a, sp)
      000395 0F 3B            [ 1]  797 	clr	(0x3b, sp)
      000397 0F 3C            [ 1]  798 	clr	(0x3c, sp)
      000399 0F 3D            [ 1]  799 	clr	(0x3d, sp)
      00039B 0F 3E            [ 1]  800 	clr	(0x3e, sp)
      00039D 0F 3F            [ 1]  801 	clr	(0x3f, sp)
      00039F 0F 40            [ 1]  802 	clr	(0x40, sp)
      0003A1 0F 41            [ 1]  803 	clr	(0x41, sp)
      0003A3 0F 42            [ 1]  804 	clr	(0x42, sp)
      0003A5 0F 43            [ 1]  805 	clr	(0x43, sp)
      0003A7 0F 44            [ 1]  806 	clr	(0x44, sp)
      0003A9 0F 45            [ 1]  807 	clr	(0x45, sp)
      0003AB 0F 46            [ 1]  808 	clr	(0x46, sp)
      0003AD 0F 47            [ 1]  809 	clr	(0x47, sp)
      0003AF 0F 48            [ 1]  810 	clr	(0x48, sp)
      0003B1 0F 49            [ 1]  811 	clr	(0x49, sp)
      0003B3 0F 4A            [ 1]  812 	clr	(0x4a, sp)
      0003B5 0F 4B            [ 1]  813 	clr	(0x4b, sp)
      0003B7 0F 4C            [ 1]  814 	clr	(0x4c, sp)
      0003B9 0F 4D            [ 1]  815 	clr	(0x4d, sp)
      0003BB 0F 4E            [ 1]  816 	clr	(0x4e, sp)
      0003BD 0F 4F            [ 1]  817 	clr	(0x4f, sp)
      0003BF 0F 50            [ 1]  818 	clr	(0x50, sp)
      0003C1 0F 51            [ 1]  819 	clr	(0x51, sp)
      0003C3 0F 52            [ 1]  820 	clr	(0x52, sp)
      0003C5 0F 53            [ 1]  821 	clr	(0x53, sp)
      0003C7 0F 54            [ 1]  822 	clr	(0x54, sp)
      0003C9 0F 55            [ 1]  823 	clr	(0x55, sp)
      0003CB 0F 56            [ 1]  824 	clr	(0x56, sp)
      0003CD 0F 57            [ 1]  825 	clr	(0x57, sp)
      0003CF 0F 58            [ 1]  826 	clr	(0x58, sp)
      0003D1 0F 59            [ 1]  827 	clr	(0x59, sp)
      0003D3 0F 5A            [ 1]  828 	clr	(0x5a, sp)
      0003D5 0F 5B            [ 1]  829 	clr	(0x5b, sp)
      0003D7 0F 5C            [ 1]  830 	clr	(0x5c, sp)
      0003D9 0F 5D            [ 1]  831 	clr	(0x5d, sp)
      0003DB 0F 5E            [ 1]  832 	clr	(0x5e, sp)
      0003DD 0F 5F            [ 1]  833 	clr	(0x5f, sp)
      0003DF 0F 60            [ 1]  834 	clr	(0x60, sp)
      0003E1 0F 61            [ 1]  835 	clr	(0x61, sp)
      0003E3 0F 62            [ 1]  836 	clr	(0x62, sp)
      0003E5 0F 63            [ 1]  837 	clr	(0x63, sp)
      0003E7 0F 64            [ 1]  838 	clr	(0x64, sp)
      0003E9 0F 65            [ 1]  839 	clr	(0x65, sp)
      0003EB 0F 66            [ 1]  840 	clr	(0x66, sp)
      0003ED 0F 67            [ 1]  841 	clr	(0x67, sp)
      0003EF 0F 68            [ 1]  842 	clr	(0x68, sp)
      0003F1 0F 69            [ 1]  843 	clr	(0x69, sp)
      0003F3 0F 6A            [ 1]  844 	clr	(0x6a, sp)
      0003F5 0F 6B            [ 1]  845 	clr	(0x6b, sp)
      0003F7 0F 6C            [ 1]  846 	clr	(0x6c, sp)
      0003F9 0F 6D            [ 1]  847 	clr	(0x6d, sp)
      0003FB 0F 6E            [ 1]  848 	clr	(0x6e, sp)
      0003FD 0F 6F            [ 1]  849 	clr	(0x6f, sp)
      0003FF 0F 70            [ 1]  850 	clr	(0x70, sp)
      000401 0F 71            [ 1]  851 	clr	(0x71, sp)
      000403 0F 72            [ 1]  852 	clr	(0x72, sp)
      000405 0F 73            [ 1]  853 	clr	(0x73, sp)
      000407 0F 74            [ 1]  854 	clr	(0x74, sp)
      000409 0F 75            [ 1]  855 	clr	(0x75, sp)
      00040B 0F 76            [ 1]  856 	clr	(0x76, sp)
      00040D 0F 77            [ 1]  857 	clr	(0x77, sp)
      00040F 0F 78            [ 1]  858 	clr	(0x78, sp)
      000411 0F 79            [ 1]  859 	clr	(0x79, sp)
      000413 0F 7A            [ 1]  860 	clr	(0x7a, sp)
      000415 0F 7B            [ 1]  861 	clr	(0x7b, sp)
      000417 0F 7C            [ 1]  862 	clr	(0x7c, sp)
      000419 0F 7D            [ 1]  863 	clr	(0x7d, sp)
      00041B 0F 7E            [ 1]  864 	clr	(0x7e, sp)
      00041D 0F 7F            [ 1]  865 	clr	(0x7f, sp)
      00041F 0F 80            [ 1]  866 	clr	(0x80, sp)
      000421 0F 81            [ 1]  867 	clr	(0x81, sp)
      000423 0F 82            [ 1]  868 	clr	(0x82, sp)
      000425 0F 83            [ 1]  869 	clr	(0x83, sp)
      000427 0F 84            [ 1]  870 	clr	(0x84, sp)
      000429 0F 85            [ 1]  871 	clr	(0x85, sp)
      00042B 0F 86            [ 1]  872 	clr	(0x86, sp)
      00042D 0F 87            [ 1]  873 	clr	(0x87, sp)
      00042F 0F 88            [ 1]  874 	clr	(0x88, sp)
      000431 0F 89            [ 1]  875 	clr	(0x89, sp)
      000433 0F 8A            [ 1]  876 	clr	(0x8a, sp)
      000435 0F 8B            [ 1]  877 	clr	(0x8b, sp)
      000437 0F 8C            [ 1]  878 	clr	(0x8c, sp)
      000439 0F 8D            [ 1]  879 	clr	(0x8d, sp)
      00043B 0F 8E            [ 1]  880 	clr	(0x8e, sp)
      00043D 0F 8F            [ 1]  881 	clr	(0x8f, sp)
      00043F 0F 90            [ 1]  882 	clr	(0x90, sp)
      000441 0F 91            [ 1]  883 	clr	(0x91, sp)
      000443 0F 92            [ 1]  884 	clr	(0x92, sp)
      000445 0F 93            [ 1]  885 	clr	(0x93, sp)
      000447 0F 94            [ 1]  886 	clr	(0x94, sp)
      000449 0F 95            [ 1]  887 	clr	(0x95, sp)
      00044B 0F 96            [ 1]  888 	clr	(0x96, sp)
      00044D 0F 97            [ 1]  889 	clr	(0x97, sp)
      00044F 0F 98            [ 1]  890 	clr	(0x98, sp)
      000451 0F 99            [ 1]  891 	clr	(0x99, sp)
      000453 0F 9A            [ 1]  892 	clr	(0x9a, sp)
      000455 0F 9B            [ 1]  893 	clr	(0x9b, sp)
      000457 0F 9C            [ 1]  894 	clr	(0x9c, sp)
      000459 0F 9D            [ 1]  895 	clr	(0x9d, sp)
      00045B 0F 9E            [ 1]  896 	clr	(0x9e, sp)
      00045D 0F 9F            [ 1]  897 	clr	(0x9f, sp)
      00045F 0F A0            [ 1]  898 	clr	(0xa0, sp)
      000461 0F A1            [ 1]  899 	clr	(0xa1, sp)
      000463 0F A2            [ 1]  900 	clr	(0xa2, sp)
      000465 0F A3            [ 1]  901 	clr	(0xa3, sp)
      000467 0F A4            [ 1]  902 	clr	(0xa4, sp)
      000469 0F A5            [ 1]  903 	clr	(0xa5, sp)
      00046B 0F A6            [ 1]  904 	clr	(0xa6, sp)
      00046D 0F A7            [ 1]  905 	clr	(0xa7, sp)
      00046F 0F A8            [ 1]  906 	clr	(0xa8, sp)
      000471 0F A9            [ 1]  907 	clr	(0xa9, sp)
      000473 0F AA            [ 1]  908 	clr	(0xaa, sp)
      000475 0F AB            [ 1]  909 	clr	(0xab, sp)
      000477 0F AC            [ 1]  910 	clr	(0xac, sp)
      000479 0F AD            [ 1]  911 	clr	(0xad, sp)
      00047B 0F AE            [ 1]  912 	clr	(0xae, sp)
      00047D 0F AF            [ 1]  913 	clr	(0xaf, sp)
      00047F 0F B0            [ 1]  914 	clr	(0xb0, sp)
      000481 0F B1            [ 1]  915 	clr	(0xb1, sp)
      000483 0F B2            [ 1]  916 	clr	(0xb2, sp)
      000485 0F B3            [ 1]  917 	clr	(0xb3, sp)
      000487 0F B4            [ 1]  918 	clr	(0xb4, sp)
      000489 0F B5            [ 1]  919 	clr	(0xb5, sp)
      00048B 0F B6            [ 1]  920 	clr	(0xb6, sp)
      00048D 0F B7            [ 1]  921 	clr	(0xb7, sp)
      00048F 0F B8            [ 1]  922 	clr	(0xb8, sp)
      000491 0F B9            [ 1]  923 	clr	(0xb9, sp)
      000493 0F BA            [ 1]  924 	clr	(0xba, sp)
      000495 0F BB            [ 1]  925 	clr	(0xbb, sp)
      000497 0F BC            [ 1]  926 	clr	(0xbc, sp)
      000499 0F BD            [ 1]  927 	clr	(0xbd, sp)
      00049B 0F BE            [ 1]  928 	clr	(0xbe, sp)
      00049D 0F BF            [ 1]  929 	clr	(0xbf, sp)
      00049F 0F C0            [ 1]  930 	clr	(0xc0, sp)
      0004A1 0F C1            [ 1]  931 	clr	(0xc1, sp)
      0004A3 0F C2            [ 1]  932 	clr	(0xc2, sp)
      0004A5 0F C3            [ 1]  933 	clr	(0xc3, sp)
      0004A7 0F C4            [ 1]  934 	clr	(0xc4, sp)
      0004A9 0F C5            [ 1]  935 	clr	(0xc5, sp)
      0004AB 0F C6            [ 1]  936 	clr	(0xc6, sp)
      0004AD 0F C7            [ 1]  937 	clr	(0xc7, sp)
      0004AF 0F C8            [ 1]  938 	clr	(0xc8, sp)
      0004B1 0F C9            [ 1]  939 	clr	(0xc9, sp)
      0004B3 0F CA            [ 1]  940 	clr	(0xca, sp)
      0004B5 0F CB            [ 1]  941 	clr	(0xcb, sp)
      0004B7 0F CC            [ 1]  942 	clr	(0xcc, sp)
      0004B9 0F CD            [ 1]  943 	clr	(0xcd, sp)
      0004BB 0F CE            [ 1]  944 	clr	(0xce, sp)
      0004BD 0F CF            [ 1]  945 	clr	(0xcf, sp)
      0004BF 0F D0            [ 1]  946 	clr	(0xd0, sp)
      0004C1 0F D1            [ 1]  947 	clr	(0xd1, sp)
      0004C3 0F D2            [ 1]  948 	clr	(0xd2, sp)
      0004C5 0F D3            [ 1]  949 	clr	(0xd3, sp)
      0004C7 0F D4            [ 1]  950 	clr	(0xd4, sp)
      0004C9 0F D5            [ 1]  951 	clr	(0xd5, sp)
      0004CB 0F D6            [ 1]  952 	clr	(0xd6, sp)
      0004CD 0F D7            [ 1]  953 	clr	(0xd7, sp)
      0004CF 0F D8            [ 1]  954 	clr	(0xd8, sp)
      0004D1 0F D9            [ 1]  955 	clr	(0xd9, sp)
      0004D3 0F DA            [ 1]  956 	clr	(0xda, sp)
      0004D5 0F DB            [ 1]  957 	clr	(0xdb, sp)
      0004D7 0F DC            [ 1]  958 	clr	(0xdc, sp)
      0004D9 0F DD            [ 1]  959 	clr	(0xdd, sp)
      0004DB 0F DE            [ 1]  960 	clr	(0xde, sp)
      0004DD 0F DF            [ 1]  961 	clr	(0xdf, sp)
      0004DF 0F E0            [ 1]  962 	clr	(0xe0, sp)
      0004E1 0F E1            [ 1]  963 	clr	(0xe1, sp)
      0004E3 0F E2            [ 1]  964 	clr	(0xe2, sp)
      0004E5 0F E3            [ 1]  965 	clr	(0xe3, sp)
      0004E7 0F E4            [ 1]  966 	clr	(0xe4, sp)
      0004E9 0F E5            [ 1]  967 	clr	(0xe5, sp)
      0004EB 0F E6            [ 1]  968 	clr	(0xe6, sp)
      0004ED 0F E7            [ 1]  969 	clr	(0xe7, sp)
      0004EF 0F E8            [ 1]  970 	clr	(0xe8, sp)
      0004F1 0F E9            [ 1]  971 	clr	(0xe9, sp)
      0004F3 0F EA            [ 1]  972 	clr	(0xea, sp)
      0004F5 0F EB            [ 1]  973 	clr	(0xeb, sp)
      0004F7 0F EC            [ 1]  974 	clr	(0xec, sp)
      0004F9 0F ED            [ 1]  975 	clr	(0xed, sp)
      0004FB 0F EE            [ 1]  976 	clr	(0xee, sp)
      0004FD 0F EF            [ 1]  977 	clr	(0xef, sp)
      0004FF 0F F0            [ 1]  978 	clr	(0xf0, sp)
      000501 0F F1            [ 1]  979 	clr	(0xf1, sp)
      000503 0F F2            [ 1]  980 	clr	(0xf2, sp)
      000505 0F F3            [ 1]  981 	clr	(0xf3, sp)
      000507 0F F4            [ 1]  982 	clr	(0xf4, sp)
      000509 0F F5            [ 1]  983 	clr	(0xf5, sp)
      00050B 0F F6            [ 1]  984 	clr	(0xf6, sp)
      00050D 0F F7            [ 1]  985 	clr	(0xf7, sp)
      00050F 0F F8            [ 1]  986 	clr	(0xf8, sp)
      000511 0F F9            [ 1]  987 	clr	(0xf9, sp)
      000513 0F FA            [ 1]  988 	clr	(0xfa, sp)
      000515 0F FB            [ 1]  989 	clr	(0xfb, sp)
      000517 0F FC            [ 1]  990 	clr	(0xfc, sp)
      000519 0F FD            [ 1]  991 	clr	(0xfd, sp)
      00051B 0F FE            [ 1]  992 	clr	(0xfe, sp)
      00051D 0F FF            [ 1]  993 	clr	(0xff, sp)
      00051F 90 6F 08         [ 1]  994 	clr	(0x8, y)
      000522 90 6F 09         [ 1]  995 	clr	(0x9, y)
      000525 90 6F 0A         [ 1]  996 	clr	(0xa, y)
                                    997 ;	main.c: 16: buf1[0] = 0x01;
      000528 A6 01            [ 1]  998 	ld	a, #0x01
      00052A F7               [ 1]  999 	ld	(x), a
                                   1000 ;	main.c: 17: buf1[1] = 0x02;
      00052B A6 02            [ 1] 1001 	ld	a, #0x02
      00052D 6B 04            [ 1] 1002 	ld	(0x04, sp), a
                                   1003 ;	main.c: 18: i2c_write(I2C_DISPLAY_ADDR,25,buf1);
      00052F 90 89            [ 2] 1004 	pushw	y
      000531 89               [ 2] 1005 	pushw	x
      000532 4B 19            [ 1] 1006 	push	#0x19
      000534 A6 3C            [ 1] 1007 	ld	a, #0x3c
      000536 CDr02r40         [ 4] 1008 	call	_i2c_write
      000539 90 85            [ 2] 1009 	popw	y
                                   1010 ;	main.c: 19: while(1);
      00053B                       1011 00102$:
      00053B 20 FE            [ 2] 1012 	jra	00102$
                                   1013 ;	main.c: 25: }
      00053D 5B FF            [ 2] 1014 	addw	sp, #255
      00053F 5B 03            [ 2] 1015 	addw	sp, #3
      000541 81               [ 4] 1016 	ret
                                   1017 	.area CODE
                                   1018 	.area CONST
                                   1019 	.area CONST
      000000                       1020 ___str_0:
      000000 73 74 61 72 74 20 73  1021 	.ascii "start send byte"
             65 6E 64 20 62 79 74
             65
      00000F 0A                    1022 	.db 0x0a
      000010 00                    1023 	.db 0x00
                                   1024 	.area CODE
                                   1025 	.area CONST
      000011                       1026 ___str_1:
      000011 62 79 74 65 20 2D     1027 	.ascii "byte -"
      000017 00                    1028 	.db 0x00
                                   1029 	.area CODE
                                   1030 	.area CONST
      000018                       1031 ___str_2:
      000018 0A                    1032 	.db 0x0a
      000019 00                    1033 	.db 0x00
                                   1034 	.area CODE
                                   1035 	.area CONST
      00001A                       1036 ___str_3:
      00001A 62 79 74 65 20 73 65  1037 	.ascii "byte send"
             6E 64
      000023 0A                    1038 	.db 0x0a
      000024 00                    1039 	.db 0x00
                                   1040 	.area CODE
                                   1041 	.area CONST
      000025                       1042 ___str_4:
      000025 44 52 20 62 79 74 65  1043 	.ascii "DR byte"
      00002C 0A                    1044 	.db 0x0a
      00002D 00                    1045 	.db 0x00
                                   1046 	.area CODE
                                   1047 	.area CONST
      00002E                       1048 ___str_5:
      00002E 41 46 20 2D 3E 20     1049 	.ascii "AF -> "
      000034 00                    1050 	.db 0x00
                                   1051 	.area CODE
                                   1052 	.area CONST
      000035                       1053 ___str_6:
      000035 31                    1054 	.ascii "1"
      000036 00                    1055 	.db 0x00
                                   1056 	.area CODE
                                   1057 	.area CONST
      000037                       1058 ___str_7:
      000037 30                    1059 	.ascii "0"
      000038 00                    1060 	.db 0x00
                                   1061 	.area CODE
                                   1062 	.area CONST
      000039                       1063 ___str_8:
      000039 57 48 49 4C 45 20 73  1064 	.ascii "WHILE start"
             74 61 72 74
      000044 0A                    1065 	.db 0x0a
      000045 00                    1066 	.db 0x00
                                   1067 	.area CODE
                                   1068 	.area CONST
      000046                       1069 ___str_9:
      000046 57 48 49 4C 45 20 70  1070 	.ascii "WHILE passed"
             61 73 73 65 64
      000052 0A                    1071 	.db 0x0a
      000053 00                    1072 	.db 0x00
                                   1073 	.area CODE
                                   1074 	.area CONST
      000054                       1075 ___str_10:
      000054 50 49 56 4F           1076 	.ascii "PIVO"
      000058 0A                    1077 	.db 0x0a
      000059 00                    1078 	.db 0x00
                                   1079 	.area CODE
                                   1080 	.area CONST
      00005A                       1081 ___str_11:
      00005A 70 72 65 64 66 6F 72  1082 	.ascii "predfor"
      000061 0A                    1083 	.db 0x0a
      000062 00                    1084 	.db 0x00
                                   1085 	.area CODE
                                   1086 	.area CONST
      000063                       1087 ___str_12:
      000063 66 6F 72              1088 	.ascii "for"
      000066 0A                    1089 	.db 0x0a
      000067 00                    1090 	.db 0x00
                                   1091 	.area CODE
                                   1092 	.area CONST
      000068                       1093 ___str_13:
      000068 70 6F 73 74 66 6F 72  1094 	.ascii "postforif"
             69 66
      000071 0A                    1095 	.db 0x0a
      000072 00                    1096 	.db 0x00
                                   1097 	.area CODE
                                   1098 	.area CONST
      000073                       1099 ___str_14:
      000073 70 72 65 64 73 74 6F  1100 	.ascii "predstop"
             70
      00007B 0A                    1101 	.db 0x0a
      00007C 00                    1102 	.db 0x00
                                   1103 	.area CODE
                                   1104 	.area CONST
      00007D                       1105 ___str_15:
      00007D 70 6F 73 74 73 74 6F  1106 	.ascii "poststop"
             70
      000085 0A                    1107 	.db 0x0a
      000086 00                    1108 	.db 0x00
                                   1109 	.area CODE
                                   1110 	.area CONST
      000087                       1111 ___str_16:
      000087 65 72 72 6F 72 20 61  1112 	.ascii "error addr"
             64 64 72
      000091 0A                    1113 	.db 0x0a
      000092 00                    1114 	.db 0x00
                                   1115 	.area CODE
                                   1116 	.area INITIALIZER
                                   1117 	.area CABS (ABS)
