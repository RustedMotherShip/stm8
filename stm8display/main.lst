                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _setup
                                     13 	.globl _uart_read
                                     14 	.globl _uart_write_byte
                                     15 	.globl _uart_read_byte
                                     16 	.globl _uart_init
                                     17 	.globl _uart_reciever_irq
                                     18 	.globl _uart_transmission_irq
                                     19 	.globl _i2c_scan
                                     20 	.globl _i2c_read
                                     21 	.globl _i2c_write
                                     22 	.globl _i2c_send_address
                                     23 	.globl _i2c_read_byte
                                     24 	.globl _i2c_send_byte
                                     25 	.globl _i2c_stop
                                     26 	.globl _i2c_start
                                     27 	.globl _i2c_init
                                     28 	.globl _i2c_irq
                                     29 	.globl _delay
                                     30 	.globl _dummy
                                     31 	.globl _counter
                                     32 	.globl _govno_alert
                                     33 	.globl _I2C_IRQ
                                     34 	.globl _buf_size
                                     35 	.globl _buf_pos
                                     36 	.globl _rx_buf_pointer
                                     37 	.globl _tx_buf_pointer
                                     38 	.globl _uart_write
                                     39 ;--------------------------------------------------------
                                     40 ; ram data
                                     41 ;--------------------------------------------------------
                                     42 	.area DATA
      000000                         43 _tx_buf_pointer::
      000000                         44 	.ds 2
      000002                         45 _rx_buf_pointer::
      000002                         46 	.ds 2
      000004                         47 _buf_pos::
      000004                         48 	.ds 1
      000005                         49 _buf_size::
      000005                         50 	.ds 1
                                     51 ;--------------------------------------------------------
                                     52 ; ram data
                                     53 ;--------------------------------------------------------
                                     54 	.area INITIALIZED
      000000                         55 _I2C_IRQ::
      000000                         56 	.ds 1
      000001                         57 _govno_alert::
      000001                         58 	.ds 1
      000002                         59 _counter::
      000002                         60 	.ds 1
      000003                         61 _dummy::
      000003                         62 	.ds 1
                                     63 ;--------------------------------------------------------
                                     64 ; Stack segment in internal ram
                                     65 ;--------------------------------------------------------
                                     66 	.area SSEG
      000000                         67 __start__stack:
      000000                         68 	.ds	1
                                     69 
                                     70 ;--------------------------------------------------------
                                     71 ; absolute external ram data
                                     72 ;--------------------------------------------------------
                                     73 	.area DABS (ABS)
                                     74 
                                     75 ; default segment ordering for linker
                                     76 	.area HOME
                                     77 	.area GSINIT
                                     78 	.area GSFINAL
                                     79 	.area CONST
                                     80 	.area INITIALIZER
                                     81 	.area CODE
                                     82 
                                     83 ;--------------------------------------------------------
                                     84 ; interrupt vector
                                     85 ;--------------------------------------------------------
                                     86 	.area HOME
      000000                         87 __interrupt_vect:
      000000 82v00u00u00             88 	int s_GSINIT ; reset
      000004 82 00 00 00             89 	int 0x000000 ; trap
      000008 82 00 00 00             90 	int 0x000000 ; int0
      00000C 82 00 00 00             91 	int 0x000000 ; int1
      000010 82 00 00 00             92 	int 0x000000 ; int2
      000014 82 00 00 00             93 	int 0x000000 ; int3
      000018 82 00 00 00             94 	int 0x000000 ; int4
      00001C 82 00 00 00             95 	int 0x000000 ; int5
      000020 82 00 00 00             96 	int 0x000000 ; int6
      000024 82 00 00 00             97 	int 0x000000 ; int7
      000028 82 00 00 00             98 	int 0x000000 ; int8
      00002C 82 00 00 00             99 	int 0x000000 ; int9
      000030 82 00 00 00            100 	int 0x000000 ; int10
      000034 82 00 00 00            101 	int 0x000000 ; int11
      000038 82 00 00 00            102 	int 0x000000 ; int12
      00003C 82 00 00 00            103 	int 0x000000 ; int13
      000040 82 00 00 00            104 	int 0x000000 ; int14
      000044 82 00 00 00            105 	int 0x000000 ; int15
      000048 82 00 00 00            106 	int 0x000000 ; int16
      00004C 82v00u01uEA            107 	int _uart_transmission_irq ; int17
      000050 82v00u02u26            108 	int _uart_reciever_irq ; int18
      000054 82v00u00u0A            109 	int _i2c_irq ; int19
                                    110 ;--------------------------------------------------------
                                    111 ; global & static initialisations
                                    112 ;--------------------------------------------------------
                                    113 	.area HOME
                                    114 	.area GSINIT
                                    115 	.area GSFINAL
                                    116 	.area GSINIT
      000000 CDr00r00         [ 4]  117 	call	___sdcc_external_startup
      000003 4D               [ 1]  118 	tnz	a
      000004 27 03            [ 1]  119 	jreq	__sdcc_init_data
      000006 CCr00r58         [ 2]  120 	jp	__sdcc_program_startup
      000009                        121 __sdcc_init_data:
                                    122 ; stm8_genXINIT() start
      000009 AEr00r00         [ 2]  123 	ldw x, #l_DATA
      00000C 27 07            [ 1]  124 	jreq	00002$
      00000E                        125 00001$:
      00000E 72 4FuFFuFF      [ 1]  126 	clr (s_DATA - 1, x)
      000012 5A               [ 2]  127 	decw x
      000013 26 F9            [ 1]  128 	jrne	00001$
      000015                        129 00002$:
      000015 AEr00r00         [ 2]  130 	ldw	x, #l_INITIALIZER
      000018 27 09            [ 1]  131 	jreq	00004$
      00001A                        132 00003$:
      00001A D6uFFuFF         [ 1]  133 	ld	a, (s_INITIALIZER - 1, x)
      00001D D7uFFuFF         [ 1]  134 	ld	(s_INITIALIZED - 1, x), a
      000020 5A               [ 2]  135 	decw	x
      000021 26 F7            [ 1]  136 	jrne	00003$
      000023                        137 00004$:
                                    138 ; stm8_genXINIT() end
                                    139 	.area GSFINAL
      000000 CCr00r58         [ 2]  140 	jp	__sdcc_program_startup
                                    141 ;--------------------------------------------------------
                                    142 ; Home
                                    143 ;--------------------------------------------------------
                                    144 	.area HOME
                                    145 	.area HOME
      000058                        146 __sdcc_program_startup:
      000058 CCr03rDE         [ 2]  147 	jp	_main
                                    148 ;	return from main will return to caller
                                    149 ;--------------------------------------------------------
                                    150 ; code
                                    151 ;--------------------------------------------------------
                                    152 	.area CODE
                                    153 ;	libs/i2c_lib.c: 5: void delay(uint16_t ticks)
                                    154 ;	-----------------------------------------
                                    155 ;	 function delay
                                    156 ;	-----------------------------------------
      000000                        157 _delay:
                                    158 ;	libs/i2c_lib.c: 7: while(ticks > 0)
      000000                        159 00101$:
      000000 5D               [ 2]  160 	tnzw	x
      000001 26 01            [ 1]  161 	jrne	00120$
      000003 81               [ 4]  162 	ret
      000004                        163 00120$:
                                    164 ;	libs/i2c_lib.c: 9: ticks-=2;
      000004 5A               [ 2]  165 	decw	x
      000005 5A               [ 2]  166 	decw	x
                                    167 ;	libs/i2c_lib.c: 10: ticks+=1;
      000006 5C               [ 1]  168 	incw	x
      000007 20 F7            [ 2]  169 	jra	00101$
                                    170 ;	libs/i2c_lib.c: 12: }
      000009 81               [ 4]  171 	ret
                                    172 ;	libs/i2c_lib.c: 14: void i2c_irq(void) __interrupt(I2C_vector)
                                    173 ;	-----------------------------------------
                                    174 ;	 function i2c_irq
                                    175 ;	-----------------------------------------
      00000A                        176 _i2c_irq:
      00000A 4F               [ 1]  177 	clr	a
      00000B 62               [ 2]  178 	div	x, a
                                    179 ;	libs/i2c_lib.c: 17: disableInterrupts();
      00000C 9B               [ 1]  180 	sim
                                    181 ;	libs/i2c_lib.c: 18: I2C_IRQ.all = 0;//обнуление флагов регистров
      00000D 35 00u00u00      [ 1]  182 	mov	_I2C_IRQ+0, #0x00
                                    183 ;	libs/i2c_lib.c: 20: if(I2C_SR1 -> ADDR)//прерывание адреса
      000011 AE 52 17         [ 2]  184 	ldw	x, #0x5217
      000014 F6               [ 1]  185 	ld	a, (x)
      000015 44               [ 1]  186 	srl	a
      000016 A4 01            [ 1]  187 	and	a, #0x01
      000018 27 10            [ 1]  188 	jreq	00102$
                                    189 ;	libs/i2c_lib.c: 22: clr_sr1();
      00001A C6 52 17         [ 1]  190 	ld	a,0x5217
                                    191 ;	libs/i2c_lib.c: 23: I2C_IRQ.ADDR = 1;
      00001D 72 12u00u00      [ 1]  192 	bset	_I2C_IRQ+0, #1
                                    193 ;	libs/i2c_lib.c: 24: clr_sr3();//EV6
      000021 C6 52 19         [ 1]  194 	ld	a,0x5219
                                    195 ;	libs/i2c_lib.c: 25: I2C_ITR -> ITEVTEN = 0;
      000024 72 13 52 1A      [ 1]  196 	bres	0x521a, #1
                                    197 ;	libs/i2c_lib.c: 26: return;
      000028 20 6A            [ 2]  198 	jra	00113$
      00002A                        199 00102$:
                                    200 ;	libs/i2c_lib.c: 28: if(I2C_SR1 -> SB)//EV5 прерывание стартового импульса
      00002A C6 52 17         [ 1]  201 	ld	a, 0x5217
      00002D A5 01            [ 1]  202 	bcp	a, #0x01
      00002F 27 0A            [ 1]  203 	jreq	00104$
                                    204 ;	libs/i2c_lib.c: 30: I2C_IRQ.SB = 1;
      000031 72 10u00u00      [ 1]  205 	bset	_I2C_IRQ+0, #0
                                    206 ;	libs/i2c_lib.c: 31: I2C_ITR -> ITEVTEN = 0;
      000035 72 13 52 1A      [ 1]  207 	bres	0x521a, #1
                                    208 ;	libs/i2c_lib.c: 32: return;
      000039 20 59            [ 2]  209 	jra	00113$
      00003B                        210 00104$:
                                    211 ;	libs/i2c_lib.c: 34: if(I2C_SR1 -> BTF) //прерывание отправки данных
      00003B C6 52 17         [ 1]  212 	ld	a, 0x5217
      00003E 44               [ 1]  213 	srl	a
      00003F 44               [ 1]  214 	srl	a
      000040 A5 01            [ 1]  215 	bcp	a, #0x01
      000042 27 0A            [ 1]  216 	jreq	00106$
                                    217 ;	libs/i2c_lib.c: 36: I2C_IRQ.BTF = 1;
      000044 72 14u00u00      [ 1]  218 	bset	_I2C_IRQ+0, #2
                                    219 ;	libs/i2c_lib.c: 37: I2C_ITR -> ITEVTEN = 0;
      000048 72 13 52 1A      [ 1]  220 	bres	0x521a, #1
                                    221 ;	libs/i2c_lib.c: 38: return;
      00004C 20 46            [ 2]  222 	jra	00113$
      00004E                        223 00106$:
                                    224 ;	libs/i2c_lib.c: 40: if(I2C_SR1 -> TXE) //прерывание регистра данных(он пуст)
      00004E C6 52 17         [ 1]  225 	ld	a, 0x5217
      000051 4E               [ 1]  226 	swap	a
      000052 44               [ 1]  227 	srl	a
      000053 44               [ 1]  228 	srl	a
      000054 44               [ 1]  229 	srl	a
      000055 A5 01            [ 1]  230 	bcp	a, #0x01
      000057 27 0A            [ 1]  231 	jreq	00108$
                                    232 ;	libs/i2c_lib.c: 42: I2C_IRQ.TXE = 1;
      000059 72 18u00u00      [ 1]  233 	bset	_I2C_IRQ+0, #4
                                    234 ;	libs/i2c_lib.c: 43: I2C_ITR -> ITBUFEN = 0;
      00005D 72 15 52 1A      [ 1]  235 	bres	0x521a, #2
                                    236 ;	libs/i2c_lib.c: 44: return;
      000061 20 31            [ 2]  237 	jra	00113$
      000063                        238 00108$:
                                    239 ;	libs/i2c_lib.c: 46: if(I2C_SR1 -> RXNE) //прерывание регистра данных(он не пуст)
      000063 C6 52 17         [ 1]  240 	ld	a, 0x5217
      000066 4E               [ 1]  241 	swap	a
      000067 44               [ 1]  242 	srl	a
      000068 44               [ 1]  243 	srl	a
      000069 A5 01            [ 1]  244 	bcp	a, #0x01
      00006B 27 0A            [ 1]  245 	jreq	00110$
                                    246 ;	libs/i2c_lib.c: 48: I2C_IRQ.RXNE = 1;
      00006D 72 16u00u00      [ 1]  247 	bset	_I2C_IRQ+0, #3
                                    248 ;	libs/i2c_lib.c: 49: I2C_ITR -> ITBUFEN = 0;
      000071 72 15 52 1A      [ 1]  249 	bres	0x521a, #2
                                    250 ;	libs/i2c_lib.c: 50: return;
      000075 20 1D            [ 2]  251 	jra	00113$
      000077                        252 00110$:
                                    253 ;	libs/i2c_lib.c: 52: if(I2C_SR2 -> AF) //прерывание ошибки NACK
      000077 AE 52 18         [ 2]  254 	ldw	x, #0x5218
      00007A F6               [ 1]  255 	ld	a, (x)
      00007B 44               [ 1]  256 	srl	a
      00007C 44               [ 1]  257 	srl	a
      00007D A4 01            [ 1]  258 	and	a, #0x01
      00007F 27 12            [ 1]  259 	jreq	00112$
                                    260 ;	libs/i2c_lib.c: 54: I2C_IRQ.AF = 1;
      000081 72 1Au00u00      [ 1]  261 	bset	_I2C_IRQ+0, #5
                                    262 ;	libs/i2c_lib.c: 55: I2C_ITR -> ITEVTEN = 0;
      000085 72 13 52 1A      [ 1]  263 	bres	0x521a, #1
                                    264 ;	libs/i2c_lib.c: 56: I2C_ITR -> ITERREN = 0;
      000089 72 11 52 1A      [ 1]  265 	bres	0x521a, #0
                                    266 ;	libs/i2c_lib.c: 57: I2C_ITR -> ITBUFEN = 0;
      00008D 72 15 52 1A      [ 1]  267 	bres	0x521a, #2
                                    268 ;	libs/i2c_lib.c: 58: return;
      000091 20 01            [ 2]  269 	jra	00113$
      000093                        270 00112$:
                                    271 ;	libs/i2c_lib.c: 60: enableInterrupts(); 
      000093 9A               [ 1]  272 	rim
      000094                        273 00113$:
                                    274 ;	libs/i2c_lib.c: 61: }
      000094 80               [11]  275 	iret
                                    276 ;	libs/i2c_lib.c: 62: void i2c_init(void)
                                    277 ;	-----------------------------------------
                                    278 ;	 function i2c_init
                                    279 ;	-----------------------------------------
      000095                        280 _i2c_init:
                                    281 ;	libs/i2c_lib.c: 66: I2C_CR1 -> PE = 0;// PE=0, disable I2C before setup
      000095 72 11 52 10      [ 1]  282 	bres	0x5210, #0
                                    283 ;	libs/i2c_lib.c: 67: I2C_FREQR -> FREQ = 16;// peripheral frequence =16MHz
      000099 C6 52 12         [ 1]  284 	ld	a, 0x5212
      00009C A4 C0            [ 1]  285 	and	a, #0xc0
      00009E AA 10            [ 1]  286 	or	a, #0x10
      0000A0 C7 52 12         [ 1]  287 	ld	0x5212, a
                                    288 ;	libs/i2c_lib.c: 68: I2C_CCRH -> CCR = 0;// =0
      0000A3 C6 52 1C         [ 1]  289 	ld	a, 0x521c
      0000A6 A4 F0            [ 1]  290 	and	a, #0xf0
      0000A8 C7 52 1C         [ 1]  291 	ld	0x521c, a
                                    292 ;	libs/i2c_lib.c: 69: I2C_CCRL -> CCR = 80;// 100kHz for I2C
      0000AB 35 50 52 1B      [ 1]  293 	mov	0x521b+0, #0x50
                                    294 ;	libs/i2c_lib.c: 70: I2C_CCRH -> FS = 0;// set standart mode(100кHz)
      0000AF 72 1F 52 1C      [ 1]  295 	bres	0x521c, #7
                                    296 ;	libs/i2c_lib.c: 71: I2C_OARH -> ADDMODE = 0;// 7-bit address mode
      0000B3 72 1F 52 14      [ 1]  297 	bres	0x5214, #7
                                    298 ;	libs/i2c_lib.c: 72: I2C_OARH -> ADDCONF = 1;// see reference manual
      0000B7 72 10 52 14      [ 1]  299 	bset	0x5214, #0
                                    300 ;	libs/i2c_lib.c: 73: I2C_CR1 -> PE = 1;// PE=1, enable I2C
      0000BB 72 10 52 10      [ 1]  301 	bset	0x5210, #0
                                    302 ;	libs/i2c_lib.c: 74: }
      0000BF 81               [ 4]  303 	ret
                                    304 ;	libs/i2c_lib.c: 76: void i2c_start(void)
                                    305 ;	-----------------------------------------
                                    306 ;	 function i2c_start
                                    307 ;	-----------------------------------------
      0000C0                        308 _i2c_start:
                                    309 ;	libs/i2c_lib.c: 79: I2C_ITR -> ITEVTEN = 1;//Включение прерываний для обработки сигнала старт
      0000C0 72 12 52 1A      [ 1]  310 	bset	0x521a, #1
                                    311 ;	libs/i2c_lib.c: 80: I2C_CR2 -> START = 1;// Отправляем стартовый сигнал
      0000C4 72 10 52 11      [ 1]  312 	bset	0x5211, #0
                                    313 ;	libs/i2c_lib.c: 81: while(I2C_ITR -> ITEVTEN);// Ожидание отправки стартового сигнала
      0000C8                        314 00101$:
      0000C8 C6 52 1A         [ 1]  315 	ld	a, 0x521a
      0000CB A5 02            [ 1]  316 	bcp	a, #2
      0000CD 26 F9            [ 1]  317 	jrne	00101$
                                    318 ;	libs/i2c_lib.c: 82: }
      0000CF 81               [ 4]  319 	ret
                                    320 ;	libs/i2c_lib.c: 84: void i2c_stop(void)
                                    321 ;	-----------------------------------------
                                    322 ;	 function i2c_stop
                                    323 ;	-----------------------------------------
      0000D0                        324 _i2c_stop:
                                    325 ;	libs/i2c_lib.c: 86: I2C_CR2 -> STOP = 1;// Отправка стопового сигнала  
      0000D0 72 12 52 11      [ 1]  326 	bset	0x5211, #1
                                    327 ;	libs/i2c_lib.c: 87: }
      0000D4 81               [ 4]  328 	ret
                                    329 ;	libs/i2c_lib.c: 89: uint8_t i2c_send_byte(unsigned char data)
                                    330 ;	-----------------------------------------
                                    331 ;	 function i2c_send_byte
                                    332 ;	-----------------------------------------
      0000D5                        333 _i2c_send_byte:
      0000D5 88               [ 1]  334 	push	a
      0000D6 6B 01            [ 1]  335 	ld	(0x01, sp), a
                                    336 ;	libs/i2c_lib.c: 91: I2C_ITR -> ITBUFEN = 1;
      0000D8 72 14 52 1A      [ 1]  337 	bset	0x521a, #2
                                    338 ;	libs/i2c_lib.c: 92: I2C_ITR -> ITEVTEN = 1; //Включение прерываний на отправку
      0000DC 72 12 52 1A      [ 1]  339 	bset	0x521a, #1
                                    340 ;	libs/i2c_lib.c: 93: I2C_ITR -> ITERREN = 1; //Включение прерываний на ошибки
      0000E0 72 10 52 1A      [ 1]  341 	bset	0x521a, #0
                                    342 ;	libs/i2c_lib.c: 94: I2C_DR -> DR = data; //Отправка данных
      0000E4 AE 52 16         [ 2]  343 	ldw	x, #0x5216
      0000E7 7B 01            [ 1]  344 	ld	a, (0x01, sp)
      0000E9 F7               [ 1]  345 	ld	(x), a
                                    346 ;	libs/i2c_lib.c: 95: while(I2C_ITR -> ITERREN && I2C_ITR -> ITEVTEN);//ожидание прерывания
      0000EA                        347 00102$:
      0000EA C6 52 1A         [ 1]  348 	ld	a, 0x521a
      0000ED A5 01            [ 1]  349 	bcp	a, #0x01
      0000EF 27 07            [ 1]  350 	jreq	00104$
      0000F1 C6 52 1A         [ 1]  351 	ld	a, 0x521a
      0000F4 A5 02            [ 1]  352 	bcp	a, #2
      0000F6 26 F2            [ 1]  353 	jrne	00102$
      0000F8                        354 00104$:
                                    355 ;	libs/i2c_lib.c: 96: return I2C_IRQ.AF;//флаг ответа
      0000F8 C6u00u00         [ 1]  356 	ld	a, _I2C_IRQ+0
      0000FB 4E               [ 1]  357 	swap	a
      0000FC 44               [ 1]  358 	srl	a
      0000FD A4 01            [ 1]  359 	and	a, #0x01
                                    360 ;	libs/i2c_lib.c: 97: }
      0000FF 5B 01            [ 2]  361 	addw	sp, #1
      000101 81               [ 4]  362 	ret
                                    363 ;	libs/i2c_lib.c: 99: uint8_t i2c_read_byte(unsigned char data){
                                    364 ;	-----------------------------------------
                                    365 ;	 function i2c_read_byte
                                    366 ;	-----------------------------------------
      000102                        367 _i2c_read_byte:
                                    368 ;	libs/i2c_lib.c: 100: I2C_ITR -> ITBUFEN = 1;
      000102 72 14 52 1A      [ 1]  369 	bset	0x521a, #2
                                    370 ;	libs/i2c_lib.c: 101: I2C_ITR -> ITEVTEN = 1; //Включение прерываний на отправку
      000106 72 12 52 1A      [ 1]  371 	bset	0x521a, #1
                                    372 ;	libs/i2c_lib.c: 102: I2C_ITR -> ITERREN = 1; //Включение прерываний на ошибки
      00010A 72 10 52 1A      [ 1]  373 	bset	0x521a, #0
                                    374 ;	libs/i2c_lib.c: 103: while(I2C_ITR -> ITERREN && I2C_ITR -> ITEVTEN);//ожидание прерывания
      00010E                        375 00102$:
      00010E C6 52 1A         [ 1]  376 	ld	a, 0x521a
      000111 A5 01            [ 1]  377 	bcp	a, #0x01
      000113 27 07            [ 1]  378 	jreq	00104$
      000115 C6 52 1A         [ 1]  379 	ld	a, 0x521a
      000118 A5 02            [ 1]  380 	bcp	a, #2
      00011A 26 F2            [ 1]  381 	jrne	00102$
      00011C                        382 00104$:
                                    383 ;	libs/i2c_lib.c: 105: return 0;
      00011C 4F               [ 1]  384 	clr	a
                                    385 ;	libs/i2c_lib.c: 106: }
      00011D 81               [ 4]  386 	ret
                                    387 ;	libs/i2c_lib.c: 108: uint8_t i2c_send_address(uint8_t address,uint8_t rw_type) 
                                    388 ;	-----------------------------------------
                                    389 ;	 function i2c_send_address
                                    390 ;	-----------------------------------------
      00011E                        391 _i2c_send_address:
                                    392 ;	libs/i2c_lib.c: 113: address = address << 1;
      00011E 48               [ 1]  393 	sll	a
                                    394 ;	libs/i2c_lib.c: 110: switch(rw_type)
      00011F 88               [ 1]  395 	push	a
      000120 7B 04            [ 1]  396 	ld	a, (0x04, sp)
      000122 4A               [ 1]  397 	dec	a
      000123 84               [ 1]  398 	pop	a
      000124 26 02            [ 1]  399 	jrne	00102$
                                    400 ;	libs/i2c_lib.c: 113: address = address << 1;
                                    401 ;	libs/i2c_lib.c: 114: address |= 0x01; // Отправка адреса устройства с битом на чтение
      000126 AA 01            [ 1]  402 	or	a, #0x01
                                    403 ;	libs/i2c_lib.c: 115: break;
                                    404 ;	libs/i2c_lib.c: 116: default:
                                    405 ;	libs/i2c_lib.c: 117: address = address << 1; // Отправка адреса устройства с битом на запись
                                    406 ;	libs/i2c_lib.c: 119: }
      000128                        407 00102$:
                                    408 ;	libs/i2c_lib.c: 120: i2c_start();
      000128 88               [ 1]  409 	push	a
      000129 CDr00rC0         [ 4]  410 	call	_i2c_start
      00012C 84               [ 1]  411 	pop	a
                                    412 ;	libs/i2c_lib.c: 121: I2C_DR -> DR = address;
      00012D C7 52 16         [ 1]  413 	ld	0x5216, a
                                    414 ;	libs/i2c_lib.c: 122: I2C_ITR -> ITEVTEN = 1; //Включение прерываний на отправку
      000130 72 12 52 1A      [ 1]  415 	bset	0x521a, #1
                                    416 ;	libs/i2c_lib.c: 123: I2C_ITR -> ITERREN = 1; //Включение прерываний на ошибки
      000134 72 10 52 1A      [ 1]  417 	bset	0x521a, #0
                                    418 ;	libs/i2c_lib.c: 124: while(I2C_ITR -> ITEVTEN && I2C_ITR -> ITERREN);
      000138                        419 00105$:
      000138 C6 52 1A         [ 1]  420 	ld	a, 0x521a
      00013B A5 02            [ 1]  421 	bcp	a, #2
      00013D 27 07            [ 1]  422 	jreq	00107$
      00013F C6 52 1A         [ 1]  423 	ld	a, 0x521a
      000142 A5 01            [ 1]  424 	bcp	a, #0x01
      000144 26 F2            [ 1]  425 	jrne	00105$
      000146                        426 00107$:
                                    427 ;	libs/i2c_lib.c: 125: return !I2C_IRQ.AF;
      000146 C6u00u00         [ 1]  428 	ld	a, _I2C_IRQ+0
      000149 4E               [ 1]  429 	swap	a
      00014A 44               [ 1]  430 	srl	a
      00014B A4 01            [ 1]  431 	and	a, #0x01
      00014D A8 01            [ 1]  432 	xor	a, #0x01
                                    433 ;	libs/i2c_lib.c: 126: }
      00014F 85               [ 2]  434 	popw	x
      000150 5B 01            [ 2]  435 	addw	sp, #1
      000152 FC               [ 2]  436 	jp	(x)
                                    437 ;	libs/i2c_lib.c: 128: void i2c_write(uint8_t dev_addr,uint8_t size,uint8_t *data)
                                    438 ;	-----------------------------------------
                                    439 ;	 function i2c_write
                                    440 ;	-----------------------------------------
      000153                        441 _i2c_write:
      000153 52 02            [ 2]  442 	sub	sp, #2
                                    443 ;	libs/i2c_lib.c: 130: if(i2c_send_address(dev_addr, 0))//Проверка на АСК бит
      000155 4B 00            [ 1]  444 	push	#0x00
      000157 CDr01r1E         [ 4]  445 	call	_i2c_send_address
      00015A 4D               [ 1]  446 	tnz	a
      00015B 27 1D            [ 1]  447 	jreq	00105$
                                    448 ;	libs/i2c_lib.c: 131: for(int i = 0;i < size;i++)
      00015D 5F               [ 1]  449 	clrw	x
      00015E                        450 00107$:
      00015E 7B 05            [ 1]  451 	ld	a, (0x05, sp)
      000160 6B 02            [ 1]  452 	ld	(0x02, sp), a
      000162 0F 01            [ 1]  453 	clr	(0x01, sp)
      000164 13 01            [ 2]  454 	cpw	x, (0x01, sp)
      000166 2E 12            [ 1]  455 	jrsge	00105$
                                    456 ;	libs/i2c_lib.c: 133: if(i2c_send_byte(data[i]))//Проверка на АСК бит
      000168 90 93            [ 1]  457 	ldw	y, x
      00016A 72 F9 06         [ 2]  458 	addw	y, (0x06, sp)
      00016D 90 F6            [ 1]  459 	ld	a, (y)
      00016F 89               [ 2]  460 	pushw	x
      000170 CDr00rD5         [ 4]  461 	call	_i2c_send_byte
      000173 85               [ 2]  462 	popw	x
      000174 4D               [ 1]  463 	tnz	a
      000175 26 03            [ 1]  464 	jrne	00105$
                                    465 ;	libs/i2c_lib.c: 131: for(int i = 0;i < size;i++)
      000177 5C               [ 1]  466 	incw	x
      000178 20 E4            [ 2]  467 	jra	00107$
      00017A                        468 00105$:
                                    469 ;	libs/i2c_lib.c: 138: i2c_stop();
      00017A 1E 03            [ 2]  470 	ldw	x, (3, sp)
      00017C 1F 06            [ 2]  471 	ldw	(6, sp), x
      00017E 5B 05            [ 2]  472 	addw	sp, #5
                                    473 ;	libs/i2c_lib.c: 139: }
      000180 CCr00rD0         [ 2]  474 	jp	_i2c_stop
                                    475 ;	libs/i2c_lib.c: 141: void i2c_read(uint8_t dev_addr, uint8_t size,uint8_t *data)
                                    476 ;	-----------------------------------------
                                    477 ;	 function i2c_read
                                    478 ;	-----------------------------------------
      000183                        479 _i2c_read:
      000183 52 02            [ 2]  480 	sub	sp, #2
                                    481 ;	libs/i2c_lib.c: 144: i2c_send_address(dev_addr, 1);
      000185 88               [ 1]  482 	push	a
      000186 4B 01            [ 1]  483 	push	#0x01
      000188 CDr01r1E         [ 4]  484 	call	_i2c_send_address
      00018B 84               [ 1]  485 	pop	a
                                    486 ;	libs/i2c_lib.c: 145: if(i2c_send_address(dev_addr, 1))//проверка на ACK
      00018C 4B 01            [ 1]  487 	push	#0x01
      00018E CDr01r1E         [ 4]  488 	call	_i2c_send_address
      000191 4D               [ 1]  489 	tnz	a
      000192 27 1A            [ 1]  490 	jreq	00103$
                                    491 ;	libs/i2c_lib.c: 148: for(int i = 0;i < size;i++) //цикл чтения данных с шины
      000194 5F               [ 1]  492 	clrw	x
      000195                        493 00105$:
      000195 7B 05            [ 1]  494 	ld	a, (0x05, sp)
      000197 6B 02            [ 1]  495 	ld	(0x02, sp), a
      000199 0F 01            [ 1]  496 	clr	(0x01, sp)
      00019B 13 01            [ 2]  497 	cpw	x, (0x01, sp)
      00019D 2E 0F            [ 1]  498 	jrsge	00103$
                                    499 ;	libs/i2c_lib.c: 150: i2c_read_byte(data[i]);//функция записи байта в элемент массива
      00019F 90 93            [ 1]  500 	ldw	y, x
      0001A1 72 F9 06         [ 2]  501 	addw	y, (0x06, sp)
      0001A4 90 F6            [ 1]  502 	ld	a, (y)
      0001A6 89               [ 2]  503 	pushw	x
      0001A7 CDr01r02         [ 4]  504 	call	_i2c_read_byte
      0001AA 85               [ 2]  505 	popw	x
                                    506 ;	libs/i2c_lib.c: 148: for(int i = 0;i < size;i++) //цикл чтения данных с шины
      0001AB 5C               [ 1]  507 	incw	x
      0001AC 20 E7            [ 2]  508 	jra	00105$
      0001AE                        509 00103$:
                                    510 ;	libs/i2c_lib.c: 154: i2c_stop(); 
      0001AE 1E 03            [ 2]  511 	ldw	x, (3, sp)
      0001B0 1F 06            [ 2]  512 	ldw	(6, sp), x
      0001B2 5B 05            [ 2]  513 	addw	sp, #5
                                    514 ;	libs/i2c_lib.c: 155: }
      0001B4 CCr00rD0         [ 2]  515 	jp	_i2c_stop
                                    516 ;	libs/i2c_lib.c: 156: uint8_t i2c_scan(void) 
                                    517 ;	-----------------------------------------
                                    518 ;	 function i2c_scan
                                    519 ;	-----------------------------------------
      0001B7                        520 _i2c_scan:
      0001B7 52 02            [ 2]  521 	sub	sp, #2
                                    522 ;	libs/i2c_lib.c: 158: for (uint8_t addr = 1; addr < 127; addr++)
      0001B9 A6 01            [ 1]  523 	ld	a, #0x01
      0001BB 6B 01            [ 1]  524 	ld	(0x01, sp), a
      0001BD                        525 00105$:
      0001BD A1 7F            [ 1]  526 	cp	a, #0x7f
      0001BF 24 22            [ 1]  527 	jrnc	00103$
                                    528 ;	libs/i2c_lib.c: 160: if(i2c_send_address(addr, 0))//отправка адреса на проверку 
      0001C1 88               [ 1]  529 	push	a
      0001C2 4B 00            [ 1]  530 	push	#0x00
      0001C4 CDr01r1E         [ 4]  531 	call	_i2c_send_address
      0001C7 6B 03            [ 1]  532 	ld	(0x03, sp), a
      0001C9 84               [ 1]  533 	pop	a
      0001CA 0D 02            [ 1]  534 	tnz	(0x02, sp)
      0001CC 27 07            [ 1]  535 	jreq	00102$
                                    536 ;	libs/i2c_lib.c: 162: i2c_stop();//адрес совпал 
      0001CE CDr00rD0         [ 4]  537 	call	_i2c_stop
                                    538 ;	libs/i2c_lib.c: 163: return addr;// выход из цикла
      0001D1 7B 01            [ 1]  539 	ld	a, (0x01, sp)
      0001D3 20 12            [ 2]  540 	jra	00107$
      0001D5                        541 00102$:
                                    542 ;	libs/i2c_lib.c: 165: I2C_SR2 -> AF = 0;//очистка флага ошибки
      0001D5 AE 52 18         [ 2]  543 	ldw	x, #0x5218
      0001D8 88               [ 1]  544 	push	a
      0001D9 F6               [ 1]  545 	ld	a, (x)
      0001DA A4 FB            [ 1]  546 	and	a, #0xfb
      0001DC F7               [ 1]  547 	ld	(x), a
      0001DD 84               [ 1]  548 	pop	a
                                    549 ;	libs/i2c_lib.c: 158: for (uint8_t addr = 1; addr < 127; addr++)
      0001DE 4C               [ 1]  550 	inc	a
      0001DF 6B 01            [ 1]  551 	ld	(0x01, sp), a
      0001E1 20 DA            [ 2]  552 	jra	00105$
      0001E3                        553 00103$:
                                    554 ;	libs/i2c_lib.c: 167: i2c_stop();//совпадений нет выход из функции
      0001E3 CDr00rD0         [ 4]  555 	call	_i2c_stop
                                    556 ;	libs/i2c_lib.c: 168: return 0;
      0001E6 4F               [ 1]  557 	clr	a
      0001E7                        558 00107$:
                                    559 ;	libs/i2c_lib.c: 169: }
      0001E7 5B 02            [ 2]  560 	addw	sp, #2
      0001E9 81               [ 4]  561 	ret
                                    562 ;	libs/uart_lib.c: 3: void uart_transmission_irq(void) __interrupt(UART1_T_vector)
                                    563 ;	-----------------------------------------
                                    564 ;	 function uart_transmission_irq
                                    565 ;	-----------------------------------------
      0001EA                        566 _uart_transmission_irq:
                                    567 ;	libs/uart_lib.c: 5: if(UART1_SR -> TXE) 
      0001EA AE 52 30         [ 2]  568 	ldw	x, #0x5230
      0001ED F6               [ 1]  569 	ld	a, (x)
      0001EE 4E               [ 1]  570 	swap	a
      0001EF 44               [ 1]  571 	srl	a
      0001F0 44               [ 1]  572 	srl	a
      0001F1 44               [ 1]  573 	srl	a
      0001F2 A5 01            [ 1]  574 	bcp	a, #0x01
      0001F4 27 2F            [ 1]  575 	jreq	00107$
                                    576 ;	libs/uart_lib.c: 7: if(tx_buf_pointer[buf_pos] != '\0' && buf_size>buf_pos)
      0001F6 C6u00u01         [ 1]  577 	ld	a, _tx_buf_pointer+1
      0001F9 CBu00u04         [ 1]  578 	add	a, _buf_pos+0
      0001FC 97               [ 1]  579 	ld	xl, a
      0001FD C6u00u00         [ 1]  580 	ld	a, _tx_buf_pointer+0
      000200 A9 00            [ 1]  581 	adc	a, #0x00
      000202 95               [ 1]  582 	ld	xh, a
      000203 F6               [ 1]  583 	ld	a, (x)
      000204 27 1B            [ 1]  584 	jreq	00102$
      000206 C6u00u04         [ 1]  585 	ld	a, _buf_pos+0
      000209 C1u00u05         [ 1]  586 	cp	a, _buf_size+0
      00020C 24 13            [ 1]  587 	jrnc	00102$
                                    588 ;	libs/uart_lib.c: 8: UART1_DR -> DR = tx_buf_pointer[buf_pos++];
      00020E C6u00u04         [ 1]  589 	ld	a, _buf_pos+0
      000211 72 5Cu00u04      [ 1]  590 	inc	_buf_pos+0
      000215 5F               [ 1]  591 	clrw	x
      000216 97               [ 1]  592 	ld	xl, a
      000217 72 BBu00u00      [ 2]  593 	addw	x, _tx_buf_pointer+0
      00021B F6               [ 1]  594 	ld	a, (x)
      00021C C7 52 31         [ 1]  595 	ld	0x5231, a
      00021F 20 04            [ 2]  596 	jra	00107$
      000221                        597 00102$:
                                    598 ;	libs/uart_lib.c: 10: UART1_CR2 -> TIEN = 0;
      000221 72 1F 52 35      [ 1]  599 	bres	0x5235, #7
      000225                        600 00107$:
                                    601 ;	libs/uart_lib.c: 14: }
      000225 80               [11]  602 	iret
                                    603 ;	libs/uart_lib.c: 15: void uart_reciever_irq(void) __interrupt(UART1_R_vector)
                                    604 ;	-----------------------------------------
                                    605 ;	 function uart_reciever_irq
                                    606 ;	-----------------------------------------
      000226                        607 _uart_reciever_irq:
      000226 88               [ 1]  608 	push	a
                                    609 ;	libs/uart_lib.c: 19: if(UART1_SR -> RXNE)
      000227 C6 52 30         [ 1]  610 	ld	a, 0x5230
      00022A 4E               [ 1]  611 	swap	a
      00022B 44               [ 1]  612 	srl	a
      00022C A5 01            [ 1]  613 	bcp	a, #0x01
      00022E 27 27            [ 1]  614 	jreq	00107$
                                    615 ;	libs/uart_lib.c: 21: trash_reg = UART1_DR -> DR;
      000230 C6 52 31         [ 1]  616 	ld	a, 0x5231
                                    617 ;	libs/uart_lib.c: 22: if(trash_reg != '\n' && buf_size>buf_pos)
      000233 6B 01            [ 1]  618 	ld	(0x01, sp), a
      000235 A1 0A            [ 1]  619 	cp	a, #0x0a
      000237 27 1A            [ 1]  620 	jreq	00102$
      000239 C6u00u04         [ 1]  621 	ld	a, _buf_pos+0
      00023C C1u00u05         [ 1]  622 	cp	a, _buf_size+0
      00023F 24 12            [ 1]  623 	jrnc	00102$
                                    624 ;	libs/uart_lib.c: 23: rx_buf_pointer[buf_pos++] = trash_reg;
      000241 C6u00u04         [ 1]  625 	ld	a, _buf_pos+0
      000244 72 5Cu00u04      [ 1]  626 	inc	_buf_pos+0
      000248 5F               [ 1]  627 	clrw	x
      000249 97               [ 1]  628 	ld	xl, a
      00024A 72 BBu00u02      [ 2]  629 	addw	x, _rx_buf_pointer+0
      00024E 7B 01            [ 1]  630 	ld	a, (0x01, sp)
      000250 F7               [ 1]  631 	ld	(x), a
      000251 20 04            [ 2]  632 	jra	00107$
      000253                        633 00102$:
                                    634 ;	libs/uart_lib.c: 25: UART1_CR2 -> RIEN = 0;
      000253 72 1B 52 35      [ 1]  635 	bres	0x5235, #5
      000257                        636 00107$:
                                    637 ;	libs/uart_lib.c: 29: }
      000257 84               [ 1]  638 	pop	a
      000258 80               [11]  639 	iret
                                    640 ;	libs/uart_lib.c: 30: void uart_init(unsigned int baudrate,uint8_t stopbit)
                                    641 ;	-----------------------------------------
                                    642 ;	 function uart_init
                                    643 ;	-----------------------------------------
      000259                        644 _uart_init:
      000259 52 02            [ 2]  645 	sub	sp, #2
      00025B 1F 01            [ 2]  646 	ldw	(0x01, sp), x
                                    647 ;	libs/uart_lib.c: 34: UART1_CR2 -> TEN = 1; // Transmitter enable
      00025D AE 52 35         [ 2]  648 	ldw	x, #0x5235
      000260 88               [ 1]  649 	push	a
      000261 F6               [ 1]  650 	ld	a, (x)
      000262 AA 08            [ 1]  651 	or	a, #0x08
      000264 F7               [ 1]  652 	ld	(x), a
      000265 84               [ 1]  653 	pop	a
                                    654 ;	libs/uart_lib.c: 35: UART1_CR2 -> REN = 1; // Receiver enable
      000266 AE 52 35         [ 2]  655 	ldw	x, #0x5235
      000269 88               [ 1]  656 	push	a
      00026A F6               [ 1]  657 	ld	a, (x)
      00026B AA 04            [ 1]  658 	or	a, #0x04
      00026D F7               [ 1]  659 	ld	(x), a
      00026E 84               [ 1]  660 	pop	a
                                    661 ;	libs/uart_lib.c: 36: switch(stopbit)
      00026F A1 02            [ 1]  662 	cp	a, #0x02
      000271 27 06            [ 1]  663 	jreq	00101$
      000273 A1 03            [ 1]  664 	cp	a, #0x03
      000275 27 0E            [ 1]  665 	jreq	00102$
      000277 20 16            [ 2]  666 	jra	00103$
                                    667 ;	libs/uart_lib.c: 38: case 2:
      000279                        668 00101$:
                                    669 ;	libs/uart_lib.c: 39: UART1_CR3 -> STOP = 2;
      000279 C6 52 36         [ 1]  670 	ld	a, 0x5236
      00027C A4 CF            [ 1]  671 	and	a, #0xcf
      00027E AA 20            [ 1]  672 	or	a, #0x20
      000280 C7 52 36         [ 1]  673 	ld	0x5236, a
                                    674 ;	libs/uart_lib.c: 40: break;
      000283 20 12            [ 2]  675 	jra	00104$
                                    676 ;	libs/uart_lib.c: 41: case 3:
      000285                        677 00102$:
                                    678 ;	libs/uart_lib.c: 42: UART1_CR3 -> STOP = 3;
      000285 C6 52 36         [ 1]  679 	ld	a, 0x5236
      000288 AA 30            [ 1]  680 	or	a, #0x30
      00028A C7 52 36         [ 1]  681 	ld	0x5236, a
                                    682 ;	libs/uart_lib.c: 43: break;
      00028D 20 08            [ 2]  683 	jra	00104$
                                    684 ;	libs/uart_lib.c: 44: default:
      00028F                        685 00103$:
                                    686 ;	libs/uart_lib.c: 45: UART1_CR3 -> STOP = 0;
      00028F C6 52 36         [ 1]  687 	ld	a, 0x5236
      000292 A4 CF            [ 1]  688 	and	a, #0xcf
      000294 C7 52 36         [ 1]  689 	ld	0x5236, a
                                    690 ;	libs/uart_lib.c: 47: }
      000297                        691 00104$:
                                    692 ;	libs/uart_lib.c: 48: switch(baudrate)
      000297 1E 01            [ 2]  693 	ldw	x, (0x01, sp)
      000299 A3 08 00         [ 2]  694 	cpw	x, #0x0800
      00029C 26 03            [ 1]  695 	jrne	00186$
      00029E CCr03r2A         [ 2]  696 	jp	00110$
      0002A1                        697 00186$:
      0002A1 1E 01            [ 2]  698 	ldw	x, (0x01, sp)
      0002A3 A3 09 60         [ 2]  699 	cpw	x, #0x0960
      0002A6 27 28            [ 1]  700 	jreq	00105$
      0002A8 1E 01            [ 2]  701 	ldw	x, (0x01, sp)
      0002AA A3 10 00         [ 2]  702 	cpw	x, #0x1000
      0002AD 26 03            [ 1]  703 	jrne	00192$
      0002AF CCr03r3A         [ 2]  704 	jp	00111$
      0002B2                        705 00192$:
      0002B2 1E 01            [ 2]  706 	ldw	x, (0x01, sp)
      0002B4 A3 4B 00         [ 2]  707 	cpw	x, #0x4b00
      0002B7 27 31            [ 1]  708 	jreq	00106$
      0002B9 1E 01            [ 2]  709 	ldw	x, (0x01, sp)
      0002BB A3 84 00         [ 2]  710 	cpw	x, #0x8400
      0002BE 27 5A            [ 1]  711 	jreq	00109$
      0002C0 1E 01            [ 2]  712 	ldw	x, (0x01, sp)
      0002C2 A3 C2 00         [ 2]  713 	cpw	x, #0xc200
      0002C5 27 43            [ 1]  714 	jreq	00108$
      0002C7 1E 01            [ 2]  715 	ldw	x, (0x01, sp)
      0002C9 A3 E1 00         [ 2]  716 	cpw	x, #0xe100
      0002CC 27 2C            [ 1]  717 	jreq	00107$
      0002CE 20 7A            [ 2]  718 	jra	00112$
                                    719 ;	libs/uart_lib.c: 50: case (unsigned int)2400:
      0002D0                        720 00105$:
                                    721 ;	libs/uart_lib.c: 51: UART1_BRR2 -> MSB = 0x01;
      0002D0 C6 52 33         [ 1]  722 	ld	a, 0x5233
      0002D3 A4 0F            [ 1]  723 	and	a, #0x0f
      0002D5 AA 10            [ 1]  724 	or	a, #0x10
      0002D7 C7 52 33         [ 1]  725 	ld	0x5233, a
                                    726 ;	libs/uart_lib.c: 52: UART1_BRR1 -> DIV = 0xA0;
      0002DA 35 A0 52 32      [ 1]  727 	mov	0x5232+0, #0xa0
                                    728 ;	libs/uart_lib.c: 53: UART1_BRR2 -> LSB = 0x0B; 
      0002DE C6 52 33         [ 1]  729 	ld	a, 0x5233
      0002E1 A4 F0            [ 1]  730 	and	a, #0xf0
      0002E3 AA 0B            [ 1]  731 	or	a, #0x0b
      0002E5 C7 52 33         [ 1]  732 	ld	0x5233, a
                                    733 ;	libs/uart_lib.c: 54: break;
      0002E8 20 6E            [ 2]  734 	jra	00114$
                                    735 ;	libs/uart_lib.c: 55: case (unsigned int)19200:
      0002EA                        736 00106$:
                                    737 ;	libs/uart_lib.c: 56: UART1_BRR1 -> DIV = 0x34;
      0002EA 35 34 52 32      [ 1]  738 	mov	0x5232+0, #0x34
                                    739 ;	libs/uart_lib.c: 57: UART1_BRR2 -> LSB = 0x01;
      0002EE C6 52 33         [ 1]  740 	ld	a, 0x5233
      0002F1 A4 F0            [ 1]  741 	and	a, #0xf0
      0002F3 AA 01            [ 1]  742 	or	a, #0x01
      0002F5 C7 52 33         [ 1]  743 	ld	0x5233, a
                                    744 ;	libs/uart_lib.c: 58: break;
      0002F8 20 5E            [ 2]  745 	jra	00114$
                                    746 ;	libs/uart_lib.c: 59: case (unsigned int)57600:
      0002FA                        747 00107$:
                                    748 ;	libs/uart_lib.c: 60: UART1_BRR1 -> DIV = 0x11;
      0002FA 35 11 52 32      [ 1]  749 	mov	0x5232+0, #0x11
                                    750 ;	libs/uart_lib.c: 61: UART1_BRR2 -> LSB = 0x06;
      0002FE C6 52 33         [ 1]  751 	ld	a, 0x5233
      000301 A4 F0            [ 1]  752 	and	a, #0xf0
      000303 AA 06            [ 1]  753 	or	a, #0x06
      000305 C7 52 33         [ 1]  754 	ld	0x5233, a
                                    755 ;	libs/uart_lib.c: 62: break;
      000308 20 4E            [ 2]  756 	jra	00114$
                                    757 ;	libs/uart_lib.c: 63: case (unsigned int)115200:
      00030A                        758 00108$:
                                    759 ;	libs/uart_lib.c: 64: UART1_BRR1 -> DIV = 0x08;
      00030A 35 08 52 32      [ 1]  760 	mov	0x5232+0, #0x08
                                    761 ;	libs/uart_lib.c: 65: UART1_BRR2 -> LSB = 0x0B;
      00030E C6 52 33         [ 1]  762 	ld	a, 0x5233
      000311 A4 F0            [ 1]  763 	and	a, #0xf0
      000313 AA 0B            [ 1]  764 	or	a, #0x0b
      000315 C7 52 33         [ 1]  765 	ld	0x5233, a
                                    766 ;	libs/uart_lib.c: 66: break;
      000318 20 3E            [ 2]  767 	jra	00114$
                                    768 ;	libs/uart_lib.c: 67: case (unsigned int)230400:
      00031A                        769 00109$:
                                    770 ;	libs/uart_lib.c: 68: UART1_BRR1 -> DIV = 0x04;
      00031A 35 04 52 32      [ 1]  771 	mov	0x5232+0, #0x04
                                    772 ;	libs/uart_lib.c: 69: UART1_BRR2 -> LSB = 0x05;
      00031E C6 52 33         [ 1]  773 	ld	a, 0x5233
      000321 A4 F0            [ 1]  774 	and	a, #0xf0
      000323 AA 05            [ 1]  775 	or	a, #0x05
      000325 C7 52 33         [ 1]  776 	ld	0x5233, a
                                    777 ;	libs/uart_lib.c: 70: break;
      000328 20 2E            [ 2]  778 	jra	00114$
                                    779 ;	libs/uart_lib.c: 71: case (unsigned int)460800:
      00032A                        780 00110$:
                                    781 ;	libs/uart_lib.c: 72: UART1_BRR1 -> DIV = 0x02;
      00032A 35 02 52 32      [ 1]  782 	mov	0x5232+0, #0x02
                                    783 ;	libs/uart_lib.c: 73: UART1_BRR2 -> LSB = 0x03;
      00032E C6 52 33         [ 1]  784 	ld	a, 0x5233
      000331 A4 F0            [ 1]  785 	and	a, #0xf0
      000333 AA 03            [ 1]  786 	or	a, #0x03
      000335 C7 52 33         [ 1]  787 	ld	0x5233, a
                                    788 ;	libs/uart_lib.c: 74: break;
      000338 20 1E            [ 2]  789 	jra	00114$
                                    790 ;	libs/uart_lib.c: 75: case (unsigned int)921600:
      00033A                        791 00111$:
                                    792 ;	libs/uart_lib.c: 76: UART1_BRR1 -> DIV = 0x01;
      00033A 35 01 52 32      [ 1]  793 	mov	0x5232+0, #0x01
                                    794 ;	libs/uart_lib.c: 77: UART1_BRR2 -> LSB = 0x01;
      00033E C6 52 33         [ 1]  795 	ld	a, 0x5233
      000341 A4 F0            [ 1]  796 	and	a, #0xf0
      000343 AA 01            [ 1]  797 	or	a, #0x01
      000345 C7 52 33         [ 1]  798 	ld	0x5233, a
                                    799 ;	libs/uart_lib.c: 78: break;
      000348 20 0E            [ 2]  800 	jra	00114$
                                    801 ;	libs/uart_lib.c: 79: default:
      00034A                        802 00112$:
                                    803 ;	libs/uart_lib.c: 80: UART1_BRR1 -> DIV = 0x68;
      00034A 35 68 52 32      [ 1]  804 	mov	0x5232+0, #0x68
                                    805 ;	libs/uart_lib.c: 81: UART1_BRR2 -> LSB = 0x03;
      00034E C6 52 33         [ 1]  806 	ld	a, 0x5233
      000351 A4 F0            [ 1]  807 	and	a, #0xf0
      000353 AA 03            [ 1]  808 	or	a, #0x03
      000355 C7 52 33         [ 1]  809 	ld	0x5233, a
                                    810 ;	libs/uart_lib.c: 83: }
      000358                        811 00114$:
                                    812 ;	libs/uart_lib.c: 84: }
      000358 5B 02            [ 2]  813 	addw	sp, #2
      00035A 81               [ 4]  814 	ret
                                    815 ;	libs/uart_lib.c: 86: int uart_read_byte(uint8_t *data)
                                    816 ;	-----------------------------------------
                                    817 ;	 function uart_read_byte
                                    818 ;	-----------------------------------------
      00035B                        819 _uart_read_byte:
                                    820 ;	libs/uart_lib.c: 88: while(!(UART1_SR -> RXNE));
      00035B                        821 00101$:
      00035B 72 0B 52 30 FB   [ 2]  822 	btjf	0x5230, #5, 00101$
                                    823 ;	libs/uart_lib.c: 90: return 1;
      000360 5F               [ 1]  824 	clrw	x
      000361 5C               [ 1]  825 	incw	x
                                    826 ;	libs/uart_lib.c: 91: }
      000362 81               [ 4]  827 	ret
                                    828 ;	libs/uart_lib.c: 93: int uart_write_byte(uint8_t data)
                                    829 ;	-----------------------------------------
                                    830 ;	 function uart_write_byte
                                    831 ;	-----------------------------------------
      000363                        832 _uart_write_byte:
                                    833 ;	libs/uart_lib.c: 95: UART1_DR -> DR = data;
      000363 C7 52 31         [ 1]  834 	ld	0x5231, a
                                    835 ;	libs/uart_lib.c: 96: while(!(UART1_SR -> TXE));
      000366                        836 00101$:
      000366 72 0F 52 30 FB   [ 2]  837 	btjf	0x5230, #7, 00101$
                                    838 ;	libs/uart_lib.c: 97: return 1;
      00036B 5F               [ 1]  839 	clrw	x
      00036C 5C               [ 1]  840 	incw	x
                                    841 ;	libs/uart_lib.c: 98: }
      00036D 81               [ 4]  842 	ret
                                    843 ;	libs/uart_lib.c: 100: void uart_write(uint8_t *data_buf)
                                    844 ;	-----------------------------------------
                                    845 ;	 function uart_write
                                    846 ;	-----------------------------------------
      00036E                        847 _uart_write:
      00036E 52 02            [ 2]  848 	sub	sp, #2
                                    849 ;	libs/uart_lib.c: 102: tx_buf_pointer = data_buf;
      000370 1F 01            [ 2]  850 	ldw	(0x01, sp), x
      000372 CFu00u00         [ 2]  851 	ldw	_tx_buf_pointer+0, x
                                    852 ;	libs/uart_lib.c: 103: buf_pos = 0;
      000375 72 5Fu00u04      [ 1]  853 	clr	_buf_pos+0
                                    854 ;	libs/uart_lib.c: 104: buf_size = 0;
      000379 72 5Fu00u05      [ 1]  855 	clr	_buf_size+0
                                    856 ;	libs/uart_lib.c: 105: while (data_buf[buf_size++] != '\0');
      00037D                        857 00101$:
      00037D C6u00u05         [ 1]  858 	ld	a, _buf_size+0
      000380 72 5Cu00u05      [ 1]  859 	inc	_buf_size+0
      000384 5F               [ 1]  860 	clrw	x
      000385 97               [ 1]  861 	ld	xl, a
      000386 72 FB 01         [ 2]  862 	addw	x, (0x01, sp)
      000389 F6               [ 1]  863 	ld	a, (x)
      00038A 26 F1            [ 1]  864 	jrne	00101$
                                    865 ;	libs/uart_lib.c: 106: UART1_CR2 -> TIEN = 1;
      00038C 72 1E 52 35      [ 1]  866 	bset	0x5235, #7
                                    867 ;	libs/uart_lib.c: 107: while(UART1_CR2 -> TIEN);
      000390                        868 00104$:
      000390 72 0E 52 35 FB   [ 2]  869 	btjt	0x5235, #7, 00104$
                                    870 ;	libs/uart_lib.c: 108: }
      000395 5B 02            [ 2]  871 	addw	sp, #2
      000397 81               [ 4]  872 	ret
                                    873 ;	libs/uart_lib.c: 109: void uart_read(uint8_t *data_buf,int size)
                                    874 ;	-----------------------------------------
                                    875 ;	 function uart_read
                                    876 ;	-----------------------------------------
      000398                        877 _uart_read:
                                    878 ;	libs/uart_lib.c: 111: rx_buf_pointer = data_buf;
      000398 CFu00u02         [ 2]  879 	ldw	_rx_buf_pointer+0, x
                                    880 ;	libs/uart_lib.c: 112: uart_write("rx_buf_pointer\n");
      00039B AEr00r00         [ 2]  881 	ldw	x, #(___str_0+0)
      00039E CDr03r6E         [ 4]  882 	call	_uart_write
                                    883 ;	libs/uart_lib.c: 113: buf_pos = 0;
      0003A1 72 5Fu00u04      [ 1]  884 	clr	_buf_pos+0
                                    885 ;	libs/uart_lib.c: 114: uart_write("buf_pos\n");
      0003A5 AEr00r10         [ 2]  886 	ldw	x, #(___str_1+0)
      0003A8 CDr03r6E         [ 4]  887 	call	_uart_write
                                    888 ;	libs/uart_lib.c: 115: buf_size = size;
      0003AB 7B 04            [ 1]  889 	ld	a, (0x04, sp)
      0003AD C7u00u05         [ 1]  890 	ld	_buf_size+0, a
                                    891 ;	libs/uart_lib.c: 116: uart_write("buf_size\n");
      0003B0 AEr00r19         [ 2]  892 	ldw	x, #(___str_2+0)
      0003B3 CDr03r6E         [ 4]  893 	call	_uart_write
                                    894 ;	libs/uart_lib.c: 117: UART1_CR2 -> RIEN = 1;
      0003B6 72 1A 52 35      [ 1]  895 	bset	0x5235, #5
                                    896 ;	libs/uart_lib.c: 118: uart_write("RIEN\n");
      0003BA AEr00r23         [ 2]  897 	ldw	x, #(___str_3+0)
      0003BD CDr03r6E         [ 4]  898 	call	_uart_write
                                    899 ;	libs/uart_lib.c: 119: while(UART1_CR2 -> RIEN);
      0003C0                        900 00101$:
      0003C0 C6 52 35         [ 1]  901 	ld	a, 0x5235
      0003C3 4E               [ 1]  902 	swap	a
      0003C4 44               [ 1]  903 	srl	a
      0003C5 A4 01            [ 1]  904 	and	a, #0x01
      0003C7 26 F7            [ 1]  905 	jrne	00101$
                                    906 ;	libs/uart_lib.c: 120: }
      0003C9 1E 01            [ 2]  907 	ldw	x, (1, sp)
      0003CB 5B 04            [ 2]  908 	addw	sp, #4
      0003CD FC               [ 2]  909 	jp	(x)
                                    910 ;	main.c: 2: void setup(void)
                                    911 ;	-----------------------------------------
                                    912 ;	 function setup
                                    913 ;	-----------------------------------------
      0003CE                        914 _setup:
                                    915 ;	main.c: 5: CLK_CKDIVR = 0;
      0003CE 35 00 50 C6      [ 1]  916 	mov	0x50c6+0, #0x00
                                    917 ;	main.c: 7: uart_init(9600,0);
      0003D2 4F               [ 1]  918 	clr	a
      0003D3 AE 25 80         [ 2]  919 	ldw	x, #0x2580
      0003D6 CDr02r59         [ 4]  920 	call	_uart_init
                                    921 ;	main.c: 8: i2c_init();
      0003D9 CDr00r95         [ 4]  922 	call	_i2c_init
                                    923 ;	main.c: 10: enableInterrupts();
      0003DC 9A               [ 1]  924 	rim
                                    925 ;	main.c: 11: }
      0003DD 81               [ 4]  926 	ret
                                    927 ;	main.c: 12: int main(void)
                                    928 ;	-----------------------------------------
                                    929 ;	 function main
                                    930 ;	-----------------------------------------
      0003DE                        931 _main:
      0003DE 52 05            [ 2]  932 	sub	sp, #5
                                    933 ;	main.c: 14: setup();
      0003E0 CDr03rCE         [ 4]  934 	call	_setup
                                    935 ;	main.c: 15: uint8_t buf[5] = {0};
      0003E3 96               [ 1]  936 	ldw	x, sp
      0003E4 5C               [ 1]  937 	incw	x
      0003E5 7F               [ 1]  938 	clr	(x)
      0003E6 0F 02            [ 1]  939 	clr	(0x02, sp)
      0003E8 0F 03            [ 1]  940 	clr	(0x03, sp)
      0003EA 0F 04            [ 1]  941 	clr	(0x04, sp)
      0003EC 0F 05            [ 1]  942 	clr	(0x05, sp)
                                    943 ;	main.c: 16: i2c_read(I2C_DISPLAY_ADDR,5,buf);
      0003EE 90 93            [ 1]  944 	ldw	y, x
      0003F0 89               [ 2]  945 	pushw	x
      0003F1 90 89            [ 2]  946 	pushw	y
      0003F3 4B 05            [ 1]  947 	push	#0x05
      0003F5 A6 3C            [ 1]  948 	ld	a, #0x3c
      0003F7 CDr01r83         [ 4]  949 	call	_i2c_read
      0003FA 85               [ 2]  950 	popw	x
                                    951 ;	main.c: 17: buf[0] = 0xA4;
      0003FB A6 A4            [ 1]  952 	ld	a, #0xa4
      0003FD F7               [ 1]  953 	ld	(x), a
                                    954 ;	main.c: 18: buf[1] = 0xA5;
      0003FE A6 A5            [ 1]  955 	ld	a, #0xa5
      000400 6B 02            [ 1]  956 	ld	(0x02, sp), a
                                    957 ;	main.c: 19: buf[2] = 0xA6;
      000402 A6 A6            [ 1]  958 	ld	a, #0xa6
      000404 6B 03            [ 1]  959 	ld	(0x03, sp), a
                                    960 ;	main.c: 20: buf[3] = 0xA7;
      000406 A6 A7            [ 1]  961 	ld	a, #0xa7
      000408 6B 04            [ 1]  962 	ld	(0x04, sp), a
                                    963 ;	main.c: 21: buf[4] = 0xA8;
      00040A A6 A8            [ 1]  964 	ld	a, #0xa8
      00040C 6B 05            [ 1]  965 	ld	(0x05, sp), a
                                    966 ;	main.c: 22: i2c_write(I2C_DISPLAY_ADDR,5,buf);
      00040E 89               [ 2]  967 	pushw	x
      00040F 4B 05            [ 1]  968 	push	#0x05
      000411 A6 3C            [ 1]  969 	ld	a, #0x3c
      000413 CDr01r53         [ 4]  970 	call	_i2c_write
                                    971 ;	main.c: 24: while(1);
      000416                        972 00102$:
      000416 20 FE            [ 2]  973 	jra	00102$
                                    974 ;	main.c: 26: }
      000418 5B 05            [ 2]  975 	addw	sp, #5
      00041A 81               [ 4]  976 	ret
                                    977 	.area CODE
                                    978 	.area CONST
                                    979 	.area CONST
      000000                        980 ___str_0:
      000000 72 78 5F 62 75 66 5F   981 	.ascii "rx_buf_pointer"
             70 6F 69 6E 74 65 72
      00000E 0A                     982 	.db 0x0a
      00000F 00                     983 	.db 0x00
                                    984 	.area CODE
                                    985 	.area CONST
      000010                        986 ___str_1:
      000010 62 75 66 5F 70 6F 73   987 	.ascii "buf_pos"
      000017 0A                     988 	.db 0x0a
      000018 00                     989 	.db 0x00
                                    990 	.area CODE
                                    991 	.area CONST
      000019                        992 ___str_2:
      000019 62 75 66 5F 73 69 7A   993 	.ascii "buf_size"
             65
      000021 0A                     994 	.db 0x0a
      000022 00                     995 	.db 0x00
                                    996 	.area CODE
                                    997 	.area CONST
      000023                        998 ___str_3:
      000023 52 49 45 4E            999 	.ascii "RIEN"
      000027 0A                    1000 	.db 0x0a
      000028 00                    1001 	.db 0x00
                                   1002 	.area CODE
                                   1003 	.area INITIALIZER
      000000                       1004 __xinit__I2C_IRQ:
      000000 00                    1005 	.db #0x00	; 0
      000001                       1006 __xinit__govno_alert:
      000001 00                    1007 	.db #0x00	; 0
      000002                       1008 __xinit__counter:
      000002 00                    1009 	.db #0x00	; 0
      000003                       1010 __xinit__dummy:
      000003 00                    1011 	.db #0x00	; 0
                                   1012 	.area CABS (ABS)
