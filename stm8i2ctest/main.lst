                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.3.0 #14184 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _uart_read
                                     13 	.globl _i2c_scan
                                     14 	.globl _i2c_stop
                                     15 	.globl _i2c_send_address
                                     16 	.globl _i2c_start
                                     17 	.globl _i2c_init
                                     18 	.globl _uart_init
                                     19 	.globl _status_check
                                     20 	.globl _convert_int_to_binary
                                     21 	.globl _convert_int_to_chars
                                     22 	.globl _uart_write
                                     23 	.globl _UART_RX
                                     24 	.globl _UART_TX
                                     25 	.globl _delay
                                     26 	.globl _strlen
                                     27 	.globl _memset
                                     28 	.globl _current_dev
                                     29 	.globl _buffer
                                     30 ;--------------------------------------------------------
                                     31 ; ram data
                                     32 ;--------------------------------------------------------
                                     33 	.area DATA
                                     34 ;--------------------------------------------------------
                                     35 ; ram data
                                     36 ;--------------------------------------------------------
                                     37 	.area INITIALIZED
      000000                         38 _buffer::
      000000                         39 	.ds 256
      000100                         40 _current_dev::
      000100                         41 	.ds 1
                                     42 ;--------------------------------------------------------
                                     43 ; Stack segment in internal ram
                                     44 ;--------------------------------------------------------
                                     45 	.area SSEG
      000000                         46 __start__stack:
      000000                         47 	.ds	1
                                     48 
                                     49 ;--------------------------------------------------------
                                     50 ; absolute external ram data
                                     51 ;--------------------------------------------------------
                                     52 	.area DABS (ABS)
                                     53 
                                     54 ; default segment ordering for linker
                                     55 	.area HOME
                                     56 	.area GSINIT
                                     57 	.area GSFINAL
                                     58 	.area CONST
                                     59 	.area INITIALIZER
                                     60 	.area CODE
                                     61 
                                     62 ;--------------------------------------------------------
                                     63 ; interrupt vector
                                     64 ;--------------------------------------------------------
                                     65 	.area HOME
      000000                         66 __interrupt_vect:
      000000 82v00u00u00             67 	int s_GSINIT ; reset
                                     68 ;--------------------------------------------------------
                                     69 ; global & static initialisations
                                     70 ;--------------------------------------------------------
                                     71 	.area HOME
                                     72 	.area GSINIT
                                     73 	.area GSFINAL
                                     74 	.area GSINIT
      000000 CDr00r00         [ 4]   75 	call	___sdcc_external_startup
      000003 4D               [ 1]   76 	tnz	a
      000004 27 03            [ 1]   77 	jreq	__sdcc_init_data
      000006 CCr00r04         [ 2]   78 	jp	__sdcc_program_startup
      000009                         79 __sdcc_init_data:
                                     80 ; stm8_genXINIT() start
      000009 AEr00r00         [ 2]   81 	ldw x, #l_DATA
      00000C 27 07            [ 1]   82 	jreq	00002$
      00000E                         83 00001$:
      00000E 72 4FuFFuFF      [ 1]   84 	clr (s_DATA - 1, x)
      000012 5A               [ 2]   85 	decw x
      000013 26 F9            [ 1]   86 	jrne	00001$
      000015                         87 00002$:
      000015 AEr00r00         [ 2]   88 	ldw	x, #l_INITIALIZER
      000018 27 09            [ 1]   89 	jreq	00004$
      00001A                         90 00003$:
      00001A D6uFFuFF         [ 1]   91 	ld	a, (s_INITIALIZER - 1, x)
      00001D D7uFFuFF         [ 1]   92 	ld	(s_INITIALIZED - 1, x), a
      000020 5A               [ 2]   93 	decw	x
      000021 26 F7            [ 1]   94 	jrne	00003$
      000023                         95 00004$:
                                     96 ; stm8_genXINIT() end
                                     97 	.area GSFINAL
      000000 CCr00r04         [ 2]   98 	jp	__sdcc_program_startup
                                     99 ;--------------------------------------------------------
                                    100 ; Home
                                    101 ;--------------------------------------------------------
                                    102 	.area HOME
                                    103 	.area HOME
      000004                        104 __sdcc_program_startup:
      000004 CCr04r5E         [ 2]  105 	jp	_main
                                    106 ;	return from main will return to caller
                                    107 ;--------------------------------------------------------
                                    108 ; code
                                    109 ;--------------------------------------------------------
                                    110 	.area CODE
                                    111 ;	main.c: 8: void delay(unsigned long count) {
                                    112 ;	-----------------------------------------
                                    113 ;	 function delay
                                    114 ;	-----------------------------------------
      000000                        115 _delay:
      000000 52 08            [ 2]  116 	sub	sp, #8
                                    117 ;	main.c: 9: while (count--)
      000002 16 0D            [ 2]  118 	ldw	y, (0x0d, sp)
      000004 17 07            [ 2]  119 	ldw	(0x07, sp), y
      000006 1E 0B            [ 2]  120 	ldw	x, (0x0b, sp)
      000008                        121 00101$:
      000008 1F 01            [ 2]  122 	ldw	(0x01, sp), x
      00000A 7B 07            [ 1]  123 	ld	a, (0x07, sp)
      00000C 6B 03            [ 1]  124 	ld	(0x03, sp), a
      00000E 7B 08            [ 1]  125 	ld	a, (0x08, sp)
      000010 16 07            [ 2]  126 	ldw	y, (0x07, sp)
      000012 72 A2 00 01      [ 2]  127 	subw	y, #0x0001
      000016 17 07            [ 2]  128 	ldw	(0x07, sp), y
      000018 24 01            [ 1]  129 	jrnc	00117$
      00001A 5A               [ 2]  130 	decw	x
      00001B                        131 00117$:
      00001B 4D               [ 1]  132 	tnz	a
      00001C 26 08            [ 1]  133 	jrne	00118$
      00001E 16 02            [ 2]  134 	ldw	y, (0x02, sp)
      000020 26 04            [ 1]  135 	jrne	00118$
      000022 0D 01            [ 1]  136 	tnz	(0x01, sp)
      000024 27 03            [ 1]  137 	jreq	00104$
      000026                        138 00118$:
                                    139 ;	main.c: 10: nop();
      000026 9D               [ 1]  140 	nop
      000027 20 DF            [ 2]  141 	jra	00101$
      000029                        142 00104$:
                                    143 ;	main.c: 11: }
      000029 1E 09            [ 2]  144 	ldw	x, (9, sp)
      00002B 5B 0E            [ 2]  145 	addw	sp, #14
      00002D FC               [ 2]  146 	jp	(x)
                                    147 ;	main.c: 12: void UART_TX(unsigned char value)
                                    148 ;	-----------------------------------------
                                    149 ;	 function UART_TX
                                    150 ;	-----------------------------------------
      00002E                        151 _UART_TX:
                                    152 ;	main.c: 14: UART1_DR = value;
      00002E C7 52 31         [ 1]  153 	ld	0x5231, a
                                    154 ;	main.c: 15: while(!(UART1_SR & UART_SR_TXE));
      000031                        155 00101$:
      000031 C6 52 30         [ 1]  156 	ld	a, 0x5230
      000034 2A FB            [ 1]  157 	jrpl	00101$
                                    158 ;	main.c: 16: }
      000036 81               [ 4]  159 	ret
                                    160 ;	main.c: 17: unsigned char UART_RX(void)
                                    161 ;	-----------------------------------------
                                    162 ;	 function UART_RX
                                    163 ;	-----------------------------------------
      000037                        164 _UART_RX:
                                    165 ;	main.c: 19: while(!(UART1_SR & UART_SR_TXE));
      000037                        166 00101$:
      000037 C6 52 30         [ 1]  167 	ld	a, 0x5230
      00003A 2A FB            [ 1]  168 	jrpl	00101$
                                    169 ;	main.c: 20: return UART1_DR;
      00003C C6 52 31         [ 1]  170 	ld	a, 0x5231
                                    171 ;	main.c: 21: }
      00003F 81               [ 4]  172 	ret
                                    173 ;	main.c: 22: int uart_write(const char *str) {
                                    174 ;	-----------------------------------------
                                    175 ;	 function uart_write
                                    176 ;	-----------------------------------------
      000040                        177 _uart_write:
      000040 52 05            [ 2]  178 	sub	sp, #5
      000042 1F 03            [ 2]  179 	ldw	(0x03, sp), x
                                    180 ;	main.c: 24: for(i = 0; i < strlen(str); i++) {
      000044 0F 05            [ 1]  181 	clr	(0x05, sp)
      000046                        182 00103$:
      000046 1E 03            [ 2]  183 	ldw	x, (0x03, sp)
      000048 CDr00r00         [ 4]  184 	call	_strlen
      00004B 1F 01            [ 2]  185 	ldw	(0x01, sp), x
      00004D 7B 05            [ 1]  186 	ld	a, (0x05, sp)
      00004F 5F               [ 1]  187 	clrw	x
      000050 97               [ 1]  188 	ld	xl, a
      000051 13 01            [ 2]  189 	cpw	x, (0x01, sp)
      000053 24 0F            [ 1]  190 	jrnc	00101$
                                    191 ;	main.c: 26: UART_TX(str[i]);
      000055 5F               [ 1]  192 	clrw	x
      000056 7B 05            [ 1]  193 	ld	a, (0x05, sp)
      000058 97               [ 1]  194 	ld	xl, a
      000059 72 FB 03         [ 2]  195 	addw	x, (0x03, sp)
      00005C F6               [ 1]  196 	ld	a, (x)
      00005D CDr00r2E         [ 4]  197 	call	_UART_TX
                                    198 ;	main.c: 24: for(i = 0; i < strlen(str); i++) {
      000060 0C 05            [ 1]  199 	inc	(0x05, sp)
      000062 20 E2            [ 2]  200 	jra	00103$
      000064                        201 00101$:
                                    202 ;	main.c: 28: return(i); // Bytes sent
      000064 7B 05            [ 1]  203 	ld	a, (0x05, sp)
      000066 5F               [ 1]  204 	clrw	x
      000067 97               [ 1]  205 	ld	xl, a
                                    206 ;	main.c: 29: }
      000068 5B 05            [ 2]  207 	addw	sp, #5
      00006A 81               [ 4]  208 	ret
                                    209 ;	main.c: 33: void convert_int_to_chars(uint8_t num, char* rx_int_chars) {
                                    210 ;	-----------------------------------------
                                    211 ;	 function convert_int_to_chars
                                    212 ;	-----------------------------------------
      00006B                        213 _convert_int_to_chars:
      00006B 52 0D            [ 2]  214 	sub	sp, #13
      00006D 6B 0D            [ 1]  215 	ld	(0x0d, sp), a
      00006F 1F 0B            [ 2]  216 	ldw	(0x0b, sp), x
                                    217 ;	main.c: 36: rx_int_chars[0] = num / 100 + '0';
      000071 7B 0D            [ 1]  218 	ld	a, (0x0d, sp)
      000073 6B 02            [ 1]  219 	ld	(0x02, sp), a
      000075 0F 01            [ 1]  220 	clr	(0x01, sp)
                                    221 ;	main.c: 37: rx_int_chars[1] = num / 10 % 10 + '0';
      000077 1E 0B            [ 2]  222 	ldw	x, (0x0b, sp)
      000079 5C               [ 1]  223 	incw	x
      00007A 1F 03            [ 2]  224 	ldw	(0x03, sp), x
                                    225 ;	main.c: 38: rx_int_chars[2] = num % 10 + '0';
      00007C 1E 0B            [ 2]  226 	ldw	x, (0x0b, sp)
      00007E 5C               [ 1]  227 	incw	x
      00007F 5C               [ 1]  228 	incw	x
      000080 1F 05            [ 2]  229 	ldw	(0x05, sp), x
                                    230 ;	main.c: 37: rx_int_chars[1] = num / 10 % 10 + '0';
      000082 4B 0A            [ 1]  231 	push	#0x0a
      000084 4B 00            [ 1]  232 	push	#0x00
      000086 1E 03            [ 2]  233 	ldw	x, (0x03, sp)
                                    234 ;	main.c: 38: rx_int_chars[2] = num % 10 + '0';
      000088 CDr00r00         [ 4]  235 	call	__divsint
      00008B 1F 07            [ 2]  236 	ldw	(0x07, sp), x
      00008D 4B 0A            [ 1]  237 	push	#0x0a
      00008F 4B 00            [ 1]  238 	push	#0x00
      000091 1E 03            [ 2]  239 	ldw	x, (0x03, sp)
      000093 CDr00r00         [ 4]  240 	call	__modsint
      000096 9F               [ 1]  241 	ld	a, xl
      000097 AB 30            [ 1]  242 	add	a, #0x30
      000099 6B 09            [ 1]  243 	ld	(0x09, sp), a
                                    244 ;	main.c: 34: if (num > 99) {
      00009B 7B 0D            [ 1]  245 	ld	a, (0x0d, sp)
      00009D A1 63            [ 1]  246 	cp	a, #0x63
      00009F 23 29            [ 2]  247 	jrule	00105$
                                    248 ;	main.c: 36: rx_int_chars[0] = num / 100 + '0';
      0000A1 4B 64            [ 1]  249 	push	#0x64
      0000A3 4B 00            [ 1]  250 	push	#0x00
      0000A5 1E 03            [ 2]  251 	ldw	x, (0x03, sp)
      0000A7 CDr00r00         [ 4]  252 	call	__divsint
      0000AA 9F               [ 1]  253 	ld	a, xl
      0000AB AB 30            [ 1]  254 	add	a, #0x30
      0000AD 1E 0B            [ 2]  255 	ldw	x, (0x0b, sp)
      0000AF F7               [ 1]  256 	ld	(x), a
                                    257 ;	main.c: 37: rx_int_chars[1] = num / 10 % 10 + '0';
      0000B0 4B 0A            [ 1]  258 	push	#0x0a
      0000B2 4B 00            [ 1]  259 	push	#0x00
      0000B4 1E 09            [ 2]  260 	ldw	x, (0x09, sp)
      0000B6 CDr00r00         [ 4]  261 	call	__modsint
      0000B9 9F               [ 1]  262 	ld	a, xl
      0000BA AB 30            [ 1]  263 	add	a, #0x30
      0000BC 1E 03            [ 2]  264 	ldw	x, (0x03, sp)
      0000BE F7               [ 1]  265 	ld	(x), a
                                    266 ;	main.c: 38: rx_int_chars[2] = num % 10 + '0';
      0000BF 1E 05            [ 2]  267 	ldw	x, (0x05, sp)
      0000C1 7B 09            [ 1]  268 	ld	a, (0x09, sp)
      0000C3 F7               [ 1]  269 	ld	(x), a
                                    270 ;	main.c: 39: rx_int_chars[3] ='\0';
      0000C4 1E 0B            [ 2]  271 	ldw	x, (0x0b, sp)
      0000C6 6F 03            [ 1]  272 	clr	(0x0003, x)
      0000C8 20 23            [ 2]  273 	jra	00107$
      0000CA                        274 00105$:
                                    275 ;	main.c: 41: } else if (num > 9) {
      0000CA 7B 0D            [ 1]  276 	ld	a, (0x0d, sp)
      0000CC A1 09            [ 1]  277 	cp	a, #0x09
      0000CE 23 13            [ 2]  278 	jrule	00102$
                                    279 ;	main.c: 43: rx_int_chars[0] = num / 10 + '0';
      0000D0 7B 08            [ 1]  280 	ld	a, (0x08, sp)
      0000D2 6B 0A            [ 1]  281 	ld	(0x0a, sp), a
      0000D4 AB 30            [ 1]  282 	add	a, #0x30
      0000D6 1E 0B            [ 2]  283 	ldw	x, (0x0b, sp)
      0000D8 F7               [ 1]  284 	ld	(x), a
                                    285 ;	main.c: 44: rx_int_chars[1] = num % 10 + '0';
      0000D9 1E 03            [ 2]  286 	ldw	x, (0x03, sp)
      0000DB 7B 09            [ 1]  287 	ld	a, (0x09, sp)
      0000DD F7               [ 1]  288 	ld	(x), a
                                    289 ;	main.c: 45: rx_int_chars[2] ='\0';
      0000DE 1E 05            [ 2]  290 	ldw	x, (0x05, sp)
      0000E0 7F               [ 1]  291 	clr	(x)
      0000E1 20 0A            [ 2]  292 	jra	00107$
      0000E3                        293 00102$:
                                    294 ;	main.c: 50: rx_int_chars[0] = num + '0';
      0000E3 7B 0D            [ 1]  295 	ld	a, (0x0d, sp)
      0000E5 AB 30            [ 1]  296 	add	a, #0x30
      0000E7 1E 0B            [ 2]  297 	ldw	x, (0x0b, sp)
      0000E9 F7               [ 1]  298 	ld	(x), a
                                    299 ;	main.c: 51: rx_int_chars[1] ='\0';
      0000EA 1E 03            [ 2]  300 	ldw	x, (0x03, sp)
      0000EC 7F               [ 1]  301 	clr	(x)
      0000ED                        302 00107$:
                                    303 ;	main.c: 53: }
      0000ED 5B 0D            [ 2]  304 	addw	sp, #13
      0000EF 81               [ 4]  305 	ret
                                    306 ;	main.c: 55: void convert_int_to_binary(int num, char* rx_binary_chars) {
                                    307 ;	-----------------------------------------
                                    308 ;	 function convert_int_to_binary
                                    309 ;	-----------------------------------------
      0000F0                        310 _convert_int_to_binary:
      0000F0 52 04            [ 2]  311 	sub	sp, #4
      0000F2 1F 01            [ 2]  312 	ldw	(0x01, sp), x
                                    313 ;	main.c: 57: for(int i = 7; i >= 0; i--) {
      0000F4 AE 00 07         [ 2]  314 	ldw	x, #0x0007
      0000F7 1F 03            [ 2]  315 	ldw	(0x03, sp), x
      0000F9                        316 00103$:
      0000F9 0D 03            [ 1]  317 	tnz	(0x03, sp)
      0000FB 2B 22            [ 1]  318 	jrmi	00101$
                                    319 ;	main.c: 59: rx_binary_chars[7 - i] = ((num >> i) & 1) + '0';
      0000FD AE 00 07         [ 2]  320 	ldw	x, #0x0007
      000100 72 F0 03         [ 2]  321 	subw	x, (0x03, sp)
      000103 72 FB 07         [ 2]  322 	addw	x, (0x07, sp)
      000106 16 01            [ 2]  323 	ldw	y, (0x01, sp)
      000108 7B 04            [ 1]  324 	ld	a, (0x04, sp)
      00010A 27 05            [ 1]  325 	jreq	00120$
      00010C                        326 00119$:
      00010C 90 57            [ 2]  327 	sraw	y
      00010E 4A               [ 1]  328 	dec	a
      00010F 26 FB            [ 1]  329 	jrne	00119$
      000111                        330 00120$:
      000111 90 9F            [ 1]  331 	ld	a, yl
      000113 A4 01            [ 1]  332 	and	a, #0x01
      000115 AB 30            [ 1]  333 	add	a, #0x30
      000117 F7               [ 1]  334 	ld	(x), a
                                    335 ;	main.c: 57: for(int i = 7; i >= 0; i--) {
      000118 1E 03            [ 2]  336 	ldw	x, (0x03, sp)
      00011A 5A               [ 2]  337 	decw	x
      00011B 1F 03            [ 2]  338 	ldw	(0x03, sp), x
      00011D 20 DA            [ 2]  339 	jra	00103$
      00011F                        340 00101$:
                                    341 ;	main.c: 61: rx_binary_chars[8] = '\0'; // Добавляем символ конца строки
      00011F 1E 07            [ 2]  342 	ldw	x, (0x07, sp)
      000121 6F 08            [ 1]  343 	clr	(0x0008, x)
                                    344 ;	main.c: 62: }
      000123 1E 05            [ 2]  345 	ldw	x, (5, sp)
      000125 5B 08            [ 2]  346 	addw	sp, #8
      000127 FC               [ 2]  347 	jp	(x)
                                    348 ;	main.c: 64: void status_check(void){
                                    349 ;	-----------------------------------------
                                    350 ;	 function status_check
                                    351 ;	-----------------------------------------
      000128                        352 _status_check:
      000128 52 09            [ 2]  353 	sub	sp, #9
                                    354 ;	main.c: 65: char rx_binary_chars[9]={0};
      00012A 0F 01            [ 1]  355 	clr	(0x01, sp)
      00012C 0F 02            [ 1]  356 	clr	(0x02, sp)
      00012E 0F 03            [ 1]  357 	clr	(0x03, sp)
      000130 0F 04            [ 1]  358 	clr	(0x04, sp)
      000132 0F 05            [ 1]  359 	clr	(0x05, sp)
      000134 0F 06            [ 1]  360 	clr	(0x06, sp)
      000136 0F 07            [ 1]  361 	clr	(0x07, sp)
      000138 0F 08            [ 1]  362 	clr	(0x08, sp)
      00013A 0F 09            [ 1]  363 	clr	(0x09, sp)
                                    364 ;	main.c: 66: uart_write("\nI2C_REGS >.<\n");
      00013C AEr00r00         [ 2]  365 	ldw	x, #(___str_0+0)
      00013F CDr00r40         [ 4]  366 	call	_uart_write
                                    367 ;	main.c: 67: convert_int_to_binary(I2C_SR1, rx_binary_chars);
      000142 96               [ 1]  368 	ldw	x, sp
      000143 5C               [ 1]  369 	incw	x
      000144 51               [ 1]  370 	exgw	x, y
      000145 C6 52 17         [ 1]  371 	ld	a, 0x5217
      000148 5F               [ 1]  372 	clrw	x
      000149 90 89            [ 2]  373 	pushw	y
      00014B 97               [ 1]  374 	ld	xl, a
      00014C CDr00rF0         [ 4]  375 	call	_convert_int_to_binary
                                    376 ;	main.c: 68: uart_write("\nSR1 -> ");
      00014F AEr00r0F         [ 2]  377 	ldw	x, #(___str_1+0)
      000152 CDr00r40         [ 4]  378 	call	_uart_write
                                    379 ;	main.c: 69: uart_write(rx_binary_chars);
      000155 96               [ 1]  380 	ldw	x, sp
      000156 5C               [ 1]  381 	incw	x
      000157 CDr00r40         [ 4]  382 	call	_uart_write
                                    383 ;	main.c: 70: uart_write(" <-\n");
      00015A AEr00r18         [ 2]  384 	ldw	x, #(___str_2+0)
      00015D CDr00r40         [ 4]  385 	call	_uart_write
                                    386 ;	main.c: 71: convert_int_to_binary(I2C_SR2, rx_binary_chars);
      000160 96               [ 1]  387 	ldw	x, sp
      000161 5C               [ 1]  388 	incw	x
      000162 51               [ 1]  389 	exgw	x, y
      000163 C6 52 18         [ 1]  390 	ld	a, 0x5218
      000166 5F               [ 1]  391 	clrw	x
      000167 90 89            [ 2]  392 	pushw	y
      000169 97               [ 1]  393 	ld	xl, a
      00016A CDr00rF0         [ 4]  394 	call	_convert_int_to_binary
                                    395 ;	main.c: 72: uart_write("SR2 -> ");
      00016D AEr00r1D         [ 2]  396 	ldw	x, #(___str_3+0)
      000170 CDr00r40         [ 4]  397 	call	_uart_write
                                    398 ;	main.c: 73: uart_write(rx_binary_chars);
      000173 96               [ 1]  399 	ldw	x, sp
      000174 5C               [ 1]  400 	incw	x
      000175 CDr00r40         [ 4]  401 	call	_uart_write
                                    402 ;	main.c: 74: uart_write(" <-\n");
      000178 AEr00r18         [ 2]  403 	ldw	x, #(___str_2+0)
      00017B CDr00r40         [ 4]  404 	call	_uart_write
                                    405 ;	main.c: 75: convert_int_to_binary(I2C_SR3, rx_binary_chars);
      00017E 96               [ 1]  406 	ldw	x, sp
      00017F 5C               [ 1]  407 	incw	x
      000180 51               [ 1]  408 	exgw	x, y
      000181 C6 52 19         [ 1]  409 	ld	a, 0x5219
      000184 5F               [ 1]  410 	clrw	x
      000185 90 89            [ 2]  411 	pushw	y
      000187 97               [ 1]  412 	ld	xl, a
      000188 CDr00rF0         [ 4]  413 	call	_convert_int_to_binary
                                    414 ;	main.c: 76: uart_write("SR3 -> ");
      00018B AEr00r25         [ 2]  415 	ldw	x, #(___str_4+0)
      00018E CDr00r40         [ 4]  416 	call	_uart_write
                                    417 ;	main.c: 77: uart_write(rx_binary_chars);
      000191 96               [ 1]  418 	ldw	x, sp
      000192 5C               [ 1]  419 	incw	x
      000193 CDr00r40         [ 4]  420 	call	_uart_write
                                    421 ;	main.c: 78: uart_write(" <-\n");
      000196 AEr00r18         [ 2]  422 	ldw	x, #(___str_2+0)
      000199 CDr00r40         [ 4]  423 	call	_uart_write
                                    424 ;	main.c: 79: convert_int_to_binary(I2C_CR1, rx_binary_chars);
      00019C 96               [ 1]  425 	ldw	x, sp
      00019D 5C               [ 1]  426 	incw	x
      00019E 51               [ 1]  427 	exgw	x, y
      00019F C6 52 10         [ 1]  428 	ld	a, 0x5210
      0001A2 5F               [ 1]  429 	clrw	x
      0001A3 90 89            [ 2]  430 	pushw	y
      0001A5 97               [ 1]  431 	ld	xl, a
      0001A6 CDr00rF0         [ 4]  432 	call	_convert_int_to_binary
                                    433 ;	main.c: 80: uart_write("CR1 -> ");
      0001A9 AEr00r2D         [ 2]  434 	ldw	x, #(___str_5+0)
      0001AC CDr00r40         [ 4]  435 	call	_uart_write
                                    436 ;	main.c: 81: uart_write(rx_binary_chars);
      0001AF 96               [ 1]  437 	ldw	x, sp
      0001B0 5C               [ 1]  438 	incw	x
      0001B1 CDr00r40         [ 4]  439 	call	_uart_write
                                    440 ;	main.c: 82: uart_write(" <-\n");
      0001B4 AEr00r18         [ 2]  441 	ldw	x, #(___str_2+0)
      0001B7 CDr00r40         [ 4]  442 	call	_uart_write
                                    443 ;	main.c: 83: convert_int_to_binary(I2C_CR2, rx_binary_chars);
      0001BA 96               [ 1]  444 	ldw	x, sp
      0001BB 5C               [ 1]  445 	incw	x
      0001BC 51               [ 1]  446 	exgw	x, y
      0001BD C6 52 11         [ 1]  447 	ld	a, 0x5211
      0001C0 5F               [ 1]  448 	clrw	x
      0001C1 90 89            [ 2]  449 	pushw	y
      0001C3 97               [ 1]  450 	ld	xl, a
      0001C4 CDr00rF0         [ 4]  451 	call	_convert_int_to_binary
                                    452 ;	main.c: 84: uart_write("CR2 -> ");
      0001C7 AEr00r35         [ 2]  453 	ldw	x, #(___str_6+0)
      0001CA CDr00r40         [ 4]  454 	call	_uart_write
                                    455 ;	main.c: 85: uart_write(rx_binary_chars);
      0001CD 96               [ 1]  456 	ldw	x, sp
      0001CE 5C               [ 1]  457 	incw	x
      0001CF CDr00r40         [ 4]  458 	call	_uart_write
                                    459 ;	main.c: 86: uart_write(" <-\n");
      0001D2 AEr00r18         [ 2]  460 	ldw	x, #(___str_2+0)
      0001D5 CDr00r40         [ 4]  461 	call	_uart_write
                                    462 ;	main.c: 87: convert_int_to_binary(I2C_DR, rx_binary_chars);
      0001D8 96               [ 1]  463 	ldw	x, sp
      0001D9 5C               [ 1]  464 	incw	x
      0001DA 51               [ 1]  465 	exgw	x, y
      0001DB C6 52 16         [ 1]  466 	ld	a, 0x5216
      0001DE 5F               [ 1]  467 	clrw	x
      0001DF 90 89            [ 2]  468 	pushw	y
      0001E1 97               [ 1]  469 	ld	xl, a
      0001E2 CDr00rF0         [ 4]  470 	call	_convert_int_to_binary
                                    471 ;	main.c: 88: uart_write("DR -> ");
      0001E5 AEr00r3D         [ 2]  472 	ldw	x, #(___str_7+0)
      0001E8 CDr00r40         [ 4]  473 	call	_uart_write
                                    474 ;	main.c: 89: uart_write(rx_binary_chars);
      0001EB 96               [ 1]  475 	ldw	x, sp
      0001EC 5C               [ 1]  476 	incw	x
      0001ED CDr00r40         [ 4]  477 	call	_uart_write
                                    478 ;	main.c: 90: uart_write(" <-\n");
      0001F0 AEr00r18         [ 2]  479 	ldw	x, #(___str_2+0)
      0001F3 CDr00r40         [ 4]  480 	call	_uart_write
                                    481 ;	main.c: 91: uart_write("UART_REGS >.<\n");
      0001F6 AEr00r44         [ 2]  482 	ldw	x, #(___str_8+0)
      0001F9 CDr00r40         [ 4]  483 	call	_uart_write
                                    484 ;	main.c: 92: convert_int_to_binary(UART1_SR, rx_binary_chars);
      0001FC 96               [ 1]  485 	ldw	x, sp
      0001FD 5C               [ 1]  486 	incw	x
      0001FE 51               [ 1]  487 	exgw	x, y
      0001FF C6 52 30         [ 1]  488 	ld	a, 0x5230
      000202 5F               [ 1]  489 	clrw	x
      000203 90 89            [ 2]  490 	pushw	y
      000205 97               [ 1]  491 	ld	xl, a
      000206 CDr00rF0         [ 4]  492 	call	_convert_int_to_binary
                                    493 ;	main.c: 93: uart_write("\nSR -> ");
      000209 AEr00r53         [ 2]  494 	ldw	x, #(___str_9+0)
      00020C CDr00r40         [ 4]  495 	call	_uart_write
                                    496 ;	main.c: 94: uart_write(rx_binary_chars);
      00020F 96               [ 1]  497 	ldw	x, sp
      000210 5C               [ 1]  498 	incw	x
      000211 CDr00r40         [ 4]  499 	call	_uart_write
                                    500 ;	main.c: 95: uart_write(" <-\n");
      000214 AEr00r18         [ 2]  501 	ldw	x, #(___str_2+0)
      000217 CDr00r40         [ 4]  502 	call	_uart_write
                                    503 ;	main.c: 96: convert_int_to_binary(UART1_DR, rx_binary_chars);
      00021A 96               [ 1]  504 	ldw	x, sp
      00021B 5C               [ 1]  505 	incw	x
      00021C 51               [ 1]  506 	exgw	x, y
      00021D C6 52 31         [ 1]  507 	ld	a, 0x5231
      000220 5F               [ 1]  508 	clrw	x
      000221 90 89            [ 2]  509 	pushw	y
      000223 97               [ 1]  510 	ld	xl, a
      000224 CDr00rF0         [ 4]  511 	call	_convert_int_to_binary
                                    512 ;	main.c: 97: uart_write("DR -> ");
      000227 AEr00r3D         [ 2]  513 	ldw	x, #(___str_7+0)
      00022A CDr00r40         [ 4]  514 	call	_uart_write
                                    515 ;	main.c: 98: uart_write(rx_binary_chars);
      00022D 96               [ 1]  516 	ldw	x, sp
      00022E 5C               [ 1]  517 	incw	x
      00022F CDr00r40         [ 4]  518 	call	_uart_write
                                    519 ;	main.c: 99: uart_write(" <-\n");
      000232 AEr00r18         [ 2]  520 	ldw	x, #(___str_2+0)
      000235 CDr00r40         [ 4]  521 	call	_uart_write
                                    522 ;	main.c: 100: convert_int_to_binary(UART1_BRR1, rx_binary_chars);
      000238 96               [ 1]  523 	ldw	x, sp
      000239 5C               [ 1]  524 	incw	x
      00023A 51               [ 1]  525 	exgw	x, y
      00023B C6 52 32         [ 1]  526 	ld	a, 0x5232
      00023E 5F               [ 1]  527 	clrw	x
      00023F 90 89            [ 2]  528 	pushw	y
      000241 97               [ 1]  529 	ld	xl, a
      000242 CDr00rF0         [ 4]  530 	call	_convert_int_to_binary
                                    531 ;	main.c: 101: uart_write("BRR1 -> ");
      000245 AEr00r5B         [ 2]  532 	ldw	x, #(___str_10+0)
      000248 CDr00r40         [ 4]  533 	call	_uart_write
                                    534 ;	main.c: 102: uart_write(rx_binary_chars);
      00024B 96               [ 1]  535 	ldw	x, sp
      00024C 5C               [ 1]  536 	incw	x
      00024D CDr00r40         [ 4]  537 	call	_uart_write
                                    538 ;	main.c: 103: uart_write(" <-\n");
      000250 AEr00r18         [ 2]  539 	ldw	x, #(___str_2+0)
      000253 CDr00r40         [ 4]  540 	call	_uart_write
                                    541 ;	main.c: 104: convert_int_to_binary(UART1_BRR2, rx_binary_chars);
      000256 96               [ 1]  542 	ldw	x, sp
      000257 5C               [ 1]  543 	incw	x
      000258 51               [ 1]  544 	exgw	x, y
      000259 C6 52 33         [ 1]  545 	ld	a, 0x5233
      00025C 5F               [ 1]  546 	clrw	x
      00025D 90 89            [ 2]  547 	pushw	y
      00025F 97               [ 1]  548 	ld	xl, a
      000260 CDr00rF0         [ 4]  549 	call	_convert_int_to_binary
                                    550 ;	main.c: 105: uart_write("BRR2 -> ");
      000263 AEr00r64         [ 2]  551 	ldw	x, #(___str_11+0)
      000266 CDr00r40         [ 4]  552 	call	_uart_write
                                    553 ;	main.c: 106: uart_write(rx_binary_chars);
      000269 96               [ 1]  554 	ldw	x, sp
      00026A 5C               [ 1]  555 	incw	x
      00026B CDr00r40         [ 4]  556 	call	_uart_write
                                    557 ;	main.c: 107: uart_write(" <-\n");
      00026E AEr00r18         [ 2]  558 	ldw	x, #(___str_2+0)
      000271 CDr00r40         [ 4]  559 	call	_uart_write
                                    560 ;	main.c: 108: convert_int_to_binary(UART1_CR1, rx_binary_chars);
      000274 96               [ 1]  561 	ldw	x, sp
      000275 5C               [ 1]  562 	incw	x
      000276 51               [ 1]  563 	exgw	x, y
      000277 C6 52 34         [ 1]  564 	ld	a, 0x5234
      00027A 5F               [ 1]  565 	clrw	x
      00027B 90 89            [ 2]  566 	pushw	y
      00027D 97               [ 1]  567 	ld	xl, a
      00027E CDr00rF0         [ 4]  568 	call	_convert_int_to_binary
                                    569 ;	main.c: 109: uart_write("CR1 -> ");
      000281 AEr00r2D         [ 2]  570 	ldw	x, #(___str_5+0)
      000284 CDr00r40         [ 4]  571 	call	_uart_write
                                    572 ;	main.c: 110: uart_write(rx_binary_chars);
      000287 96               [ 1]  573 	ldw	x, sp
      000288 5C               [ 1]  574 	incw	x
      000289 CDr00r40         [ 4]  575 	call	_uart_write
                                    576 ;	main.c: 111: uart_write(" <-\n");
      00028C AEr00r18         [ 2]  577 	ldw	x, #(___str_2+0)
      00028F CDr00r40         [ 4]  578 	call	_uart_write
                                    579 ;	main.c: 112: convert_int_to_binary(UART1_CR2, rx_binary_chars);
      000292 96               [ 1]  580 	ldw	x, sp
      000293 5C               [ 1]  581 	incw	x
      000294 51               [ 1]  582 	exgw	x, y
      000295 C6 52 35         [ 1]  583 	ld	a, 0x5235
      000298 5F               [ 1]  584 	clrw	x
      000299 90 89            [ 2]  585 	pushw	y
      00029B 97               [ 1]  586 	ld	xl, a
      00029C CDr00rF0         [ 4]  587 	call	_convert_int_to_binary
                                    588 ;	main.c: 113: uart_write("CR2 -> ");
      00029F AEr00r35         [ 2]  589 	ldw	x, #(___str_6+0)
      0002A2 CDr00r40         [ 4]  590 	call	_uart_write
                                    591 ;	main.c: 114: uart_write(rx_binary_chars);
      0002A5 96               [ 1]  592 	ldw	x, sp
      0002A6 5C               [ 1]  593 	incw	x
      0002A7 CDr00r40         [ 4]  594 	call	_uart_write
                                    595 ;	main.c: 115: uart_write(" <-\n");
      0002AA AEr00r18         [ 2]  596 	ldw	x, #(___str_2+0)
      0002AD CDr00r40         [ 4]  597 	call	_uart_write
                                    598 ;	main.c: 116: convert_int_to_binary(UART1_CR3, rx_binary_chars);
      0002B0 96               [ 1]  599 	ldw	x, sp
      0002B1 5C               [ 1]  600 	incw	x
      0002B2 51               [ 1]  601 	exgw	x, y
      0002B3 C6 52 36         [ 1]  602 	ld	a, 0x5236
      0002B6 5F               [ 1]  603 	clrw	x
      0002B7 90 89            [ 2]  604 	pushw	y
      0002B9 97               [ 1]  605 	ld	xl, a
      0002BA CDr00rF0         [ 4]  606 	call	_convert_int_to_binary
                                    607 ;	main.c: 117: uart_write("CR3 -> ");
      0002BD AEr00r6D         [ 2]  608 	ldw	x, #(___str_12+0)
      0002C0 CDr00r40         [ 4]  609 	call	_uart_write
                                    610 ;	main.c: 118: uart_write(rx_binary_chars);
      0002C3 96               [ 1]  611 	ldw	x, sp
      0002C4 5C               [ 1]  612 	incw	x
      0002C5 CDr00r40         [ 4]  613 	call	_uart_write
                                    614 ;	main.c: 119: uart_write(" <-\n");
      0002C8 AEr00r18         [ 2]  615 	ldw	x, #(___str_2+0)
      0002CB CDr00r40         [ 4]  616 	call	_uart_write
                                    617 ;	main.c: 120: convert_int_to_binary(UART1_CR4, rx_binary_chars);
      0002CE 96               [ 1]  618 	ldw	x, sp
      0002CF 5C               [ 1]  619 	incw	x
      0002D0 51               [ 1]  620 	exgw	x, y
      0002D1 C6 52 37         [ 1]  621 	ld	a, 0x5237
      0002D4 5F               [ 1]  622 	clrw	x
      0002D5 90 89            [ 2]  623 	pushw	y
      0002D7 97               [ 1]  624 	ld	xl, a
      0002D8 CDr00rF0         [ 4]  625 	call	_convert_int_to_binary
                                    626 ;	main.c: 121: uart_write("CR4 -> ");
      0002DB AEr00r75         [ 2]  627 	ldw	x, #(___str_13+0)
      0002DE CDr00r40         [ 4]  628 	call	_uart_write
                                    629 ;	main.c: 122: uart_write(rx_binary_chars);
      0002E1 96               [ 1]  630 	ldw	x, sp
      0002E2 5C               [ 1]  631 	incw	x
      0002E3 CDr00r40         [ 4]  632 	call	_uart_write
                                    633 ;	main.c: 123: uart_write(" <-\n");
      0002E6 AEr00r18         [ 2]  634 	ldw	x, #(___str_2+0)
      0002E9 CDr00r40         [ 4]  635 	call	_uart_write
                                    636 ;	main.c: 124: convert_int_to_binary(UART1_CR5, rx_binary_chars);
      0002EC 96               [ 1]  637 	ldw	x, sp
      0002ED 5C               [ 1]  638 	incw	x
      0002EE 51               [ 1]  639 	exgw	x, y
      0002EF C6 52 38         [ 1]  640 	ld	a, 0x5238
      0002F2 5F               [ 1]  641 	clrw	x
      0002F3 90 89            [ 2]  642 	pushw	y
      0002F5 97               [ 1]  643 	ld	xl, a
      0002F6 CDr00rF0         [ 4]  644 	call	_convert_int_to_binary
                                    645 ;	main.c: 125: uart_write("CR5 -> ");
      0002F9 AEr00r7D         [ 2]  646 	ldw	x, #(___str_14+0)
      0002FC CDr00r40         [ 4]  647 	call	_uart_write
                                    648 ;	main.c: 126: uart_write(rx_binary_chars);
      0002FF 96               [ 1]  649 	ldw	x, sp
      000300 5C               [ 1]  650 	incw	x
      000301 CDr00r40         [ 4]  651 	call	_uart_write
                                    652 ;	main.c: 127: uart_write(" <-\n");
      000304 AEr00r18         [ 2]  653 	ldw	x, #(___str_2+0)
      000307 CDr00r40         [ 4]  654 	call	_uart_write
                                    655 ;	main.c: 128: convert_int_to_binary(UART1_GTR, rx_binary_chars);
      00030A 96               [ 1]  656 	ldw	x, sp
      00030B 5C               [ 1]  657 	incw	x
      00030C 51               [ 1]  658 	exgw	x, y
      00030D C6 52 39         [ 1]  659 	ld	a, 0x5239
      000310 5F               [ 1]  660 	clrw	x
      000311 90 89            [ 2]  661 	pushw	y
      000313 97               [ 1]  662 	ld	xl, a
      000314 CDr00rF0         [ 4]  663 	call	_convert_int_to_binary
                                    664 ;	main.c: 129: uart_write("GTR -> ");
      000317 AEr00r85         [ 2]  665 	ldw	x, #(___str_15+0)
      00031A CDr00r40         [ 4]  666 	call	_uart_write
                                    667 ;	main.c: 130: uart_write(rx_binary_chars);
      00031D 96               [ 1]  668 	ldw	x, sp
      00031E 5C               [ 1]  669 	incw	x
      00031F CDr00r40         [ 4]  670 	call	_uart_write
                                    671 ;	main.c: 131: uart_write(" <-\n");
      000322 AEr00r18         [ 2]  672 	ldw	x, #(___str_2+0)
      000325 CDr00r40         [ 4]  673 	call	_uart_write
                                    674 ;	main.c: 132: convert_int_to_binary(UART1_PSCR, rx_binary_chars);
      000328 96               [ 1]  675 	ldw	x, sp
      000329 5C               [ 1]  676 	incw	x
      00032A 51               [ 1]  677 	exgw	x, y
      00032B C6 52 3A         [ 1]  678 	ld	a, 0x523a
      00032E 5F               [ 1]  679 	clrw	x
      00032F 90 89            [ 2]  680 	pushw	y
      000331 97               [ 1]  681 	ld	xl, a
      000332 CDr00rF0         [ 4]  682 	call	_convert_int_to_binary
                                    683 ;	main.c: 133: uart_write("PSCR -> ");
      000335 AEr00r8D         [ 2]  684 	ldw	x, #(___str_16+0)
      000338 CDr00r40         [ 4]  685 	call	_uart_write
                                    686 ;	main.c: 134: uart_write(rx_binary_chars);
      00033B 96               [ 1]  687 	ldw	x, sp
      00033C 5C               [ 1]  688 	incw	x
      00033D CDr00r40         [ 4]  689 	call	_uart_write
                                    690 ;	main.c: 135: uart_write(" <-\n");
      000340 AEr00r18         [ 2]  691 	ldw	x, #(___str_2+0)
      000343 CDr00r40         [ 4]  692 	call	_uart_write
                                    693 ;	main.c: 136: }
      000346 5B 09            [ 2]  694 	addw	sp, #9
      000348 81               [ 4]  695 	ret
                                    696 ;	main.c: 138: void uart_init(void){
                                    697 ;	-----------------------------------------
                                    698 ;	 function uart_init
                                    699 ;	-----------------------------------------
      000349                        700 _uart_init:
                                    701 ;	main.c: 139: CLK_CKDIVR = 0;
      000349 35 00 50 C6      [ 1]  702 	mov	0x50c6+0, #0x00
                                    703 ;	main.c: 142: UART1_CR2 |= UART_CR2_TEN; // Transmitter enable
      00034D 72 16 52 35      [ 1]  704 	bset	0x5235, #3
                                    705 ;	main.c: 143: UART1_CR2 |= UART_CR2_REN; // Receiver enable
      000351 72 14 52 35      [ 1]  706 	bset	0x5235, #2
                                    707 ;	main.c: 144: UART1_CR3 &= ~(UART_CR3_STOP1 | UART_CR3_STOP2); // 1 stop bit
      000355 C6 52 36         [ 1]  708 	ld	a, 0x5236
      000358 A4 CF            [ 1]  709 	and	a, #0xcf
      00035A C7 52 36         [ 1]  710 	ld	0x5236, a
                                    711 ;	main.c: 146: UART1_BRR2 = 0x03; UART1_BRR1 = 0x68; // 0x0683 coded funky way (see ref manual)
      00035D 35 03 52 33      [ 1]  712 	mov	0x5233+0, #0x03
      000361 35 68 52 32      [ 1]  713 	mov	0x5232+0, #0x68
                                    714 ;	main.c: 147: }
      000365 81               [ 4]  715 	ret
                                    716 ;	main.c: 151: void i2c_init(void) {
                                    717 ;	-----------------------------------------
                                    718 ;	 function i2c_init
                                    719 ;	-----------------------------------------
      000366                        720 _i2c_init:
                                    721 ;	main.c: 157: I2C_CR1 = I2C_CR1 & ~0x01;      // PE=0, disable I2C before setup
      000366 72 11 52 10      [ 1]  722 	bres	0x5210, #0
                                    723 ;	main.c: 158: I2C_FREQR= 16;                  // peripheral frequence =16MHz
      00036A 35 10 52 12      [ 1]  724 	mov	0x5212+0, #0x10
                                    725 ;	main.c: 159: I2C_CCRH = 0;                   // =0
      00036E 35 00 52 1C      [ 1]  726 	mov	0x521c+0, #0x00
                                    727 ;	main.c: 160: I2C_CCRL = 80;                  // 100kHz for I2C
      000372 35 50 52 1B      [ 1]  728 	mov	0x521b+0, #0x50
                                    729 ;	main.c: 161: I2C_CCRH = I2C_CCRH & ~0x80;    // set standart mode(100кHz)
      000376 72 1F 52 1C      [ 1]  730 	bres	0x521c, #7
                                    731 ;	main.c: 162: I2C_OARH = I2C_OARH & ~0x80;    // 7-bit address mode
      00037A 72 1F 52 14      [ 1]  732 	bres	0x5214, #7
                                    733 ;	main.c: 163: I2C_OARH = I2C_OARH | 0x40;     // see reference manual
      00037E 72 1C 52 14      [ 1]  734 	bset	0x5214, #6
                                    735 ;	main.c: 164: I2C_CR1 = I2C_CR1 | 0x01;       // PE=1, enable I2C
      000382 72 10 52 10      [ 1]  736 	bset	0x5210, #0
                                    737 ;	main.c: 165: }
      000386 81               [ 4]  738 	ret
                                    739 ;	main.c: 169: void i2c_start(void) {
                                    740 ;	-----------------------------------------
                                    741 ;	 function i2c_start
                                    742 ;	-----------------------------------------
      000387                        743 _i2c_start:
                                    744 ;	main.c: 170: I2C_CR2 = I2C_CR2 | (1 << 0); // Отправляем стартовый сигнал
      000387 72 10 52 11      [ 1]  745 	bset	0x5211, #0
                                    746 ;	main.c: 171: while(!(I2C_SR1 & (1 << 0)));
      00038B                        747 00101$:
      00038B 72 01 52 17 FB   [ 2]  748 	btjf	0x5217, #0, 00101$
                                    749 ;	main.c: 173: }
      000390 81               [ 4]  750 	ret
                                    751 ;	main.c: 175: void i2c_send_address(uint8_t address) {
                                    752 ;	-----------------------------------------
                                    753 ;	 function i2c_send_address
                                    754 ;	-----------------------------------------
      000391                        755 _i2c_send_address:
                                    756 ;	main.c: 176: I2C_DR = address << 1; // Отправка адреса устройства с битом на запись
      000391 48               [ 1]  757 	sll	a
      000392 C7 52 16         [ 1]  758 	ld	0x5216, a
                                    759 ;	main.c: 177: while (!(I2C_SR1 & (1 << 1)) && !(I2C_SR2 & (1 << 2)));
      000395                        760 00102$:
      000395 72 03 52 17 01   [ 2]  761 	btjf	0x5217, #1, 00117$
      00039A 81               [ 4]  762 	ret
      00039B                        763 00117$:
      00039B 72 05 52 18 F5   [ 2]  764 	btjf	0x5218, #2, 00102$
                                    765 ;	main.c: 178: }
      0003A0 81               [ 4]  766 	ret
                                    767 ;	main.c: 180: void i2c_stop(void) {
                                    768 ;	-----------------------------------------
                                    769 ;	 function i2c_stop
                                    770 ;	-----------------------------------------
      0003A1                        771 _i2c_stop:
                                    772 ;	main.c: 181: I2C_CR2 = I2C_CR2 | (1 << 1); // Отправка стопового сигнала
      0003A1 72 12 52 11      [ 1]  773 	bset	0x5211, #1
                                    774 ;	main.c: 183: }
      0003A5 81               [ 4]  775 	ret
                                    776 ;	main.c: 187: void i2c_scan(void) {
                                    777 ;	-----------------------------------------
                                    778 ;	 function i2c_scan
                                    779 ;	-----------------------------------------
      0003A6                        780 _i2c_scan:
      0003A6 52 05            [ 2]  781 	sub	sp, #5
                                    782 ;	main.c: 188: for (uint8_t addr = 1; addr < 127; addr++) {
      0003A8 A6 01            [ 1]  783 	ld	a, #0x01
      0003AA 6B 05            [ 1]  784 	ld	(0x05, sp), a
      0003AC                        785 00105$:
      0003AC 7B 05            [ 1]  786 	ld	a, (0x05, sp)
      0003AE A1 7F            [ 1]  787 	cp	a, #0x7f
      0003B0 24 40            [ 1]  788 	jrnc	00107$
                                    789 ;	main.c: 189: i2c_start();
      0003B2 CDr03r87         [ 4]  790 	call	_i2c_start
                                    791 ;	main.c: 190: i2c_send_address(addr);
      0003B5 7B 05            [ 1]  792 	ld	a, (0x05, sp)
      0003B7 CDr03r91         [ 4]  793 	call	_i2c_send_address
                                    794 ;	main.c: 191: if (!(I2C_SR2 & (1 << 2))) { // Проверка на ACK
      0003BA 72 04 52 18 28   [ 2]  795 	btjt	0x5218, #2, 00102$
                                    796 ;	main.c: 193: uart_write("SM ");
      0003BF AEr00r96         [ 2]  797 	ldw	x, #(___str_17+0)
      0003C2 CDr00r40         [ 4]  798 	call	_uart_write
                                    799 ;	main.c: 194: char rx_int_chars[4]={0};
      0003C5 0F 01            [ 1]  800 	clr	(0x01, sp)
      0003C7 0F 02            [ 1]  801 	clr	(0x02, sp)
      0003C9 0F 03            [ 1]  802 	clr	(0x03, sp)
      0003CB 0F 04            [ 1]  803 	clr	(0x04, sp)
                                    804 ;	main.c: 195: convert_int_to_chars(addr, rx_int_chars);
      0003CD 96               [ 1]  805 	ldw	x, sp
      0003CE 5C               [ 1]  806 	incw	x
      0003CF 7B 05            [ 1]  807 	ld	a, (0x05, sp)
      0003D1 CDr00r6B         [ 4]  808 	call	_convert_int_to_chars
                                    809 ;	main.c: 196: uart_write(rx_int_chars); 
      0003D4 96               [ 1]  810 	ldw	x, sp
      0003D5 5C               [ 1]  811 	incw	x
      0003D6 CDr00r40         [ 4]  812 	call	_uart_write
                                    813 ;	main.c: 197: uart_write("\r\n");
      0003D9 AEr00r9A         [ 2]  814 	ldw	x, #(___str_18+0)
      0003DC CDr00r40         [ 4]  815 	call	_uart_write
                                    816 ;	main.c: 198: current_dev = addr;
      0003DF 7B 05            [ 1]  817 	ld	a, (0x05, sp)
      0003E1 C7u01u00         [ 1]  818 	ld	_current_dev+0, a
                                    819 ;	main.c: 199: status_check();
      0003E4 CDr01r28         [ 4]  820 	call	_status_check
      0003E7                        821 00102$:
                                    822 ;	main.c: 201: i2c_stop();
      0003E7 CDr03rA1         [ 4]  823 	call	_i2c_stop
                                    824 ;	main.c: 202: I2C_SR2 = I2C_SR2 & ~(1 << 2); // Очистка флага ошибки
      0003EA 72 15 52 18      [ 1]  825 	bres	0x5218, #2
                                    826 ;	main.c: 188: for (uint8_t addr = 1; addr < 127; addr++) {
      0003EE 0C 05            [ 1]  827 	inc	(0x05, sp)
      0003F0 20 BA            [ 2]  828 	jra	00105$
      0003F2                        829 00107$:
                                    830 ;	main.c: 206: }
      0003F2 5B 05            [ 2]  831 	addw	sp, #5
      0003F4 81               [ 4]  832 	ret
                                    833 ;	main.c: 209: int uart_read(void)
                                    834 ;	-----------------------------------------
                                    835 ;	 function uart_read
                                    836 ;	-----------------------------------------
      0003F5                        837 _uart_read:
      0003F5 52 04            [ 2]  838 	sub	sp, #4
                                    839 ;	main.c: 211: uart_write("Start");
      0003F7 AEr00r9D         [ 2]  840 	ldw	x, #(___str_19+0)
      0003FA CDr00r40         [ 4]  841 	call	_uart_write
                                    842 ;	main.c: 212: memset(buffer, 0, sizeof(buffer));
      0003FD 4B 00            [ 1]  843 	push	#0x00
      0003FF 4B 01            [ 1]  844 	push	#0x01
      000401 5F               [ 1]  845 	clrw	x
      000402 89               [ 2]  846 	pushw	x
      000403 AEr00r00         [ 2]  847 	ldw	x, #(_buffer+0)
      000406 CDr00r00         [ 4]  848 	call	_memset
                                    849 ;	main.c: 213: uart_write("Clean");
      000409 AEr00rA3         [ 2]  850 	ldw	x, #(___str_20+0)
      00040C CDr00r40         [ 4]  851 	call	_uart_write
                                    852 ;	main.c: 214: int i = 0;
      00040F 5F               [ 1]  853 	clrw	x
      000410 1F 01            [ 2]  854 	ldw	(0x01, sp), x
                                    855 ;	main.c: 215: while(i<2)
      000412 5F               [ 1]  856 	clrw	x
      000413 1F 03            [ 2]  857 	ldw	(0x03, sp), x
      000415                        858 00106$:
      000415 1E 03            [ 2]  859 	ldw	x, (0x03, sp)
      000417 A3 00 02         [ 2]  860 	cpw	x, #0x0002
      00041A 2E 38            [ 1]  861 	jrsge	00108$
                                    862 ;	main.c: 218: if(UART1_SR & UART_SR_RXNE)
      00041C C6 52 30         [ 1]  863 	ld	a, 0x5230
      00041F A5 20            [ 1]  864 	bcp	a, #0x20
      000421 27 F2            [ 1]  865 	jreq	00106$
                                    866 ;	main.c: 220: uart_write("IF PASSED");
      000423 AEr00rA9         [ 2]  867 	ldw	x, #(___str_21+0)
      000426 CDr00r40         [ 4]  868 	call	_uart_write
                                    869 ;	main.c: 221: buffer[i] = UART_RX();
      000429 1E 03            [ 2]  870 	ldw	x, (0x03, sp)
      00042B 1Cr00r00         [ 2]  871 	addw	x, #(_buffer+0)
      00042E 89               [ 2]  872 	pushw	x
      00042F CDr00r37         [ 4]  873 	call	_UART_RX
      000432 85               [ 2]  874 	popw	x
      000433 F7               [ 1]  875 	ld	(x), a
                                    876 ;	main.c: 222: if(buffer[i] == '\n' || buffer[i] == '\0')
      000434 A1 0A            [ 1]  877 	cp	a, #0x0a
      000436 27 03            [ 1]  878 	jreq	00101$
      000438 F6               [ 1]  879 	ld	a, (x)
      000439 26 10            [ 1]  880 	jrne	00102$
      00043B                        881 00101$:
                                    882 ;	main.c: 224: buffer[i] = '\0';
      00043B 1E 01            [ 2]  883 	ldw	x, (0x01, sp)
      00043D 72 4Fu00u00      [ 1]  884 	clr	((_buffer+0), x)
                                    885 ;	main.c: 225: uart_write("flag_S");
      000441 AEr00rB3         [ 2]  886 	ldw	x, #(___str_22+0)
      000444 CDr00r40         [ 4]  887 	call	_uart_write
                                    888 ;	main.c: 226: return 1;
      000447 5F               [ 1]  889 	clrw	x
      000448 5C               [ 1]  890 	incw	x
      000449 20 10            [ 2]  891 	jra	00109$
                                    892 ;	main.c: 227: break;
      00044B                        893 00102$:
                                    894 ;	main.c: 229: i++;
      00044B 1E 03            [ 2]  895 	ldw	x, (0x03, sp)
      00044D 5C               [ 1]  896 	incw	x
      00044E 1F 03            [ 2]  897 	ldw	(0x03, sp), x
      000450 1F 01            [ 2]  898 	ldw	(0x01, sp), x
      000452 20 C1            [ 2]  899 	jra	00106$
      000454                        900 00108$:
                                    901 ;	main.c: 232: uart_write("End");
      000454 AEr00rBA         [ 2]  902 	ldw	x, #(___str_23+0)
      000457 CDr00r40         [ 4]  903 	call	_uart_write
                                    904 ;	main.c: 233: return 0;
      00045A 5F               [ 1]  905 	clrw	x
      00045B                        906 00109$:
                                    907 ;	main.c: 259: }
      00045B 5B 04            [ 2]  908 	addw	sp, #4
      00045D 81               [ 4]  909 	ret
                                    910 ;	main.c: 262: int main(void)
                                    911 ;	-----------------------------------------
                                    912 ;	 function main
                                    913 ;	-----------------------------------------
      00045E                        914 _main:
                                    915 ;	main.c: 264: uart_init();
      00045E CDr03r49         [ 4]  916 	call	_uart_init
                                    917 ;	main.c: 265: uart_write("SS\n");
      000461 AEr00rBE         [ 2]  918 	ldw	x, #(___str_24+0)
      000464 CDr00r40         [ 4]  919 	call	_uart_write
                                    920 ;	main.c: 267: while(uart_read())
      000467                        921 00102$:
      000467 CDr03rF5         [ 4]  922 	call	_uart_read
      00046A 5D               [ 2]  923 	tnzw	x
      00046B 27 29            [ 1]  924 	jreq	00104$
                                    925 ;	main.c: 269: uart_write("\n>buffer start<\n");
      00046D AEr00rC2         [ 2]  926 	ldw	x, #(___str_25+0)
      000470 CDr00r40         [ 4]  927 	call	_uart_write
                                    928 ;	main.c: 270: for(int i = 0; i < 256; i++)
      000473 5F               [ 1]  929 	clrw	x
      000474                        930 00106$:
      000474 A3 01 00         [ 2]  931 	cpw	x, #0x0100
      000477 2E 15            [ 1]  932 	jrsge	00101$
                                    933 ;	main.c: 272: uart_write(&buffer[i] + '\0');
      000479 90 93            [ 1]  934 	ldw	y, x
      00047B 72 A9r00r00      [ 2]  935 	addw	y, #(_buffer+0)
      00047F 89               [ 2]  936 	pushw	x
      000480 93               [ 1]  937 	ldw	x, y
      000481 CDr00r40         [ 4]  938 	call	_uart_write
      000484 AEr00rD3         [ 2]  939 	ldw	x, #(___str_26+0)
      000487 CDr00r40         [ 4]  940 	call	_uart_write
      00048A 85               [ 2]  941 	popw	x
                                    942 ;	main.c: 270: for(int i = 0; i < 256; i++)
      00048B 5C               [ 1]  943 	incw	x
      00048C 20 E6            [ 2]  944 	jra	00106$
      00048E                        945 00101$:
                                    946 ;	main.c: 275: uart_write("> buffer end <");
      00048E AEr00rD5         [ 2]  947 	ldw	x, #(___str_27+0)
      000491 CDr00r40         [ 4]  948 	call	_uart_write
      000494 20 D1            [ 2]  949 	jra	00102$
      000496                        950 00104$:
                                    951 ;	main.c: 277: i2c_init();
      000496 CDr03r66         [ 4]  952 	call	_i2c_init
                                    953 ;	main.c: 281: i2c_scan(); 
      000499 CDr03rA6         [ 4]  954 	call	_i2c_scan
                                    955 ;	main.c: 283: return 0;
      00049C 5F               [ 1]  956 	clrw	x
                                    957 ;	main.c: 284: }
      00049D 81               [ 4]  958 	ret
                                    959 	.area CODE
                                    960 	.area CONST
                                    961 	.area CONST
      000000                        962 ___str_0:
      000000 0A                     963 	.db 0x0a
      000001 49 32 43 5F 52 45 47   964 	.ascii "I2C_REGS >.<"
             53 20 3E 2E 3C
      00000D 0A                     965 	.db 0x0a
      00000E 00                     966 	.db 0x00
                                    967 	.area CODE
                                    968 	.area CONST
      00000F                        969 ___str_1:
      00000F 0A                     970 	.db 0x0a
      000010 53 52 31 20 2D 3E 20   971 	.ascii "SR1 -> "
      000017 00                     972 	.db 0x00
                                    973 	.area CODE
                                    974 	.area CONST
      000018                        975 ___str_2:
      000018 20 3C 2D               976 	.ascii " <-"
      00001B 0A                     977 	.db 0x0a
      00001C 00                     978 	.db 0x00
                                    979 	.area CODE
                                    980 	.area CONST
      00001D                        981 ___str_3:
      00001D 53 52 32 20 2D 3E 20   982 	.ascii "SR2 -> "
      000024 00                     983 	.db 0x00
                                    984 	.area CODE
                                    985 	.area CONST
      000025                        986 ___str_4:
      000025 53 52 33 20 2D 3E 20   987 	.ascii "SR3 -> "
      00002C 00                     988 	.db 0x00
                                    989 	.area CODE
                                    990 	.area CONST
      00002D                        991 ___str_5:
      00002D 43 52 31 20 2D 3E 20   992 	.ascii "CR1 -> "
      000034 00                     993 	.db 0x00
                                    994 	.area CODE
                                    995 	.area CONST
      000035                        996 ___str_6:
      000035 43 52 32 20 2D 3E 20   997 	.ascii "CR2 -> "
      00003C 00                     998 	.db 0x00
                                    999 	.area CODE
                                   1000 	.area CONST
      00003D                       1001 ___str_7:
      00003D 44 52 20 2D 3E 20     1002 	.ascii "DR -> "
      000043 00                    1003 	.db 0x00
                                   1004 	.area CODE
                                   1005 	.area CONST
      000044                       1006 ___str_8:
      000044 55 41 52 54 5F 52 45  1007 	.ascii "UART_REGS >.<"
             47 53 20 3E 2E 3C
      000051 0A                    1008 	.db 0x0a
      000052 00                    1009 	.db 0x00
                                   1010 	.area CODE
                                   1011 	.area CONST
      000053                       1012 ___str_9:
      000053 0A                    1013 	.db 0x0a
      000054 53 52 20 2D 3E 20     1014 	.ascii "SR -> "
      00005A 00                    1015 	.db 0x00
                                   1016 	.area CODE
                                   1017 	.area CONST
      00005B                       1018 ___str_10:
      00005B 42 52 52 31 20 2D 3E  1019 	.ascii "BRR1 -> "
             20
      000063 00                    1020 	.db 0x00
                                   1021 	.area CODE
                                   1022 	.area CONST
      000064                       1023 ___str_11:
      000064 42 52 52 32 20 2D 3E  1024 	.ascii "BRR2 -> "
             20
      00006C 00                    1025 	.db 0x00
                                   1026 	.area CODE
                                   1027 	.area CONST
      00006D                       1028 ___str_12:
      00006D 43 52 33 20 2D 3E 20  1029 	.ascii "CR3 -> "
      000074 00                    1030 	.db 0x00
                                   1031 	.area CODE
                                   1032 	.area CONST
      000075                       1033 ___str_13:
      000075 43 52 34 20 2D 3E 20  1034 	.ascii "CR4 -> "
      00007C 00                    1035 	.db 0x00
                                   1036 	.area CODE
                                   1037 	.area CONST
      00007D                       1038 ___str_14:
      00007D 43 52 35 20 2D 3E 20  1039 	.ascii "CR5 -> "
      000084 00                    1040 	.db 0x00
                                   1041 	.area CODE
                                   1042 	.area CONST
      000085                       1043 ___str_15:
      000085 47 54 52 20 2D 3E 20  1044 	.ascii "GTR -> "
      00008C 00                    1045 	.db 0x00
                                   1046 	.area CODE
                                   1047 	.area CONST
      00008D                       1048 ___str_16:
      00008D 50 53 43 52 20 2D 3E  1049 	.ascii "PSCR -> "
             20
      000095 00                    1050 	.db 0x00
                                   1051 	.area CODE
                                   1052 	.area CONST
      000096                       1053 ___str_17:
      000096 53 4D 20              1054 	.ascii "SM "
      000099 00                    1055 	.db 0x00
                                   1056 	.area CODE
                                   1057 	.area CONST
      00009A                       1058 ___str_18:
      00009A 0D                    1059 	.db 0x0d
      00009B 0A                    1060 	.db 0x0a
      00009C 00                    1061 	.db 0x00
                                   1062 	.area CODE
                                   1063 	.area CONST
      00009D                       1064 ___str_19:
      00009D 53 74 61 72 74        1065 	.ascii "Start"
      0000A2 00                    1066 	.db 0x00
                                   1067 	.area CODE
                                   1068 	.area CONST
      0000A3                       1069 ___str_20:
      0000A3 43 6C 65 61 6E        1070 	.ascii "Clean"
      0000A8 00                    1071 	.db 0x00
                                   1072 	.area CODE
                                   1073 	.area CONST
      0000A9                       1074 ___str_21:
      0000A9 49 46 20 50 41 53 53  1075 	.ascii "IF PASSED"
             45 44
      0000B2 00                    1076 	.db 0x00
                                   1077 	.area CODE
                                   1078 	.area CONST
      0000B3                       1079 ___str_22:
      0000B3 66 6C 61 67 5F 53     1080 	.ascii "flag_S"
      0000B9 00                    1081 	.db 0x00
                                   1082 	.area CODE
                                   1083 	.area CONST
      0000BA                       1084 ___str_23:
      0000BA 45 6E 64              1085 	.ascii "End"
      0000BD 00                    1086 	.db 0x00
                                   1087 	.area CODE
                                   1088 	.area CONST
      0000BE                       1089 ___str_24:
      0000BE 53 53                 1090 	.ascii "SS"
      0000C0 0A                    1091 	.db 0x0a
      0000C1 00                    1092 	.db 0x00
                                   1093 	.area CODE
                                   1094 	.area CONST
      0000C2                       1095 ___str_25:
      0000C2 0A                    1096 	.db 0x0a
      0000C3 3E 62 75 66 66 65 72  1097 	.ascii ">buffer start<"
             20 73 74 61 72 74 3C
      0000D1 0A                    1098 	.db 0x0a
      0000D2 00                    1099 	.db 0x00
                                   1100 	.area CODE
                                   1101 	.area CONST
      0000D3                       1102 ___str_26:
      0000D3 20                    1103 	.ascii " "
      0000D4 00                    1104 	.db 0x00
                                   1105 	.area CODE
                                   1106 	.area CONST
      0000D5                       1107 ___str_27:
      0000D5 3E 20 62 75 66 66 65  1108 	.ascii "> buffer end <"
             72 20 65 6E 64 20 3C
      0000E3 00                    1109 	.db 0x00
                                   1110 	.area CODE
                                   1111 	.area INITIALIZER
      000000                       1112 __xinit__buffer:
      000000 00                    1113 	.db #0x00	; 0
      000001 00                    1114 	.db 0x00
      000002 00                    1115 	.db 0x00
      000003 00                    1116 	.db 0x00
      000004 00                    1117 	.db 0x00
      000005 00                    1118 	.db 0x00
      000006 00                    1119 	.db 0x00
      000007 00                    1120 	.db 0x00
      000008 00                    1121 	.db 0x00
      000009 00                    1122 	.db 0x00
      00000A 00                    1123 	.db 0x00
      00000B 00                    1124 	.db 0x00
      00000C 00                    1125 	.db 0x00
      00000D 00                    1126 	.db 0x00
      00000E 00                    1127 	.db 0x00
      00000F 00                    1128 	.db 0x00
      000010 00                    1129 	.db 0x00
      000011 00                    1130 	.db 0x00
      000012 00                    1131 	.db 0x00
      000013 00                    1132 	.db 0x00
      000014 00                    1133 	.db 0x00
      000015 00                    1134 	.db 0x00
      000016 00                    1135 	.db 0x00
      000017 00                    1136 	.db 0x00
      000018 00                    1137 	.db 0x00
      000019 00                    1138 	.db 0x00
      00001A 00                    1139 	.db 0x00
      00001B 00                    1140 	.db 0x00
      00001C 00                    1141 	.db 0x00
      00001D 00                    1142 	.db 0x00
      00001E 00                    1143 	.db 0x00
      00001F 00                    1144 	.db 0x00
      000020 00                    1145 	.db 0x00
      000021 00                    1146 	.db 0x00
      000022 00                    1147 	.db 0x00
      000023 00                    1148 	.db 0x00
      000024 00                    1149 	.db 0x00
      000025 00                    1150 	.db 0x00
      000026 00                    1151 	.db 0x00
      000027 00                    1152 	.db 0x00
      000028 00                    1153 	.db 0x00
      000029 00                    1154 	.db 0x00
      00002A 00                    1155 	.db 0x00
      00002B 00                    1156 	.db 0x00
      00002C 00                    1157 	.db 0x00
      00002D 00                    1158 	.db 0x00
      00002E 00                    1159 	.db 0x00
      00002F 00                    1160 	.db 0x00
      000030 00                    1161 	.db 0x00
      000031 00                    1162 	.db 0x00
      000032 00                    1163 	.db 0x00
      000033 00                    1164 	.db 0x00
      000034 00                    1165 	.db 0x00
      000035 00                    1166 	.db 0x00
      000036 00                    1167 	.db 0x00
      000037 00                    1168 	.db 0x00
      000038 00                    1169 	.db 0x00
      000039 00                    1170 	.db 0x00
      00003A 00                    1171 	.db 0x00
      00003B 00                    1172 	.db 0x00
      00003C 00                    1173 	.db 0x00
      00003D 00                    1174 	.db 0x00
      00003E 00                    1175 	.db 0x00
      00003F 00                    1176 	.db 0x00
      000040 00                    1177 	.db 0x00
      000041 00                    1178 	.db 0x00
      000042 00                    1179 	.db 0x00
      000043 00                    1180 	.db 0x00
      000044 00                    1181 	.db 0x00
      000045 00                    1182 	.db 0x00
      000046 00                    1183 	.db 0x00
      000047 00                    1184 	.db 0x00
      000048 00                    1185 	.db 0x00
      000049 00                    1186 	.db 0x00
      00004A 00                    1187 	.db 0x00
      00004B 00                    1188 	.db 0x00
      00004C 00                    1189 	.db 0x00
      00004D 00                    1190 	.db 0x00
      00004E 00                    1191 	.db 0x00
      00004F 00                    1192 	.db 0x00
      000050 00                    1193 	.db 0x00
      000051 00                    1194 	.db 0x00
      000052 00                    1195 	.db 0x00
      000053 00                    1196 	.db 0x00
      000054 00                    1197 	.db 0x00
      000055 00                    1198 	.db 0x00
      000056 00                    1199 	.db 0x00
      000057 00                    1200 	.db 0x00
      000058 00                    1201 	.db 0x00
      000059 00                    1202 	.db 0x00
      00005A 00                    1203 	.db 0x00
      00005B 00                    1204 	.db 0x00
      00005C 00                    1205 	.db 0x00
      00005D 00                    1206 	.db 0x00
      00005E 00                    1207 	.db 0x00
      00005F 00                    1208 	.db 0x00
      000060 00                    1209 	.db 0x00
      000061 00                    1210 	.db 0x00
      000062 00                    1211 	.db 0x00
      000063 00                    1212 	.db 0x00
      000064 00                    1213 	.db 0x00
      000065 00                    1214 	.db 0x00
      000066 00                    1215 	.db 0x00
      000067 00                    1216 	.db 0x00
      000068 00                    1217 	.db 0x00
      000069 00                    1218 	.db 0x00
      00006A 00                    1219 	.db 0x00
      00006B 00                    1220 	.db 0x00
      00006C 00                    1221 	.db 0x00
      00006D 00                    1222 	.db 0x00
      00006E 00                    1223 	.db 0x00
      00006F 00                    1224 	.db 0x00
      000070 00                    1225 	.db 0x00
      000071 00                    1226 	.db 0x00
      000072 00                    1227 	.db 0x00
      000073 00                    1228 	.db 0x00
      000074 00                    1229 	.db 0x00
      000075 00                    1230 	.db 0x00
      000076 00                    1231 	.db 0x00
      000077 00                    1232 	.db 0x00
      000078 00                    1233 	.db 0x00
      000079 00                    1234 	.db 0x00
      00007A 00                    1235 	.db 0x00
      00007B 00                    1236 	.db 0x00
      00007C 00                    1237 	.db 0x00
      00007D 00                    1238 	.db 0x00
      00007E 00                    1239 	.db 0x00
      00007F 00                    1240 	.db 0x00
      000080 00                    1241 	.db 0x00
      000081 00                    1242 	.db 0x00
      000082 00                    1243 	.db 0x00
      000083 00                    1244 	.db 0x00
      000084 00                    1245 	.db 0x00
      000085 00                    1246 	.db 0x00
      000086 00                    1247 	.db 0x00
      000087 00                    1248 	.db 0x00
      000088 00                    1249 	.db 0x00
      000089 00                    1250 	.db 0x00
      00008A 00                    1251 	.db 0x00
      00008B 00                    1252 	.db 0x00
      00008C 00                    1253 	.db 0x00
      00008D 00                    1254 	.db 0x00
      00008E 00                    1255 	.db 0x00
      00008F 00                    1256 	.db 0x00
      000090 00                    1257 	.db 0x00
      000091 00                    1258 	.db 0x00
      000092 00                    1259 	.db 0x00
      000093 00                    1260 	.db 0x00
      000094 00                    1261 	.db 0x00
      000095 00                    1262 	.db 0x00
      000096 00                    1263 	.db 0x00
      000097 00                    1264 	.db 0x00
      000098 00                    1265 	.db 0x00
      000099 00                    1266 	.db 0x00
      00009A 00                    1267 	.db 0x00
      00009B 00                    1268 	.db 0x00
      00009C 00                    1269 	.db 0x00
      00009D 00                    1270 	.db 0x00
      00009E 00                    1271 	.db 0x00
      00009F 00                    1272 	.db 0x00
      0000A0 00                    1273 	.db 0x00
      0000A1 00                    1274 	.db 0x00
      0000A2 00                    1275 	.db 0x00
      0000A3 00                    1276 	.db 0x00
      0000A4 00                    1277 	.db 0x00
      0000A5 00                    1278 	.db 0x00
      0000A6 00                    1279 	.db 0x00
      0000A7 00                    1280 	.db 0x00
      0000A8 00                    1281 	.db 0x00
      0000A9 00                    1282 	.db 0x00
      0000AA 00                    1283 	.db 0x00
      0000AB 00                    1284 	.db 0x00
      0000AC 00                    1285 	.db 0x00
      0000AD 00                    1286 	.db 0x00
      0000AE 00                    1287 	.db 0x00
      0000AF 00                    1288 	.db 0x00
      0000B0 00                    1289 	.db 0x00
      0000B1 00                    1290 	.db 0x00
      0000B2 00                    1291 	.db 0x00
      0000B3 00                    1292 	.db 0x00
      0000B4 00                    1293 	.db 0x00
      0000B5 00                    1294 	.db 0x00
      0000B6 00                    1295 	.db 0x00
      0000B7 00                    1296 	.db 0x00
      0000B8 00                    1297 	.db 0x00
      0000B9 00                    1298 	.db 0x00
      0000BA 00                    1299 	.db 0x00
      0000BB 00                    1300 	.db 0x00
      0000BC 00                    1301 	.db 0x00
      0000BD 00                    1302 	.db 0x00
      0000BE 00                    1303 	.db 0x00
      0000BF 00                    1304 	.db 0x00
      0000C0 00                    1305 	.db 0x00
      0000C1 00                    1306 	.db 0x00
      0000C2 00                    1307 	.db 0x00
      0000C3 00                    1308 	.db 0x00
      0000C4 00                    1309 	.db 0x00
      0000C5 00                    1310 	.db 0x00
      0000C6 00                    1311 	.db 0x00
      0000C7 00                    1312 	.db 0x00
      0000C8 00                    1313 	.db 0x00
      0000C9 00                    1314 	.db 0x00
      0000CA 00                    1315 	.db 0x00
      0000CB 00                    1316 	.db 0x00
      0000CC 00                    1317 	.db 0x00
      0000CD 00                    1318 	.db 0x00
      0000CE 00                    1319 	.db 0x00
      0000CF 00                    1320 	.db 0x00
      0000D0 00                    1321 	.db 0x00
      0000D1 00                    1322 	.db 0x00
      0000D2 00                    1323 	.db 0x00
      0000D3 00                    1324 	.db 0x00
      0000D4 00                    1325 	.db 0x00
      0000D5 00                    1326 	.db 0x00
      0000D6 00                    1327 	.db 0x00
      0000D7 00                    1328 	.db 0x00
      0000D8 00                    1329 	.db 0x00
      0000D9 00                    1330 	.db 0x00
      0000DA 00                    1331 	.db 0x00
      0000DB 00                    1332 	.db 0x00
      0000DC 00                    1333 	.db 0x00
      0000DD 00                    1334 	.db 0x00
      0000DE 00                    1335 	.db 0x00
      0000DF 00                    1336 	.db 0x00
      0000E0 00                    1337 	.db 0x00
      0000E1 00                    1338 	.db 0x00
      0000E2 00                    1339 	.db 0x00
      0000E3 00                    1340 	.db 0x00
      0000E4 00                    1341 	.db 0x00
      0000E5 00                    1342 	.db 0x00
      0000E6 00                    1343 	.db 0x00
      0000E7 00                    1344 	.db 0x00
      0000E8 00                    1345 	.db 0x00
      0000E9 00                    1346 	.db 0x00
      0000EA 00                    1347 	.db 0x00
      0000EB 00                    1348 	.db 0x00
      0000EC 00                    1349 	.db 0x00
      0000ED 00                    1350 	.db 0x00
      0000EE 00                    1351 	.db 0x00
      0000EF 00                    1352 	.db 0x00
      0000F0 00                    1353 	.db 0x00
      0000F1 00                    1354 	.db 0x00
      0000F2 00                    1355 	.db 0x00
      0000F3 00                    1356 	.db 0x00
      0000F4 00                    1357 	.db 0x00
      0000F5 00                    1358 	.db 0x00
      0000F6 00                    1359 	.db 0x00
      0000F7 00                    1360 	.db 0x00
      0000F8 00                    1361 	.db 0x00
      0000F9 00                    1362 	.db 0x00
      0000FA 00                    1363 	.db 0x00
      0000FB 00                    1364 	.db 0x00
      0000FC 00                    1365 	.db 0x00
      0000FD 00                    1366 	.db 0x00
      0000FE 00                    1367 	.db 0x00
      0000FF 00                    1368 	.db 0x00
      000100                       1369 __xinit__current_dev:
      000100 00                    1370 	.db #0x00	; 0
                                   1371 	.area CABS (ABS)
