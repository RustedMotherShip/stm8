                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.3.0 #14184 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _command_switcher
                                     13 	.globl _data_handler
                                     14 	.globl _cm_SW
                                     15 	.globl _cm_SR
                                     16 	.globl _cm_ST
                                     17 	.globl _cm_DB
                                     18 	.globl _cm_RM
                                     19 	.globl _cm_SN
                                     20 	.globl _cm_SM
                                     21 	.globl _i2c_scan
                                     22 	.globl _i2c_read
                                     23 	.globl _i2c_write
                                     24 	.globl _i2c_stop
                                     25 	.globl _i2c_send_address
                                     26 	.globl _i2c_start
                                     27 	.globl _i2c_init
                                     28 	.globl _uart_init
                                     29 	.globl _status_check
                                     30 	.globl _char_buffer_to_int
                                     31 	.globl _get_size_from_buff
                                     32 	.globl _get_addr_from_buff
                                     33 	.globl _convert_int_to_binary
                                     34 	.globl _convert_chars_to_int
                                     35 	.globl _convert_int_to_chars
                                     36 	.globl _uart_read
                                     37 	.globl _uart_write
                                     38 	.globl _UART_RX
                                     39 	.globl _UART_TX
                                     40 	.globl _delay
                                     41 	.globl ___memcpy
                                     42 	.globl _strlen
                                     43 	.globl _memset
                                     44 	.globl _memcmp
                                     45 	.globl _current_dev
                                     46 	.globl _data_buf
                                     47 	.globl _p_bytes
                                     48 	.globl _d_size
                                     49 	.globl _p_size
                                     50 	.globl _d_addr
                                     51 	.globl _a
                                     52 	.globl _buffer
                                     53 ;--------------------------------------------------------
                                     54 ; ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area DATA
                                     57 ;--------------------------------------------------------
                                     58 ; ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area INITIALIZED
      000000                         61 _buffer::
      000000                         62 	.ds 256
      000100                         63 _a::
      000100                         64 	.ds 3
      000103                         65 _d_addr::
      000103                         66 	.ds 1
      000104                         67 _p_size::
      000104                         68 	.ds 1
      000105                         69 _d_size::
      000105                         70 	.ds 1
      000106                         71 _p_bytes::
      000106                         72 	.ds 1
      000107                         73 _data_buf::
      000107                         74 	.ds 256
      000207                         75 _current_dev::
      000207                         76 	.ds 1
                                     77 ;--------------------------------------------------------
                                     78 ; Stack segment in internal ram
                                     79 ;--------------------------------------------------------
                                     80 	.area SSEG
      000000                         81 __start__stack:
      000000                         82 	.ds	1
                                     83 
                                     84 ;--------------------------------------------------------
                                     85 ; absolute external ram data
                                     86 ;--------------------------------------------------------
                                     87 	.area DABS (ABS)
                                     88 
                                     89 ; default segment ordering for linker
                                     90 	.area HOME
                                     91 	.area GSINIT
                                     92 	.area GSFINAL
                                     93 	.area CONST
                                     94 	.area INITIALIZER
                                     95 	.area CODE
                                     96 
                                     97 ;--------------------------------------------------------
                                     98 ; interrupt vector
                                     99 ;--------------------------------------------------------
                                    100 	.area HOME
      000000                        101 __interrupt_vect:
      000000 82v00u00u00            102 	int s_GSINIT ; reset
                                    103 ;--------------------------------------------------------
                                    104 ; global & static initialisations
                                    105 ;--------------------------------------------------------
                                    106 	.area HOME
                                    107 	.area GSINIT
                                    108 	.area GSFINAL
                                    109 	.area GSINIT
      000000 CDr00r00         [ 4]  110 	call	___sdcc_external_startup
      000003 4D               [ 1]  111 	tnz	a
      000004 27 03            [ 1]  112 	jreq	__sdcc_init_data
      000006 CCr00r04         [ 2]  113 	jp	__sdcc_program_startup
      000009                        114 __sdcc_init_data:
                                    115 ; stm8_genXINIT() start
      000009 AEr00r00         [ 2]  116 	ldw x, #l_DATA
      00000C 27 07            [ 1]  117 	jreq	00002$
      00000E                        118 00001$:
      00000E 72 4FuFFuFF      [ 1]  119 	clr (s_DATA - 1, x)
      000012 5A               [ 2]  120 	decw x
      000013 26 F9            [ 1]  121 	jrne	00001$
      000015                        122 00002$:
      000015 AEr00r00         [ 2]  123 	ldw	x, #l_INITIALIZER
      000018 27 09            [ 1]  124 	jreq	00004$
      00001A                        125 00003$:
      00001A D6uFFuFF         [ 1]  126 	ld	a, (s_INITIALIZER - 1, x)
      00001D D7uFFuFF         [ 1]  127 	ld	(s_INITIALIZED - 1, x), a
      000020 5A               [ 2]  128 	decw	x
      000021 26 F7            [ 1]  129 	jrne	00003$
      000023                        130 00004$:
                                    131 ; stm8_genXINIT() end
                                    132 	.area GSFINAL
      000000 CCr00r04         [ 2]  133 	jp	__sdcc_program_startup
                                    134 ;--------------------------------------------------------
                                    135 ; Home
                                    136 ;--------------------------------------------------------
                                    137 	.area HOME
                                    138 	.area HOME
      000004                        139 __sdcc_program_startup:
      000004 CCr07r6D         [ 2]  140 	jp	_main
                                    141 ;	return from main will return to caller
                                    142 ;--------------------------------------------------------
                                    143 ; code
                                    144 ;--------------------------------------------------------
                                    145 	.area CODE
                                    146 ;	main.c: 26: void delay(unsigned long count) {
                                    147 ;	-----------------------------------------
                                    148 ;	 function delay
                                    149 ;	-----------------------------------------
      000000                        150 _delay:
      000000 52 08            [ 2]  151 	sub	sp, #8
                                    152 ;	main.c: 27: while (count--)
      000002 16 0D            [ 2]  153 	ldw	y, (0x0d, sp)
      000004 17 07            [ 2]  154 	ldw	(0x07, sp), y
      000006 1E 0B            [ 2]  155 	ldw	x, (0x0b, sp)
      000008                        156 00101$:
      000008 1F 01            [ 2]  157 	ldw	(0x01, sp), x
      00000A 7B 07            [ 1]  158 	ld	a, (0x07, sp)
      00000C 6B 03            [ 1]  159 	ld	(0x03, sp), a
      00000E 7B 08            [ 1]  160 	ld	a, (0x08, sp)
      000010 16 07            [ 2]  161 	ldw	y, (0x07, sp)
      000012 72 A2 00 01      [ 2]  162 	subw	y, #0x0001
      000016 17 07            [ 2]  163 	ldw	(0x07, sp), y
      000018 24 01            [ 1]  164 	jrnc	00117$
      00001A 5A               [ 2]  165 	decw	x
      00001B                        166 00117$:
      00001B 4D               [ 1]  167 	tnz	a
      00001C 26 08            [ 1]  168 	jrne	00118$
      00001E 16 02            [ 2]  169 	ldw	y, (0x02, sp)
      000020 26 04            [ 1]  170 	jrne	00118$
      000022 0D 01            [ 1]  171 	tnz	(0x01, sp)
      000024 27 03            [ 1]  172 	jreq	00104$
      000026                        173 00118$:
                                    174 ;	main.c: 28: nop();
      000026 9D               [ 1]  175 	nop
      000027 20 DF            [ 2]  176 	jra	00101$
      000029                        177 00104$:
                                    178 ;	main.c: 29: }
      000029 1E 09            [ 2]  179 	ldw	x, (9, sp)
      00002B 5B 0E            [ 2]  180 	addw	sp, #14
      00002D FC               [ 2]  181 	jp	(x)
                                    182 ;	main.c: 37: void UART_TX(unsigned char value)
                                    183 ;	-----------------------------------------
                                    184 ;	 function UART_TX
                                    185 ;	-----------------------------------------
      00002E                        186 _UART_TX:
                                    187 ;	main.c: 39: UART1_DR = value;
      00002E C7 52 31         [ 1]  188 	ld	0x5231, a
                                    189 ;	main.c: 40: while(!(UART1_SR & UART_SR_TXE));
      000031                        190 00101$:
      000031 C6 52 30         [ 1]  191 	ld	a, 0x5230
      000034 2A FB            [ 1]  192 	jrpl	00101$
                                    193 ;	main.c: 41: }
      000036 81               [ 4]  194 	ret
                                    195 ;	main.c: 42: unsigned char UART_RX(void)
                                    196 ;	-----------------------------------------
                                    197 ;	 function UART_RX
                                    198 ;	-----------------------------------------
      000037                        199 _UART_RX:
                                    200 ;	main.c: 44: while(!(UART1_SR & UART_SR_TXE));
      000037                        201 00101$:
      000037 C6 52 30         [ 1]  202 	ld	a, 0x5230
      00003A 2A FB            [ 1]  203 	jrpl	00101$
                                    204 ;	main.c: 45: return UART1_DR;
      00003C C6 52 31         [ 1]  205 	ld	a, 0x5231
                                    206 ;	main.c: 46: }
      00003F 81               [ 4]  207 	ret
                                    208 ;	main.c: 47: int uart_write(const char *str) {
                                    209 ;	-----------------------------------------
                                    210 ;	 function uart_write
                                    211 ;	-----------------------------------------
      000040                        212 _uart_write:
      000040 52 05            [ 2]  213 	sub	sp, #5
      000042 1F 03            [ 2]  214 	ldw	(0x03, sp), x
                                    215 ;	main.c: 49: for(i = 0; i < strlen(str); i++) {
      000044 0F 05            [ 1]  216 	clr	(0x05, sp)
      000046                        217 00103$:
      000046 1E 03            [ 2]  218 	ldw	x, (0x03, sp)
      000048 CDr00r00         [ 4]  219 	call	_strlen
      00004B 1F 01            [ 2]  220 	ldw	(0x01, sp), x
      00004D 7B 05            [ 1]  221 	ld	a, (0x05, sp)
      00004F 5F               [ 1]  222 	clrw	x
      000050 97               [ 1]  223 	ld	xl, a
      000051 13 01            [ 2]  224 	cpw	x, (0x01, sp)
      000053 24 0F            [ 1]  225 	jrnc	00101$
                                    226 ;	main.c: 51: UART_TX(str[i]);
      000055 5F               [ 1]  227 	clrw	x
      000056 7B 05            [ 1]  228 	ld	a, (0x05, sp)
      000058 97               [ 1]  229 	ld	xl, a
      000059 72 FB 03         [ 2]  230 	addw	x, (0x03, sp)
      00005C F6               [ 1]  231 	ld	a, (x)
      00005D CDr00r2E         [ 4]  232 	call	_UART_TX
                                    233 ;	main.c: 49: for(i = 0; i < strlen(str); i++) {
      000060 0C 05            [ 1]  234 	inc	(0x05, sp)
      000062 20 E2            [ 2]  235 	jra	00103$
      000064                        236 00101$:
                                    237 ;	main.c: 53: return(i); // Bytes sent
      000064 7B 05            [ 1]  238 	ld	a, (0x05, sp)
      000066 5F               [ 1]  239 	clrw	x
      000067 97               [ 1]  240 	ld	xl, a
                                    241 ;	main.c: 54: }
      000068 5B 05            [ 2]  242 	addw	sp, #5
      00006A 81               [ 4]  243 	ret
                                    244 ;	main.c: 55: int uart_read(void)
                                    245 ;	-----------------------------------------
                                    246 ;	 function uart_read
                                    247 ;	-----------------------------------------
      00006B                        248 _uart_read:
                                    249 ;	main.c: 57: memset(buffer, 0, sizeof(buffer));
      00006B 4B 00            [ 1]  250 	push	#0x00
      00006D 4B 01            [ 1]  251 	push	#0x01
      00006F 5F               [ 1]  252 	clrw	x
      000070 89               [ 2]  253 	pushw	x
      000071 AEr00r00         [ 2]  254 	ldw	x, #(_buffer+0)
      000074 CDr00r00         [ 4]  255 	call	_memset
                                    256 ;	main.c: 59: while(i<256)
      000077 5F               [ 1]  257 	clrw	x
      000078                        258 00105$:
      000078 A3 01 00         [ 2]  259 	cpw	x, #0x0100
      00007B 2E 22            [ 1]  260 	jrsge	00107$
                                    261 ;	main.c: 61: if(UART1_SR & UART_SR_RXNE)
      00007D C6 52 30         [ 1]  262 	ld	a, 0x5230
      000080 A5 20            [ 1]  263 	bcp	a, #0x20
      000082 27 F4            [ 1]  264 	jreq	00105$
                                    265 ;	main.c: 63: buffer[i] = UART_RX();
      000084 90 93            [ 1]  266 	ldw	y, x
      000086 72 A9r00r00      [ 2]  267 	addw	y, #(_buffer+0)
      00008A 89               [ 2]  268 	pushw	x
      00008B 90 89            [ 2]  269 	pushw	y
      00008D CDr00r37         [ 4]  270 	call	_UART_RX
      000090 90 85            [ 2]  271 	popw	y
      000092 85               [ 2]  272 	popw	x
      000093 90 F7            [ 1]  273 	ld	(y), a
                                    274 ;	main.c: 64: if(buffer[i] == '\r\n' )
      000095 A1 0D            [ 1]  275 	cp	a, #0x0d
      000097 26 03            [ 1]  276 	jrne	00102$
                                    277 ;	main.c: 66: return 1;
      000099 5F               [ 1]  278 	clrw	x
      00009A 5C               [ 1]  279 	incw	x
      00009B 81               [ 4]  280 	ret
                                    281 ;	main.c: 67: break;
      00009C                        282 00102$:
                                    283 ;	main.c: 69: i++;
      00009C 5C               [ 1]  284 	incw	x
      00009D 20 D9            [ 2]  285 	jra	00105$
      00009F                        286 00107$:
                                    287 ;	main.c: 72: return 0;
      00009F 5F               [ 1]  288 	clrw	x
                                    289 ;	main.c: 73: }
      0000A0 81               [ 4]  290 	ret
                                    291 ;	main.c: 82: void convert_int_to_chars(uint8_t num, char* rx_int_chars) {
                                    292 ;	-----------------------------------------
                                    293 ;	 function convert_int_to_chars
                                    294 ;	-----------------------------------------
      0000A1                        295 _convert_int_to_chars:
      0000A1 52 0D            [ 2]  296 	sub	sp, #13
      0000A3 6B 0D            [ 1]  297 	ld	(0x0d, sp), a
      0000A5 1F 0B            [ 2]  298 	ldw	(0x0b, sp), x
                                    299 ;	main.c: 85: rx_int_chars[0] = num / 100 + '0';
      0000A7 7B 0D            [ 1]  300 	ld	a, (0x0d, sp)
      0000A9 6B 02            [ 1]  301 	ld	(0x02, sp), a
      0000AB 0F 01            [ 1]  302 	clr	(0x01, sp)
                                    303 ;	main.c: 86: rx_int_chars[1] = num / 10 % 10 + '0';
      0000AD 1E 0B            [ 2]  304 	ldw	x, (0x0b, sp)
      0000AF 5C               [ 1]  305 	incw	x
      0000B0 1F 03            [ 2]  306 	ldw	(0x03, sp), x
                                    307 ;	main.c: 87: rx_int_chars[2] = num % 10 + '0';
      0000B2 1E 0B            [ 2]  308 	ldw	x, (0x0b, sp)
      0000B4 5C               [ 1]  309 	incw	x
      0000B5 5C               [ 1]  310 	incw	x
      0000B6 1F 05            [ 2]  311 	ldw	(0x05, sp), x
                                    312 ;	main.c: 86: rx_int_chars[1] = num / 10 % 10 + '0';
      0000B8 4B 0A            [ 1]  313 	push	#0x0a
      0000BA 4B 00            [ 1]  314 	push	#0x00
      0000BC 1E 03            [ 2]  315 	ldw	x, (0x03, sp)
                                    316 ;	main.c: 87: rx_int_chars[2] = num % 10 + '0';
      0000BE CDr00r00         [ 4]  317 	call	__divsint
      0000C1 1F 07            [ 2]  318 	ldw	(0x07, sp), x
      0000C3 4B 0A            [ 1]  319 	push	#0x0a
      0000C5 4B 00            [ 1]  320 	push	#0x00
      0000C7 1E 03            [ 2]  321 	ldw	x, (0x03, sp)
      0000C9 CDr00r00         [ 4]  322 	call	__modsint
      0000CC 9F               [ 1]  323 	ld	a, xl
      0000CD AB 30            [ 1]  324 	add	a, #0x30
      0000CF 6B 09            [ 1]  325 	ld	(0x09, sp), a
                                    326 ;	main.c: 83: if (num > 99) {
      0000D1 7B 0D            [ 1]  327 	ld	a, (0x0d, sp)
      0000D3 A1 63            [ 1]  328 	cp	a, #0x63
      0000D5 23 29            [ 2]  329 	jrule	00105$
                                    330 ;	main.c: 85: rx_int_chars[0] = num / 100 + '0';
      0000D7 4B 64            [ 1]  331 	push	#0x64
      0000D9 4B 00            [ 1]  332 	push	#0x00
      0000DB 1E 03            [ 2]  333 	ldw	x, (0x03, sp)
      0000DD CDr00r00         [ 4]  334 	call	__divsint
      0000E0 9F               [ 1]  335 	ld	a, xl
      0000E1 AB 30            [ 1]  336 	add	a, #0x30
      0000E3 1E 0B            [ 2]  337 	ldw	x, (0x0b, sp)
      0000E5 F7               [ 1]  338 	ld	(x), a
                                    339 ;	main.c: 86: rx_int_chars[1] = num / 10 % 10 + '0';
      0000E6 4B 0A            [ 1]  340 	push	#0x0a
      0000E8 4B 00            [ 1]  341 	push	#0x00
      0000EA 1E 09            [ 2]  342 	ldw	x, (0x09, sp)
      0000EC CDr00r00         [ 4]  343 	call	__modsint
      0000EF 9F               [ 1]  344 	ld	a, xl
      0000F0 AB 30            [ 1]  345 	add	a, #0x30
      0000F2 1E 03            [ 2]  346 	ldw	x, (0x03, sp)
      0000F4 F7               [ 1]  347 	ld	(x), a
                                    348 ;	main.c: 87: rx_int_chars[2] = num % 10 + '0';
      0000F5 1E 05            [ 2]  349 	ldw	x, (0x05, sp)
      0000F7 7B 09            [ 1]  350 	ld	a, (0x09, sp)
      0000F9 F7               [ 1]  351 	ld	(x), a
                                    352 ;	main.c: 88: rx_int_chars[3] ='\0';
      0000FA 1E 0B            [ 2]  353 	ldw	x, (0x0b, sp)
      0000FC 6F 03            [ 1]  354 	clr	(0x0003, x)
      0000FE 20 23            [ 2]  355 	jra	00107$
      000100                        356 00105$:
                                    357 ;	main.c: 90: } else if (num > 9) {
      000100 7B 0D            [ 1]  358 	ld	a, (0x0d, sp)
      000102 A1 09            [ 1]  359 	cp	a, #0x09
      000104 23 13            [ 2]  360 	jrule	00102$
                                    361 ;	main.c: 92: rx_int_chars[0] = num / 10 + '0';
      000106 7B 08            [ 1]  362 	ld	a, (0x08, sp)
      000108 6B 0A            [ 1]  363 	ld	(0x0a, sp), a
      00010A AB 30            [ 1]  364 	add	a, #0x30
      00010C 1E 0B            [ 2]  365 	ldw	x, (0x0b, sp)
      00010E F7               [ 1]  366 	ld	(x), a
                                    367 ;	main.c: 93: rx_int_chars[1] = num % 10 + '0';
      00010F 1E 03            [ 2]  368 	ldw	x, (0x03, sp)
      000111 7B 09            [ 1]  369 	ld	a, (0x09, sp)
      000113 F7               [ 1]  370 	ld	(x), a
                                    371 ;	main.c: 94: rx_int_chars[2] ='\0'; // Заканчиваем строку символом конца строки
      000114 1E 05            [ 2]  372 	ldw	x, (0x05, sp)
      000116 7F               [ 1]  373 	clr	(x)
      000117 20 0A            [ 2]  374 	jra	00107$
      000119                        375 00102$:
                                    376 ;	main.c: 97: rx_int_chars[0] = num + '0';
      000119 7B 0D            [ 1]  377 	ld	a, (0x0d, sp)
      00011B AB 30            [ 1]  378 	add	a, #0x30
      00011D 1E 0B            [ 2]  379 	ldw	x, (0x0b, sp)
      00011F F7               [ 1]  380 	ld	(x), a
                                    381 ;	main.c: 98: rx_int_chars[1] ='\0';
      000120 1E 03            [ 2]  382 	ldw	x, (0x03, sp)
      000122 7F               [ 1]  383 	clr	(x)
      000123                        384 00107$:
                                    385 ;	main.c: 100: }
      000123 5B 0D            [ 2]  386 	addw	sp, #13
      000125 81               [ 4]  387 	ret
                                    388 ;	main.c: 102: uint8_t convert_chars_to_int(char* rx_chars_int) {
                                    389 ;	-----------------------------------------
                                    390 ;	 function convert_chars_to_int
                                    391 ;	-----------------------------------------
      000126                        392 _convert_chars_to_int:
      000126 52 03            [ 2]  393 	sub	sp, #3
      000128 1F 02            [ 2]  394 	ldw	(0x02, sp), x
                                    395 ;	main.c: 103: uint8_t result = 0;
      00012A 4F               [ 1]  396 	clr	a
                                    397 ;	main.c: 105: for (int i = 0; i < 3; i++) {
      00012B 5F               [ 1]  398 	clrw	x
      00012C                        399 00103$:
      00012C A3 00 03         [ 2]  400 	cpw	x, #0x0003
      00012F 2E 18            [ 1]  401 	jrsge	00101$
                                    402 ;	main.c: 106: result = (result * 10) + (rx_chars_int[i] - '0');
      000131 90 97            [ 1]  403 	ld	yl, a
      000133 A6 0A            [ 1]  404 	ld	a, #0x0a
      000135 90 42            [ 4]  405 	mul	y, a
      000137 61               [ 1]  406 	exg	a, yl
      000138 6B 01            [ 1]  407 	ld	(0x01, sp), a
      00013A 61               [ 1]  408 	exg	a, yl
      00013B 90 93            [ 1]  409 	ldw	y, x
      00013D 72 F9 02         [ 2]  410 	addw	y, (0x02, sp)
      000140 90 F6            [ 1]  411 	ld	a, (y)
      000142 A0 30            [ 1]  412 	sub	a, #0x30
      000144 1B 01            [ 1]  413 	add	a, (0x01, sp)
                                    414 ;	main.c: 105: for (int i = 0; i < 3; i++) {
      000146 5C               [ 1]  415 	incw	x
      000147 20 E3            [ 2]  416 	jra	00103$
      000149                        417 00101$:
                                    418 ;	main.c: 109: return result;
                                    419 ;	main.c: 110: }
      000149 5B 03            [ 2]  420 	addw	sp, #3
      00014B 81               [ 4]  421 	ret
                                    422 ;	main.c: 113: void convert_int_to_binary(int num, char* rx_binary_chars) {
                                    423 ;	-----------------------------------------
                                    424 ;	 function convert_int_to_binary
                                    425 ;	-----------------------------------------
      00014C                        426 _convert_int_to_binary:
      00014C 52 04            [ 2]  427 	sub	sp, #4
      00014E 1F 01            [ 2]  428 	ldw	(0x01, sp), x
                                    429 ;	main.c: 115: for(int i = 7; i >= 0; i--) {
      000150 AE 00 07         [ 2]  430 	ldw	x, #0x0007
      000153 1F 03            [ 2]  431 	ldw	(0x03, sp), x
      000155                        432 00103$:
      000155 0D 03            [ 1]  433 	tnz	(0x03, sp)
      000157 2B 22            [ 1]  434 	jrmi	00101$
                                    435 ;	main.c: 117: rx_binary_chars[7 - i] = ((num >> i) & 1) + '0';
      000159 AE 00 07         [ 2]  436 	ldw	x, #0x0007
      00015C 72 F0 03         [ 2]  437 	subw	x, (0x03, sp)
      00015F 72 FB 07         [ 2]  438 	addw	x, (0x07, sp)
      000162 16 01            [ 2]  439 	ldw	y, (0x01, sp)
      000164 7B 04            [ 1]  440 	ld	a, (0x04, sp)
      000166 27 05            [ 1]  441 	jreq	00120$
      000168                        442 00119$:
      000168 90 57            [ 2]  443 	sraw	y
      00016A 4A               [ 1]  444 	dec	a
      00016B 26 FB            [ 1]  445 	jrne	00119$
      00016D                        446 00120$:
      00016D 90 9F            [ 1]  447 	ld	a, yl
      00016F A4 01            [ 1]  448 	and	a, #0x01
      000171 AB 30            [ 1]  449 	add	a, #0x30
      000173 F7               [ 1]  450 	ld	(x), a
                                    451 ;	main.c: 115: for(int i = 7; i >= 0; i--) {
      000174 1E 03            [ 2]  452 	ldw	x, (0x03, sp)
      000176 5A               [ 2]  453 	decw	x
      000177 1F 03            [ 2]  454 	ldw	(0x03, sp), x
      000179 20 DA            [ 2]  455 	jra	00103$
      00017B                        456 00101$:
                                    457 ;	main.c: 119: rx_binary_chars[8] = '\0'; // Добавляем символ конца строки
      00017B 1E 07            [ 2]  458 	ldw	x, (0x07, sp)
      00017D 6F 08            [ 1]  459 	clr	(0x0008, x)
                                    460 ;	main.c: 120: }
      00017F 1E 05            [ 2]  461 	ldw	x, (5, sp)
      000181 5B 08            [ 2]  462 	addw	sp, #8
      000183 FC               [ 2]  463 	jp	(x)
                                    464 ;	main.c: 129: void get_addr_from_buff(void)
                                    465 ;	-----------------------------------------
                                    466 ;	 function get_addr_from_buff
                                    467 ;	-----------------------------------------
      000184                        468 _get_addr_from_buff:
      000184 52 02            [ 2]  469 	sub	sp, #2
                                    470 ;	main.c: 133: while(1)
      000186 A6 04            [ 1]  471 	ld	a, #0x04
      000188 6B 01            [ 1]  472 	ld	(0x01, sp), a
      00018A 0F 02            [ 1]  473 	clr	(0x02, sp)
      00018C                        474 00105$:
                                    475 ;	main.c: 135: if(buffer[i] == 32 || buffer[i] == 10)
      00018C 5F               [ 1]  476 	clrw	x
      00018D 7B 01            [ 1]  477 	ld	a, (0x01, sp)
      00018F 97               [ 1]  478 	ld	xl, a
      000190 D6u00u00         [ 1]  479 	ld	a, (_buffer+0, x)
      000193 A1 20            [ 1]  480 	cp	a, #0x20
      000195 27 04            [ 1]  481 	jreq	00101$
      000197 A1 0A            [ 1]  482 	cp	a, #0x0a
      000199 26 08            [ 1]  483 	jrne	00102$
      00019B                        484 00101$:
                                    485 ;	main.c: 137: p_size = i+1;
      00019B 7B 01            [ 1]  486 	ld	a, (0x01, sp)
      00019D 4C               [ 1]  487 	inc	a
      00019E C7u01u04         [ 1]  488 	ld	_p_size+0, a
                                    489 ;	main.c: 138: break;
      0001A1 20 06            [ 2]  490 	jra	00106$
      0001A3                        491 00102$:
                                    492 ;	main.c: 140: i++;
      0001A3 0C 01            [ 1]  493 	inc	(0x01, sp)
                                    494 ;	main.c: 141: counter++;
      0001A5 0C 02            [ 1]  495 	inc	(0x02, sp)
      0001A7 20 E3            [ 2]  496 	jra	00105$
      0001A9                        497 00106$:
                                    498 ;	main.c: 143: memcpy(a, &buffer[3], counter);
      0001A9 5F               [ 1]  499 	clrw	x
      0001AA 7B 02            [ 1]  500 	ld	a, (0x02, sp)
      0001AC 97               [ 1]  501 	ld	xl, a
      0001AD 89               [ 2]  502 	pushw	x
      0001AE 4Br03            [ 1]  503 	push	#<(_buffer+3)
      0001B0 4Bs00            [ 1]  504 	push	#((_buffer+3) >> 8)
      0001B2 AEr01r00         [ 2]  505 	ldw	x, #(_a+0)
      0001B5 CDr00r00         [ 4]  506 	call	___memcpy
                                    507 ;	main.c: 144: d_addr = convert_chars_to_int(a);
      0001B8 AEr01r00         [ 2]  508 	ldw	x, #(_a+0)
      0001BB CDr01r26         [ 4]  509 	call	_convert_chars_to_int
      0001BE C7u01u03         [ 1]  510 	ld	_d_addr+0, a
                                    511 ;	main.c: 145: }
      0001C1 5B 02            [ 2]  512 	addw	sp, #2
      0001C3 81               [ 4]  513 	ret
                                    514 ;	main.c: 147: void get_size_from_buff(void)
                                    515 ;	-----------------------------------------
                                    516 ;	 function get_size_from_buff
                                    517 ;	-----------------------------------------
      0001C4                        518 _get_size_from_buff:
      0001C4 88               [ 1]  519 	push	a
                                    520 ;	main.c: 150: uint8_t i = p_size;
      0001C5 C6u01u04         [ 1]  521 	ld	a, _p_size+0
      0001C8 6B 01            [ 1]  522 	ld	(0x01, sp), a
                                    523 ;	main.c: 151: while(1)
      0001CA 90 5F            [ 1]  524 	clrw	y
      0001CC                        525 00105$:
                                    526 ;	main.c: 153: if(buffer[i] == 32 || buffer[i] == 10)
      0001CC 5F               [ 1]  527 	clrw	x
      0001CD 7B 01            [ 1]  528 	ld	a, (0x01, sp)
      0001CF 97               [ 1]  529 	ld	xl, a
      0001D0 D6u00u00         [ 1]  530 	ld	a, (_buffer+0, x)
      0001D3 A1 20            [ 1]  531 	cp	a, #0x20
      0001D5 27 04            [ 1]  532 	jreq	00101$
      0001D7 A1 0A            [ 1]  533 	cp	a, #0x0a
      0001D9 26 08            [ 1]  534 	jrne	00102$
      0001DB                        535 00101$:
                                    536 ;	main.c: 155: p_bytes = i+1;
      0001DB 7B 01            [ 1]  537 	ld	a, (0x01, sp)
      0001DD 4C               [ 1]  538 	inc	a
      0001DE C7u01u06         [ 1]  539 	ld	_p_bytes+0, a
                                    540 ;	main.c: 156: break;
      0001E1 20 06            [ 2]  541 	jra	00106$
      0001E3                        542 00102$:
                                    543 ;	main.c: 158: i++;
      0001E3 0C 01            [ 1]  544 	inc	(0x01, sp)
                                    545 ;	main.c: 159: counter++;
      0001E5 90 5C            [ 1]  546 	incw	y
      0001E7 20 E3            [ 2]  547 	jra	00105$
      0001E9                        548 00106$:
                                    549 ;	main.c: 161: memcpy(a, &buffer[p_size], counter);
      0001E9 4F               [ 1]  550 	clr	a
      0001EA 90 95            [ 1]  551 	ld	yh, a
      0001EC 5F               [ 1]  552 	clrw	x
      0001ED C6u01u04         [ 1]  553 	ld	a, _p_size+0
      0001F0 97               [ 1]  554 	ld	xl, a
      0001F1 1Cr00r00         [ 2]  555 	addw	x, #(_buffer+0)
      0001F4 90 89            [ 2]  556 	pushw	y
      0001F6 89               [ 2]  557 	pushw	x
      0001F7 AEr01r00         [ 2]  558 	ldw	x, #(_a+0)
      0001FA CDr00r00         [ 4]  559 	call	___memcpy
                                    560 ;	main.c: 162: d_size = convert_chars_to_int(a);
      0001FD AEr01r00         [ 2]  561 	ldw	x, #(_a+0)
      000200 CDr01r26         [ 4]  562 	call	_convert_chars_to_int
      000203 C7u01u05         [ 1]  563 	ld	_d_size+0, a
                                    564 ;	main.c: 163: }
      000206 84               [ 1]  565 	pop	a
      000207 81               [ 4]  566 	ret
                                    567 ;	main.c: 164: void char_buffer_to_int(void)
                                    568 ;	-----------------------------------------
                                    569 ;	 function char_buffer_to_int
                                    570 ;	-----------------------------------------
      000208                        571 _char_buffer_to_int:
      000208 52 06            [ 2]  572 	sub	sp, #6
                                    573 ;	main.c: 166: uint8_t counter = d_size;
      00020A C6u01u05         [ 1]  574 	ld	a, _d_size+0
      00020D 6B 03            [ 1]  575 	ld	(0x03, sp), a
                                    576 ;	main.c: 167: uint8_t i = p_bytes;
      00020F C6u01u06         [ 1]  577 	ld	a, _p_bytes+0
      000212 6B 06            [ 1]  578 	ld	(0x06, sp), a
                                    579 ;	main.c: 168: uint8_t buf_i = 0;
      000214 0F 05            [ 1]  580 	clr	(0x05, sp)
                                    581 ;	main.c: 169: while(counter > 0) // 
      000216 0F 04            [ 1]  582 	clr	(0x04, sp)
      000218                        583 00113$:
      000218 0D 03            [ 1]  584 	tnz	(0x03, sp)
      00021A 27 73            [ 1]  585 	jreq	00116$
                                    586 ;	main.c: 171: if(buffer[i] == ' ')
      00021C 5F               [ 1]  587 	clrw	x
      00021D 7B 06            [ 1]  588 	ld	a, (0x06, sp)
      00021F 97               [ 1]  589 	ld	xl, a
      000220 D6u00u00         [ 1]  590 	ld	a, (_buffer+0, x)
      000223 A1 20            [ 1]  591 	cp	a, #0x20
      000225 26 44            [ 1]  592 	jrne	00111$
                                    593 ;	main.c: 174: while(1)
      000227 0F 05            [ 1]  594 	clr	(0x05, sp)
      000229                        595 00105$:
                                    596 ;	main.c: 176: i++;
      000229 0C 06            [ 1]  597 	inc	(0x06, sp)
                                    598 ;	main.c: 177: if(buffer[i] == ' ' || buffer[i] == '\r\n')
      00022B 5F               [ 1]  599 	clrw	x
      00022C 7B 06            [ 1]  600 	ld	a, (0x06, sp)
      00022E 97               [ 1]  601 	ld	xl, a
      00022F 1Cr00r00         [ 2]  602 	addw	x, #(_buffer+0)
      000232 1F 01            [ 2]  603 	ldw	(0x01, sp), x
      000234 F6               [ 1]  604 	ld	a, (x)
      000235 A1 20            [ 1]  605 	cp	a, #0x20
      000237 27 08            [ 1]  606 	jreq	00125$
      000239 A1 0D            [ 1]  607 	cp	a, #0x0d
      00023B 27 04            [ 1]  608 	jreq	00125$
                                    609 ;	main.c: 179: buf_counter++;
      00023D 0C 05            [ 1]  610 	inc	(0x05, sp)
      00023F 20 E8            [ 2]  611 	jra	00105$
      000241                        612 00125$:
                                    613 ;	main.c: 181: memcpy(a, &buffer[i], buf_counter);
      000241 7B 05            [ 1]  614 	ld	a, (0x05, sp)
      000243 5F               [ 1]  615 	clrw	x
      000244 16 01            [ 2]  616 	ldw	y, (0x01, sp)
      000246 88               [ 1]  617 	push	a
      000247 9E               [ 1]  618 	ld	a, xh
      000248 88               [ 1]  619 	push	a
      000249 90 89            [ 2]  620 	pushw	y
      00024B AEr01r00         [ 2]  621 	ldw	x, #(_a+0)
      00024E CDr00r00         [ 4]  622 	call	___memcpy
                                    623 ;	main.c: 185: data_buf[buf_i] = convert_chars_to_int(a);
      000251 5F               [ 1]  624 	clrw	x
      000252 7B 04            [ 1]  625 	ld	a, (0x04, sp)
      000254 97               [ 1]  626 	ld	xl, a
      000255 1Cr01r07         [ 2]  627 	addw	x, #(_data_buf+0)
      000258 89               [ 2]  628 	pushw	x
      000259 AEr01r00         [ 2]  629 	ldw	x, #(_a+0)
      00025C CDr01r26         [ 4]  630 	call	_convert_chars_to_int
      00025F 85               [ 2]  631 	popw	x
      000260 F7               [ 1]  632 	ld	(x), a
                                    633 ;	main.c: 186: counter--;
      000261 0A 03            [ 1]  634 	dec	(0x03, sp)
                                    635 ;	main.c: 187: buf_i++;
      000263 0C 04            [ 1]  636 	inc	(0x04, sp)
      000265 7B 04            [ 1]  637 	ld	a, (0x04, sp)
      000267 6B 05            [ 1]  638 	ld	(0x05, sp), a
      000269 20 AD            [ 2]  639 	jra	00113$
      00026B                        640 00111$:
                                    641 ;	main.c: 189: else if(buffer[i] == '\r\n')
      00026B A1 0D            [ 1]  642 	cp	a, #0x0d
      00026D 26 1C            [ 1]  643 	jrne	00108$
                                    644 ;	main.c: 191: convert_int_to_chars(buf_i, a);
      00026F AEr01r00         [ 2]  645 	ldw	x, #(_a+0)
      000272 7B 05            [ 1]  646 	ld	a, (0x05, sp)
      000274 CDr00rA1         [ 4]  647 	call	_convert_int_to_chars
                                    648 ;	main.c: 192: uart_write("buf count -> ");
      000277 AEr00r00         [ 2]  649 	ldw	x, #(___str_0+0)
      00027A CDr00r40         [ 4]  650 	call	_uart_write
                                    651 ;	main.c: 193: uart_write(a);
      00027D AEr01r00         [ 2]  652 	ldw	x, #(_a+0)
      000280 CDr00r40         [ 4]  653 	call	_uart_write
                                    654 ;	main.c: 194: uart_write(" <-\n");
      000283 AEr00r0E         [ 2]  655 	ldw	x, #(___str_1+0)
      000286 5B 06            [ 2]  656 	addw	sp, #6
                                    657 ;	main.c: 195: break;
      000288 CCr00r40         [ 2]  658 	jp	_uart_write
      00028B                        659 00108$:
                                    660 ;	main.c: 198: i++;
      00028B 0C 06            [ 1]  661 	inc	(0x06, sp)
      00028D 20 89            [ 2]  662 	jra	00113$
      00028F                        663 00116$:
                                    664 ;	main.c: 202: }
      00028F 5B 06            [ 2]  665 	addw	sp, #6
      000291 81               [ 4]  666 	ret
                                    667 ;	main.c: 210: void status_check(void){
                                    668 ;	-----------------------------------------
                                    669 ;	 function status_check
                                    670 ;	-----------------------------------------
      000292                        671 _status_check:
      000292 52 09            [ 2]  672 	sub	sp, #9
                                    673 ;	main.c: 211: char rx_binary_chars[9]={0};
      000294 0F 01            [ 1]  674 	clr	(0x01, sp)
      000296 0F 02            [ 1]  675 	clr	(0x02, sp)
      000298 0F 03            [ 1]  676 	clr	(0x03, sp)
      00029A 0F 04            [ 1]  677 	clr	(0x04, sp)
      00029C 0F 05            [ 1]  678 	clr	(0x05, sp)
      00029E 0F 06            [ 1]  679 	clr	(0x06, sp)
      0002A0 0F 07            [ 1]  680 	clr	(0x07, sp)
      0002A2 0F 08            [ 1]  681 	clr	(0x08, sp)
      0002A4 0F 09            [ 1]  682 	clr	(0x09, sp)
                                    683 ;	main.c: 212: uart_write("\nI2C_REGS >.<\n");
      0002A6 AEr00r13         [ 2]  684 	ldw	x, #(___str_2+0)
      0002A9 CDr00r40         [ 4]  685 	call	_uart_write
                                    686 ;	main.c: 213: convert_int_to_binary(I2C_SR1, rx_binary_chars);
      0002AC 96               [ 1]  687 	ldw	x, sp
      0002AD 5C               [ 1]  688 	incw	x
      0002AE 51               [ 1]  689 	exgw	x, y
      0002AF C6 52 17         [ 1]  690 	ld	a, 0x5217
      0002B2 5F               [ 1]  691 	clrw	x
      0002B3 90 89            [ 2]  692 	pushw	y
      0002B5 97               [ 1]  693 	ld	xl, a
      0002B6 CDr01r4C         [ 4]  694 	call	_convert_int_to_binary
                                    695 ;	main.c: 214: uart_write("\nSR1 -> ");
      0002B9 AEr00r22         [ 2]  696 	ldw	x, #(___str_3+0)
      0002BC CDr00r40         [ 4]  697 	call	_uart_write
                                    698 ;	main.c: 215: uart_write(rx_binary_chars);
      0002BF 96               [ 1]  699 	ldw	x, sp
      0002C0 5C               [ 1]  700 	incw	x
      0002C1 CDr00r40         [ 4]  701 	call	_uart_write
                                    702 ;	main.c: 216: uart_write(" <-\n");
      0002C4 AEr00r0E         [ 2]  703 	ldw	x, #(___str_1+0)
      0002C7 CDr00r40         [ 4]  704 	call	_uart_write
                                    705 ;	main.c: 217: convert_int_to_binary(I2C_SR2, rx_binary_chars);
      0002CA 96               [ 1]  706 	ldw	x, sp
      0002CB 5C               [ 1]  707 	incw	x
      0002CC 51               [ 1]  708 	exgw	x, y
      0002CD C6 52 18         [ 1]  709 	ld	a, 0x5218
      0002D0 5F               [ 1]  710 	clrw	x
      0002D1 90 89            [ 2]  711 	pushw	y
      0002D3 97               [ 1]  712 	ld	xl, a
      0002D4 CDr01r4C         [ 4]  713 	call	_convert_int_to_binary
                                    714 ;	main.c: 218: uart_write("SR2 -> ");
      0002D7 AEr00r2B         [ 2]  715 	ldw	x, #(___str_4+0)
      0002DA CDr00r40         [ 4]  716 	call	_uart_write
                                    717 ;	main.c: 219: uart_write(rx_binary_chars);
      0002DD 96               [ 1]  718 	ldw	x, sp
      0002DE 5C               [ 1]  719 	incw	x
      0002DF CDr00r40         [ 4]  720 	call	_uart_write
                                    721 ;	main.c: 220: uart_write(" <-\n");
      0002E2 AEr00r0E         [ 2]  722 	ldw	x, #(___str_1+0)
      0002E5 CDr00r40         [ 4]  723 	call	_uart_write
                                    724 ;	main.c: 221: convert_int_to_binary(I2C_SR3, rx_binary_chars);
      0002E8 96               [ 1]  725 	ldw	x, sp
      0002E9 5C               [ 1]  726 	incw	x
      0002EA 51               [ 1]  727 	exgw	x, y
      0002EB C6 52 19         [ 1]  728 	ld	a, 0x5219
      0002EE 5F               [ 1]  729 	clrw	x
      0002EF 90 89            [ 2]  730 	pushw	y
      0002F1 97               [ 1]  731 	ld	xl, a
      0002F2 CDr01r4C         [ 4]  732 	call	_convert_int_to_binary
                                    733 ;	main.c: 222: uart_write("SR3 -> ");
      0002F5 AEr00r33         [ 2]  734 	ldw	x, #(___str_5+0)
      0002F8 CDr00r40         [ 4]  735 	call	_uart_write
                                    736 ;	main.c: 223: uart_write(rx_binary_chars);
      0002FB 96               [ 1]  737 	ldw	x, sp
      0002FC 5C               [ 1]  738 	incw	x
      0002FD CDr00r40         [ 4]  739 	call	_uart_write
                                    740 ;	main.c: 224: uart_write(" <-\n");
      000300 AEr00r0E         [ 2]  741 	ldw	x, #(___str_1+0)
      000303 CDr00r40         [ 4]  742 	call	_uart_write
                                    743 ;	main.c: 225: convert_int_to_binary(I2C_CR1, rx_binary_chars);
      000306 96               [ 1]  744 	ldw	x, sp
      000307 5C               [ 1]  745 	incw	x
      000308 51               [ 1]  746 	exgw	x, y
      000309 C6 52 10         [ 1]  747 	ld	a, 0x5210
      00030C 5F               [ 1]  748 	clrw	x
      00030D 90 89            [ 2]  749 	pushw	y
      00030F 97               [ 1]  750 	ld	xl, a
      000310 CDr01r4C         [ 4]  751 	call	_convert_int_to_binary
                                    752 ;	main.c: 226: uart_write("CR1 -> ");
      000313 AEr00r3B         [ 2]  753 	ldw	x, #(___str_6+0)
      000316 CDr00r40         [ 4]  754 	call	_uart_write
                                    755 ;	main.c: 227: uart_write(rx_binary_chars);
      000319 96               [ 1]  756 	ldw	x, sp
      00031A 5C               [ 1]  757 	incw	x
      00031B CDr00r40         [ 4]  758 	call	_uart_write
                                    759 ;	main.c: 228: uart_write(" <-\n");
      00031E AEr00r0E         [ 2]  760 	ldw	x, #(___str_1+0)
      000321 CDr00r40         [ 4]  761 	call	_uart_write
                                    762 ;	main.c: 229: convert_int_to_binary(I2C_CR2, rx_binary_chars);
      000324 96               [ 1]  763 	ldw	x, sp
      000325 5C               [ 1]  764 	incw	x
      000326 51               [ 1]  765 	exgw	x, y
      000327 C6 52 11         [ 1]  766 	ld	a, 0x5211
      00032A 5F               [ 1]  767 	clrw	x
      00032B 90 89            [ 2]  768 	pushw	y
      00032D 97               [ 1]  769 	ld	xl, a
      00032E CDr01r4C         [ 4]  770 	call	_convert_int_to_binary
                                    771 ;	main.c: 230: uart_write("CR2 -> ");
      000331 AEr00r43         [ 2]  772 	ldw	x, #(___str_7+0)
      000334 CDr00r40         [ 4]  773 	call	_uart_write
                                    774 ;	main.c: 231: uart_write(rx_binary_chars);
      000337 96               [ 1]  775 	ldw	x, sp
      000338 5C               [ 1]  776 	incw	x
      000339 CDr00r40         [ 4]  777 	call	_uart_write
                                    778 ;	main.c: 232: uart_write(" <-\n");
      00033C AEr00r0E         [ 2]  779 	ldw	x, #(___str_1+0)
      00033F CDr00r40         [ 4]  780 	call	_uart_write
                                    781 ;	main.c: 233: convert_int_to_binary(I2C_DR, rx_binary_chars);
      000342 96               [ 1]  782 	ldw	x, sp
      000343 5C               [ 1]  783 	incw	x
      000344 51               [ 1]  784 	exgw	x, y
      000345 C6 52 16         [ 1]  785 	ld	a, 0x5216
      000348 5F               [ 1]  786 	clrw	x
      000349 90 89            [ 2]  787 	pushw	y
      00034B 97               [ 1]  788 	ld	xl, a
      00034C CDr01r4C         [ 4]  789 	call	_convert_int_to_binary
                                    790 ;	main.c: 234: uart_write("DR -> ");
      00034F AEr00r4B         [ 2]  791 	ldw	x, #(___str_8+0)
      000352 CDr00r40         [ 4]  792 	call	_uart_write
                                    793 ;	main.c: 235: uart_write(rx_binary_chars);
      000355 96               [ 1]  794 	ldw	x, sp
      000356 5C               [ 1]  795 	incw	x
      000357 CDr00r40         [ 4]  796 	call	_uart_write
                                    797 ;	main.c: 236: uart_write(" <-\n");
      00035A AEr00r0E         [ 2]  798 	ldw	x, #(___str_1+0)
      00035D CDr00r40         [ 4]  799 	call	_uart_write
                                    800 ;	main.c: 237: uart_write("UART_REGS >.<\n");
      000360 AEr00r52         [ 2]  801 	ldw	x, #(___str_9+0)
      000363 CDr00r40         [ 4]  802 	call	_uart_write
                                    803 ;	main.c: 238: convert_int_to_binary(UART1_SR, rx_binary_chars);
      000366 96               [ 1]  804 	ldw	x, sp
      000367 5C               [ 1]  805 	incw	x
      000368 51               [ 1]  806 	exgw	x, y
      000369 C6 52 30         [ 1]  807 	ld	a, 0x5230
      00036C 5F               [ 1]  808 	clrw	x
      00036D 90 89            [ 2]  809 	pushw	y
      00036F 97               [ 1]  810 	ld	xl, a
      000370 CDr01r4C         [ 4]  811 	call	_convert_int_to_binary
                                    812 ;	main.c: 239: uart_write("\nSR -> ");
      000373 AEr00r61         [ 2]  813 	ldw	x, #(___str_10+0)
      000376 CDr00r40         [ 4]  814 	call	_uart_write
                                    815 ;	main.c: 240: uart_write(rx_binary_chars);
      000379 96               [ 1]  816 	ldw	x, sp
      00037A 5C               [ 1]  817 	incw	x
      00037B CDr00r40         [ 4]  818 	call	_uart_write
                                    819 ;	main.c: 241: uart_write(" <-\n");
      00037E AEr00r0E         [ 2]  820 	ldw	x, #(___str_1+0)
      000381 CDr00r40         [ 4]  821 	call	_uart_write
                                    822 ;	main.c: 242: convert_int_to_binary(UART1_DR, rx_binary_chars);
      000384 96               [ 1]  823 	ldw	x, sp
      000385 5C               [ 1]  824 	incw	x
      000386 51               [ 1]  825 	exgw	x, y
      000387 C6 52 31         [ 1]  826 	ld	a, 0x5231
      00038A 5F               [ 1]  827 	clrw	x
      00038B 90 89            [ 2]  828 	pushw	y
      00038D 97               [ 1]  829 	ld	xl, a
      00038E CDr01r4C         [ 4]  830 	call	_convert_int_to_binary
                                    831 ;	main.c: 243: uart_write("DR -> ");
      000391 AEr00r4B         [ 2]  832 	ldw	x, #(___str_8+0)
      000394 CDr00r40         [ 4]  833 	call	_uart_write
                                    834 ;	main.c: 244: uart_write(rx_binary_chars);
      000397 96               [ 1]  835 	ldw	x, sp
      000398 5C               [ 1]  836 	incw	x
      000399 CDr00r40         [ 4]  837 	call	_uart_write
                                    838 ;	main.c: 245: uart_write(" <-\n");
      00039C AEr00r0E         [ 2]  839 	ldw	x, #(___str_1+0)
      00039F CDr00r40         [ 4]  840 	call	_uart_write
                                    841 ;	main.c: 246: convert_int_to_binary(UART1_BRR1, rx_binary_chars);
      0003A2 96               [ 1]  842 	ldw	x, sp
      0003A3 5C               [ 1]  843 	incw	x
      0003A4 51               [ 1]  844 	exgw	x, y
      0003A5 C6 52 32         [ 1]  845 	ld	a, 0x5232
      0003A8 5F               [ 1]  846 	clrw	x
      0003A9 90 89            [ 2]  847 	pushw	y
      0003AB 97               [ 1]  848 	ld	xl, a
      0003AC CDr01r4C         [ 4]  849 	call	_convert_int_to_binary
                                    850 ;	main.c: 247: uart_write("BRR1 -> ");
      0003AF AEr00r69         [ 2]  851 	ldw	x, #(___str_11+0)
      0003B2 CDr00r40         [ 4]  852 	call	_uart_write
                                    853 ;	main.c: 248: uart_write(rx_binary_chars);
      0003B5 96               [ 1]  854 	ldw	x, sp
      0003B6 5C               [ 1]  855 	incw	x
      0003B7 CDr00r40         [ 4]  856 	call	_uart_write
                                    857 ;	main.c: 249: uart_write(" <-\n");
      0003BA AEr00r0E         [ 2]  858 	ldw	x, #(___str_1+0)
      0003BD CDr00r40         [ 4]  859 	call	_uart_write
                                    860 ;	main.c: 250: convert_int_to_binary(UART1_BRR2, rx_binary_chars);
      0003C0 96               [ 1]  861 	ldw	x, sp
      0003C1 5C               [ 1]  862 	incw	x
      0003C2 51               [ 1]  863 	exgw	x, y
      0003C3 C6 52 33         [ 1]  864 	ld	a, 0x5233
      0003C6 5F               [ 1]  865 	clrw	x
      0003C7 90 89            [ 2]  866 	pushw	y
      0003C9 97               [ 1]  867 	ld	xl, a
      0003CA CDr01r4C         [ 4]  868 	call	_convert_int_to_binary
                                    869 ;	main.c: 251: uart_write("BRR2 -> ");
      0003CD AEr00r72         [ 2]  870 	ldw	x, #(___str_12+0)
      0003D0 CDr00r40         [ 4]  871 	call	_uart_write
                                    872 ;	main.c: 252: uart_write(rx_binary_chars);
      0003D3 96               [ 1]  873 	ldw	x, sp
      0003D4 5C               [ 1]  874 	incw	x
      0003D5 CDr00r40         [ 4]  875 	call	_uart_write
                                    876 ;	main.c: 253: uart_write(" <-\n");
      0003D8 AEr00r0E         [ 2]  877 	ldw	x, #(___str_1+0)
      0003DB CDr00r40         [ 4]  878 	call	_uart_write
                                    879 ;	main.c: 254: convert_int_to_binary(UART1_CR1, rx_binary_chars);
      0003DE 96               [ 1]  880 	ldw	x, sp
      0003DF 5C               [ 1]  881 	incw	x
      0003E0 51               [ 1]  882 	exgw	x, y
      0003E1 C6 52 34         [ 1]  883 	ld	a, 0x5234
      0003E4 5F               [ 1]  884 	clrw	x
      0003E5 90 89            [ 2]  885 	pushw	y
      0003E7 97               [ 1]  886 	ld	xl, a
      0003E8 CDr01r4C         [ 4]  887 	call	_convert_int_to_binary
                                    888 ;	main.c: 255: uart_write("CR1 -> ");
      0003EB AEr00r3B         [ 2]  889 	ldw	x, #(___str_6+0)
      0003EE CDr00r40         [ 4]  890 	call	_uart_write
                                    891 ;	main.c: 256: uart_write(rx_binary_chars);
      0003F1 96               [ 1]  892 	ldw	x, sp
      0003F2 5C               [ 1]  893 	incw	x
      0003F3 CDr00r40         [ 4]  894 	call	_uart_write
                                    895 ;	main.c: 257: uart_write(" <-\n");
      0003F6 AEr00r0E         [ 2]  896 	ldw	x, #(___str_1+0)
      0003F9 CDr00r40         [ 4]  897 	call	_uart_write
                                    898 ;	main.c: 258: convert_int_to_binary(UART1_CR2, rx_binary_chars);
      0003FC 96               [ 1]  899 	ldw	x, sp
      0003FD 5C               [ 1]  900 	incw	x
      0003FE 51               [ 1]  901 	exgw	x, y
      0003FF C6 52 35         [ 1]  902 	ld	a, 0x5235
      000402 5F               [ 1]  903 	clrw	x
      000403 90 89            [ 2]  904 	pushw	y
      000405 97               [ 1]  905 	ld	xl, a
      000406 CDr01r4C         [ 4]  906 	call	_convert_int_to_binary
                                    907 ;	main.c: 259: uart_write("CR2 -> ");
      000409 AEr00r43         [ 2]  908 	ldw	x, #(___str_7+0)
      00040C CDr00r40         [ 4]  909 	call	_uart_write
                                    910 ;	main.c: 260: uart_write(rx_binary_chars);
      00040F 96               [ 1]  911 	ldw	x, sp
      000410 5C               [ 1]  912 	incw	x
      000411 CDr00r40         [ 4]  913 	call	_uart_write
                                    914 ;	main.c: 261: uart_write(" <-\n");
      000414 AEr00r0E         [ 2]  915 	ldw	x, #(___str_1+0)
      000417 CDr00r40         [ 4]  916 	call	_uart_write
                                    917 ;	main.c: 262: convert_int_to_binary(UART1_CR3, rx_binary_chars);
      00041A 96               [ 1]  918 	ldw	x, sp
      00041B 5C               [ 1]  919 	incw	x
      00041C 51               [ 1]  920 	exgw	x, y
      00041D C6 52 36         [ 1]  921 	ld	a, 0x5236
      000420 5F               [ 1]  922 	clrw	x
      000421 90 89            [ 2]  923 	pushw	y
      000423 97               [ 1]  924 	ld	xl, a
      000424 CDr01r4C         [ 4]  925 	call	_convert_int_to_binary
                                    926 ;	main.c: 263: uart_write("CR3 -> ");
      000427 AEr00r7B         [ 2]  927 	ldw	x, #(___str_13+0)
      00042A CDr00r40         [ 4]  928 	call	_uart_write
                                    929 ;	main.c: 264: uart_write(rx_binary_chars);
      00042D 96               [ 1]  930 	ldw	x, sp
      00042E 5C               [ 1]  931 	incw	x
      00042F CDr00r40         [ 4]  932 	call	_uart_write
                                    933 ;	main.c: 265: uart_write(" <-\n");
      000432 AEr00r0E         [ 2]  934 	ldw	x, #(___str_1+0)
      000435 CDr00r40         [ 4]  935 	call	_uart_write
                                    936 ;	main.c: 266: convert_int_to_binary(UART1_CR4, rx_binary_chars);
      000438 96               [ 1]  937 	ldw	x, sp
      000439 5C               [ 1]  938 	incw	x
      00043A 51               [ 1]  939 	exgw	x, y
      00043B C6 52 37         [ 1]  940 	ld	a, 0x5237
      00043E 5F               [ 1]  941 	clrw	x
      00043F 90 89            [ 2]  942 	pushw	y
      000441 97               [ 1]  943 	ld	xl, a
      000442 CDr01r4C         [ 4]  944 	call	_convert_int_to_binary
                                    945 ;	main.c: 267: uart_write("CR4 -> ");
      000445 AEr00r83         [ 2]  946 	ldw	x, #(___str_14+0)
      000448 CDr00r40         [ 4]  947 	call	_uart_write
                                    948 ;	main.c: 268: uart_write(rx_binary_chars);
      00044B 96               [ 1]  949 	ldw	x, sp
      00044C 5C               [ 1]  950 	incw	x
      00044D CDr00r40         [ 4]  951 	call	_uart_write
                                    952 ;	main.c: 269: uart_write(" <-\n");
      000450 AEr00r0E         [ 2]  953 	ldw	x, #(___str_1+0)
      000453 CDr00r40         [ 4]  954 	call	_uart_write
                                    955 ;	main.c: 270: convert_int_to_binary(UART1_CR5, rx_binary_chars);
      000456 96               [ 1]  956 	ldw	x, sp
      000457 5C               [ 1]  957 	incw	x
      000458 51               [ 1]  958 	exgw	x, y
      000459 C6 52 38         [ 1]  959 	ld	a, 0x5238
      00045C 5F               [ 1]  960 	clrw	x
      00045D 90 89            [ 2]  961 	pushw	y
      00045F 97               [ 1]  962 	ld	xl, a
      000460 CDr01r4C         [ 4]  963 	call	_convert_int_to_binary
                                    964 ;	main.c: 271: uart_write("CR5 -> ");
      000463 AEr00r8B         [ 2]  965 	ldw	x, #(___str_15+0)
      000466 CDr00r40         [ 4]  966 	call	_uart_write
                                    967 ;	main.c: 272: uart_write(rx_binary_chars);
      000469 96               [ 1]  968 	ldw	x, sp
      00046A 5C               [ 1]  969 	incw	x
      00046B CDr00r40         [ 4]  970 	call	_uart_write
                                    971 ;	main.c: 273: uart_write(" <-\n");
      00046E AEr00r0E         [ 2]  972 	ldw	x, #(___str_1+0)
      000471 CDr00r40         [ 4]  973 	call	_uart_write
                                    974 ;	main.c: 274: convert_int_to_binary(UART1_GTR, rx_binary_chars);
      000474 96               [ 1]  975 	ldw	x, sp
      000475 5C               [ 1]  976 	incw	x
      000476 51               [ 1]  977 	exgw	x, y
      000477 C6 52 39         [ 1]  978 	ld	a, 0x5239
      00047A 5F               [ 1]  979 	clrw	x
      00047B 90 89            [ 2]  980 	pushw	y
      00047D 97               [ 1]  981 	ld	xl, a
      00047E CDr01r4C         [ 4]  982 	call	_convert_int_to_binary
                                    983 ;	main.c: 275: uart_write("GTR -> ");
      000481 AEr00r93         [ 2]  984 	ldw	x, #(___str_16+0)
      000484 CDr00r40         [ 4]  985 	call	_uart_write
                                    986 ;	main.c: 276: uart_write(rx_binary_chars);
      000487 96               [ 1]  987 	ldw	x, sp
      000488 5C               [ 1]  988 	incw	x
      000489 CDr00r40         [ 4]  989 	call	_uart_write
                                    990 ;	main.c: 277: uart_write(" <-\n");
      00048C AEr00r0E         [ 2]  991 	ldw	x, #(___str_1+0)
      00048F CDr00r40         [ 4]  992 	call	_uart_write
                                    993 ;	main.c: 278: convert_int_to_binary(UART1_PSCR, rx_binary_chars);
      000492 96               [ 1]  994 	ldw	x, sp
      000493 5C               [ 1]  995 	incw	x
      000494 51               [ 1]  996 	exgw	x, y
      000495 C6 52 3A         [ 1]  997 	ld	a, 0x523a
      000498 5F               [ 1]  998 	clrw	x
      000499 90 89            [ 2]  999 	pushw	y
      00049B 97               [ 1] 1000 	ld	xl, a
      00049C CDr01r4C         [ 4] 1001 	call	_convert_int_to_binary
                                   1002 ;	main.c: 279: uart_write("PSCR -> ");
      00049F AEr00r9B         [ 2] 1003 	ldw	x, #(___str_17+0)
      0004A2 CDr00r40         [ 4] 1004 	call	_uart_write
                                   1005 ;	main.c: 280: uart_write(rx_binary_chars);
      0004A5 96               [ 1] 1006 	ldw	x, sp
      0004A6 5C               [ 1] 1007 	incw	x
      0004A7 CDr00r40         [ 4] 1008 	call	_uart_write
                                   1009 ;	main.c: 281: uart_write(" <-\n");
      0004AA AEr00r0E         [ 2] 1010 	ldw	x, #(___str_1+0)
      0004AD CDr00r40         [ 4] 1011 	call	_uart_write
                                   1012 ;	main.c: 282: }
      0004B0 5B 09            [ 2] 1013 	addw	sp, #9
      0004B2 81               [ 4] 1014 	ret
                                   1015 ;	main.c: 284: void uart_init(void){
                                   1016 ;	-----------------------------------------
                                   1017 ;	 function uart_init
                                   1018 ;	-----------------------------------------
      0004B3                       1019 _uart_init:
                                   1020 ;	main.c: 285: CLK_CKDIVR = 0;
      0004B3 35 00 50 C6      [ 1] 1021 	mov	0x50c6+0, #0x00
                                   1022 ;	main.c: 288: UART1_CR2 |= UART_CR2_TEN; // Transmitter enable
      0004B7 72 16 52 35      [ 1] 1023 	bset	0x5235, #3
                                   1024 ;	main.c: 289: UART1_CR2 |= UART_CR2_REN; // Receiver enable
      0004BB 72 14 52 35      [ 1] 1025 	bset	0x5235, #2
                                   1026 ;	main.c: 290: UART1_CR3 &= ~(UART_CR3_STOP1 | UART_CR3_STOP2); // 1 stop bit
      0004BF C6 52 36         [ 1] 1027 	ld	a, 0x5236
      0004C2 A4 CF            [ 1] 1028 	and	a, #0xcf
      0004C4 C7 52 36         [ 1] 1029 	ld	0x5236, a
                                   1030 ;	main.c: 292: UART1_BRR2 = 0x03; UART1_BRR1 = 0x68; // 0x0683 coded funky way (see ref manual)
      0004C7 35 03 52 33      [ 1] 1031 	mov	0x5233+0, #0x03
      0004CB 35 68 52 32      [ 1] 1032 	mov	0x5232+0, #0x68
                                   1033 ;	main.c: 293: }
      0004CF 81               [ 4] 1034 	ret
                                   1035 ;	main.c: 297: void i2c_init(void) {
                                   1036 ;	-----------------------------------------
                                   1037 ;	 function i2c_init
                                   1038 ;	-----------------------------------------
      0004D0                       1039 _i2c_init:
                                   1040 ;	main.c: 303: I2C_CR1 = I2C_CR1 & ~0x01;      // PE=0, disable I2C before setup
      0004D0 72 11 52 10      [ 1] 1041 	bres	0x5210, #0
                                   1042 ;	main.c: 304: I2C_FREQR= 16;                  // peripheral frequence =16MHz
      0004D4 35 10 52 12      [ 1] 1043 	mov	0x5212+0, #0x10
                                   1044 ;	main.c: 305: I2C_CCRH = 0;                   // =0
      0004D8 35 00 52 1C      [ 1] 1045 	mov	0x521c+0, #0x00
                                   1046 ;	main.c: 306: I2C_CCRL = 80;                  // 100kHz for I2C
      0004DC 35 50 52 1B      [ 1] 1047 	mov	0x521b+0, #0x50
                                   1048 ;	main.c: 307: I2C_CCRH = I2C_CCRH & ~0x80;    // set standart mode(100кHz)
      0004E0 72 1F 52 1C      [ 1] 1049 	bres	0x521c, #7
                                   1050 ;	main.c: 308: I2C_OARH = I2C_OARH & ~0x80;    // 7-bit address mode
      0004E4 72 1F 52 14      [ 1] 1051 	bres	0x5214, #7
                                   1052 ;	main.c: 309: I2C_OARH = I2C_OARH | 0x40;     // see reference manual
      0004E8 72 1C 52 14      [ 1] 1053 	bset	0x5214, #6
                                   1054 ;	main.c: 310: I2C_CR1 = I2C_CR1 | 0x01;       // PE=1, enable I2C
      0004EC 72 10 52 10      [ 1] 1055 	bset	0x5210, #0
                                   1056 ;	main.c: 311: }
      0004F0 81               [ 4] 1057 	ret
                                   1058 ;	main.c: 320: void i2c_start(void) {
                                   1059 ;	-----------------------------------------
                                   1060 ;	 function i2c_start
                                   1061 ;	-----------------------------------------
      0004F1                       1062 _i2c_start:
                                   1063 ;	main.c: 321: I2C_CR2 = I2C_CR2 | (1 << 0); // Отправляем стартовый сигнал
      0004F1 72 10 52 11      [ 1] 1064 	bset	0x5211, #0
                                   1065 ;	main.c: 322: while(!(I2C_SR1 & (1 << 0)));
      0004F5                       1066 00101$:
      0004F5 72 01 52 17 FB   [ 2] 1067 	btjf	0x5217, #0, 00101$
                                   1068 ;	main.c: 324: }
      0004FA 81               [ 4] 1069 	ret
                                   1070 ;	main.c: 326: void i2c_send_address(uint8_t address) {
                                   1071 ;	-----------------------------------------
                                   1072 ;	 function i2c_send_address
                                   1073 ;	-----------------------------------------
      0004FB                       1074 _i2c_send_address:
                                   1075 ;	main.c: 327: I2C_DR = address << 1; // Отправка адреса устройства с битом на запись
      0004FB 48               [ 1] 1076 	sll	a
      0004FC C7 52 16         [ 1] 1077 	ld	0x5216, a
                                   1078 ;	main.c: 328: while (!(I2C_SR1 & (1 << 1)) && !(I2C_SR2 & (1 << 2)));
      0004FF                       1079 00102$:
      0004FF 72 03 52 17 01   [ 2] 1080 	btjf	0x5217, #1, 00117$
      000504 81               [ 4] 1081 	ret
      000505                       1082 00117$:
      000505 72 05 52 18 F5   [ 2] 1083 	btjf	0x5218, #2, 00102$
                                   1084 ;	main.c: 329: }
      00050A 81               [ 4] 1085 	ret
                                   1086 ;	main.c: 331: void i2c_stop(void) {
                                   1087 ;	-----------------------------------------
                                   1088 ;	 function i2c_stop
                                   1089 ;	-----------------------------------------
      00050B                       1090 _i2c_stop:
                                   1091 ;	main.c: 332: I2C_CR2 = I2C_CR2 | (1 << 1); // Отправка стопового сигнала
      00050B 72 12 52 11      [ 1] 1092 	bset	0x5211, #1
                                   1093 ;	main.c: 334: }
      00050F 81               [ 4] 1094 	ret
                                   1095 ;	main.c: 335: void i2c_write(void){
                                   1096 ;	-----------------------------------------
                                   1097 ;	 function i2c_write
                                   1098 ;	-----------------------------------------
      000510                       1099 _i2c_write:
      000510 52 02            [ 2] 1100 	sub	sp, #2
                                   1101 ;	main.c: 336: I2C_DR = d_addr; // Отправка адреса регистра
      000512 55u01u03 52 16   [ 1] 1102 	mov	0x5216+0, _d_addr+0
                                   1103 ;	main.c: 337: for(int i = 0;i < d_size;i++)
      000517 5F               [ 1] 1104 	clrw	x
      000518                       1105 00107$:
      000518 C6u01u05         [ 1] 1106 	ld	a, _d_size+0
      00051B 6B 02            [ 1] 1107 	ld	(0x02, sp), a
      00051D 0F 01            [ 1] 1108 	clr	(0x01, sp)
      00051F 13 01            [ 2] 1109 	cpw	x, (0x01, sp)
      000521 2E 16            [ 1] 1110 	jrsge	00109$
                                   1111 ;	main.c: 339: I2C_DR = data_buf[i];
      000523 90 93            [ 1] 1112 	ldw	y, x
      000525 90 D6u01u07      [ 1] 1113 	ld	a, (_data_buf+0, y)
      000529 C7 52 16         [ 1] 1114 	ld	0x5216, a
                                   1115 ;	main.c: 340: while (!(I2C_SR1 & (1 << 1)) && !(I2C_SR2 & (1 << 2)));
      00052C                       1116 00102$:
      00052C 72 02 52 17 05   [ 2] 1117 	btjt	0x5217, #1, 00108$
      000531 72 05 52 18 F6   [ 2] 1118 	btjf	0x5218, #2, 00102$
      000536                       1119 00108$:
                                   1120 ;	main.c: 337: for(int i = 0;i < d_size;i++)
      000536 5C               [ 1] 1121 	incw	x
      000537 20 DF            [ 2] 1122 	jra	00107$
      000539                       1123 00109$:
                                   1124 ;	main.c: 342: }
      000539 5B 02            [ 2] 1125 	addw	sp, #2
      00053B 81               [ 4] 1126 	ret
                                   1127 ;	main.c: 344: void i2c_read(void){
                                   1128 ;	-----------------------------------------
                                   1129 ;	 function i2c_read
                                   1130 ;	-----------------------------------------
      00053C                       1131 _i2c_read:
      00053C 52 02            [ 2] 1132 	sub	sp, #2
                                   1133 ;	main.c: 345: I2C_DR = (current_dev << 1) & (1 << 0);
      00053E C6u02u07         [ 1] 1134 	ld	a, _current_dev+0
      000541 48               [ 1] 1135 	sll	a
      000542 A4 01            [ 1] 1136 	and	a, #0x01
      000544 C7 52 16         [ 1] 1137 	ld	0x5216, a
                                   1138 ;	main.c: 346: while (!(I2C_SR1 & (1 << 1)) && !(I2C_SR2 & (1 << 2)));
      000547                       1139 00102$:
      000547 72 02 52 17 05   [ 2] 1140 	btjt	0x5217, #1, 00104$
      00054C 72 05 52 18 F6   [ 2] 1141 	btjf	0x5218, #2, 00102$
      000551                       1142 00104$:
                                   1143 ;	main.c: 348: I2C_DR = d_addr;
      000551 55u01u03 52 16   [ 1] 1144 	mov	0x5216+0, _d_addr+0
                                   1145 ;	main.c: 349: while (!(I2C_SR1 & (1 << 1)) && !(I2C_SR2 & (1 << 2)));
      000556                       1146 00106$:
      000556 72 02 52 17 05   [ 2] 1147 	btjt	0x5217, #1, 00108$
      00055B 72 05 52 18 F6   [ 2] 1148 	btjf	0x5218, #2, 00106$
      000560                       1149 00108$:
                                   1150 ;	main.c: 350: i2c_stop();
      000560 CDr05r0B         [ 4] 1151 	call	_i2c_stop
                                   1152 ;	main.c: 351: for(int i = 0;i < d_size;i++)
      000563 5F               [ 1] 1153 	clrw	x
      000564                       1154 00115$:
      000564 C6u01u05         [ 1] 1155 	ld	a, _d_size+0
      000567 6B 02            [ 1] 1156 	ld	(0x02, sp), a
      000569 0F 01            [ 1] 1157 	clr	(0x01, sp)
      00056B 13 01            [ 2] 1158 	cpw	x, (0x01, sp)
      00056D 2E 13            [ 1] 1159 	jrsge	00117$
                                   1160 ;	main.c: 353: data_buf[i] = I2C_DR;
      00056F C6 52 16         [ 1] 1161 	ld	a, 0x5216
      000572 D7u01u07         [ 1] 1162 	ld	((_data_buf+0), x), a
                                   1163 ;	main.c: 354: while (!(I2C_SR1 & (1 << 1)) && !(I2C_SR2 & (1 << 2)));
      000575                       1164 00110$:
      000575 72 02 52 17 05   [ 2] 1165 	btjt	0x5217, #1, 00116$
      00057A 72 05 52 18 F6   [ 2] 1166 	btjf	0x5218, #2, 00110$
      00057F                       1167 00116$:
                                   1168 ;	main.c: 351: for(int i = 0;i < d_size;i++)
      00057F 5C               [ 1] 1169 	incw	x
      000580 20 E2            [ 2] 1170 	jra	00115$
      000582                       1171 00117$:
                                   1172 ;	main.c: 357: }
      000582 5B 02            [ 2] 1173 	addw	sp, #2
      000584 81               [ 4] 1174 	ret
                                   1175 ;	main.c: 358: void i2c_scan(void) {
                                   1176 ;	-----------------------------------------
                                   1177 ;	 function i2c_scan
                                   1178 ;	-----------------------------------------
      000585                       1179 _i2c_scan:
      000585 52 02            [ 2] 1180 	sub	sp, #2
                                   1181 ;	main.c: 359: for (uint8_t addr = current_dev; addr < 127; addr++) {
      000587 C6u02u07         [ 1] 1182 	ld	a, _current_dev+0
      00058A 6B 01            [ 1] 1183 	ld	(0x01, sp), a
      00058C 6B 02            [ 1] 1184 	ld	(0x02, sp), a
      00058E                       1185 00105$:
      00058E 7B 02            [ 1] 1186 	ld	a, (0x02, sp)
      000590 A1 7F            [ 1] 1187 	cp	a, #0x7f
      000592 24 26            [ 1] 1188 	jrnc	00107$
                                   1189 ;	main.c: 360: i2c_start();
      000594 CDr04rF1         [ 4] 1190 	call	_i2c_start
                                   1191 ;	main.c: 361: i2c_send_address(addr);
      000597 7B 02            [ 1] 1192 	ld	a, (0x02, sp)
      000599 CDr04rFB         [ 4] 1193 	call	_i2c_send_address
                                   1194 ;	main.c: 362: if (!(I2C_SR2 & (1 << 2))) { // Проверка на ACK
      00059C 72 04 52 18 0A   [ 2] 1195 	btjt	0x5218, #2, 00102$
                                   1196 ;	main.c: 364: current_dev = addr;
      0005A1 7B 01            [ 1] 1197 	ld	a, (0x01, sp)
      0005A3 C7u02u07         [ 1] 1198 	ld	_current_dev+0, a
                                   1199 ;	main.c: 365: i2c_stop();
      0005A6 5B 02            [ 2] 1200 	addw	sp, #2
                                   1201 ;	main.c: 366: break;
      0005A8 CCr05r0B         [ 2] 1202 	jp	_i2c_stop
      0005AB                       1203 00102$:
                                   1204 ;	main.c: 368: i2c_stop();
      0005AB CDr05r0B         [ 4] 1205 	call	_i2c_stop
                                   1206 ;	main.c: 369: I2C_SR2 = I2C_SR2 & ~(1 << 2); // Очистка флага ошибки
      0005AE 72 15 52 18      [ 1] 1207 	bres	0x5218, #2
                                   1208 ;	main.c: 359: for (uint8_t addr = current_dev; addr < 127; addr++) {
      0005B2 0C 02            [ 1] 1209 	inc	(0x02, sp)
      0005B4 7B 02            [ 1] 1210 	ld	a, (0x02, sp)
      0005B6 6B 01            [ 1] 1211 	ld	(0x01, sp), a
      0005B8 20 D4            [ 2] 1212 	jra	00105$
      0005BA                       1213 00107$:
                                   1214 ;	main.c: 371: }
      0005BA 5B 02            [ 2] 1215 	addw	sp, #2
      0005BC 81               [ 4] 1216 	ret
                                   1217 ;	main.c: 381: void cm_SM(void)
                                   1218 ;	-----------------------------------------
                                   1219 ;	 function cm_SM
                                   1220 ;	-----------------------------------------
      0005BD                       1221 _cm_SM:
      0005BD 52 04            [ 2] 1222 	sub	sp, #4
                                   1223 ;	main.c: 383: char cur_dev[4]={0};
      0005BF 0F 01            [ 1] 1224 	clr	(0x01, sp)
      0005C1 0F 02            [ 1] 1225 	clr	(0x02, sp)
      0005C3 0F 03            [ 1] 1226 	clr	(0x03, sp)
      0005C5 0F 04            [ 1] 1227 	clr	(0x04, sp)
                                   1228 ;	main.c: 384: convert_int_to_chars(current_dev, cur_dev);
      0005C7 96               [ 1] 1229 	ldw	x, sp
      0005C8 5C               [ 1] 1230 	incw	x
      0005C9 C6u02u07         [ 1] 1231 	ld	a, _current_dev+0
      0005CC CDr00rA1         [ 4] 1232 	call	_convert_int_to_chars
                                   1233 ;	main.c: 385: uart_write("SM ");
      0005CF AEr00rA4         [ 2] 1234 	ldw	x, #(___str_18+0)
      0005D2 CDr00r40         [ 4] 1235 	call	_uart_write
                                   1236 ;	main.c: 386: uart_write(cur_dev);
      0005D5 96               [ 1] 1237 	ldw	x, sp
      0005D6 5C               [ 1] 1238 	incw	x
      0005D7 CDr00r40         [ 4] 1239 	call	_uart_write
                                   1240 ;	main.c: 387: uart_write("\r\n");
      0005DA AEr00rA8         [ 2] 1241 	ldw	x, #(___str_19+0)
      0005DD CDr00r40         [ 4] 1242 	call	_uart_write
                                   1243 ;	main.c: 388: }
      0005E0 5B 04            [ 2] 1244 	addw	sp, #4
      0005E2 81               [ 4] 1245 	ret
                                   1246 ;	main.c: 389: void cm_SN(void)
                                   1247 ;	-----------------------------------------
                                   1248 ;	 function cm_SN
                                   1249 ;	-----------------------------------------
      0005E3                       1250 _cm_SN:
                                   1251 ;	main.c: 391: i2c_scan();
      0005E3 CDr05r85         [ 4] 1252 	call	_i2c_scan
                                   1253 ;	main.c: 392: cm_SM();
                                   1254 ;	main.c: 393: }
      0005E6 CCr05rBD         [ 2] 1255 	jp	_cm_SM
                                   1256 ;	main.c: 394: void cm_RM(void)
                                   1257 ;	-----------------------------------------
                                   1258 ;	 function cm_RM
                                   1259 ;	-----------------------------------------
      0005E9                       1260 _cm_RM:
                                   1261 ;	main.c: 396: current_dev = 0;
      0005E9 72 5Fu02u07      [ 1] 1262 	clr	_current_dev+0
                                   1263 ;	main.c: 397: uart_write("RM\n");
      0005ED AEr00rAB         [ 2] 1264 	ldw	x, #(___str_20+0)
                                   1265 ;	main.c: 398: }
      0005F0 CCr00r40         [ 2] 1266 	jp	_uart_write
                                   1267 ;	main.c: 400: void cm_DB(void)
                                   1268 ;	-----------------------------------------
                                   1269 ;	 function cm_DB
                                   1270 ;	-----------------------------------------
      0005F3                       1271 _cm_DB:
                                   1272 ;	main.c: 402: status_check();
                                   1273 ;	main.c: 403: }
      0005F3 CCr02r92         [ 2] 1274 	jp	_status_check
                                   1275 ;	main.c: 405: void cm_ST(void)
                                   1276 ;	-----------------------------------------
                                   1277 ;	 function cm_ST
                                   1278 ;	-----------------------------------------
      0005F6                       1279 _cm_ST:
                                   1280 ;	main.c: 407: get_addr_from_buff();
      0005F6 CDr01r84         [ 4] 1281 	call	_get_addr_from_buff
                                   1282 ;	main.c: 408: current_dev = d_addr;
      0005F9 55u01u03u02u07   [ 1] 1283 	mov	_current_dev+0, _d_addr+0
                                   1284 ;	main.c: 409: uart_write("ST\n");
      0005FE AEr00rAF         [ 2] 1285 	ldw	x, #(___str_21+0)
                                   1286 ;	main.c: 410: }
      000601 CCr00r40         [ 2] 1287 	jp	_uart_write
                                   1288 ;	main.c: 411: void cm_SR(void)
                                   1289 ;	-----------------------------------------
                                   1290 ;	 function cm_SR
                                   1291 ;	-----------------------------------------
      000604                       1292 _cm_SR:
                                   1293 ;	main.c: 413: i2c_start();
      000604 CDr04rF1         [ 4] 1294 	call	_i2c_start
                                   1295 ;	main.c: 414: i2c_send_address(current_dev);
      000607 C6u02u07         [ 1] 1296 	ld	a, _current_dev+0
      00060A CDr04rFB         [ 4] 1297 	call	_i2c_send_address
                                   1298 ;	main.c: 415: i2c_read();
      00060D CDr05r3C         [ 4] 1299 	call	_i2c_read
                                   1300 ;	main.c: 416: i2c_stop();
                                   1301 ;	main.c: 417: }
      000610 CCr05r0B         [ 2] 1302 	jp	_i2c_stop
                                   1303 ;	main.c: 418: void cm_SW(void)
                                   1304 ;	-----------------------------------------
                                   1305 ;	 function cm_SW
                                   1306 ;	-----------------------------------------
      000613                       1307 _cm_SW:
      000613 52 04            [ 2] 1308 	sub	sp, #4
                                   1309 ;	main.c: 420: char ar[4]={0};
      000615 0F 01            [ 1] 1310 	clr	(0x01, sp)
      000617 0F 02            [ 1] 1311 	clr	(0x02, sp)
      000619 0F 03            [ 1] 1312 	clr	(0x03, sp)
      00061B 0F 04            [ 1] 1313 	clr	(0x04, sp)
                                   1314 ;	main.c: 421: i2c_start();
      00061D CDr04rF1         [ 4] 1315 	call	_i2c_start
                                   1316 ;	main.c: 422: i2c_send_address(current_dev);
      000620 C6u02u07         [ 1] 1317 	ld	a, _current_dev+0
      000623 CDr04rFB         [ 4] 1318 	call	_i2c_send_address
                                   1319 ;	main.c: 423: i2c_write();
      000626 CDr05r10         [ 4] 1320 	call	_i2c_write
                                   1321 ;	main.c: 424: i2c_stop();
      000629 CDr05r0B         [ 4] 1322 	call	_i2c_stop
                                   1323 ;	main.c: 425: uart_write("SW ");
      00062C AEr00rB3         [ 2] 1324 	ldw	x, #(___str_22+0)
      00062F CDr00r40         [ 4] 1325 	call	_uart_write
                                   1326 ;	main.c: 426: convert_int_to_chars(d_addr, ar);
      000632 96               [ 1] 1327 	ldw	x, sp
      000633 5C               [ 1] 1328 	incw	x
      000634 C6u01u03         [ 1] 1329 	ld	a, _d_addr+0
      000637 CDr00rA1         [ 4] 1330 	call	_convert_int_to_chars
                                   1331 ;	main.c: 427: uart_write(ar);
      00063A 96               [ 1] 1332 	ldw	x, sp
      00063B 5C               [ 1] 1333 	incw	x
      00063C CDr00r40         [ 4] 1334 	call	_uart_write
                                   1335 ;	main.c: 428: uart_write(" ");
      00063F AEr00rB7         [ 2] 1336 	ldw	x, #(___str_23+0)
      000642 CDr00r40         [ 4] 1337 	call	_uart_write
                                   1338 ;	main.c: 429: convert_int_to_chars(d_size, ar);
      000645 96               [ 1] 1339 	ldw	x, sp
      000646 5C               [ 1] 1340 	incw	x
      000647 C6u01u05         [ 1] 1341 	ld	a, _d_size+0
      00064A CDr00rA1         [ 4] 1342 	call	_convert_int_to_chars
                                   1343 ;	main.c: 430: uart_write(ar);
      00064D 96               [ 1] 1344 	ldw	x, sp
      00064E 5C               [ 1] 1345 	incw	x
      00064F CDr00r40         [ 4] 1346 	call	_uart_write
                                   1347 ;	main.c: 431: uart_write("\r\n");
      000652 AEr00rA8         [ 2] 1348 	ldw	x, #(___str_19+0)
      000655 CDr00r40         [ 4] 1349 	call	_uart_write
                                   1350 ;	main.c: 432: }
      000658 5B 04            [ 2] 1351 	addw	sp, #4
      00065A 81               [ 4] 1352 	ret
                                   1353 ;	main.c: 440: int data_handler(void)
                                   1354 ;	-----------------------------------------
                                   1355 ;	 function data_handler
                                   1356 ;	-----------------------------------------
      00065B                       1357 _data_handler:
                                   1358 ;	main.c: 442: p_size = 0;
      00065B 72 5Fu01u04      [ 1] 1359 	clr	_p_size+0
                                   1360 ;	main.c: 443: p_bytes = 0;
      00065F 72 5Fu01u06      [ 1] 1361 	clr	_p_bytes+0
                                   1362 ;	main.c: 444: d_addr = 0;
      000663 72 5Fu01u03      [ 1] 1363 	clr	_d_addr+0
                                   1364 ;	main.c: 445: d_size = 0;
      000667 72 5Fu01u05      [ 1] 1365 	clr	_d_size+0
                                   1366 ;	main.c: 446: memset(a, 0, sizeof(a));
      00066B 4B 03            [ 1] 1367 	push	#0x03
      00066D 4B 00            [ 1] 1368 	push	#0x00
      00066F 5F               [ 1] 1369 	clrw	x
      000670 89               [ 2] 1370 	pushw	x
      000671 AEr01r00         [ 2] 1371 	ldw	x, #(_a+0)
      000674 CDr00r00         [ 4] 1372 	call	_memset
                                   1373 ;	main.c: 447: memset(data_buf, 0, sizeof(data_buf));
      000677 4B 00            [ 1] 1374 	push	#0x00
      000679 4B 01            [ 1] 1375 	push	#0x01
      00067B 5F               [ 1] 1376 	clrw	x
      00067C 89               [ 2] 1377 	pushw	x
      00067D AEr01r07         [ 2] 1378 	ldw	x, #(_data_buf+0)
      000680 CDr00r00         [ 4] 1379 	call	_memset
                                   1380 ;	main.c: 448: if(memcmp(&buffer[0],"SM",2) == 0)
      000683 4B 02            [ 1] 1381 	push	#0x02
      000685 4B 00            [ 1] 1382 	push	#0x00
      000687 4BrB9            [ 1] 1383 	push	#<(___str_24+0)
      000689 4Bs00            [ 1] 1384 	push	#((___str_24+0) >> 8)
      00068B AEr00r00         [ 2] 1385 	ldw	x, #(_buffer+0)
      00068E CDr00r00         [ 4] 1386 	call	_memcmp
                                   1387 ;	main.c: 449: return 1;
      000691 5D               [ 2] 1388 	tnzw	x
      000692 26 02            [ 1] 1389 	jrne	00102$
      000694 5C               [ 1] 1390 	incw	x
      000695 81               [ 4] 1391 	ret
      000696                       1392 00102$:
                                   1393 ;	main.c: 450: if(memcmp(&buffer[0],"SN",2) == 0)
      000696 4B 02            [ 1] 1394 	push	#0x02
      000698 4B 00            [ 1] 1395 	push	#0x00
      00069A 4BrBC            [ 1] 1396 	push	#<(___str_25+0)
      00069C 4Bs00            [ 1] 1397 	push	#((___str_25+0) >> 8)
      00069E AEr00r00         [ 2] 1398 	ldw	x, #(_buffer+0)
      0006A1 CDr00r00         [ 4] 1399 	call	_memcmp
      0006A4 5D               [ 2] 1400 	tnzw	x
      0006A5 26 04            [ 1] 1401 	jrne	00104$
                                   1402 ;	main.c: 451: return 2;
      0006A7 AE 00 02         [ 2] 1403 	ldw	x, #0x0002
      0006AA 81               [ 4] 1404 	ret
      0006AB                       1405 00104$:
                                   1406 ;	main.c: 452: if(memcmp(&buffer[0],"ST",2) == 0)
      0006AB 4B 02            [ 1] 1407 	push	#0x02
      0006AD 4B 00            [ 1] 1408 	push	#0x00
      0006AF 4BrBF            [ 1] 1409 	push	#<(___str_26+0)
      0006B1 4Bs00            [ 1] 1410 	push	#((___str_26+0) >> 8)
      0006B3 AEr00r00         [ 2] 1411 	ldw	x, #(_buffer+0)
      0006B6 CDr00r00         [ 4] 1412 	call	_memcmp
      0006B9 5D               [ 2] 1413 	tnzw	x
      0006BA 26 04            [ 1] 1414 	jrne	00106$
                                   1415 ;	main.c: 453: return 5;
      0006BC AE 00 05         [ 2] 1416 	ldw	x, #0x0005
      0006BF 81               [ 4] 1417 	ret
      0006C0                       1418 00106$:
                                   1419 ;	main.c: 454: if(memcmp(&buffer[0],"RM",2) == 0)
      0006C0 4B 02            [ 1] 1420 	push	#0x02
      0006C2 4B 00            [ 1] 1421 	push	#0x00
      0006C4 4BrC2            [ 1] 1422 	push	#<(___str_27+0)
      0006C6 4Bs00            [ 1] 1423 	push	#((___str_27+0) >> 8)
      0006C8 AEr00r00         [ 2] 1424 	ldw	x, #(_buffer+0)
      0006CB CDr00r00         [ 4] 1425 	call	_memcmp
      0006CE 5D               [ 2] 1426 	tnzw	x
      0006CF 26 04            [ 1] 1427 	jrne	00108$
                                   1428 ;	main.c: 455: return 6;
      0006D1 AE 00 06         [ 2] 1429 	ldw	x, #0x0006
      0006D4 81               [ 4] 1430 	ret
      0006D5                       1431 00108$:
                                   1432 ;	main.c: 456: if(memcmp(&buffer[0],"DB",2) == 0)
      0006D5 4B 02            [ 1] 1433 	push	#0x02
      0006D7 4B 00            [ 1] 1434 	push	#0x00
      0006D9 4BrC5            [ 1] 1435 	push	#<(___str_28+0)
      0006DB 4Bs00            [ 1] 1436 	push	#((___str_28+0) >> 8)
      0006DD AEr00r00         [ 2] 1437 	ldw	x, #(_buffer+0)
      0006E0 CDr00r00         [ 4] 1438 	call	_memcmp
      0006E3 5D               [ 2] 1439 	tnzw	x
      0006E4 26 04            [ 1] 1440 	jrne	00110$
                                   1441 ;	main.c: 457: return 7;
      0006E6 AE 00 07         [ 2] 1442 	ldw	x, #0x0007
      0006E9 81               [ 4] 1443 	ret
      0006EA                       1444 00110$:
                                   1445 ;	main.c: 459: get_addr_from_buff();
      0006EA CDr01r84         [ 4] 1446 	call	_get_addr_from_buff
                                   1447 ;	main.c: 460: get_size_from_buff();
      0006ED CDr01rC4         [ 4] 1448 	call	_get_size_from_buff
                                   1449 ;	main.c: 462: if(memcmp(&buffer[0],"SR",2) == 0)
      0006F0 4B 02            [ 1] 1450 	push	#0x02
      0006F2 4B 00            [ 1] 1451 	push	#0x00
      0006F4 4BrC8            [ 1] 1452 	push	#<(___str_29+0)
      0006F6 4Bs00            [ 1] 1453 	push	#((___str_29+0) >> 8)
      0006F8 AEr00r00         [ 2] 1454 	ldw	x, #(_buffer+0)
      0006FB CDr00r00         [ 4] 1455 	call	_memcmp
      0006FE 5D               [ 2] 1456 	tnzw	x
      0006FF 26 04            [ 1] 1457 	jrne	00112$
                                   1458 ;	main.c: 463: return 3;
      000701 AE 00 03         [ 2] 1459 	ldw	x, #0x0003
      000704 81               [ 4] 1460 	ret
      000705                       1461 00112$:
                                   1462 ;	main.c: 465: char_buffer_to_int();
      000705 CDr02r08         [ 4] 1463 	call	_char_buffer_to_int
                                   1464 ;	main.c: 467: if(memcmp(&buffer[0],"SW",2) == 0)
      000708 4B 02            [ 1] 1465 	push	#0x02
      00070A 4B 00            [ 1] 1466 	push	#0x00
      00070C 4BrCB            [ 1] 1467 	push	#<(___str_30+0)
      00070E 4Bs00            [ 1] 1468 	push	#((___str_30+0) >> 8)
      000710 AEr00r00         [ 2] 1469 	ldw	x, #(_buffer+0)
      000713 CDr00r00         [ 4] 1470 	call	_memcmp
      000716 5D               [ 2] 1471 	tnzw	x
      000717 26 04            [ 1] 1472 	jrne	00114$
                                   1473 ;	main.c: 468: return 4;
      000719 AE 00 04         [ 2] 1474 	ldw	x, #0x0004
      00071C 81               [ 4] 1475 	ret
      00071D                       1476 00114$:
                                   1477 ;	main.c: 469: return 0;
      00071D 5F               [ 1] 1478 	clrw	x
                                   1479 ;	main.c: 471: }
      00071E 81               [ 4] 1480 	ret
                                   1481 ;	main.c: 473: void command_switcher(void)
                                   1482 ;	-----------------------------------------
                                   1483 ;	 function command_switcher
                                   1484 ;	-----------------------------------------
      00071F                       1485 _command_switcher:
      00071F 52 04            [ 2] 1486 	sub	sp, #4
                                   1487 ;	main.c: 475: char ar[4]={0};
      000721 0F 01            [ 1] 1488 	clr	(0x01, sp)
      000723 0F 02            [ 1] 1489 	clr	(0x02, sp)
      000725 0F 03            [ 1] 1490 	clr	(0x03, sp)
      000727 0F 04            [ 1] 1491 	clr	(0x04, sp)
                                   1492 ;	main.c: 477: switch(data_handler())
      000729 CDr06r5B         [ 4] 1493 	call	_data_handler
      00072C 5D               [ 2] 1494 	tnzw	x
      00072D 2B 3B            [ 1] 1495 	jrmi	00109$
      00072F A3 00 07         [ 2] 1496 	cpw	x, #0x0007
      000732 2C 36            [ 1] 1497 	jrsgt	00109$
      000734 58               [ 2] 1498 	sllw	x
      000735 DEu07u39         [ 2] 1499 	ldw	x, (#00123$, x)
      000738 FC               [ 2] 1500 	jp	(x)
      000739                       1501 00123$:
      000739r07r6A                 1502 	.dw	#00109$
      00073Br07r49                 1503 	.dw	#00101$
      00073Dr07r4E                 1504 	.dw	#00102$
      00073Fr07r53                 1505 	.dw	#00103$
      000741r07r58                 1506 	.dw	#00104$
      000743r07r5D                 1507 	.dw	#00105$
      000745r07r62                 1508 	.dw	#00106$
      000747r07r67                 1509 	.dw	#00107$
                                   1510 ;	main.c: 479: case 1:
      000749                       1511 00101$:
                                   1512 ;	main.c: 480: cm_SM();
      000749 CDr05rBD         [ 4] 1513 	call	_cm_SM
                                   1514 ;	main.c: 481: break;
      00074C 20 1C            [ 2] 1515 	jra	00109$
                                   1516 ;	main.c: 482: case 2:
      00074E                       1517 00102$:
                                   1518 ;	main.c: 483: cm_SN();
      00074E CDr05rE3         [ 4] 1519 	call	_cm_SN
                                   1520 ;	main.c: 484: break;
      000751 20 17            [ 2] 1521 	jra	00109$
                                   1522 ;	main.c: 485: case 3:
      000753                       1523 00103$:
                                   1524 ;	main.c: 486: cm_SR();
      000753 CDr06r04         [ 4] 1525 	call	_cm_SR
                                   1526 ;	main.c: 487: break;
      000756 20 12            [ 2] 1527 	jra	00109$
                                   1528 ;	main.c: 488: case 4:
      000758                       1529 00104$:
                                   1530 ;	main.c: 489: cm_SW();
      000758 CDr06r13         [ 4] 1531 	call	_cm_SW
                                   1532 ;	main.c: 490: break;
      00075B 20 0D            [ 2] 1533 	jra	00109$
                                   1534 ;	main.c: 491: case 5:
      00075D                       1535 00105$:
                                   1536 ;	main.c: 492: cm_ST();
      00075D CDr05rF6         [ 4] 1537 	call	_cm_ST
                                   1538 ;	main.c: 493: break;
      000760 20 08            [ 2] 1539 	jra	00109$
                                   1540 ;	main.c: 494: case 6:
      000762                       1541 00106$:
                                   1542 ;	main.c: 495: cm_RM();
      000762 CDr05rE9         [ 4] 1543 	call	_cm_RM
                                   1544 ;	main.c: 496: break;
      000765 20 03            [ 2] 1545 	jra	00109$
                                   1546 ;	main.c: 497: case 7:
      000767                       1547 00107$:
                                   1548 ;	main.c: 498: cm_DB();
      000767 CDr05rF3         [ 4] 1549 	call	_cm_DB
                                   1550 ;	main.c: 500: }
      00076A                       1551 00109$:
                                   1552 ;	main.c: 501: }
      00076A 5B 04            [ 2] 1553 	addw	sp, #4
      00076C 81               [ 4] 1554 	ret
                                   1555 ;	main.c: 504: void main(void)
                                   1556 ;	-----------------------------------------
                                   1557 ;	 function main
                                   1558 ;	-----------------------------------------
      00076D                       1559 _main:
                                   1560 ;	main.c: 506: uart_init();
      00076D CDr04rB3         [ 4] 1561 	call	_uart_init
                                   1562 ;	main.c: 507: i2c_init();
      000770 CDr04rD0         [ 4] 1563 	call	_i2c_init
                                   1564 ;	main.c: 508: uart_write("SS\n");
      000773 AEr00rCE         [ 2] 1565 	ldw	x, #(___str_31+0)
      000776 CDr00r40         [ 4] 1566 	call	_uart_write
                                   1567 ;	main.c: 509: while(1)
      000779                       1568 00102$:
                                   1569 ;	main.c: 511: uart_read();
      000779 CDr00r6B         [ 4] 1570 	call	_uart_read
                                   1571 ;	main.c: 512: command_switcher();
      00077C CDr07r1F         [ 4] 1572 	call	_command_switcher
      00077F 20 F8            [ 2] 1573 	jra	00102$
                                   1574 ;	main.c: 514: }
      000781 81               [ 4] 1575 	ret
                                   1576 	.area CODE
                                   1577 	.area CONST
                                   1578 	.area CONST
      000000                       1579 ___str_0:
      000000 62 75 66 20 63 6F 75  1580 	.ascii "buf count -> "
             6E 74 20 2D 3E 20
      00000D 00                    1581 	.db 0x00
                                   1582 	.area CODE
                                   1583 	.area CONST
      00000E                       1584 ___str_1:
      00000E 20 3C 2D              1585 	.ascii " <-"
      000011 0A                    1586 	.db 0x0a
      000012 00                    1587 	.db 0x00
                                   1588 	.area CODE
                                   1589 	.area CONST
      000013                       1590 ___str_2:
      000013 0A                    1591 	.db 0x0a
      000014 49 32 43 5F 52 45 47  1592 	.ascii "I2C_REGS >.<"
             53 20 3E 2E 3C
      000020 0A                    1593 	.db 0x0a
      000021 00                    1594 	.db 0x00
                                   1595 	.area CODE
                                   1596 	.area CONST
      000022                       1597 ___str_3:
      000022 0A                    1598 	.db 0x0a
      000023 53 52 31 20 2D 3E 20  1599 	.ascii "SR1 -> "
      00002A 00                    1600 	.db 0x00
                                   1601 	.area CODE
                                   1602 	.area CONST
      00002B                       1603 ___str_4:
      00002B 53 52 32 20 2D 3E 20  1604 	.ascii "SR2 -> "
      000032 00                    1605 	.db 0x00
                                   1606 	.area CODE
                                   1607 	.area CONST
      000033                       1608 ___str_5:
      000033 53 52 33 20 2D 3E 20  1609 	.ascii "SR3 -> "
      00003A 00                    1610 	.db 0x00
                                   1611 	.area CODE
                                   1612 	.area CONST
      00003B                       1613 ___str_6:
      00003B 43 52 31 20 2D 3E 20  1614 	.ascii "CR1 -> "
      000042 00                    1615 	.db 0x00
                                   1616 	.area CODE
                                   1617 	.area CONST
      000043                       1618 ___str_7:
      000043 43 52 32 20 2D 3E 20  1619 	.ascii "CR2 -> "
      00004A 00                    1620 	.db 0x00
                                   1621 	.area CODE
                                   1622 	.area CONST
      00004B                       1623 ___str_8:
      00004B 44 52 20 2D 3E 20     1624 	.ascii "DR -> "
      000051 00                    1625 	.db 0x00
                                   1626 	.area CODE
                                   1627 	.area CONST
      000052                       1628 ___str_9:
      000052 55 41 52 54 5F 52 45  1629 	.ascii "UART_REGS >.<"
             47 53 20 3E 2E 3C
      00005F 0A                    1630 	.db 0x0a
      000060 00                    1631 	.db 0x00
                                   1632 	.area CODE
                                   1633 	.area CONST
      000061                       1634 ___str_10:
      000061 0A                    1635 	.db 0x0a
      000062 53 52 20 2D 3E 20     1636 	.ascii "SR -> "
      000068 00                    1637 	.db 0x00
                                   1638 	.area CODE
                                   1639 	.area CONST
      000069                       1640 ___str_11:
      000069 42 52 52 31 20 2D 3E  1641 	.ascii "BRR1 -> "
             20
      000071 00                    1642 	.db 0x00
                                   1643 	.area CODE
                                   1644 	.area CONST
      000072                       1645 ___str_12:
      000072 42 52 52 32 20 2D 3E  1646 	.ascii "BRR2 -> "
             20
      00007A 00                    1647 	.db 0x00
                                   1648 	.area CODE
                                   1649 	.area CONST
      00007B                       1650 ___str_13:
      00007B 43 52 33 20 2D 3E 20  1651 	.ascii "CR3 -> "
      000082 00                    1652 	.db 0x00
                                   1653 	.area CODE
                                   1654 	.area CONST
      000083                       1655 ___str_14:
      000083 43 52 34 20 2D 3E 20  1656 	.ascii "CR4 -> "
      00008A 00                    1657 	.db 0x00
                                   1658 	.area CODE
                                   1659 	.area CONST
      00008B                       1660 ___str_15:
      00008B 43 52 35 20 2D 3E 20  1661 	.ascii "CR5 -> "
      000092 00                    1662 	.db 0x00
                                   1663 	.area CODE
                                   1664 	.area CONST
      000093                       1665 ___str_16:
      000093 47 54 52 20 2D 3E 20  1666 	.ascii "GTR -> "
      00009A 00                    1667 	.db 0x00
                                   1668 	.area CODE
                                   1669 	.area CONST
      00009B                       1670 ___str_17:
      00009B 50 53 43 52 20 2D 3E  1671 	.ascii "PSCR -> "
             20
      0000A3 00                    1672 	.db 0x00
                                   1673 	.area CODE
                                   1674 	.area CONST
      0000A4                       1675 ___str_18:
      0000A4 53 4D 20              1676 	.ascii "SM "
      0000A7 00                    1677 	.db 0x00
                                   1678 	.area CODE
                                   1679 	.area CONST
      0000A8                       1680 ___str_19:
      0000A8 0D                    1681 	.db 0x0d
      0000A9 0A                    1682 	.db 0x0a
      0000AA 00                    1683 	.db 0x00
                                   1684 	.area CODE
                                   1685 	.area CONST
      0000AB                       1686 ___str_20:
      0000AB 52 4D                 1687 	.ascii "RM"
      0000AD 0A                    1688 	.db 0x0a
      0000AE 00                    1689 	.db 0x00
                                   1690 	.area CODE
                                   1691 	.area CONST
      0000AF                       1692 ___str_21:
      0000AF 53 54                 1693 	.ascii "ST"
      0000B1 0A                    1694 	.db 0x0a
      0000B2 00                    1695 	.db 0x00
                                   1696 	.area CODE
                                   1697 	.area CONST
      0000B3                       1698 ___str_22:
      0000B3 53 57 20              1699 	.ascii "SW "
      0000B6 00                    1700 	.db 0x00
                                   1701 	.area CODE
                                   1702 	.area CONST
      0000B7                       1703 ___str_23:
      0000B7 20                    1704 	.ascii " "
      0000B8 00                    1705 	.db 0x00
                                   1706 	.area CODE
                                   1707 	.area CONST
      0000B9                       1708 ___str_24:
      0000B9 53 4D                 1709 	.ascii "SM"
      0000BB 00                    1710 	.db 0x00
                                   1711 	.area CODE
                                   1712 	.area CONST
      0000BC                       1713 ___str_25:
      0000BC 53 4E                 1714 	.ascii "SN"
      0000BE 00                    1715 	.db 0x00
                                   1716 	.area CODE
                                   1717 	.area CONST
      0000BF                       1718 ___str_26:
      0000BF 53 54                 1719 	.ascii "ST"
      0000C1 00                    1720 	.db 0x00
                                   1721 	.area CODE
                                   1722 	.area CONST
      0000C2                       1723 ___str_27:
      0000C2 52 4D                 1724 	.ascii "RM"
      0000C4 00                    1725 	.db 0x00
                                   1726 	.area CODE
                                   1727 	.area CONST
      0000C5                       1728 ___str_28:
      0000C5 44 42                 1729 	.ascii "DB"
      0000C7 00                    1730 	.db 0x00
                                   1731 	.area CODE
                                   1732 	.area CONST
      0000C8                       1733 ___str_29:
      0000C8 53 52                 1734 	.ascii "SR"
      0000CA 00                    1735 	.db 0x00
                                   1736 	.area CODE
                                   1737 	.area CONST
      0000CB                       1738 ___str_30:
      0000CB 53 57                 1739 	.ascii "SW"
      0000CD 00                    1740 	.db 0x00
                                   1741 	.area CODE
                                   1742 	.area CONST
      0000CE                       1743 ___str_31:
      0000CE 53 53                 1744 	.ascii "SS"
      0000D0 0A                    1745 	.db 0x0a
      0000D1 00                    1746 	.db 0x00
                                   1747 	.area CODE
                                   1748 	.area INITIALIZER
      000000                       1749 __xinit__buffer:
      000000 00                    1750 	.db #0x00	; 0
      000001 00                    1751 	.db 0x00
      000002 00                    1752 	.db 0x00
      000003 00                    1753 	.db 0x00
      000004 00                    1754 	.db 0x00
      000005 00                    1755 	.db 0x00
      000006 00                    1756 	.db 0x00
      000007 00                    1757 	.db 0x00
      000008 00                    1758 	.db 0x00
      000009 00                    1759 	.db 0x00
      00000A 00                    1760 	.db 0x00
      00000B 00                    1761 	.db 0x00
      00000C 00                    1762 	.db 0x00
      00000D 00                    1763 	.db 0x00
      00000E 00                    1764 	.db 0x00
      00000F 00                    1765 	.db 0x00
      000010 00                    1766 	.db 0x00
      000011 00                    1767 	.db 0x00
      000012 00                    1768 	.db 0x00
      000013 00                    1769 	.db 0x00
      000014 00                    1770 	.db 0x00
      000015 00                    1771 	.db 0x00
      000016 00                    1772 	.db 0x00
      000017 00                    1773 	.db 0x00
      000018 00                    1774 	.db 0x00
      000019 00                    1775 	.db 0x00
      00001A 00                    1776 	.db 0x00
      00001B 00                    1777 	.db 0x00
      00001C 00                    1778 	.db 0x00
      00001D 00                    1779 	.db 0x00
      00001E 00                    1780 	.db 0x00
      00001F 00                    1781 	.db 0x00
      000020 00                    1782 	.db 0x00
      000021 00                    1783 	.db 0x00
      000022 00                    1784 	.db 0x00
      000023 00                    1785 	.db 0x00
      000024 00                    1786 	.db 0x00
      000025 00                    1787 	.db 0x00
      000026 00                    1788 	.db 0x00
      000027 00                    1789 	.db 0x00
      000028 00                    1790 	.db 0x00
      000029 00                    1791 	.db 0x00
      00002A 00                    1792 	.db 0x00
      00002B 00                    1793 	.db 0x00
      00002C 00                    1794 	.db 0x00
      00002D 00                    1795 	.db 0x00
      00002E 00                    1796 	.db 0x00
      00002F 00                    1797 	.db 0x00
      000030 00                    1798 	.db 0x00
      000031 00                    1799 	.db 0x00
      000032 00                    1800 	.db 0x00
      000033 00                    1801 	.db 0x00
      000034 00                    1802 	.db 0x00
      000035 00                    1803 	.db 0x00
      000036 00                    1804 	.db 0x00
      000037 00                    1805 	.db 0x00
      000038 00                    1806 	.db 0x00
      000039 00                    1807 	.db 0x00
      00003A 00                    1808 	.db 0x00
      00003B 00                    1809 	.db 0x00
      00003C 00                    1810 	.db 0x00
      00003D 00                    1811 	.db 0x00
      00003E 00                    1812 	.db 0x00
      00003F 00                    1813 	.db 0x00
      000040 00                    1814 	.db 0x00
      000041 00                    1815 	.db 0x00
      000042 00                    1816 	.db 0x00
      000043 00                    1817 	.db 0x00
      000044 00                    1818 	.db 0x00
      000045 00                    1819 	.db 0x00
      000046 00                    1820 	.db 0x00
      000047 00                    1821 	.db 0x00
      000048 00                    1822 	.db 0x00
      000049 00                    1823 	.db 0x00
      00004A 00                    1824 	.db 0x00
      00004B 00                    1825 	.db 0x00
      00004C 00                    1826 	.db 0x00
      00004D 00                    1827 	.db 0x00
      00004E 00                    1828 	.db 0x00
      00004F 00                    1829 	.db 0x00
      000050 00                    1830 	.db 0x00
      000051 00                    1831 	.db 0x00
      000052 00                    1832 	.db 0x00
      000053 00                    1833 	.db 0x00
      000054 00                    1834 	.db 0x00
      000055 00                    1835 	.db 0x00
      000056 00                    1836 	.db 0x00
      000057 00                    1837 	.db 0x00
      000058 00                    1838 	.db 0x00
      000059 00                    1839 	.db 0x00
      00005A 00                    1840 	.db 0x00
      00005B 00                    1841 	.db 0x00
      00005C 00                    1842 	.db 0x00
      00005D 00                    1843 	.db 0x00
      00005E 00                    1844 	.db 0x00
      00005F 00                    1845 	.db 0x00
      000060 00                    1846 	.db 0x00
      000061 00                    1847 	.db 0x00
      000062 00                    1848 	.db 0x00
      000063 00                    1849 	.db 0x00
      000064 00                    1850 	.db 0x00
      000065 00                    1851 	.db 0x00
      000066 00                    1852 	.db 0x00
      000067 00                    1853 	.db 0x00
      000068 00                    1854 	.db 0x00
      000069 00                    1855 	.db 0x00
      00006A 00                    1856 	.db 0x00
      00006B 00                    1857 	.db 0x00
      00006C 00                    1858 	.db 0x00
      00006D 00                    1859 	.db 0x00
      00006E 00                    1860 	.db 0x00
      00006F 00                    1861 	.db 0x00
      000070 00                    1862 	.db 0x00
      000071 00                    1863 	.db 0x00
      000072 00                    1864 	.db 0x00
      000073 00                    1865 	.db 0x00
      000074 00                    1866 	.db 0x00
      000075 00                    1867 	.db 0x00
      000076 00                    1868 	.db 0x00
      000077 00                    1869 	.db 0x00
      000078 00                    1870 	.db 0x00
      000079 00                    1871 	.db 0x00
      00007A 00                    1872 	.db 0x00
      00007B 00                    1873 	.db 0x00
      00007C 00                    1874 	.db 0x00
      00007D 00                    1875 	.db 0x00
      00007E 00                    1876 	.db 0x00
      00007F 00                    1877 	.db 0x00
      000080 00                    1878 	.db 0x00
      000081 00                    1879 	.db 0x00
      000082 00                    1880 	.db 0x00
      000083 00                    1881 	.db 0x00
      000084 00                    1882 	.db 0x00
      000085 00                    1883 	.db 0x00
      000086 00                    1884 	.db 0x00
      000087 00                    1885 	.db 0x00
      000088 00                    1886 	.db 0x00
      000089 00                    1887 	.db 0x00
      00008A 00                    1888 	.db 0x00
      00008B 00                    1889 	.db 0x00
      00008C 00                    1890 	.db 0x00
      00008D 00                    1891 	.db 0x00
      00008E 00                    1892 	.db 0x00
      00008F 00                    1893 	.db 0x00
      000090 00                    1894 	.db 0x00
      000091 00                    1895 	.db 0x00
      000092 00                    1896 	.db 0x00
      000093 00                    1897 	.db 0x00
      000094 00                    1898 	.db 0x00
      000095 00                    1899 	.db 0x00
      000096 00                    1900 	.db 0x00
      000097 00                    1901 	.db 0x00
      000098 00                    1902 	.db 0x00
      000099 00                    1903 	.db 0x00
      00009A 00                    1904 	.db 0x00
      00009B 00                    1905 	.db 0x00
      00009C 00                    1906 	.db 0x00
      00009D 00                    1907 	.db 0x00
      00009E 00                    1908 	.db 0x00
      00009F 00                    1909 	.db 0x00
      0000A0 00                    1910 	.db 0x00
      0000A1 00                    1911 	.db 0x00
      0000A2 00                    1912 	.db 0x00
      0000A3 00                    1913 	.db 0x00
      0000A4 00                    1914 	.db 0x00
      0000A5 00                    1915 	.db 0x00
      0000A6 00                    1916 	.db 0x00
      0000A7 00                    1917 	.db 0x00
      0000A8 00                    1918 	.db 0x00
      0000A9 00                    1919 	.db 0x00
      0000AA 00                    1920 	.db 0x00
      0000AB 00                    1921 	.db 0x00
      0000AC 00                    1922 	.db 0x00
      0000AD 00                    1923 	.db 0x00
      0000AE 00                    1924 	.db 0x00
      0000AF 00                    1925 	.db 0x00
      0000B0 00                    1926 	.db 0x00
      0000B1 00                    1927 	.db 0x00
      0000B2 00                    1928 	.db 0x00
      0000B3 00                    1929 	.db 0x00
      0000B4 00                    1930 	.db 0x00
      0000B5 00                    1931 	.db 0x00
      0000B6 00                    1932 	.db 0x00
      0000B7 00                    1933 	.db 0x00
      0000B8 00                    1934 	.db 0x00
      0000B9 00                    1935 	.db 0x00
      0000BA 00                    1936 	.db 0x00
      0000BB 00                    1937 	.db 0x00
      0000BC 00                    1938 	.db 0x00
      0000BD 00                    1939 	.db 0x00
      0000BE 00                    1940 	.db 0x00
      0000BF 00                    1941 	.db 0x00
      0000C0 00                    1942 	.db 0x00
      0000C1 00                    1943 	.db 0x00
      0000C2 00                    1944 	.db 0x00
      0000C3 00                    1945 	.db 0x00
      0000C4 00                    1946 	.db 0x00
      0000C5 00                    1947 	.db 0x00
      0000C6 00                    1948 	.db 0x00
      0000C7 00                    1949 	.db 0x00
      0000C8 00                    1950 	.db 0x00
      0000C9 00                    1951 	.db 0x00
      0000CA 00                    1952 	.db 0x00
      0000CB 00                    1953 	.db 0x00
      0000CC 00                    1954 	.db 0x00
      0000CD 00                    1955 	.db 0x00
      0000CE 00                    1956 	.db 0x00
      0000CF 00                    1957 	.db 0x00
      0000D0 00                    1958 	.db 0x00
      0000D1 00                    1959 	.db 0x00
      0000D2 00                    1960 	.db 0x00
      0000D3 00                    1961 	.db 0x00
      0000D4 00                    1962 	.db 0x00
      0000D5 00                    1963 	.db 0x00
      0000D6 00                    1964 	.db 0x00
      0000D7 00                    1965 	.db 0x00
      0000D8 00                    1966 	.db 0x00
      0000D9 00                    1967 	.db 0x00
      0000DA 00                    1968 	.db 0x00
      0000DB 00                    1969 	.db 0x00
      0000DC 00                    1970 	.db 0x00
      0000DD 00                    1971 	.db 0x00
      0000DE 00                    1972 	.db 0x00
      0000DF 00                    1973 	.db 0x00
      0000E0 00                    1974 	.db 0x00
      0000E1 00                    1975 	.db 0x00
      0000E2 00                    1976 	.db 0x00
      0000E3 00                    1977 	.db 0x00
      0000E4 00                    1978 	.db 0x00
      0000E5 00                    1979 	.db 0x00
      0000E6 00                    1980 	.db 0x00
      0000E7 00                    1981 	.db 0x00
      0000E8 00                    1982 	.db 0x00
      0000E9 00                    1983 	.db 0x00
      0000EA 00                    1984 	.db 0x00
      0000EB 00                    1985 	.db 0x00
      0000EC 00                    1986 	.db 0x00
      0000ED 00                    1987 	.db 0x00
      0000EE 00                    1988 	.db 0x00
      0000EF 00                    1989 	.db 0x00
      0000F0 00                    1990 	.db 0x00
      0000F1 00                    1991 	.db 0x00
      0000F2 00                    1992 	.db 0x00
      0000F3 00                    1993 	.db 0x00
      0000F4 00                    1994 	.db 0x00
      0000F5 00                    1995 	.db 0x00
      0000F6 00                    1996 	.db 0x00
      0000F7 00                    1997 	.db 0x00
      0000F8 00                    1998 	.db 0x00
      0000F9 00                    1999 	.db 0x00
      0000FA 00                    2000 	.db 0x00
      0000FB 00                    2001 	.db 0x00
      0000FC 00                    2002 	.db 0x00
      0000FD 00                    2003 	.db 0x00
      0000FE 00                    2004 	.db 0x00
      0000FF 00                    2005 	.db 0x00
      000100                       2006 __xinit__a:
      000100 00                    2007 	.db #0x00	; 0
      000101 00                    2008 	.db 0x00
      000102 00                    2009 	.db 0x00
      000103                       2010 __xinit__d_addr:
      000103 00                    2011 	.db #0x00	; 0
      000104                       2012 __xinit__p_size:
      000104 00                    2013 	.db #0x00	; 0
      000105                       2014 __xinit__d_size:
      000105 00                    2015 	.db #0x00	; 0
      000106                       2016 __xinit__p_bytes:
      000106 00                    2017 	.db #0x00	; 0
      000107                       2018 __xinit__data_buf:
      000107 00                    2019 	.db #0x00	; 0
      000108 00                    2020 	.db 0x00
      000109 00                    2021 	.db 0x00
      00010A 00                    2022 	.db 0x00
      00010B 00                    2023 	.db 0x00
      00010C 00                    2024 	.db 0x00
      00010D 00                    2025 	.db 0x00
      00010E 00                    2026 	.db 0x00
      00010F 00                    2027 	.db 0x00
      000110 00                    2028 	.db 0x00
      000111 00                    2029 	.db 0x00
      000112 00                    2030 	.db 0x00
      000113 00                    2031 	.db 0x00
      000114 00                    2032 	.db 0x00
      000115 00                    2033 	.db 0x00
      000116 00                    2034 	.db 0x00
      000117 00                    2035 	.db 0x00
      000118 00                    2036 	.db 0x00
      000119 00                    2037 	.db 0x00
      00011A 00                    2038 	.db 0x00
      00011B 00                    2039 	.db 0x00
      00011C 00                    2040 	.db 0x00
      00011D 00                    2041 	.db 0x00
      00011E 00                    2042 	.db 0x00
      00011F 00                    2043 	.db 0x00
      000120 00                    2044 	.db 0x00
      000121 00                    2045 	.db 0x00
      000122 00                    2046 	.db 0x00
      000123 00                    2047 	.db 0x00
      000124 00                    2048 	.db 0x00
      000125 00                    2049 	.db 0x00
      000126 00                    2050 	.db 0x00
      000127 00                    2051 	.db 0x00
      000128 00                    2052 	.db 0x00
      000129 00                    2053 	.db 0x00
      00012A 00                    2054 	.db 0x00
      00012B 00                    2055 	.db 0x00
      00012C 00                    2056 	.db 0x00
      00012D 00                    2057 	.db 0x00
      00012E 00                    2058 	.db 0x00
      00012F 00                    2059 	.db 0x00
      000130 00                    2060 	.db 0x00
      000131 00                    2061 	.db 0x00
      000132 00                    2062 	.db 0x00
      000133 00                    2063 	.db 0x00
      000134 00                    2064 	.db 0x00
      000135 00                    2065 	.db 0x00
      000136 00                    2066 	.db 0x00
      000137 00                    2067 	.db 0x00
      000138 00                    2068 	.db 0x00
      000139 00                    2069 	.db 0x00
      00013A 00                    2070 	.db 0x00
      00013B 00                    2071 	.db 0x00
      00013C 00                    2072 	.db 0x00
      00013D 00                    2073 	.db 0x00
      00013E 00                    2074 	.db 0x00
      00013F 00                    2075 	.db 0x00
      000140 00                    2076 	.db 0x00
      000141 00                    2077 	.db 0x00
      000142 00                    2078 	.db 0x00
      000143 00                    2079 	.db 0x00
      000144 00                    2080 	.db 0x00
      000145 00                    2081 	.db 0x00
      000146 00                    2082 	.db 0x00
      000147 00                    2083 	.db 0x00
      000148 00                    2084 	.db 0x00
      000149 00                    2085 	.db 0x00
      00014A 00                    2086 	.db 0x00
      00014B 00                    2087 	.db 0x00
      00014C 00                    2088 	.db 0x00
      00014D 00                    2089 	.db 0x00
      00014E 00                    2090 	.db 0x00
      00014F 00                    2091 	.db 0x00
      000150 00                    2092 	.db 0x00
      000151 00                    2093 	.db 0x00
      000152 00                    2094 	.db 0x00
      000153 00                    2095 	.db 0x00
      000154 00                    2096 	.db 0x00
      000155 00                    2097 	.db 0x00
      000156 00                    2098 	.db 0x00
      000157 00                    2099 	.db 0x00
      000158 00                    2100 	.db 0x00
      000159 00                    2101 	.db 0x00
      00015A 00                    2102 	.db 0x00
      00015B 00                    2103 	.db 0x00
      00015C 00                    2104 	.db 0x00
      00015D 00                    2105 	.db 0x00
      00015E 00                    2106 	.db 0x00
      00015F 00                    2107 	.db 0x00
      000160 00                    2108 	.db 0x00
      000161 00                    2109 	.db 0x00
      000162 00                    2110 	.db 0x00
      000163 00                    2111 	.db 0x00
      000164 00                    2112 	.db 0x00
      000165 00                    2113 	.db 0x00
      000166 00                    2114 	.db 0x00
      000167 00                    2115 	.db 0x00
      000168 00                    2116 	.db 0x00
      000169 00                    2117 	.db 0x00
      00016A 00                    2118 	.db 0x00
      00016B 00                    2119 	.db 0x00
      00016C 00                    2120 	.db 0x00
      00016D 00                    2121 	.db 0x00
      00016E 00                    2122 	.db 0x00
      00016F 00                    2123 	.db 0x00
      000170 00                    2124 	.db 0x00
      000171 00                    2125 	.db 0x00
      000172 00                    2126 	.db 0x00
      000173 00                    2127 	.db 0x00
      000174 00                    2128 	.db 0x00
      000175 00                    2129 	.db 0x00
      000176 00                    2130 	.db 0x00
      000177 00                    2131 	.db 0x00
      000178 00                    2132 	.db 0x00
      000179 00                    2133 	.db 0x00
      00017A 00                    2134 	.db 0x00
      00017B 00                    2135 	.db 0x00
      00017C 00                    2136 	.db 0x00
      00017D 00                    2137 	.db 0x00
      00017E 00                    2138 	.db 0x00
      00017F 00                    2139 	.db 0x00
      000180 00                    2140 	.db 0x00
      000181 00                    2141 	.db 0x00
      000182 00                    2142 	.db 0x00
      000183 00                    2143 	.db 0x00
      000184 00                    2144 	.db 0x00
      000185 00                    2145 	.db 0x00
      000186 00                    2146 	.db 0x00
      000187 00                    2147 	.db 0x00
      000188 00                    2148 	.db 0x00
      000189 00                    2149 	.db 0x00
      00018A 00                    2150 	.db 0x00
      00018B 00                    2151 	.db 0x00
      00018C 00                    2152 	.db 0x00
      00018D 00                    2153 	.db 0x00
      00018E 00                    2154 	.db 0x00
      00018F 00                    2155 	.db 0x00
      000190 00                    2156 	.db 0x00
      000191 00                    2157 	.db 0x00
      000192 00                    2158 	.db 0x00
      000193 00                    2159 	.db 0x00
      000194 00                    2160 	.db 0x00
      000195 00                    2161 	.db 0x00
      000196 00                    2162 	.db 0x00
      000197 00                    2163 	.db 0x00
      000198 00                    2164 	.db 0x00
      000199 00                    2165 	.db 0x00
      00019A 00                    2166 	.db 0x00
      00019B 00                    2167 	.db 0x00
      00019C 00                    2168 	.db 0x00
      00019D 00                    2169 	.db 0x00
      00019E 00                    2170 	.db 0x00
      00019F 00                    2171 	.db 0x00
      0001A0 00                    2172 	.db 0x00
      0001A1 00                    2173 	.db 0x00
      0001A2 00                    2174 	.db 0x00
      0001A3 00                    2175 	.db 0x00
      0001A4 00                    2176 	.db 0x00
      0001A5 00                    2177 	.db 0x00
      0001A6 00                    2178 	.db 0x00
      0001A7 00                    2179 	.db 0x00
      0001A8 00                    2180 	.db 0x00
      0001A9 00                    2181 	.db 0x00
      0001AA 00                    2182 	.db 0x00
      0001AB 00                    2183 	.db 0x00
      0001AC 00                    2184 	.db 0x00
      0001AD 00                    2185 	.db 0x00
      0001AE 00                    2186 	.db 0x00
      0001AF 00                    2187 	.db 0x00
      0001B0 00                    2188 	.db 0x00
      0001B1 00                    2189 	.db 0x00
      0001B2 00                    2190 	.db 0x00
      0001B3 00                    2191 	.db 0x00
      0001B4 00                    2192 	.db 0x00
      0001B5 00                    2193 	.db 0x00
      0001B6 00                    2194 	.db 0x00
      0001B7 00                    2195 	.db 0x00
      0001B8 00                    2196 	.db 0x00
      0001B9 00                    2197 	.db 0x00
      0001BA 00                    2198 	.db 0x00
      0001BB 00                    2199 	.db 0x00
      0001BC 00                    2200 	.db 0x00
      0001BD 00                    2201 	.db 0x00
      0001BE 00                    2202 	.db 0x00
      0001BF 00                    2203 	.db 0x00
      0001C0 00                    2204 	.db 0x00
      0001C1 00                    2205 	.db 0x00
      0001C2 00                    2206 	.db 0x00
      0001C3 00                    2207 	.db 0x00
      0001C4 00                    2208 	.db 0x00
      0001C5 00                    2209 	.db 0x00
      0001C6 00                    2210 	.db 0x00
      0001C7 00                    2211 	.db 0x00
      0001C8 00                    2212 	.db 0x00
      0001C9 00                    2213 	.db 0x00
      0001CA 00                    2214 	.db 0x00
      0001CB 00                    2215 	.db 0x00
      0001CC 00                    2216 	.db 0x00
      0001CD 00                    2217 	.db 0x00
      0001CE 00                    2218 	.db 0x00
      0001CF 00                    2219 	.db 0x00
      0001D0 00                    2220 	.db 0x00
      0001D1 00                    2221 	.db 0x00
      0001D2 00                    2222 	.db 0x00
      0001D3 00                    2223 	.db 0x00
      0001D4 00                    2224 	.db 0x00
      0001D5 00                    2225 	.db 0x00
      0001D6 00                    2226 	.db 0x00
      0001D7 00                    2227 	.db 0x00
      0001D8 00                    2228 	.db 0x00
      0001D9 00                    2229 	.db 0x00
      0001DA 00                    2230 	.db 0x00
      0001DB 00                    2231 	.db 0x00
      0001DC 00                    2232 	.db 0x00
      0001DD 00                    2233 	.db 0x00
      0001DE 00                    2234 	.db 0x00
      0001DF 00                    2235 	.db 0x00
      0001E0 00                    2236 	.db 0x00
      0001E1 00                    2237 	.db 0x00
      0001E2 00                    2238 	.db 0x00
      0001E3 00                    2239 	.db 0x00
      0001E4 00                    2240 	.db 0x00
      0001E5 00                    2241 	.db 0x00
      0001E6 00                    2242 	.db 0x00
      0001E7 00                    2243 	.db 0x00
      0001E8 00                    2244 	.db 0x00
      0001E9 00                    2245 	.db 0x00
      0001EA 00                    2246 	.db 0x00
      0001EB 00                    2247 	.db 0x00
      0001EC 00                    2248 	.db 0x00
      0001ED 00                    2249 	.db 0x00
      0001EE 00                    2250 	.db 0x00
      0001EF 00                    2251 	.db 0x00
      0001F0 00                    2252 	.db 0x00
      0001F1 00                    2253 	.db 0x00
      0001F2 00                    2254 	.db 0x00
      0001F3 00                    2255 	.db 0x00
      0001F4 00                    2256 	.db 0x00
      0001F5 00                    2257 	.db 0x00
      0001F6 00                    2258 	.db 0x00
      0001F7 00                    2259 	.db 0x00
      0001F8 00                    2260 	.db 0x00
      0001F9 00                    2261 	.db 0x00
      0001FA 00                    2262 	.db 0x00
      0001FB 00                    2263 	.db 0x00
      0001FC 00                    2264 	.db 0x00
      0001FD 00                    2265 	.db 0x00
      0001FE 00                    2266 	.db 0x00
      0001FF 00                    2267 	.db 0x00
      000200 00                    2268 	.db 0x00
      000201 00                    2269 	.db 0x00
      000202 00                    2270 	.db 0x00
      000203 00                    2271 	.db 0x00
      000204 00                    2272 	.db 0x00
      000205 00                    2273 	.db 0x00
      000206 00                    2274 	.db 0x00
      000207                       2275 __xinit__current_dev:
      000207 00                    2276 	.db #0x00	; 0
                                   2277 	.area CABS (ABS)
