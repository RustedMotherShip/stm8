                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.3.0 #14184 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _uart_read
                                     13 	.globl _i2c_scan
                                     14 	.globl _i2c_stop
                                     15 	.globl _i2c_send_address
                                     16 	.globl _i2c_start
                                     17 	.globl _i2c_init
                                     18 	.globl _uart_init
                                     19 	.globl _status_check
                                     20 	.globl _convert_int_to_binary
                                     21 	.globl _convert_int_to_chars
                                     22 	.globl _uart_write
                                     23 	.globl _delay
                                     24 	.globl _strlen
                                     25 	.globl _current_dev
                                     26 	.globl _buffer
                                     27 ;--------------------------------------------------------
                                     28 ; ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area DATA
                                     31 ;--------------------------------------------------------
                                     32 ; ram data
                                     33 ;--------------------------------------------------------
                                     34 	.area INITIALIZED
      000000                         35 _buffer::
      000000                         36 	.ds 256
      000100                         37 _current_dev::
      000100                         38 	.ds 1
                                     39 ;--------------------------------------------------------
                                     40 ; Stack segment in internal ram
                                     41 ;--------------------------------------------------------
                                     42 	.area SSEG
      000000                         43 __start__stack:
      000000                         44 	.ds	1
                                     45 
                                     46 ;--------------------------------------------------------
                                     47 ; absolute external ram data
                                     48 ;--------------------------------------------------------
                                     49 	.area DABS (ABS)
                                     50 
                                     51 ; default segment ordering for linker
                                     52 	.area HOME
                                     53 	.area GSINIT
                                     54 	.area GSFINAL
                                     55 	.area CONST
                                     56 	.area INITIALIZER
                                     57 	.area CODE
                                     58 
                                     59 ;--------------------------------------------------------
                                     60 ; interrupt vector
                                     61 ;--------------------------------------------------------
                                     62 	.area HOME
      000000                         63 __interrupt_vect:
      000000 82v00u00u00             64 	int s_GSINIT ; reset
                                     65 ;--------------------------------------------------------
                                     66 ; global & static initialisations
                                     67 ;--------------------------------------------------------
                                     68 	.area HOME
                                     69 	.area GSINIT
                                     70 	.area GSFINAL
                                     71 	.area GSINIT
      000000 CDr00r00         [ 4]   72 	call	___sdcc_external_startup
      000003 4D               [ 1]   73 	tnz	a
      000004 27 03            [ 1]   74 	jreq	__sdcc_init_data
      000006 CCr00r04         [ 2]   75 	jp	__sdcc_program_startup
      000009                         76 __sdcc_init_data:
                                     77 ; stm8_genXINIT() start
      000009 AEr00r00         [ 2]   78 	ldw x, #l_DATA
      00000C 27 07            [ 1]   79 	jreq	00002$
      00000E                         80 00001$:
      00000E 72 4FuFFuFF      [ 1]   81 	clr (s_DATA - 1, x)
      000012 5A               [ 2]   82 	decw x
      000013 26 F9            [ 1]   83 	jrne	00001$
      000015                         84 00002$:
      000015 AEr00r00         [ 2]   85 	ldw	x, #l_INITIALIZER
      000018 27 09            [ 1]   86 	jreq	00004$
      00001A                         87 00003$:
      00001A D6uFFuFF         [ 1]   88 	ld	a, (s_INITIALIZER - 1, x)
      00001D D7uFFuFF         [ 1]   89 	ld	(s_INITIALIZED - 1, x), a
      000020 5A               [ 2]   90 	decw	x
      000021 26 F7            [ 1]   91 	jrne	00003$
      000023                         92 00004$:
                                     93 ; stm8_genXINIT() end
                                     94 	.area GSFINAL
      000000 CCr00r04         [ 2]   95 	jp	__sdcc_program_startup
                                     96 ;--------------------------------------------------------
                                     97 ; Home
                                     98 ;--------------------------------------------------------
                                     99 	.area HOME
                                    100 	.area HOME
      000004                        101 __sdcc_program_startup:
      000004 CCr03r45         [ 2]  102 	jp	_main
                                    103 ;	return from main will return to caller
                                    104 ;--------------------------------------------------------
                                    105 ; code
                                    106 ;--------------------------------------------------------
                                    107 	.area CODE
                                    108 ;	main.c: 8: void delay(unsigned long count) {
                                    109 ;	-----------------------------------------
                                    110 ;	 function delay
                                    111 ;	-----------------------------------------
      000000                        112 _delay:
      000000 52 08            [ 2]  113 	sub	sp, #8
                                    114 ;	main.c: 9: while (count--)
      000002 16 0D            [ 2]  115 	ldw	y, (0x0d, sp)
      000004 17 07            [ 2]  116 	ldw	(0x07, sp), y
      000006 1E 0B            [ 2]  117 	ldw	x, (0x0b, sp)
      000008                        118 00101$:
      000008 1F 01            [ 2]  119 	ldw	(0x01, sp), x
      00000A 7B 07            [ 1]  120 	ld	a, (0x07, sp)
      00000C 6B 03            [ 1]  121 	ld	(0x03, sp), a
      00000E 7B 08            [ 1]  122 	ld	a, (0x08, sp)
      000010 16 07            [ 2]  123 	ldw	y, (0x07, sp)
      000012 72 A2 00 01      [ 2]  124 	subw	y, #0x0001
      000016 17 07            [ 2]  125 	ldw	(0x07, sp), y
      000018 24 01            [ 1]  126 	jrnc	00117$
      00001A 5A               [ 2]  127 	decw	x
      00001B                        128 00117$:
      00001B 4D               [ 1]  129 	tnz	a
      00001C 26 08            [ 1]  130 	jrne	00118$
      00001E 16 02            [ 2]  131 	ldw	y, (0x02, sp)
      000020 26 04            [ 1]  132 	jrne	00118$
      000022 0D 01            [ 1]  133 	tnz	(0x01, sp)
      000024 27 03            [ 1]  134 	jreq	00104$
      000026                        135 00118$:
                                    136 ;	main.c: 10: nop();
      000026 9D               [ 1]  137 	nop
      000027 20 DF            [ 2]  138 	jra	00101$
      000029                        139 00104$:
                                    140 ;	main.c: 11: }
      000029 1E 09            [ 2]  141 	ldw	x, (9, sp)
      00002B 5B 0E            [ 2]  142 	addw	sp, #14
      00002D FC               [ 2]  143 	jp	(x)
                                    144 ;	main.c: 13: int uart_write(const char *str) {
                                    145 ;	-----------------------------------------
                                    146 ;	 function uart_write
                                    147 ;	-----------------------------------------
      00002E                        148 _uart_write:
      00002E 52 05            [ 2]  149 	sub	sp, #5
      000030 1F 03            [ 2]  150 	ldw	(0x03, sp), x
                                    151 ;	main.c: 15: for(i = 0; i < strlen(str); i++) {
      000032 0F 05            [ 1]  152 	clr	(0x05, sp)
      000034                        153 00106$:
      000034 1E 03            [ 2]  154 	ldw	x, (0x03, sp)
      000036 CDr00r00         [ 4]  155 	call	_strlen
      000039 1F 01            [ 2]  156 	ldw	(0x01, sp), x
      00003B 5F               [ 1]  157 	clrw	x
      00003C 7B 05            [ 1]  158 	ld	a, (0x05, sp)
      00003E 97               [ 1]  159 	ld	xl, a
      00003F 13 01            [ 2]  160 	cpw	x, (0x01, sp)
      000041 24 14            [ 1]  161 	jrnc	00104$
                                    162 ;	main.c: 16: while(!(UART1_SR & UART_SR_TXE)); // !Transmit data register empty
      000043                        163 00101$:
      000043 C6 52 30         [ 1]  164 	ld	a, 0x5230
      000046 2A FB            [ 1]  165 	jrpl	00101$
                                    166 ;	main.c: 17: UART1_DR = str[i];
      000048 5F               [ 1]  167 	clrw	x
      000049 7B 05            [ 1]  168 	ld	a, (0x05, sp)
      00004B 97               [ 1]  169 	ld	xl, a
      00004C 72 FB 03         [ 2]  170 	addw	x, (0x03, sp)
      00004F F6               [ 1]  171 	ld	a, (x)
      000050 C7 52 31         [ 1]  172 	ld	0x5231, a
                                    173 ;	main.c: 15: for(i = 0; i < strlen(str); i++) {
      000053 0C 05            [ 1]  174 	inc	(0x05, sp)
      000055 20 DD            [ 2]  175 	jra	00106$
      000057                        176 00104$:
                                    177 ;	main.c: 19: return(i); // Bytes sent
      000057 7B 05            [ 1]  178 	ld	a, (0x05, sp)
      000059 5F               [ 1]  179 	clrw	x
      00005A 97               [ 1]  180 	ld	xl, a
                                    181 ;	main.c: 20: }
      00005B 5B 05            [ 2]  182 	addw	sp, #5
      00005D 81               [ 4]  183 	ret
                                    184 ;	main.c: 24: void convert_int_to_chars(uint8_t num, char* rx_int_chars) {
                                    185 ;	-----------------------------------------
                                    186 ;	 function convert_int_to_chars
                                    187 ;	-----------------------------------------
      00005E                        188 _convert_int_to_chars:
      00005E 52 0D            [ 2]  189 	sub	sp, #13
      000060 6B 0D            [ 1]  190 	ld	(0x0d, sp), a
      000062 1F 0B            [ 2]  191 	ldw	(0x0b, sp), x
                                    192 ;	main.c: 27: rx_int_chars[0] = num / 100 + '0';
      000064 7B 0D            [ 1]  193 	ld	a, (0x0d, sp)
      000066 6B 02            [ 1]  194 	ld	(0x02, sp), a
      000068 0F 01            [ 1]  195 	clr	(0x01, sp)
                                    196 ;	main.c: 28: rx_int_chars[1] = num / 10 % 10 + '0';
      00006A 1E 0B            [ 2]  197 	ldw	x, (0x0b, sp)
      00006C 5C               [ 1]  198 	incw	x
      00006D 1F 03            [ 2]  199 	ldw	(0x03, sp), x
                                    200 ;	main.c: 29: rx_int_chars[2] = num % 10 + '0';
      00006F 1E 0B            [ 2]  201 	ldw	x, (0x0b, sp)
      000071 5C               [ 1]  202 	incw	x
      000072 5C               [ 1]  203 	incw	x
      000073 1F 05            [ 2]  204 	ldw	(0x05, sp), x
                                    205 ;	main.c: 28: rx_int_chars[1] = num / 10 % 10 + '0';
      000075 4B 0A            [ 1]  206 	push	#0x0a
      000077 4B 00            [ 1]  207 	push	#0x00
      000079 1E 03            [ 2]  208 	ldw	x, (0x03, sp)
                                    209 ;	main.c: 29: rx_int_chars[2] = num % 10 + '0';
      00007B CDr00r00         [ 4]  210 	call	__divsint
      00007E 1F 07            [ 2]  211 	ldw	(0x07, sp), x
      000080 4B 0A            [ 1]  212 	push	#0x0a
      000082 4B 00            [ 1]  213 	push	#0x00
      000084 1E 03            [ 2]  214 	ldw	x, (0x03, sp)
      000086 CDr00r00         [ 4]  215 	call	__modsint
      000089 9F               [ 1]  216 	ld	a, xl
      00008A AB 30            [ 1]  217 	add	a, #0x30
      00008C 6B 09            [ 1]  218 	ld	(0x09, sp), a
                                    219 ;	main.c: 25: if (num > 99) {
      00008E 7B 0D            [ 1]  220 	ld	a, (0x0d, sp)
      000090 A1 63            [ 1]  221 	cp	a, #0x63
      000092 23 29            [ 2]  222 	jrule	00105$
                                    223 ;	main.c: 27: rx_int_chars[0] = num / 100 + '0';
      000094 4B 64            [ 1]  224 	push	#0x64
      000096 4B 00            [ 1]  225 	push	#0x00
      000098 1E 03            [ 2]  226 	ldw	x, (0x03, sp)
      00009A CDr00r00         [ 4]  227 	call	__divsint
      00009D 9F               [ 1]  228 	ld	a, xl
      00009E AB 30            [ 1]  229 	add	a, #0x30
      0000A0 1E 0B            [ 2]  230 	ldw	x, (0x0b, sp)
      0000A2 F7               [ 1]  231 	ld	(x), a
                                    232 ;	main.c: 28: rx_int_chars[1] = num / 10 % 10 + '0';
      0000A3 4B 0A            [ 1]  233 	push	#0x0a
      0000A5 4B 00            [ 1]  234 	push	#0x00
      0000A7 1E 09            [ 2]  235 	ldw	x, (0x09, sp)
      0000A9 CDr00r00         [ 4]  236 	call	__modsint
      0000AC 9F               [ 1]  237 	ld	a, xl
      0000AD AB 30            [ 1]  238 	add	a, #0x30
      0000AF 1E 03            [ 2]  239 	ldw	x, (0x03, sp)
      0000B1 F7               [ 1]  240 	ld	(x), a
                                    241 ;	main.c: 29: rx_int_chars[2] = num % 10 + '0';
      0000B2 1E 05            [ 2]  242 	ldw	x, (0x05, sp)
      0000B4 7B 09            [ 1]  243 	ld	a, (0x09, sp)
      0000B6 F7               [ 1]  244 	ld	(x), a
                                    245 ;	main.c: 30: rx_int_chars[3] ='\0';
      0000B7 1E 0B            [ 2]  246 	ldw	x, (0x0b, sp)
      0000B9 6F 03            [ 1]  247 	clr	(0x0003, x)
      0000BB 20 23            [ 2]  248 	jra	00107$
      0000BD                        249 00105$:
                                    250 ;	main.c: 32: } else if (num > 9) {
      0000BD 7B 0D            [ 1]  251 	ld	a, (0x0d, sp)
      0000BF A1 09            [ 1]  252 	cp	a, #0x09
      0000C1 23 13            [ 2]  253 	jrule	00102$
                                    254 ;	main.c: 34: rx_int_chars[0] = num / 10 + '0';
      0000C3 7B 08            [ 1]  255 	ld	a, (0x08, sp)
      0000C5 6B 0A            [ 1]  256 	ld	(0x0a, sp), a
      0000C7 AB 30            [ 1]  257 	add	a, #0x30
      0000C9 1E 0B            [ 2]  258 	ldw	x, (0x0b, sp)
      0000CB F7               [ 1]  259 	ld	(x), a
                                    260 ;	main.c: 35: rx_int_chars[1] = num % 10 + '0';
      0000CC 1E 03            [ 2]  261 	ldw	x, (0x03, sp)
      0000CE 7B 09            [ 1]  262 	ld	a, (0x09, sp)
      0000D0 F7               [ 1]  263 	ld	(x), a
                                    264 ;	main.c: 36: rx_int_chars[2] ='\0';
      0000D1 1E 05            [ 2]  265 	ldw	x, (0x05, sp)
      0000D3 7F               [ 1]  266 	clr	(x)
      0000D4 20 0A            [ 2]  267 	jra	00107$
      0000D6                        268 00102$:
                                    269 ;	main.c: 41: rx_int_chars[0] = num + '0';
      0000D6 7B 0D            [ 1]  270 	ld	a, (0x0d, sp)
      0000D8 AB 30            [ 1]  271 	add	a, #0x30
      0000DA 1E 0B            [ 2]  272 	ldw	x, (0x0b, sp)
      0000DC F7               [ 1]  273 	ld	(x), a
                                    274 ;	main.c: 42: rx_int_chars[1] ='\0';
      0000DD 1E 03            [ 2]  275 	ldw	x, (0x03, sp)
      0000DF 7F               [ 1]  276 	clr	(x)
      0000E0                        277 00107$:
                                    278 ;	main.c: 44: }
      0000E0 5B 0D            [ 2]  279 	addw	sp, #13
      0000E2 81               [ 4]  280 	ret
                                    281 ;	main.c: 46: void convert_int_to_binary(int num, char* rx_binary_chars) {
                                    282 ;	-----------------------------------------
                                    283 ;	 function convert_int_to_binary
                                    284 ;	-----------------------------------------
      0000E3                        285 _convert_int_to_binary:
      0000E3 52 04            [ 2]  286 	sub	sp, #4
      0000E5 1F 01            [ 2]  287 	ldw	(0x01, sp), x
                                    288 ;	main.c: 48: for(int i = 7; i >= 0; i--) {
      0000E7 AE 00 07         [ 2]  289 	ldw	x, #0x0007
      0000EA 1F 03            [ 2]  290 	ldw	(0x03, sp), x
      0000EC                        291 00103$:
      0000EC 0D 03            [ 1]  292 	tnz	(0x03, sp)
      0000EE 2B 22            [ 1]  293 	jrmi	00101$
                                    294 ;	main.c: 50: rx_binary_chars[7 - i] = ((num >> i) & 1) + '0';
      0000F0 AE 00 07         [ 2]  295 	ldw	x, #0x0007
      0000F3 72 F0 03         [ 2]  296 	subw	x, (0x03, sp)
      0000F6 72 FB 07         [ 2]  297 	addw	x, (0x07, sp)
      0000F9 16 01            [ 2]  298 	ldw	y, (0x01, sp)
      0000FB 7B 04            [ 1]  299 	ld	a, (0x04, sp)
      0000FD 27 05            [ 1]  300 	jreq	00120$
      0000FF                        301 00119$:
      0000FF 90 57            [ 2]  302 	sraw	y
      000101 4A               [ 1]  303 	dec	a
      000102 26 FB            [ 1]  304 	jrne	00119$
      000104                        305 00120$:
      000104 90 9F            [ 1]  306 	ld	a, yl
      000106 A4 01            [ 1]  307 	and	a, #0x01
      000108 AB 30            [ 1]  308 	add	a, #0x30
      00010A F7               [ 1]  309 	ld	(x), a
                                    310 ;	main.c: 48: for(int i = 7; i >= 0; i--) {
      00010B 1E 03            [ 2]  311 	ldw	x, (0x03, sp)
      00010D 5A               [ 2]  312 	decw	x
      00010E 1F 03            [ 2]  313 	ldw	(0x03, sp), x
      000110 20 DA            [ 2]  314 	jra	00103$
      000112                        315 00101$:
                                    316 ;	main.c: 52: rx_binary_chars[8] = '\0'; // Добавляем символ конца строки
      000112 1E 07            [ 2]  317 	ldw	x, (0x07, sp)
      000114 6F 08            [ 1]  318 	clr	(0x0008, x)
                                    319 ;	main.c: 53: }
      000116 1E 05            [ 2]  320 	ldw	x, (5, sp)
      000118 5B 08            [ 2]  321 	addw	sp, #8
      00011A FC               [ 2]  322 	jp	(x)
                                    323 ;	main.c: 55: void status_check(void){
                                    324 ;	-----------------------------------------
                                    325 ;	 function status_check
                                    326 ;	-----------------------------------------
      00011B                        327 _status_check:
      00011B 52 09            [ 2]  328 	sub	sp, #9
                                    329 ;	main.c: 56: char rx_binary_chars[9]={0};
      00011D 0F 01            [ 1]  330 	clr	(0x01, sp)
      00011F 0F 02            [ 1]  331 	clr	(0x02, sp)
      000121 0F 03            [ 1]  332 	clr	(0x03, sp)
      000123 0F 04            [ 1]  333 	clr	(0x04, sp)
      000125 0F 05            [ 1]  334 	clr	(0x05, sp)
      000127 0F 06            [ 1]  335 	clr	(0x06, sp)
      000129 0F 07            [ 1]  336 	clr	(0x07, sp)
      00012B 0F 08            [ 1]  337 	clr	(0x08, sp)
      00012D 0F 09            [ 1]  338 	clr	(0x09, sp)
                                    339 ;	main.c: 57: convert_int_to_binary(I2C_SR1, rx_binary_chars);
      00012F 96               [ 1]  340 	ldw	x, sp
      000130 5C               [ 1]  341 	incw	x
      000131 51               [ 1]  342 	exgw	x, y
      000132 C6 52 17         [ 1]  343 	ld	a, 0x5217
      000135 5F               [ 1]  344 	clrw	x
      000136 90 89            [ 2]  345 	pushw	y
      000138 97               [ 1]  346 	ld	xl, a
      000139 CDr00rE3         [ 4]  347 	call	_convert_int_to_binary
                                    348 ;	main.c: 58: uart_write("\nSR1 -> ");
      00013C AEr00r00         [ 2]  349 	ldw	x, #(___str_0+0)
      00013F CDr00r2E         [ 4]  350 	call	_uart_write
                                    351 ;	main.c: 59: uart_write(rx_binary_chars);
      000142 96               [ 1]  352 	ldw	x, sp
      000143 5C               [ 1]  353 	incw	x
      000144 CDr00r2E         [ 4]  354 	call	_uart_write
                                    355 ;	main.c: 60: uart_write(" <-\n");
      000147 AEr00r09         [ 2]  356 	ldw	x, #(___str_1+0)
      00014A CDr00r2E         [ 4]  357 	call	_uart_write
                                    358 ;	main.c: 61: convert_int_to_binary(I2C_SR2, rx_binary_chars);
      00014D 96               [ 1]  359 	ldw	x, sp
      00014E 5C               [ 1]  360 	incw	x
      00014F 51               [ 1]  361 	exgw	x, y
      000150 C6 52 18         [ 1]  362 	ld	a, 0x5218
      000153 5F               [ 1]  363 	clrw	x
      000154 90 89            [ 2]  364 	pushw	y
      000156 97               [ 1]  365 	ld	xl, a
      000157 CDr00rE3         [ 4]  366 	call	_convert_int_to_binary
                                    367 ;	main.c: 62: uart_write("SR2 -> ");
      00015A AEr00r0E         [ 2]  368 	ldw	x, #(___str_2+0)
      00015D CDr00r2E         [ 4]  369 	call	_uart_write
                                    370 ;	main.c: 63: uart_write(rx_binary_chars);
      000160 96               [ 1]  371 	ldw	x, sp
      000161 5C               [ 1]  372 	incw	x
      000162 CDr00r2E         [ 4]  373 	call	_uart_write
                                    374 ;	main.c: 64: uart_write(" <-\n");
      000165 AEr00r09         [ 2]  375 	ldw	x, #(___str_1+0)
      000168 CDr00r2E         [ 4]  376 	call	_uart_write
                                    377 ;	main.c: 65: convert_int_to_binary(I2C_SR3, rx_binary_chars);
      00016B 96               [ 1]  378 	ldw	x, sp
      00016C 5C               [ 1]  379 	incw	x
      00016D 51               [ 1]  380 	exgw	x, y
      00016E C6 52 19         [ 1]  381 	ld	a, 0x5219
      000171 5F               [ 1]  382 	clrw	x
      000172 90 89            [ 2]  383 	pushw	y
      000174 97               [ 1]  384 	ld	xl, a
      000175 CDr00rE3         [ 4]  385 	call	_convert_int_to_binary
                                    386 ;	main.c: 66: uart_write("SR3 -> ");
      000178 AEr00r16         [ 2]  387 	ldw	x, #(___str_3+0)
      00017B CDr00r2E         [ 4]  388 	call	_uart_write
                                    389 ;	main.c: 67: uart_write(rx_binary_chars);
      00017E 96               [ 1]  390 	ldw	x, sp
      00017F 5C               [ 1]  391 	incw	x
      000180 CDr00r2E         [ 4]  392 	call	_uart_write
                                    393 ;	main.c: 68: uart_write(" <-\n");
      000183 AEr00r09         [ 2]  394 	ldw	x, #(___str_1+0)
      000186 CDr00r2E         [ 4]  395 	call	_uart_write
                                    396 ;	main.c: 69: convert_int_to_binary(I2C_CR1, rx_binary_chars);
      000189 96               [ 1]  397 	ldw	x, sp
      00018A 5C               [ 1]  398 	incw	x
      00018B 51               [ 1]  399 	exgw	x, y
      00018C C6 52 10         [ 1]  400 	ld	a, 0x5210
      00018F 5F               [ 1]  401 	clrw	x
      000190 90 89            [ 2]  402 	pushw	y
      000192 97               [ 1]  403 	ld	xl, a
      000193 CDr00rE3         [ 4]  404 	call	_convert_int_to_binary
                                    405 ;	main.c: 70: uart_write("CR1 -> ");
      000196 AEr00r1E         [ 2]  406 	ldw	x, #(___str_4+0)
      000199 CDr00r2E         [ 4]  407 	call	_uart_write
                                    408 ;	main.c: 71: uart_write(rx_binary_chars);
      00019C 96               [ 1]  409 	ldw	x, sp
      00019D 5C               [ 1]  410 	incw	x
      00019E CDr00r2E         [ 4]  411 	call	_uart_write
                                    412 ;	main.c: 72: uart_write(" <-\n");
      0001A1 AEr00r09         [ 2]  413 	ldw	x, #(___str_1+0)
      0001A4 CDr00r2E         [ 4]  414 	call	_uart_write
                                    415 ;	main.c: 73: convert_int_to_binary(I2C_CR2, rx_binary_chars);
      0001A7 96               [ 1]  416 	ldw	x, sp
      0001A8 5C               [ 1]  417 	incw	x
      0001A9 51               [ 1]  418 	exgw	x, y
      0001AA C6 52 11         [ 1]  419 	ld	a, 0x5211
      0001AD 5F               [ 1]  420 	clrw	x
      0001AE 90 89            [ 2]  421 	pushw	y
      0001B0 97               [ 1]  422 	ld	xl, a
      0001B1 CDr00rE3         [ 4]  423 	call	_convert_int_to_binary
                                    424 ;	main.c: 74: uart_write("CR2 -> ");
      0001B4 AEr00r26         [ 2]  425 	ldw	x, #(___str_5+0)
      0001B7 CDr00r2E         [ 4]  426 	call	_uart_write
                                    427 ;	main.c: 75: uart_write(rx_binary_chars);
      0001BA 96               [ 1]  428 	ldw	x, sp
      0001BB 5C               [ 1]  429 	incw	x
      0001BC CDr00r2E         [ 4]  430 	call	_uart_write
                                    431 ;	main.c: 76: uart_write(" <-\n");
      0001BF AEr00r09         [ 2]  432 	ldw	x, #(___str_1+0)
      0001C2 CDr00r2E         [ 4]  433 	call	_uart_write
                                    434 ;	main.c: 77: convert_int_to_binary(I2C_DR, rx_binary_chars);
      0001C5 96               [ 1]  435 	ldw	x, sp
      0001C6 5C               [ 1]  436 	incw	x
      0001C7 51               [ 1]  437 	exgw	x, y
      0001C8 C6 52 16         [ 1]  438 	ld	a, 0x5216
      0001CB 5F               [ 1]  439 	clrw	x
      0001CC 90 89            [ 2]  440 	pushw	y
      0001CE 97               [ 1]  441 	ld	xl, a
      0001CF CDr00rE3         [ 4]  442 	call	_convert_int_to_binary
                                    443 ;	main.c: 78: uart_write("DR -> ");
      0001D2 AEr00r2E         [ 2]  444 	ldw	x, #(___str_6+0)
      0001D5 CDr00r2E         [ 4]  445 	call	_uart_write
                                    446 ;	main.c: 79: uart_write(rx_binary_chars);
      0001D8 96               [ 1]  447 	ldw	x, sp
      0001D9 5C               [ 1]  448 	incw	x
      0001DA CDr00r2E         [ 4]  449 	call	_uart_write
                                    450 ;	main.c: 80: uart_write(" <-\n");
      0001DD AEr00r09         [ 2]  451 	ldw	x, #(___str_1+0)
      0001E0 CDr00r2E         [ 4]  452 	call	_uart_write
                                    453 ;	main.c: 81: }
      0001E3 5B 09            [ 2]  454 	addw	sp, #9
      0001E5 81               [ 4]  455 	ret
                                    456 ;	main.c: 83: void uart_init(void){
                                    457 ;	-----------------------------------------
                                    458 ;	 function uart_init
                                    459 ;	-----------------------------------------
      0001E6                        460 _uart_init:
                                    461 ;	main.c: 84: CLK_CKDIVR = 0;
      0001E6 35 00 50 C6      [ 1]  462 	mov	0x50c6+0, #0x00
                                    463 ;	main.c: 87: UART1_CR2 |= UART_CR2_TEN; // Transmitter enable
      0001EA 72 16 52 35      [ 1]  464 	bset	0x5235, #3
                                    465 ;	main.c: 88: UART1_CR2 |= UART_CR2_REN; // Receiver enable
      0001EE 72 14 52 35      [ 1]  466 	bset	0x5235, #2
                                    467 ;	main.c: 89: UART1_CR3 &= ~(UART_CR3_STOP1 | UART_CR3_STOP2); // 1 stop bit
      0001F2 C6 52 36         [ 1]  468 	ld	a, 0x5236
      0001F5 A4 CF            [ 1]  469 	and	a, #0xcf
      0001F7 C7 52 36         [ 1]  470 	ld	0x5236, a
                                    471 ;	main.c: 91: UART1_BRR2 = 0x03; UART1_BRR1 = 0x68; // 0x0683 coded funky way (see ref manual)
      0001FA 35 03 52 33      [ 1]  472 	mov	0x5233+0, #0x03
      0001FE 35 68 52 32      [ 1]  473 	mov	0x5232+0, #0x68
                                    474 ;	main.c: 92: }
      000202 81               [ 4]  475 	ret
                                    476 ;	main.c: 96: void i2c_init(void) {
                                    477 ;	-----------------------------------------
                                    478 ;	 function i2c_init
                                    479 ;	-----------------------------------------
      000203                        480 _i2c_init:
                                    481 ;	main.c: 102: I2C_CR1 = I2C_CR1 & ~0x01;      // PE=0, disable I2C before setup
      000203 72 11 52 10      [ 1]  482 	bres	0x5210, #0
                                    483 ;	main.c: 103: I2C_FREQR= 16;                  // peripheral frequence =16MHz
      000207 35 10 52 12      [ 1]  484 	mov	0x5212+0, #0x10
                                    485 ;	main.c: 104: I2C_CCRH = 0;                   // =0
      00020B 35 00 52 1C      [ 1]  486 	mov	0x521c+0, #0x00
                                    487 ;	main.c: 105: I2C_CCRL = 80;                  // 100kHz for I2C
      00020F 35 50 52 1B      [ 1]  488 	mov	0x521b+0, #0x50
                                    489 ;	main.c: 106: I2C_CCRH = I2C_CCRH & ~0x80;    // set standart mode(100кHz)
      000213 72 1F 52 1C      [ 1]  490 	bres	0x521c, #7
                                    491 ;	main.c: 107: I2C_OARH = I2C_OARH & ~0x80;    // 7-bit address mode
      000217 72 1F 52 14      [ 1]  492 	bres	0x5214, #7
                                    493 ;	main.c: 108: I2C_OARH = I2C_OARH | 0x40;     // see reference manual
      00021B 72 1C 52 14      [ 1]  494 	bset	0x5214, #6
                                    495 ;	main.c: 109: I2C_CR1 = I2C_CR1 | 0x01;       // PE=1, enable I2C
      00021F 72 10 52 10      [ 1]  496 	bset	0x5210, #0
                                    497 ;	main.c: 110: }
      000223 81               [ 4]  498 	ret
                                    499 ;	main.c: 114: void i2c_start(void) {
                                    500 ;	-----------------------------------------
                                    501 ;	 function i2c_start
                                    502 ;	-----------------------------------------
      000224                        503 _i2c_start:
                                    504 ;	main.c: 115: I2C_CR2 = I2C_CR2 | (1 << 0); // Отправляем стартовый сигнал
      000224 72 10 52 11      [ 1]  505 	bset	0x5211, #0
                                    506 ;	main.c: 116: while(!(I2C_SR1 & (1 << 0)));
      000228                        507 00101$:
      000228 72 01 52 17 FB   [ 2]  508 	btjf	0x5217, #0, 00101$
                                    509 ;	main.c: 118: }
      00022D 81               [ 4]  510 	ret
                                    511 ;	main.c: 120: void i2c_send_address(uint8_t address) {
                                    512 ;	-----------------------------------------
                                    513 ;	 function i2c_send_address
                                    514 ;	-----------------------------------------
      00022E                        515 _i2c_send_address:
                                    516 ;	main.c: 121: I2C_DR = address << 1; // Отправка адреса устройства с битом на запись
      00022E 48               [ 1]  517 	sll	a
      00022F C7 52 16         [ 1]  518 	ld	0x5216, a
                                    519 ;	main.c: 122: while (!(I2C_SR1 & (1 << 1)) && !(I2C_SR2 & (1 << 2)));
      000232                        520 00102$:
      000232 72 03 52 17 01   [ 2]  521 	btjf	0x5217, #1, 00117$
      000237 81               [ 4]  522 	ret
      000238                        523 00117$:
      000238 72 05 52 18 F5   [ 2]  524 	btjf	0x5218, #2, 00102$
                                    525 ;	main.c: 123: }
      00023D 81               [ 4]  526 	ret
                                    527 ;	main.c: 125: void i2c_stop(void) {
                                    528 ;	-----------------------------------------
                                    529 ;	 function i2c_stop
                                    530 ;	-----------------------------------------
      00023E                        531 _i2c_stop:
                                    532 ;	main.c: 126: I2C_CR2 = I2C_CR2 | (1 << 1); // Отправка стопового сигнала
      00023E 72 12 52 11      [ 1]  533 	bset	0x5211, #1
                                    534 ;	main.c: 128: }
      000242 81               [ 4]  535 	ret
                                    536 ;	main.c: 132: void i2c_scan(void) {
                                    537 ;	-----------------------------------------
                                    538 ;	 function i2c_scan
                                    539 ;	-----------------------------------------
      000243                        540 _i2c_scan:
      000243 52 05            [ 2]  541 	sub	sp, #5
                                    542 ;	main.c: 133: for (uint8_t addr = 1; addr < 127; addr++) {
      000245 A6 01            [ 1]  543 	ld	a, #0x01
      000247 6B 05            [ 1]  544 	ld	(0x05, sp), a
      000249                        545 00105$:
      000249 7B 05            [ 1]  546 	ld	a, (0x05, sp)
      00024B A1 7F            [ 1]  547 	cp	a, #0x7f
      00024D 24 40            [ 1]  548 	jrnc	00107$
                                    549 ;	main.c: 134: i2c_start();
      00024F CDr02r24         [ 4]  550 	call	_i2c_start
                                    551 ;	main.c: 135: i2c_send_address(addr);
      000252 7B 05            [ 1]  552 	ld	a, (0x05, sp)
      000254 CDr02r2E         [ 4]  553 	call	_i2c_send_address
                                    554 ;	main.c: 136: if (!(I2C_SR2 & (1 << 2))) { // Проверка на ACK
      000257 72 04 52 18 28   [ 2]  555 	btjt	0x5218, #2, 00102$
                                    556 ;	main.c: 138: uart_write("SM ");
      00025C AEr00r35         [ 2]  557 	ldw	x, #(___str_7+0)
      00025F CDr00r2E         [ 4]  558 	call	_uart_write
                                    559 ;	main.c: 139: char rx_int_chars[4]={0};
      000262 0F 01            [ 1]  560 	clr	(0x01, sp)
      000264 0F 02            [ 1]  561 	clr	(0x02, sp)
      000266 0F 03            [ 1]  562 	clr	(0x03, sp)
      000268 0F 04            [ 1]  563 	clr	(0x04, sp)
                                    564 ;	main.c: 140: convert_int_to_chars(addr, rx_int_chars);
      00026A 96               [ 1]  565 	ldw	x, sp
      00026B 5C               [ 1]  566 	incw	x
      00026C 7B 05            [ 1]  567 	ld	a, (0x05, sp)
      00026E CDr00r5E         [ 4]  568 	call	_convert_int_to_chars
                                    569 ;	main.c: 141: uart_write(rx_int_chars); 
      000271 96               [ 1]  570 	ldw	x, sp
      000272 5C               [ 1]  571 	incw	x
      000273 CDr00r2E         [ 4]  572 	call	_uart_write
                                    573 ;	main.c: 142: uart_write("\r\n");
      000276 AEr00r39         [ 2]  574 	ldw	x, #(___str_8+0)
      000279 CDr00r2E         [ 4]  575 	call	_uart_write
                                    576 ;	main.c: 143: current_dev = addr;
      00027C 7B 05            [ 1]  577 	ld	a, (0x05, sp)
      00027E C7u01u00         [ 1]  578 	ld	_current_dev+0, a
                                    579 ;	main.c: 144: status_check();
      000281 CDr01r1B         [ 4]  580 	call	_status_check
      000284                        581 00102$:
                                    582 ;	main.c: 146: i2c_stop();
      000284 CDr02r3E         [ 4]  583 	call	_i2c_stop
                                    584 ;	main.c: 147: I2C_SR2 = I2C_SR2 & ~(1 << 2); // Очистка флага ошибки
      000287 72 15 52 18      [ 1]  585 	bres	0x5218, #2
                                    586 ;	main.c: 133: for (uint8_t addr = 1; addr < 127; addr++) {
      00028B 0C 05            [ 1]  587 	inc	(0x05, sp)
      00028D 20 BA            [ 2]  588 	jra	00105$
      00028F                        589 00107$:
                                    590 ;	main.c: 151: }
      00028F 5B 05            [ 2]  591 	addw	sp, #5
      000291 81               [ 4]  592 	ret
                                    593 ;	main.c: 154: int uart_read(void)
                                    594 ;	-----------------------------------------
                                    595 ;	 function uart_read
                                    596 ;	-----------------------------------------
      000292                        597 _uart_read:
      000292 52 0D            [ 2]  598 	sub	sp, #13
                                    599 ;	main.c: 156: char rx_binary_chars[9]={0};
      000294 0F 01            [ 1]  600 	clr	(0x01, sp)
      000296 0F 02            [ 1]  601 	clr	(0x02, sp)
      000298 0F 03            [ 1]  602 	clr	(0x03, sp)
      00029A 0F 04            [ 1]  603 	clr	(0x04, sp)
      00029C 0F 05            [ 1]  604 	clr	(0x05, sp)
      00029E 0F 06            [ 1]  605 	clr	(0x06, sp)
      0002A0 0F 07            [ 1]  606 	clr	(0x07, sp)
      0002A2 0F 08            [ 1]  607 	clr	(0x08, sp)
      0002A4 0F 09            [ 1]  608 	clr	(0x09, sp)
                                    609 ;	main.c: 157: for(int i = 0; i < sizeof(buffer); i++)
      0002A6 5F               [ 1]  610 	clrw	x
      0002A7                        611 00110$:
      0002A7 A3 01 00         [ 2]  612 	cpw	x, #0x0100
      0002AA 2E 11            [ 1]  613 	jrsge	00101$
                                    614 ;	main.c: 159: buffer[i] = 0;
      0002AC 9F               [ 1]  615 	ld	a, xl
      0002AD ABr00            [ 1]  616 	add	a, #<(_buffer+0)
      0002AF 88               [ 1]  617 	push	a
      0002B0 9E               [ 1]  618 	ld	a, xh
      0002B1 A9s00            [ 1]  619 	adc	a, #((_buffer+0) >> 8)
      0002B3 90 95            [ 1]  620 	ld	yh, a
      0002B5 84               [ 1]  621 	pop	a
      0002B6 90 97            [ 1]  622 	ld	yl, a
      0002B8 90 7F            [ 1]  623 	clr	(y)
                                    624 ;	main.c: 157: for(int i = 0; i < sizeof(buffer); i++)
      0002BA 5C               [ 1]  625 	incw	x
      0002BB 20 EA            [ 2]  626 	jra	00110$
      0002BD                        627 00101$:
                                    628 ;	main.c: 161: for(int i = 0; i < sizeof(buffer); i++) {
      0002BD 5F               [ 1]  629 	clrw	x
      0002BE 1F 0C            [ 2]  630 	ldw	(0x0c, sp), x
      0002C0                        631 00113$:
      0002C0 1E 0C            [ 2]  632 	ldw	x, (0x0c, sp)
      0002C2 A3 01 00         [ 2]  633 	cpw	x, #0x0100
      0002C5 2E 77            [ 1]  634 	jrsge	00108$
                                    635 ;	main.c: 162: uart_write("flag1");
      0002C7 AEr00r3C         [ 2]  636 	ldw	x, #(___str_9+0)
      0002CA CDr00r2E         [ 4]  637 	call	_uart_write
                                    638 ;	main.c: 163: while(!(UART1_SR & UART_SR_RXNE)); // !Transmit data register empty
      0002CD                        639 00102$:
      0002CD 72 0B 52 30 FB   [ 2]  640 	btjf	0x5230, #5, 00102$
                                    641 ;	main.c: 164: uart_write("flag2");
      0002D2 AEr00r42         [ 2]  642 	ldw	x, #(___str_10+0)
      0002D5 CDr00r2E         [ 4]  643 	call	_uart_write
                                    644 ;	main.c: 165: convert_int_to_binary(UART1_DR, rx_binary_chars);
      0002D8 C6 52 31         [ 1]  645 	ld	a, 0x5231
      0002DB 5F               [ 1]  646 	clrw	x
      0002DC 90 96            [ 1]  647 	ldw	y, sp
      0002DE 90 5C            [ 1]  648 	incw	y
      0002E0 90 89            [ 2]  649 	pushw	y
      0002E2 97               [ 1]  650 	ld	xl, a
      0002E3 CDr00rE3         [ 4]  651 	call	_convert_int_to_binary
                                    652 ;	main.c: 166: uart_write("DRS -> ");
      0002E6 AEr00r48         [ 2]  653 	ldw	x, #(___str_11+0)
      0002E9 CDr00r2E         [ 4]  654 	call	_uart_write
                                    655 ;	main.c: 167: uart_write(rx_binary_chars);
      0002EC 96               [ 1]  656 	ldw	x, sp
      0002ED 5C               [ 1]  657 	incw	x
      0002EE CDr00r2E         [ 4]  658 	call	_uart_write
                                    659 ;	main.c: 168: uart_write(" <-\n");
      0002F1 AEr00r09         [ 2]  660 	ldw	x, #(___str_1+0)
      0002F4 CDr00r2E         [ 4]  661 	call	_uart_write
                                    662 ;	main.c: 169: buffer[i] = UART1_DR;
      0002F7 1E 0C            [ 2]  663 	ldw	x, (0x0c, sp)
      0002F9 1Cr00r00         [ 2]  664 	addw	x, #(_buffer+0)
      0002FC 1F 0A            [ 2]  665 	ldw	(0x0a, sp), x
      0002FE C6 52 31         [ 1]  666 	ld	a, 0x5231
      000301 1E 0A            [ 2]  667 	ldw	x, (0x0a, sp)
      000303 F7               [ 1]  668 	ld	(x), a
                                    669 ;	main.c: 170: convert_int_to_binary(UART1_DR, rx_binary_chars);
      000304 C6 52 31         [ 1]  670 	ld	a, 0x5231
      000307 5F               [ 1]  671 	clrw	x
      000308 90 96            [ 1]  672 	ldw	y, sp
      00030A 90 5C            [ 1]  673 	incw	y
      00030C 90 89            [ 2]  674 	pushw	y
      00030E 97               [ 1]  675 	ld	xl, a
      00030F CDr00rE3         [ 4]  676 	call	_convert_int_to_binary
                                    677 ;	main.c: 171: uart_write("DRE -> ");
      000312 AEr00r50         [ 2]  678 	ldw	x, #(___str_12+0)
      000315 CDr00r2E         [ 4]  679 	call	_uart_write
                                    680 ;	main.c: 172: uart_write(rx_binary_chars);
      000318 96               [ 1]  681 	ldw	x, sp
      000319 5C               [ 1]  682 	incw	x
      00031A CDr00r2E         [ 4]  683 	call	_uart_write
                                    684 ;	main.c: 173: uart_write(" <-\n");
      00031D AEr00r09         [ 2]  685 	ldw	x, #(___str_1+0)
      000320 CDr00r2E         [ 4]  686 	call	_uart_write
                                    687 ;	main.c: 174: if(buffer[i] == '\n' || buffer[i] == '\0')
      000323 1E 0A            [ 2]  688 	ldw	x, (0x0a, sp)
      000325 F6               [ 1]  689 	ld	a, (x)
      000326 A1 0A            [ 1]  690 	cp	a, #0x0a
      000328 27 03            [ 1]  691 	jreq	00105$
      00032A 4D               [ 1]  692 	tnz	a
      00032B 26 0A            [ 1]  693 	jrne	00114$
      00032D                        694 00105$:
                                    695 ;	main.c: 176: uart_write("flag_S");
      00032D AEr00r58         [ 2]  696 	ldw	x, #(___str_13+0)
      000330 CDr00r2E         [ 4]  697 	call	_uart_write
                                    698 ;	main.c: 177: return 1;
      000333 5F               [ 1]  699 	clrw	x
      000334 5C               [ 1]  700 	incw	x
      000335 20 0B            [ 2]  701 	jra	00115$
      000337                        702 00114$:
                                    703 ;	main.c: 161: for(int i = 0; i < sizeof(buffer); i++) {
      000337 1E 0C            [ 2]  704 	ldw	x, (0x0c, sp)
      000339 5C               [ 1]  705 	incw	x
      00033A 1F 0C            [ 2]  706 	ldw	(0x0c, sp), x
      00033C 20 82            [ 2]  707 	jra	00113$
      00033E                        708 00108$:
                                    709 ;	main.c: 181: status_check();
      00033E CDr01r1B         [ 4]  710 	call	_status_check
                                    711 ;	main.c: 182: return 0;
      000341 5F               [ 1]  712 	clrw	x
      000342                        713 00115$:
                                    714 ;	main.c: 183: }
      000342 5B 0D            [ 2]  715 	addw	sp, #13
      000344 81               [ 4]  716 	ret
                                    717 ;	main.c: 186: int main(void)
                                    718 ;	-----------------------------------------
                                    719 ;	 function main
                                    720 ;	-----------------------------------------
      000345                        721 _main:
                                    722 ;	main.c: 188: uart_init();
      000345 CDr01rE6         [ 4]  723 	call	_uart_init
                                    724 ;	main.c: 189: uart_write("SS\n");
      000348 AEr00r5F         [ 2]  725 	ldw	x, #(___str_14+0)
      00034B CDr00r2E         [ 4]  726 	call	_uart_write
                                    727 ;	main.c: 191: while(uart_read()); 
      00034E                        728 00101$:
      00034E CDr02r92         [ 4]  729 	call	_uart_read
      000351 5D               [ 2]  730 	tnzw	x
      000352 26 FA            [ 1]  731 	jrne	00101$
                                    732 ;	main.c: 192: i2c_init();
      000354 CDr02r03         [ 4]  733 	call	_i2c_init
                                    734 ;	main.c: 196: i2c_scan(); 
      000357 CDr02r43         [ 4]  735 	call	_i2c_scan
                                    736 ;	main.c: 198: return 0;
      00035A 5F               [ 1]  737 	clrw	x
                                    738 ;	main.c: 199: }
      00035B 81               [ 4]  739 	ret
                                    740 	.area CODE
                                    741 	.area CONST
                                    742 	.area CONST
      000000                        743 ___str_0:
      000000 0A                     744 	.db 0x0a
      000001 53 52 31 20 2D 3E 20   745 	.ascii "SR1 -> "
      000008 00                     746 	.db 0x00
                                    747 	.area CODE
                                    748 	.area CONST
      000009                        749 ___str_1:
      000009 20 3C 2D               750 	.ascii " <-"
      00000C 0A                     751 	.db 0x0a
      00000D 00                     752 	.db 0x00
                                    753 	.area CODE
                                    754 	.area CONST
      00000E                        755 ___str_2:
      00000E 53 52 32 20 2D 3E 20   756 	.ascii "SR2 -> "
      000015 00                     757 	.db 0x00
                                    758 	.area CODE
                                    759 	.area CONST
      000016                        760 ___str_3:
      000016 53 52 33 20 2D 3E 20   761 	.ascii "SR3 -> "
      00001D 00                     762 	.db 0x00
                                    763 	.area CODE
                                    764 	.area CONST
      00001E                        765 ___str_4:
      00001E 43 52 31 20 2D 3E 20   766 	.ascii "CR1 -> "
      000025 00                     767 	.db 0x00
                                    768 	.area CODE
                                    769 	.area CONST
      000026                        770 ___str_5:
      000026 43 52 32 20 2D 3E 20   771 	.ascii "CR2 -> "
      00002D 00                     772 	.db 0x00
                                    773 	.area CODE
                                    774 	.area CONST
      00002E                        775 ___str_6:
      00002E 44 52 20 2D 3E 20      776 	.ascii "DR -> "
      000034 00                     777 	.db 0x00
                                    778 	.area CODE
                                    779 	.area CONST
      000035                        780 ___str_7:
      000035 53 4D 20               781 	.ascii "SM "
      000038 00                     782 	.db 0x00
                                    783 	.area CODE
                                    784 	.area CONST
      000039                        785 ___str_8:
      000039 0D                     786 	.db 0x0d
      00003A 0A                     787 	.db 0x0a
      00003B 00                     788 	.db 0x00
                                    789 	.area CODE
                                    790 	.area CONST
      00003C                        791 ___str_9:
      00003C 66 6C 61 67 31         792 	.ascii "flag1"
      000041 00                     793 	.db 0x00
                                    794 	.area CODE
                                    795 	.area CONST
      000042                        796 ___str_10:
      000042 66 6C 61 67 32         797 	.ascii "flag2"
      000047 00                     798 	.db 0x00
                                    799 	.area CODE
                                    800 	.area CONST
      000048                        801 ___str_11:
      000048 44 52 53 20 2D 3E 20   802 	.ascii "DRS -> "
      00004F 00                     803 	.db 0x00
                                    804 	.area CODE
                                    805 	.area CONST
      000050                        806 ___str_12:
      000050 44 52 45 20 2D 3E 20   807 	.ascii "DRE -> "
      000057 00                     808 	.db 0x00
                                    809 	.area CODE
                                    810 	.area CONST
      000058                        811 ___str_13:
      000058 66 6C 61 67 5F 53      812 	.ascii "flag_S"
      00005E 00                     813 	.db 0x00
                                    814 	.area CODE
                                    815 	.area CONST
      00005F                        816 ___str_14:
      00005F 53 53                  817 	.ascii "SS"
      000061 0A                     818 	.db 0x0a
      000062 00                     819 	.db 0x00
                                    820 	.area CODE
                                    821 	.area INITIALIZER
      000000                        822 __xinit__buffer:
      000000 00                     823 	.db #0x00	; 0
      000001 00                     824 	.db 0x00
      000002 00                     825 	.db 0x00
      000003 00                     826 	.db 0x00
      000004 00                     827 	.db 0x00
      000005 00                     828 	.db 0x00
      000006 00                     829 	.db 0x00
      000007 00                     830 	.db 0x00
      000008 00                     831 	.db 0x00
      000009 00                     832 	.db 0x00
      00000A 00                     833 	.db 0x00
      00000B 00                     834 	.db 0x00
      00000C 00                     835 	.db 0x00
      00000D 00                     836 	.db 0x00
      00000E 00                     837 	.db 0x00
      00000F 00                     838 	.db 0x00
      000010 00                     839 	.db 0x00
      000011 00                     840 	.db 0x00
      000012 00                     841 	.db 0x00
      000013 00                     842 	.db 0x00
      000014 00                     843 	.db 0x00
      000015 00                     844 	.db 0x00
      000016 00                     845 	.db 0x00
      000017 00                     846 	.db 0x00
      000018 00                     847 	.db 0x00
      000019 00                     848 	.db 0x00
      00001A 00                     849 	.db 0x00
      00001B 00                     850 	.db 0x00
      00001C 00                     851 	.db 0x00
      00001D 00                     852 	.db 0x00
      00001E 00                     853 	.db 0x00
      00001F 00                     854 	.db 0x00
      000020 00                     855 	.db 0x00
      000021 00                     856 	.db 0x00
      000022 00                     857 	.db 0x00
      000023 00                     858 	.db 0x00
      000024 00                     859 	.db 0x00
      000025 00                     860 	.db 0x00
      000026 00                     861 	.db 0x00
      000027 00                     862 	.db 0x00
      000028 00                     863 	.db 0x00
      000029 00                     864 	.db 0x00
      00002A 00                     865 	.db 0x00
      00002B 00                     866 	.db 0x00
      00002C 00                     867 	.db 0x00
      00002D 00                     868 	.db 0x00
      00002E 00                     869 	.db 0x00
      00002F 00                     870 	.db 0x00
      000030 00                     871 	.db 0x00
      000031 00                     872 	.db 0x00
      000032 00                     873 	.db 0x00
      000033 00                     874 	.db 0x00
      000034 00                     875 	.db 0x00
      000035 00                     876 	.db 0x00
      000036 00                     877 	.db 0x00
      000037 00                     878 	.db 0x00
      000038 00                     879 	.db 0x00
      000039 00                     880 	.db 0x00
      00003A 00                     881 	.db 0x00
      00003B 00                     882 	.db 0x00
      00003C 00                     883 	.db 0x00
      00003D 00                     884 	.db 0x00
      00003E 00                     885 	.db 0x00
      00003F 00                     886 	.db 0x00
      000040 00                     887 	.db 0x00
      000041 00                     888 	.db 0x00
      000042 00                     889 	.db 0x00
      000043 00                     890 	.db 0x00
      000044 00                     891 	.db 0x00
      000045 00                     892 	.db 0x00
      000046 00                     893 	.db 0x00
      000047 00                     894 	.db 0x00
      000048 00                     895 	.db 0x00
      000049 00                     896 	.db 0x00
      00004A 00                     897 	.db 0x00
      00004B 00                     898 	.db 0x00
      00004C 00                     899 	.db 0x00
      00004D 00                     900 	.db 0x00
      00004E 00                     901 	.db 0x00
      00004F 00                     902 	.db 0x00
      000050 00                     903 	.db 0x00
      000051 00                     904 	.db 0x00
      000052 00                     905 	.db 0x00
      000053 00                     906 	.db 0x00
      000054 00                     907 	.db 0x00
      000055 00                     908 	.db 0x00
      000056 00                     909 	.db 0x00
      000057 00                     910 	.db 0x00
      000058 00                     911 	.db 0x00
      000059 00                     912 	.db 0x00
      00005A 00                     913 	.db 0x00
      00005B 00                     914 	.db 0x00
      00005C 00                     915 	.db 0x00
      00005D 00                     916 	.db 0x00
      00005E 00                     917 	.db 0x00
      00005F 00                     918 	.db 0x00
      000060 00                     919 	.db 0x00
      000061 00                     920 	.db 0x00
      000062 00                     921 	.db 0x00
      000063 00                     922 	.db 0x00
      000064 00                     923 	.db 0x00
      000065 00                     924 	.db 0x00
      000066 00                     925 	.db 0x00
      000067 00                     926 	.db 0x00
      000068 00                     927 	.db 0x00
      000069 00                     928 	.db 0x00
      00006A 00                     929 	.db 0x00
      00006B 00                     930 	.db 0x00
      00006C 00                     931 	.db 0x00
      00006D 00                     932 	.db 0x00
      00006E 00                     933 	.db 0x00
      00006F 00                     934 	.db 0x00
      000070 00                     935 	.db 0x00
      000071 00                     936 	.db 0x00
      000072 00                     937 	.db 0x00
      000073 00                     938 	.db 0x00
      000074 00                     939 	.db 0x00
      000075 00                     940 	.db 0x00
      000076 00                     941 	.db 0x00
      000077 00                     942 	.db 0x00
      000078 00                     943 	.db 0x00
      000079 00                     944 	.db 0x00
      00007A 00                     945 	.db 0x00
      00007B 00                     946 	.db 0x00
      00007C 00                     947 	.db 0x00
      00007D 00                     948 	.db 0x00
      00007E 00                     949 	.db 0x00
      00007F 00                     950 	.db 0x00
      000080 00                     951 	.db 0x00
      000081 00                     952 	.db 0x00
      000082 00                     953 	.db 0x00
      000083 00                     954 	.db 0x00
      000084 00                     955 	.db 0x00
      000085 00                     956 	.db 0x00
      000086 00                     957 	.db 0x00
      000087 00                     958 	.db 0x00
      000088 00                     959 	.db 0x00
      000089 00                     960 	.db 0x00
      00008A 00                     961 	.db 0x00
      00008B 00                     962 	.db 0x00
      00008C 00                     963 	.db 0x00
      00008D 00                     964 	.db 0x00
      00008E 00                     965 	.db 0x00
      00008F 00                     966 	.db 0x00
      000090 00                     967 	.db 0x00
      000091 00                     968 	.db 0x00
      000092 00                     969 	.db 0x00
      000093 00                     970 	.db 0x00
      000094 00                     971 	.db 0x00
      000095 00                     972 	.db 0x00
      000096 00                     973 	.db 0x00
      000097 00                     974 	.db 0x00
      000098 00                     975 	.db 0x00
      000099 00                     976 	.db 0x00
      00009A 00                     977 	.db 0x00
      00009B 00                     978 	.db 0x00
      00009C 00                     979 	.db 0x00
      00009D 00                     980 	.db 0x00
      00009E 00                     981 	.db 0x00
      00009F 00                     982 	.db 0x00
      0000A0 00                     983 	.db 0x00
      0000A1 00                     984 	.db 0x00
      0000A2 00                     985 	.db 0x00
      0000A3 00                     986 	.db 0x00
      0000A4 00                     987 	.db 0x00
      0000A5 00                     988 	.db 0x00
      0000A6 00                     989 	.db 0x00
      0000A7 00                     990 	.db 0x00
      0000A8 00                     991 	.db 0x00
      0000A9 00                     992 	.db 0x00
      0000AA 00                     993 	.db 0x00
      0000AB 00                     994 	.db 0x00
      0000AC 00                     995 	.db 0x00
      0000AD 00                     996 	.db 0x00
      0000AE 00                     997 	.db 0x00
      0000AF 00                     998 	.db 0x00
      0000B0 00                     999 	.db 0x00
      0000B1 00                    1000 	.db 0x00
      0000B2 00                    1001 	.db 0x00
      0000B3 00                    1002 	.db 0x00
      0000B4 00                    1003 	.db 0x00
      0000B5 00                    1004 	.db 0x00
      0000B6 00                    1005 	.db 0x00
      0000B7 00                    1006 	.db 0x00
      0000B8 00                    1007 	.db 0x00
      0000B9 00                    1008 	.db 0x00
      0000BA 00                    1009 	.db 0x00
      0000BB 00                    1010 	.db 0x00
      0000BC 00                    1011 	.db 0x00
      0000BD 00                    1012 	.db 0x00
      0000BE 00                    1013 	.db 0x00
      0000BF 00                    1014 	.db 0x00
      0000C0 00                    1015 	.db 0x00
      0000C1 00                    1016 	.db 0x00
      0000C2 00                    1017 	.db 0x00
      0000C3 00                    1018 	.db 0x00
      0000C4 00                    1019 	.db 0x00
      0000C5 00                    1020 	.db 0x00
      0000C6 00                    1021 	.db 0x00
      0000C7 00                    1022 	.db 0x00
      0000C8 00                    1023 	.db 0x00
      0000C9 00                    1024 	.db 0x00
      0000CA 00                    1025 	.db 0x00
      0000CB 00                    1026 	.db 0x00
      0000CC 00                    1027 	.db 0x00
      0000CD 00                    1028 	.db 0x00
      0000CE 00                    1029 	.db 0x00
      0000CF 00                    1030 	.db 0x00
      0000D0 00                    1031 	.db 0x00
      0000D1 00                    1032 	.db 0x00
      0000D2 00                    1033 	.db 0x00
      0000D3 00                    1034 	.db 0x00
      0000D4 00                    1035 	.db 0x00
      0000D5 00                    1036 	.db 0x00
      0000D6 00                    1037 	.db 0x00
      0000D7 00                    1038 	.db 0x00
      0000D8 00                    1039 	.db 0x00
      0000D9 00                    1040 	.db 0x00
      0000DA 00                    1041 	.db 0x00
      0000DB 00                    1042 	.db 0x00
      0000DC 00                    1043 	.db 0x00
      0000DD 00                    1044 	.db 0x00
      0000DE 00                    1045 	.db 0x00
      0000DF 00                    1046 	.db 0x00
      0000E0 00                    1047 	.db 0x00
      0000E1 00                    1048 	.db 0x00
      0000E2 00                    1049 	.db 0x00
      0000E3 00                    1050 	.db 0x00
      0000E4 00                    1051 	.db 0x00
      0000E5 00                    1052 	.db 0x00
      0000E6 00                    1053 	.db 0x00
      0000E7 00                    1054 	.db 0x00
      0000E8 00                    1055 	.db 0x00
      0000E9 00                    1056 	.db 0x00
      0000EA 00                    1057 	.db 0x00
      0000EB 00                    1058 	.db 0x00
      0000EC 00                    1059 	.db 0x00
      0000ED 00                    1060 	.db 0x00
      0000EE 00                    1061 	.db 0x00
      0000EF 00                    1062 	.db 0x00
      0000F0 00                    1063 	.db 0x00
      0000F1 00                    1064 	.db 0x00
      0000F2 00                    1065 	.db 0x00
      0000F3 00                    1066 	.db 0x00
      0000F4 00                    1067 	.db 0x00
      0000F5 00                    1068 	.db 0x00
      0000F6 00                    1069 	.db 0x00
      0000F7 00                    1070 	.db 0x00
      0000F8 00                    1071 	.db 0x00
      0000F9 00                    1072 	.db 0x00
      0000FA 00                    1073 	.db 0x00
      0000FB 00                    1074 	.db 0x00
      0000FC 00                    1075 	.db 0x00
      0000FD 00                    1076 	.db 0x00
      0000FE 00                    1077 	.db 0x00
      0000FF 00                    1078 	.db 0x00
      000100                       1079 __xinit__current_dev:
      000100 00                    1080 	.db #0x00	; 0
                                   1081 	.area CABS (ABS)
