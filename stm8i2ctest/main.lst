                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.3.0 #14184 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _command_switcher
                                     13 	.globl _data_handler
                                     14 	.globl _cm_SW
                                     15 	.globl _cm_SR
                                     16 	.globl _cm_ST
                                     17 	.globl _cm_DB
                                     18 	.globl _cm_RM
                                     19 	.globl _cm_SN
                                     20 	.globl _cm_SM
                                     21 	.globl _i2c_scan
                                     22 	.globl _i2c_read
                                     23 	.globl _i2c_write
                                     24 	.globl _i2c_stop
                                     25 	.globl _i2c_send_address
                                     26 	.globl _i2c_start
                                     27 	.globl _i2c_init
                                     28 	.globl _uart_init
                                     29 	.globl _status_check
                                     30 	.globl _char_buffer_to_int
                                     31 	.globl _get_size_from_buff
                                     32 	.globl _get_addr_from_buff
                                     33 	.globl _convert_int_to_binary
                                     34 	.globl _convert_chars_to_int
                                     35 	.globl _convert_int_to_chars
                                     36 	.globl _uart_read
                                     37 	.globl _uart_write
                                     38 	.globl _UART_RX
                                     39 	.globl _UART_TX
                                     40 	.globl _delay
                                     41 	.globl ___memcpy
                                     42 	.globl _strlen
                                     43 	.globl _memset
                                     44 	.globl _memcmp
                                     45 	.globl _current_dev
                                     46 	.globl _data_buf
                                     47 	.globl _p_bytes
                                     48 	.globl _d_size
                                     49 	.globl _p_size
                                     50 	.globl _d_addr
                                     51 	.globl _a
                                     52 	.globl _buffer
                                     53 ;--------------------------------------------------------
                                     54 ; ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area DATA
                                     57 ;--------------------------------------------------------
                                     58 ; ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area INITIALIZED
      000000                         61 _buffer::
      000000                         62 	.ds 255
      0000FF                         63 _a::
      0000FF                         64 	.ds 3
      000102                         65 _d_addr::
      000102                         66 	.ds 1
      000103                         67 _p_size::
      000103                         68 	.ds 1
      000104                         69 _d_size::
      000104                         70 	.ds 1
      000105                         71 _p_bytes::
      000105                         72 	.ds 1
      000106                         73 _data_buf::
      000106                         74 	.ds 255
      000205                         75 _current_dev::
      000205                         76 	.ds 1
                                     77 ;--------------------------------------------------------
                                     78 ; Stack segment in internal ram
                                     79 ;--------------------------------------------------------
                                     80 	.area SSEG
      000000                         81 __start__stack:
      000000                         82 	.ds	1
                                     83 
                                     84 ;--------------------------------------------------------
                                     85 ; absolute external ram data
                                     86 ;--------------------------------------------------------
                                     87 	.area DABS (ABS)
                                     88 
                                     89 ; default segment ordering for linker
                                     90 	.area HOME
                                     91 	.area GSINIT
                                     92 	.area GSFINAL
                                     93 	.area CONST
                                     94 	.area INITIALIZER
                                     95 	.area CODE
                                     96 
                                     97 ;--------------------------------------------------------
                                     98 ; interrupt vector
                                     99 ;--------------------------------------------------------
                                    100 	.area HOME
      000000                        101 __interrupt_vect:
      000000 82v00u00u00            102 	int s_GSINIT ; reset
                                    103 ;--------------------------------------------------------
                                    104 ; global & static initialisations
                                    105 ;--------------------------------------------------------
                                    106 	.area HOME
                                    107 	.area GSINIT
                                    108 	.area GSFINAL
                                    109 	.area GSINIT
      000000 CDr00r00         [ 4]  110 	call	___sdcc_external_startup
      000003 4D               [ 1]  111 	tnz	a
      000004 27 03            [ 1]  112 	jreq	__sdcc_init_data
      000006 CCr00r04         [ 2]  113 	jp	__sdcc_program_startup
      000009                        114 __sdcc_init_data:
                                    115 ; stm8_genXINIT() start
      000009 AEr00r00         [ 2]  116 	ldw x, #l_DATA
      00000C 27 07            [ 1]  117 	jreq	00002$
      00000E                        118 00001$:
      00000E 72 4FuFFuFF      [ 1]  119 	clr (s_DATA - 1, x)
      000012 5A               [ 2]  120 	decw x
      000013 26 F9            [ 1]  121 	jrne	00001$
      000015                        122 00002$:
      000015 AEr00r00         [ 2]  123 	ldw	x, #l_INITIALIZER
      000018 27 09            [ 1]  124 	jreq	00004$
      00001A                        125 00003$:
      00001A D6uFFuFF         [ 1]  126 	ld	a, (s_INITIALIZER - 1, x)
      00001D D7uFFuFF         [ 1]  127 	ld	(s_INITIALIZED - 1, x), a
      000020 5A               [ 2]  128 	decw	x
      000021 26 F7            [ 1]  129 	jrne	00003$
      000023                        130 00004$:
                                    131 ; stm8_genXINIT() end
                                    132 	.area GSFINAL
      000000 CCr00r04         [ 2]  133 	jp	__sdcc_program_startup
                                    134 ;--------------------------------------------------------
                                    135 ; Home
                                    136 ;--------------------------------------------------------
                                    137 	.area HOME
                                    138 	.area HOME
      000004                        139 __sdcc_program_startup:
      000004 CCr07r05         [ 2]  140 	jp	_main
                                    141 ;	return from main will return to caller
                                    142 ;--------------------------------------------------------
                                    143 ; code
                                    144 ;--------------------------------------------------------
                                    145 	.area CODE
                                    146 ;	main.c: 26: void delay(unsigned long count) {
                                    147 ;	-----------------------------------------
                                    148 ;	 function delay
                                    149 ;	-----------------------------------------
      000000                        150 _delay:
      000000 52 08            [ 2]  151 	sub	sp, #8
                                    152 ;	main.c: 27: while (count--)
      000002 16 0D            [ 2]  153 	ldw	y, (0x0d, sp)
      000004 17 07            [ 2]  154 	ldw	(0x07, sp), y
      000006 1E 0B            [ 2]  155 	ldw	x, (0x0b, sp)
      000008                        156 00101$:
      000008 1F 01            [ 2]  157 	ldw	(0x01, sp), x
      00000A 7B 07            [ 1]  158 	ld	a, (0x07, sp)
      00000C 6B 03            [ 1]  159 	ld	(0x03, sp), a
      00000E 7B 08            [ 1]  160 	ld	a, (0x08, sp)
      000010 16 07            [ 2]  161 	ldw	y, (0x07, sp)
      000012 72 A2 00 01      [ 2]  162 	subw	y, #0x0001
      000016 17 07            [ 2]  163 	ldw	(0x07, sp), y
      000018 24 01            [ 1]  164 	jrnc	00117$
      00001A 5A               [ 2]  165 	decw	x
      00001B                        166 00117$:
      00001B 4D               [ 1]  167 	tnz	a
      00001C 26 08            [ 1]  168 	jrne	00118$
      00001E 16 02            [ 2]  169 	ldw	y, (0x02, sp)
      000020 26 04            [ 1]  170 	jrne	00118$
      000022 0D 01            [ 1]  171 	tnz	(0x01, sp)
      000024 27 03            [ 1]  172 	jreq	00104$
      000026                        173 00118$:
                                    174 ;	main.c: 28: nop();
      000026 9D               [ 1]  175 	nop
      000027 20 DF            [ 2]  176 	jra	00101$
      000029                        177 00104$:
                                    178 ;	main.c: 29: }
      000029 1E 09            [ 2]  179 	ldw	x, (9, sp)
      00002B 5B 0E            [ 2]  180 	addw	sp, #14
      00002D FC               [ 2]  181 	jp	(x)
                                    182 ;	main.c: 37: void UART_TX(unsigned char value)
                                    183 ;	-----------------------------------------
                                    184 ;	 function UART_TX
                                    185 ;	-----------------------------------------
      00002E                        186 _UART_TX:
                                    187 ;	main.c: 39: UART1_DR = value;
      00002E C7 52 31         [ 1]  188 	ld	0x5231, a
                                    189 ;	main.c: 40: while(!(UART1_SR & UART_SR_TXE));
      000031                        190 00101$:
      000031 C6 52 30         [ 1]  191 	ld	a, 0x5230
      000034 2A FB            [ 1]  192 	jrpl	00101$
                                    193 ;	main.c: 41: }
      000036 81               [ 4]  194 	ret
                                    195 ;	main.c: 42: unsigned char UART_RX(void)
                                    196 ;	-----------------------------------------
                                    197 ;	 function UART_RX
                                    198 ;	-----------------------------------------
      000037                        199 _UART_RX:
                                    200 ;	main.c: 44: while(!(UART1_SR & UART_SR_TXE));
      000037                        201 00101$:
      000037 C6 52 30         [ 1]  202 	ld	a, 0x5230
      00003A 2A FB            [ 1]  203 	jrpl	00101$
                                    204 ;	main.c: 45: return UART1_DR;
      00003C C6 52 31         [ 1]  205 	ld	a, 0x5231
                                    206 ;	main.c: 46: }
      00003F 81               [ 4]  207 	ret
                                    208 ;	main.c: 47: int uart_write(const char *str) {
                                    209 ;	-----------------------------------------
                                    210 ;	 function uart_write
                                    211 ;	-----------------------------------------
      000040                        212 _uart_write:
      000040 52 05            [ 2]  213 	sub	sp, #5
      000042 1F 03            [ 2]  214 	ldw	(0x03, sp), x
                                    215 ;	main.c: 49: for(i = 0; i < strlen(str); i++) {
      000044 0F 05            [ 1]  216 	clr	(0x05, sp)
      000046                        217 00103$:
      000046 1E 03            [ 2]  218 	ldw	x, (0x03, sp)
      000048 CDr00r00         [ 4]  219 	call	_strlen
      00004B 1F 01            [ 2]  220 	ldw	(0x01, sp), x
      00004D 7B 05            [ 1]  221 	ld	a, (0x05, sp)
      00004F 5F               [ 1]  222 	clrw	x
      000050 97               [ 1]  223 	ld	xl, a
      000051 13 01            [ 2]  224 	cpw	x, (0x01, sp)
      000053 24 0F            [ 1]  225 	jrnc	00101$
                                    226 ;	main.c: 51: UART_TX(str[i]);
      000055 5F               [ 1]  227 	clrw	x
      000056 7B 05            [ 1]  228 	ld	a, (0x05, sp)
      000058 97               [ 1]  229 	ld	xl, a
      000059 72 FB 03         [ 2]  230 	addw	x, (0x03, sp)
      00005C F6               [ 1]  231 	ld	a, (x)
      00005D CDr00r2E         [ 4]  232 	call	_UART_TX
                                    233 ;	main.c: 49: for(i = 0; i < strlen(str); i++) {
      000060 0C 05            [ 1]  234 	inc	(0x05, sp)
      000062 20 E2            [ 2]  235 	jra	00103$
      000064                        236 00101$:
                                    237 ;	main.c: 53: return(i); // Bytes sent
      000064 7B 05            [ 1]  238 	ld	a, (0x05, sp)
      000066 5F               [ 1]  239 	clrw	x
      000067 97               [ 1]  240 	ld	xl, a
                                    241 ;	main.c: 54: }
      000068 5B 05            [ 2]  242 	addw	sp, #5
      00006A 81               [ 4]  243 	ret
                                    244 ;	main.c: 55: int uart_read(void)
                                    245 ;	-----------------------------------------
                                    246 ;	 function uart_read
                                    247 ;	-----------------------------------------
      00006B                        248 _uart_read:
                                    249 ;	main.c: 57: memset(buffer, 0, sizeof(buffer));
      00006B 4B FF            [ 1]  250 	push	#0xff
      00006D 4B 00            [ 1]  251 	push	#0x00
      00006F 5F               [ 1]  252 	clrw	x
      000070 89               [ 2]  253 	pushw	x
      000071 AEr00r00         [ 2]  254 	ldw	x, #(_buffer+0)
      000074 CDr00r00         [ 4]  255 	call	_memset
                                    256 ;	main.c: 59: while(i<256)
      000077 5F               [ 1]  257 	clrw	x
      000078                        258 00105$:
      000078 A3 01 00         [ 2]  259 	cpw	x, #0x0100
      00007B 2E 22            [ 1]  260 	jrsge	00107$
                                    261 ;	main.c: 61: if(UART1_SR & UART_SR_RXNE)
      00007D C6 52 30         [ 1]  262 	ld	a, 0x5230
      000080 A5 20            [ 1]  263 	bcp	a, #0x20
      000082 27 F4            [ 1]  264 	jreq	00105$
                                    265 ;	main.c: 63: buffer[i] = UART_RX();
      000084 90 93            [ 1]  266 	ldw	y, x
      000086 72 A9r00r00      [ 2]  267 	addw	y, #(_buffer+0)
      00008A 89               [ 2]  268 	pushw	x
      00008B 90 89            [ 2]  269 	pushw	y
      00008D CDr00r37         [ 4]  270 	call	_UART_RX
      000090 90 85            [ 2]  271 	popw	y
      000092 85               [ 2]  272 	popw	x
      000093 90 F7            [ 1]  273 	ld	(y), a
                                    274 ;	main.c: 64: if(buffer[i] == '\r\n' )
      000095 A1 0D            [ 1]  275 	cp	a, #0x0d
      000097 26 03            [ 1]  276 	jrne	00102$
                                    277 ;	main.c: 66: return 1;
      000099 5F               [ 1]  278 	clrw	x
      00009A 5C               [ 1]  279 	incw	x
      00009B 81               [ 4]  280 	ret
                                    281 ;	main.c: 67: break;
      00009C                        282 00102$:
                                    283 ;	main.c: 69: i++;
      00009C 5C               [ 1]  284 	incw	x
      00009D 20 D9            [ 2]  285 	jra	00105$
      00009F                        286 00107$:
                                    287 ;	main.c: 72: return 0;
      00009F 5F               [ 1]  288 	clrw	x
                                    289 ;	main.c: 73: }
      0000A0 81               [ 4]  290 	ret
                                    291 ;	main.c: 82: void convert_int_to_chars(uint8_t num, char* rx_int_chars) {
                                    292 ;	-----------------------------------------
                                    293 ;	 function convert_int_to_chars
                                    294 ;	-----------------------------------------
      0000A1                        295 _convert_int_to_chars:
      0000A1 52 0D            [ 2]  296 	sub	sp, #13
      0000A3 6B 0D            [ 1]  297 	ld	(0x0d, sp), a
      0000A5 1F 0B            [ 2]  298 	ldw	(0x0b, sp), x
                                    299 ;	main.c: 85: rx_int_chars[0] = num / 100 + '0';
      0000A7 7B 0D            [ 1]  300 	ld	a, (0x0d, sp)
      0000A9 6B 02            [ 1]  301 	ld	(0x02, sp), a
      0000AB 0F 01            [ 1]  302 	clr	(0x01, sp)
                                    303 ;	main.c: 86: rx_int_chars[1] = num / 10 % 10 + '0';
      0000AD 1E 0B            [ 2]  304 	ldw	x, (0x0b, sp)
      0000AF 5C               [ 1]  305 	incw	x
      0000B0 1F 03            [ 2]  306 	ldw	(0x03, sp), x
                                    307 ;	main.c: 87: rx_int_chars[2] = num % 10 + '0';
      0000B2 1E 0B            [ 2]  308 	ldw	x, (0x0b, sp)
      0000B4 5C               [ 1]  309 	incw	x
      0000B5 5C               [ 1]  310 	incw	x
      0000B6 1F 05            [ 2]  311 	ldw	(0x05, sp), x
                                    312 ;	main.c: 86: rx_int_chars[1] = num / 10 % 10 + '0';
      0000B8 4B 0A            [ 1]  313 	push	#0x0a
      0000BA 4B 00            [ 1]  314 	push	#0x00
      0000BC 1E 03            [ 2]  315 	ldw	x, (0x03, sp)
                                    316 ;	main.c: 87: rx_int_chars[2] = num % 10 + '0';
      0000BE CDr00r00         [ 4]  317 	call	__divsint
      0000C1 1F 07            [ 2]  318 	ldw	(0x07, sp), x
      0000C3 4B 0A            [ 1]  319 	push	#0x0a
      0000C5 4B 00            [ 1]  320 	push	#0x00
      0000C7 1E 03            [ 2]  321 	ldw	x, (0x03, sp)
      0000C9 CDr00r00         [ 4]  322 	call	__modsint
      0000CC 9F               [ 1]  323 	ld	a, xl
      0000CD AB 30            [ 1]  324 	add	a, #0x30
      0000CF 6B 09            [ 1]  325 	ld	(0x09, sp), a
                                    326 ;	main.c: 83: if (num > 99) {
      0000D1 7B 0D            [ 1]  327 	ld	a, (0x0d, sp)
      0000D3 A1 63            [ 1]  328 	cp	a, #0x63
      0000D5 23 29            [ 2]  329 	jrule	00105$
                                    330 ;	main.c: 85: rx_int_chars[0] = num / 100 + '0';
      0000D7 4B 64            [ 1]  331 	push	#0x64
      0000D9 4B 00            [ 1]  332 	push	#0x00
      0000DB 1E 03            [ 2]  333 	ldw	x, (0x03, sp)
      0000DD CDr00r00         [ 4]  334 	call	__divsint
      0000E0 9F               [ 1]  335 	ld	a, xl
      0000E1 AB 30            [ 1]  336 	add	a, #0x30
      0000E3 1E 0B            [ 2]  337 	ldw	x, (0x0b, sp)
      0000E5 F7               [ 1]  338 	ld	(x), a
                                    339 ;	main.c: 86: rx_int_chars[1] = num / 10 % 10 + '0';
      0000E6 4B 0A            [ 1]  340 	push	#0x0a
      0000E8 4B 00            [ 1]  341 	push	#0x00
      0000EA 1E 09            [ 2]  342 	ldw	x, (0x09, sp)
      0000EC CDr00r00         [ 4]  343 	call	__modsint
      0000EF 9F               [ 1]  344 	ld	a, xl
      0000F0 AB 30            [ 1]  345 	add	a, #0x30
      0000F2 1E 03            [ 2]  346 	ldw	x, (0x03, sp)
      0000F4 F7               [ 1]  347 	ld	(x), a
                                    348 ;	main.c: 87: rx_int_chars[2] = num % 10 + '0';
      0000F5 1E 05            [ 2]  349 	ldw	x, (0x05, sp)
      0000F7 7B 09            [ 1]  350 	ld	a, (0x09, sp)
      0000F9 F7               [ 1]  351 	ld	(x), a
                                    352 ;	main.c: 88: rx_int_chars[3] ='\0';
      0000FA 1E 0B            [ 2]  353 	ldw	x, (0x0b, sp)
      0000FC 6F 03            [ 1]  354 	clr	(0x0003, x)
      0000FE 20 23            [ 2]  355 	jra	00107$
      000100                        356 00105$:
                                    357 ;	main.c: 90: } else if (num > 9) {
      000100 7B 0D            [ 1]  358 	ld	a, (0x0d, sp)
      000102 A1 09            [ 1]  359 	cp	a, #0x09
      000104 23 13            [ 2]  360 	jrule	00102$
                                    361 ;	main.c: 92: rx_int_chars[0] = num / 10 + '0';
      000106 7B 08            [ 1]  362 	ld	a, (0x08, sp)
      000108 6B 0A            [ 1]  363 	ld	(0x0a, sp), a
      00010A AB 30            [ 1]  364 	add	a, #0x30
      00010C 1E 0B            [ 2]  365 	ldw	x, (0x0b, sp)
      00010E F7               [ 1]  366 	ld	(x), a
                                    367 ;	main.c: 93: rx_int_chars[1] = num % 10 + '0';
      00010F 1E 03            [ 2]  368 	ldw	x, (0x03, sp)
      000111 7B 09            [ 1]  369 	ld	a, (0x09, sp)
      000113 F7               [ 1]  370 	ld	(x), a
                                    371 ;	main.c: 94: rx_int_chars[2] ='\0'; // Заканчиваем строку символом конца строки
      000114 1E 05            [ 2]  372 	ldw	x, (0x05, sp)
      000116 7F               [ 1]  373 	clr	(x)
      000117 20 0A            [ 2]  374 	jra	00107$
      000119                        375 00102$:
                                    376 ;	main.c: 97: rx_int_chars[0] = num + '0';
      000119 7B 0D            [ 1]  377 	ld	a, (0x0d, sp)
      00011B AB 30            [ 1]  378 	add	a, #0x30
      00011D 1E 0B            [ 2]  379 	ldw	x, (0x0b, sp)
      00011F F7               [ 1]  380 	ld	(x), a
                                    381 ;	main.c: 98: rx_int_chars[1] ='\0';
      000120 1E 03            [ 2]  382 	ldw	x, (0x03, sp)
      000122 7F               [ 1]  383 	clr	(x)
      000123                        384 00107$:
                                    385 ;	main.c: 100: }
      000123 5B 0D            [ 2]  386 	addw	sp, #13
      000125 81               [ 4]  387 	ret
                                    388 ;	main.c: 102: uint8_t convert_chars_to_int(char* rx_chars_int, const int i) {
                                    389 ;	-----------------------------------------
                                    390 ;	 function convert_chars_to_int
                                    391 ;	-----------------------------------------
      000126                        392 _convert_chars_to_int:
      000126 52 03            [ 2]  393 	sub	sp, #3
      000128 1F 02            [ 2]  394 	ldw	(0x02, sp), x
                                    395 ;	main.c: 103: uint8_t result = 0;
      00012A 4F               [ 1]  396 	clr	a
                                    397 ;	main.c: 105: for (int o = 0; o < i; o++) {
      00012B 5F               [ 1]  398 	clrw	x
      00012C                        399 00103$:
      00012C 13 06            [ 2]  400 	cpw	x, (0x06, sp)
      00012E 2E 18            [ 1]  401 	jrsge	00101$
                                    402 ;	main.c: 107: result = (result * 10) + (rx_chars_int[o] - '0');
      000130 90 97            [ 1]  403 	ld	yl, a
      000132 A6 0A            [ 1]  404 	ld	a, #0x0a
      000134 90 42            [ 4]  405 	mul	y, a
      000136 61               [ 1]  406 	exg	a, yl
      000137 6B 01            [ 1]  407 	ld	(0x01, sp), a
      000139 61               [ 1]  408 	exg	a, yl
      00013A 90 93            [ 1]  409 	ldw	y, x
      00013C 72 F9 02         [ 2]  410 	addw	y, (0x02, sp)
      00013F 90 F6            [ 1]  411 	ld	a, (y)
      000141 A0 30            [ 1]  412 	sub	a, #0x30
      000143 1B 01            [ 1]  413 	add	a, (0x01, sp)
                                    414 ;	main.c: 105: for (int o = 0; o < i; o++) {
      000145 5C               [ 1]  415 	incw	x
      000146 20 E4            [ 2]  416 	jra	00103$
      000148                        417 00101$:
                                    418 ;	main.c: 110: return result;
                                    419 ;	main.c: 111: }
      000148 1E 04            [ 2]  420 	ldw	x, (4, sp)
      00014A 5B 07            [ 2]  421 	addw	sp, #7
      00014C FC               [ 2]  422 	jp	(x)
                                    423 ;	main.c: 114: void convert_int_to_binary(int num, char* rx_binary_chars) {
                                    424 ;	-----------------------------------------
                                    425 ;	 function convert_int_to_binary
                                    426 ;	-----------------------------------------
      00014D                        427 _convert_int_to_binary:
      00014D 52 04            [ 2]  428 	sub	sp, #4
      00014F 1F 01            [ 2]  429 	ldw	(0x01, sp), x
                                    430 ;	main.c: 116: for(int i = 7; i >= 0; i--) {
      000151 AE 00 07         [ 2]  431 	ldw	x, #0x0007
      000154 1F 03            [ 2]  432 	ldw	(0x03, sp), x
      000156                        433 00103$:
      000156 0D 03            [ 1]  434 	tnz	(0x03, sp)
      000158 2B 22            [ 1]  435 	jrmi	00101$
                                    436 ;	main.c: 118: rx_binary_chars[7 - i] = ((num >> i) & 1) + '0';
      00015A AE 00 07         [ 2]  437 	ldw	x, #0x0007
      00015D 72 F0 03         [ 2]  438 	subw	x, (0x03, sp)
      000160 72 FB 07         [ 2]  439 	addw	x, (0x07, sp)
      000163 16 01            [ 2]  440 	ldw	y, (0x01, sp)
      000165 7B 04            [ 1]  441 	ld	a, (0x04, sp)
      000167 27 05            [ 1]  442 	jreq	00120$
      000169                        443 00119$:
      000169 90 57            [ 2]  444 	sraw	y
      00016B 4A               [ 1]  445 	dec	a
      00016C 26 FB            [ 1]  446 	jrne	00119$
      00016E                        447 00120$:
      00016E 90 9F            [ 1]  448 	ld	a, yl
      000170 A4 01            [ 1]  449 	and	a, #0x01
      000172 AB 30            [ 1]  450 	add	a, #0x30
      000174 F7               [ 1]  451 	ld	(x), a
                                    452 ;	main.c: 116: for(int i = 7; i >= 0; i--) {
      000175 1E 03            [ 2]  453 	ldw	x, (0x03, sp)
      000177 5A               [ 2]  454 	decw	x
      000178 1F 03            [ 2]  455 	ldw	(0x03, sp), x
      00017A 20 DA            [ 2]  456 	jra	00103$
      00017C                        457 00101$:
                                    458 ;	main.c: 120: rx_binary_chars[8] = '\0'; // Добавляем символ конца строки
      00017C 1E 07            [ 2]  459 	ldw	x, (0x07, sp)
      00017E 6F 08            [ 1]  460 	clr	(0x0008, x)
                                    461 ;	main.c: 121: }
      000180 1E 05            [ 2]  462 	ldw	x, (5, sp)
      000182 5B 08            [ 2]  463 	addw	sp, #8
      000184 FC               [ 2]  464 	jp	(x)
                                    465 ;	main.c: 130: void get_addr_from_buff(void)
                                    466 ;	-----------------------------------------
                                    467 ;	 function get_addr_from_buff
                                    468 ;	-----------------------------------------
      000185                        469 _get_addr_from_buff:
      000185 52 02            [ 2]  470 	sub	sp, #2
                                    471 ;	main.c: 134: while(1)
      000187 A6 03            [ 1]  472 	ld	a, #0x03
      000189 6B 01            [ 1]  473 	ld	(0x01, sp), a
      00018B 0F 02            [ 1]  474 	clr	(0x02, sp)
      00018D                        475 00105$:
                                    476 ;	main.c: 136: if(buffer[i] == ' ' || buffer[i] == '\r\n')
      00018D 5F               [ 1]  477 	clrw	x
      00018E 7B 01            [ 1]  478 	ld	a, (0x01, sp)
      000190 97               [ 1]  479 	ld	xl, a
      000191 D6u00u00         [ 1]  480 	ld	a, (_buffer+0, x)
      000194 A1 20            [ 1]  481 	cp	a, #0x20
      000196 27 04            [ 1]  482 	jreq	00101$
      000198 A1 0D            [ 1]  483 	cp	a, #0x0d
      00019A 26 08            [ 1]  484 	jrne	00102$
      00019C                        485 00101$:
                                    486 ;	main.c: 138: p_size = i+1;
      00019C 7B 01            [ 1]  487 	ld	a, (0x01, sp)
      00019E 4C               [ 1]  488 	inc	a
      00019F C7u01u03         [ 1]  489 	ld	_p_size+0, a
                                    490 ;	main.c: 139: break;
      0001A2 20 06            [ 2]  491 	jra	00106$
      0001A4                        492 00102$:
                                    493 ;	main.c: 141: i++;
      0001A4 0C 01            [ 1]  494 	inc	(0x01, sp)
                                    495 ;	main.c: 142: counter++;
      0001A6 0C 02            [ 1]  496 	inc	(0x02, sp)
      0001A8 20 E3            [ 2]  497 	jra	00105$
      0001AA                        498 00106$:
                                    499 ;	main.c: 144: memcpy(a, &buffer[3], counter);
      0001AA 5F               [ 1]  500 	clrw	x
      0001AB 7B 02            [ 1]  501 	ld	a, (0x02, sp)
      0001AD 97               [ 1]  502 	ld	xl, a
      0001AE 89               [ 2]  503 	pushw	x
      0001AF 4Br03            [ 1]  504 	push	#<(_buffer+3)
      0001B1 4Bs00            [ 1]  505 	push	#((_buffer+3) >> 8)
      0001B3 AEr00rFF         [ 2]  506 	ldw	x, #(_a+0)
      0001B6 CDr00r00         [ 4]  507 	call	___memcpy
                                    508 ;	main.c: 145: d_addr = convert_chars_to_int(a, counter);
      0001B9 5F               [ 1]  509 	clrw	x
      0001BA 7B 02            [ 1]  510 	ld	a, (0x02, sp)
      0001BC 97               [ 1]  511 	ld	xl, a
      0001BD 89               [ 2]  512 	pushw	x
      0001BE AEr00rFF         [ 2]  513 	ldw	x, #(_a+0)
      0001C1 CDr01r26         [ 4]  514 	call	_convert_chars_to_int
      0001C4 C7u01u02         [ 1]  515 	ld	_d_addr+0, a
                                    516 ;	main.c: 146: }
      0001C7 5B 02            [ 2]  517 	addw	sp, #2
      0001C9 81               [ 4]  518 	ret
                                    519 ;	main.c: 148: void get_size_from_buff(void)
                                    520 ;	-----------------------------------------
                                    521 ;	 function get_size_from_buff
                                    522 ;	-----------------------------------------
      0001CA                        523 _get_size_from_buff:
      0001CA 52 02            [ 2]  524 	sub	sp, #2
                                    525 ;	main.c: 150: memset(a, 0, sizeof(a));
      0001CC 4B 03            [ 1]  526 	push	#0x03
      0001CE 4B 00            [ 1]  527 	push	#0x00
      0001D0 5F               [ 1]  528 	clrw	x
      0001D1 89               [ 2]  529 	pushw	x
      0001D2 AEr00rFF         [ 2]  530 	ldw	x, #(_a+0)
      0001D5 CDr00r00         [ 4]  531 	call	_memset
                                    532 ;	main.c: 152: uint8_t i = p_size;
      0001D8 C6u01u03         [ 1]  533 	ld	a, _p_size+0
      0001DB 6B 01            [ 1]  534 	ld	(0x01, sp), a
                                    535 ;	main.c: 153: while(1)
      0001DD 0F 02            [ 1]  536 	clr	(0x02, sp)
      0001DF                        537 00105$:
                                    538 ;	main.c: 155: if(buffer[i] == ' ' || buffer[i] == '\r\n')
      0001DF 5F               [ 1]  539 	clrw	x
      0001E0 7B 01            [ 1]  540 	ld	a, (0x01, sp)
      0001E2 97               [ 1]  541 	ld	xl, a
      0001E3 D6u00u00         [ 1]  542 	ld	a, (_buffer+0, x)
      0001E6 A1 20            [ 1]  543 	cp	a, #0x20
      0001E8 27 04            [ 1]  544 	jreq	00101$
      0001EA A1 0D            [ 1]  545 	cp	a, #0x0d
      0001EC 26 08            [ 1]  546 	jrne	00102$
      0001EE                        547 00101$:
                                    548 ;	main.c: 158: p_bytes = i+1;
      0001EE 7B 01            [ 1]  549 	ld	a, (0x01, sp)
      0001F0 4C               [ 1]  550 	inc	a
      0001F1 C7u01u05         [ 1]  551 	ld	_p_bytes+0, a
                                    552 ;	main.c: 159: break;
      0001F4 20 06            [ 2]  553 	jra	00106$
      0001F6                        554 00102$:
                                    555 ;	main.c: 161: i++;
      0001F6 0C 01            [ 1]  556 	inc	(0x01, sp)
                                    557 ;	main.c: 162: counter++;
      0001F8 0C 02            [ 1]  558 	inc	(0x02, sp)
      0001FA 20 E3            [ 2]  559 	jra	00105$
      0001FC                        560 00106$:
                                    561 ;	main.c: 165: memcpy(a, &buffer[p_size], counter);
      0001FC 90 5F            [ 1]  562 	clrw	y
      0001FE 7B 02            [ 1]  563 	ld	a, (0x02, sp)
      000200 90 97            [ 1]  564 	ld	yl, a
      000202 5F               [ 1]  565 	clrw	x
      000203 C6u01u03         [ 1]  566 	ld	a, _p_size+0
      000206 97               [ 1]  567 	ld	xl, a
      000207 1Cr00r00         [ 2]  568 	addw	x, #(_buffer+0)
      00020A 90 89            [ 2]  569 	pushw	y
      00020C 89               [ 2]  570 	pushw	x
      00020D AEr00rFF         [ 2]  571 	ldw	x, #(_a+0)
      000210 CDr00r00         [ 4]  572 	call	___memcpy
                                    573 ;	main.c: 166: d_size = convert_chars_to_int(a, counter);
      000213 5F               [ 1]  574 	clrw	x
      000214 7B 02            [ 1]  575 	ld	a, (0x02, sp)
      000216 97               [ 1]  576 	ld	xl, a
      000217 89               [ 2]  577 	pushw	x
      000218 AEr00rFF         [ 2]  578 	ldw	x, #(_a+0)
      00021B CDr01r26         [ 4]  579 	call	_convert_chars_to_int
      00021E C7u01u04         [ 1]  580 	ld	_d_size+0, a
                                    581 ;	main.c: 167: }
      000221 5B 02            [ 2]  582 	addw	sp, #2
      000223 81               [ 4]  583 	ret
                                    584 ;	main.c: 168: void char_buffer_to_int(void)
                                    585 ;	-----------------------------------------
                                    586 ;	 function char_buffer_to_int
                                    587 ;	-----------------------------------------
      000224                        588 _char_buffer_to_int:
      000224 52 08            [ 2]  589 	sub	sp, #8
                                    590 ;	main.c: 170: memset(a, 0, sizeof(a));
      000226 4B 03            [ 1]  591 	push	#0x03
      000228 4B 00            [ 1]  592 	push	#0x00
      00022A 5F               [ 1]  593 	clrw	x
      00022B 89               [ 2]  594 	pushw	x
      00022C AEr00rFF         [ 2]  595 	ldw	x, #(_a+0)
      00022F CDr00r00         [ 4]  596 	call	_memset
                                    597 ;	main.c: 171: uint8_t counter = d_size;
      000232 C6u01u04         [ 1]  598 	ld	a, _d_size+0
      000235 6B 01            [ 1]  599 	ld	(0x01, sp), a
                                    600 ;	main.c: 172: uint8_t i = p_bytes;
      000237 C6u01u05         [ 1]  601 	ld	a, _p_bytes+0
      00023A 6B 03            [ 1]  602 	ld	(0x03, sp), a
                                    603 ;	main.c: 175: for(int o = 0; o < counter;o++)
      00023C 0F 04            [ 1]  604 	clr	(0x04, sp)
      00023E 5F               [ 1]  605 	clrw	x
      00023F 1F 05            [ 2]  606 	ldw	(0x05, sp), x
      000241                        607 00112$:
      000241 7B 01            [ 1]  608 	ld	a, (0x01, sp)
      000243 6B 08            [ 1]  609 	ld	(0x08, sp), a
      000245 0F 07            [ 1]  610 	clr	(0x07, sp)
      000247 1E 05            [ 2]  611 	ldw	x, (0x05, sp)
      000249 13 07            [ 2]  612 	cpw	x, (0x07, sp)
      00024B 2E 65            [ 1]  613 	jrsge	00114$
                                    614 ;	main.c: 177: uint8_t number_counter = 0;
      00024D 0F 02            [ 1]  615 	clr	(0x02, sp)
                                    616 ;	main.c: 178: while(1)
      00024F 7B 03            [ 1]  617 	ld	a, (0x03, sp)
      000251 6B 07            [ 1]  618 	ld	(0x07, sp), a
      000253 0F 08            [ 1]  619 	clr	(0x08, sp)
      000255                        620 00108$:
                                    621 ;	main.c: 180: if(buffer[i] == ' ')
      000255 5F               [ 1]  622 	clrw	x
      000256 7B 07            [ 1]  623 	ld	a, (0x07, sp)
      000258 97               [ 1]  624 	ld	xl, a
      000259 D6u00u00         [ 1]  625 	ld	a, (_buffer+0, x)
      00025C A1 20            [ 1]  626 	cp	a, #0x20
      00025E 26 04            [ 1]  627 	jrne	00105$
                                    628 ;	main.c: 182: i++;
      000260 0C 03            [ 1]  629 	inc	(0x03, sp)
                                    630 ;	main.c: 183: break;
      000262 20 12            [ 2]  631 	jra	00109$
      000264                        632 00105$:
                                    633 ;	main.c: 185: else if(buffer[i] == '\r\n')
      000264 A1 0D            [ 1]  634 	cp	a, #0x0d
      000266 27 0E            [ 1]  635 	jreq	00109$
                                    636 ;	main.c: 188: i++;
      000268 0C 07            [ 1]  637 	inc	(0x07, sp)
      00026A 7B 07            [ 1]  638 	ld	a, (0x07, sp)
      00026C 6B 03            [ 1]  639 	ld	(0x03, sp), a
                                    640 ;	main.c: 190: number_counter++;
      00026E 0C 08            [ 1]  641 	inc	(0x08, sp)
      000270 7B 08            [ 1]  642 	ld	a, (0x08, sp)
      000272 6B 02            [ 1]  643 	ld	(0x02, sp), a
      000274 20 DF            [ 2]  644 	jra	00108$
      000276                        645 00109$:
                                    646 ;	main.c: 192: memcpy(a, &buffer[i - number_counter], number_counter);
      000276 90 5F            [ 1]  647 	clrw	y
      000278 7B 02            [ 1]  648 	ld	a, (0x02, sp)
      00027A 90 97            [ 1]  649 	ld	yl, a
      00027C 5F               [ 1]  650 	clrw	x
      00027D 7B 03            [ 1]  651 	ld	a, (0x03, sp)
      00027F 97               [ 1]  652 	ld	xl, a
      000280 7B 02            [ 1]  653 	ld	a, (0x02, sp)
      000282 6B 08            [ 1]  654 	ld	(0x08, sp), a
      000284 0F 07            [ 1]  655 	clr	(0x07, sp)
      000286 72 F0 07         [ 2]  656 	subw	x, (0x07, sp)
      000289 1Cr00r00         [ 2]  657 	addw	x, #(_buffer+0)
      00028C 90 89            [ 2]  658 	pushw	y
      00028E 89               [ 2]  659 	pushw	x
      00028F AEr00rFF         [ 2]  660 	ldw	x, #(_a+0)
      000292 CDr00r00         [ 4]  661 	call	___memcpy
                                    662 ;	main.c: 193: data_buf[int_buf_i] = convert_chars_to_int(a, number_counter);
      000295 5F               [ 1]  663 	clrw	x
      000296 7B 04            [ 1]  664 	ld	a, (0x04, sp)
      000298 97               [ 1]  665 	ld	xl, a
      000299 1Cr01r06         [ 2]  666 	addw	x, #(_data_buf+0)
      00029C 89               [ 2]  667 	pushw	x
      00029D 16 09            [ 2]  668 	ldw	y, (0x09, sp)
      00029F 90 89            [ 2]  669 	pushw	y
      0002A1 AEr00rFF         [ 2]  670 	ldw	x, #(_a+0)
      0002A4 CDr01r26         [ 4]  671 	call	_convert_chars_to_int
      0002A7 85               [ 2]  672 	popw	x
      0002A8 F7               [ 1]  673 	ld	(x), a
                                    674 ;	main.c: 194: int_buf_i++;
      0002A9 0C 04            [ 1]  675 	inc	(0x04, sp)
                                    676 ;	main.c: 175: for(int o = 0; o < counter;o++)
      0002AB 1E 05            [ 2]  677 	ldw	x, (0x05, sp)
      0002AD 5C               [ 1]  678 	incw	x
      0002AE 1F 05            [ 2]  679 	ldw	(0x05, sp), x
      0002B0 20 8F            [ 2]  680 	jra	00112$
      0002B2                        681 00114$:
                                    682 ;	main.c: 196: }
      0002B2 5B 08            [ 2]  683 	addw	sp, #8
      0002B4 81               [ 4]  684 	ret
                                    685 ;	main.c: 204: void status_check(void){
                                    686 ;	-----------------------------------------
                                    687 ;	 function status_check
                                    688 ;	-----------------------------------------
      0002B5                        689 _status_check:
      0002B5 52 09            [ 2]  690 	sub	sp, #9
                                    691 ;	main.c: 205: char rx_binary_chars[9]={0};
      0002B7 0F 01            [ 1]  692 	clr	(0x01, sp)
      0002B9 0F 02            [ 1]  693 	clr	(0x02, sp)
      0002BB 0F 03            [ 1]  694 	clr	(0x03, sp)
      0002BD 0F 04            [ 1]  695 	clr	(0x04, sp)
      0002BF 0F 05            [ 1]  696 	clr	(0x05, sp)
      0002C1 0F 06            [ 1]  697 	clr	(0x06, sp)
      0002C3 0F 07            [ 1]  698 	clr	(0x07, sp)
      0002C5 0F 08            [ 1]  699 	clr	(0x08, sp)
      0002C7 0F 09            [ 1]  700 	clr	(0x09, sp)
                                    701 ;	main.c: 206: uart_write("\nI2C_REGS >.<\n");
      0002C9 AEr00r00         [ 2]  702 	ldw	x, #(___str_0+0)
      0002CC CDr00r40         [ 4]  703 	call	_uart_write
                                    704 ;	main.c: 207: convert_int_to_binary(I2C_SR1, rx_binary_chars);
      0002CF 96               [ 1]  705 	ldw	x, sp
      0002D0 5C               [ 1]  706 	incw	x
      0002D1 51               [ 1]  707 	exgw	x, y
      0002D2 C6 52 17         [ 1]  708 	ld	a, 0x5217
      0002D5 5F               [ 1]  709 	clrw	x
      0002D6 90 89            [ 2]  710 	pushw	y
      0002D8 97               [ 1]  711 	ld	xl, a
      0002D9 CDr01r4D         [ 4]  712 	call	_convert_int_to_binary
                                    713 ;	main.c: 208: uart_write("\nSR1 -> ");
      0002DC AEr00r0F         [ 2]  714 	ldw	x, #(___str_1+0)
      0002DF CDr00r40         [ 4]  715 	call	_uart_write
                                    716 ;	main.c: 209: uart_write(rx_binary_chars);
      0002E2 96               [ 1]  717 	ldw	x, sp
      0002E3 5C               [ 1]  718 	incw	x
      0002E4 CDr00r40         [ 4]  719 	call	_uart_write
                                    720 ;	main.c: 210: uart_write(" <-\n");
      0002E7 AEr00r18         [ 2]  721 	ldw	x, #(___str_2+0)
      0002EA CDr00r40         [ 4]  722 	call	_uart_write
                                    723 ;	main.c: 211: convert_int_to_binary(I2C_SR2, rx_binary_chars);
      0002ED 96               [ 1]  724 	ldw	x, sp
      0002EE 5C               [ 1]  725 	incw	x
      0002EF 51               [ 1]  726 	exgw	x, y
      0002F0 C6 52 18         [ 1]  727 	ld	a, 0x5218
      0002F3 5F               [ 1]  728 	clrw	x
      0002F4 90 89            [ 2]  729 	pushw	y
      0002F6 97               [ 1]  730 	ld	xl, a
      0002F7 CDr01r4D         [ 4]  731 	call	_convert_int_to_binary
                                    732 ;	main.c: 212: uart_write("SR2 -> ");
      0002FA AEr00r1D         [ 2]  733 	ldw	x, #(___str_3+0)
      0002FD CDr00r40         [ 4]  734 	call	_uart_write
                                    735 ;	main.c: 213: uart_write(rx_binary_chars);
      000300 96               [ 1]  736 	ldw	x, sp
      000301 5C               [ 1]  737 	incw	x
      000302 CDr00r40         [ 4]  738 	call	_uart_write
                                    739 ;	main.c: 214: uart_write(" <-\n");
      000305 AEr00r18         [ 2]  740 	ldw	x, #(___str_2+0)
      000308 CDr00r40         [ 4]  741 	call	_uart_write
                                    742 ;	main.c: 215: convert_int_to_binary(I2C_SR3, rx_binary_chars);
      00030B 96               [ 1]  743 	ldw	x, sp
      00030C 5C               [ 1]  744 	incw	x
      00030D 51               [ 1]  745 	exgw	x, y
      00030E C6 52 19         [ 1]  746 	ld	a, 0x5219
      000311 5F               [ 1]  747 	clrw	x
      000312 90 89            [ 2]  748 	pushw	y
      000314 97               [ 1]  749 	ld	xl, a
      000315 CDr01r4D         [ 4]  750 	call	_convert_int_to_binary
                                    751 ;	main.c: 216: uart_write("SR3 -> ");
      000318 AEr00r25         [ 2]  752 	ldw	x, #(___str_4+0)
      00031B CDr00r40         [ 4]  753 	call	_uart_write
                                    754 ;	main.c: 217: uart_write(rx_binary_chars);
      00031E 96               [ 1]  755 	ldw	x, sp
      00031F 5C               [ 1]  756 	incw	x
      000320 CDr00r40         [ 4]  757 	call	_uart_write
                                    758 ;	main.c: 218: uart_write(" <-\n");
      000323 AEr00r18         [ 2]  759 	ldw	x, #(___str_2+0)
      000326 CDr00r40         [ 4]  760 	call	_uart_write
                                    761 ;	main.c: 219: convert_int_to_binary(I2C_CR1, rx_binary_chars);
      000329 96               [ 1]  762 	ldw	x, sp
      00032A 5C               [ 1]  763 	incw	x
      00032B 51               [ 1]  764 	exgw	x, y
      00032C C6 52 10         [ 1]  765 	ld	a, 0x5210
      00032F 5F               [ 1]  766 	clrw	x
      000330 90 89            [ 2]  767 	pushw	y
      000332 97               [ 1]  768 	ld	xl, a
      000333 CDr01r4D         [ 4]  769 	call	_convert_int_to_binary
                                    770 ;	main.c: 220: uart_write("CR1 -> ");
      000336 AEr00r2D         [ 2]  771 	ldw	x, #(___str_5+0)
      000339 CDr00r40         [ 4]  772 	call	_uart_write
                                    773 ;	main.c: 221: uart_write(rx_binary_chars);
      00033C 96               [ 1]  774 	ldw	x, sp
      00033D 5C               [ 1]  775 	incw	x
      00033E CDr00r40         [ 4]  776 	call	_uart_write
                                    777 ;	main.c: 222: uart_write(" <-\n");
      000341 AEr00r18         [ 2]  778 	ldw	x, #(___str_2+0)
      000344 CDr00r40         [ 4]  779 	call	_uart_write
                                    780 ;	main.c: 223: convert_int_to_binary(I2C_CR2, rx_binary_chars);
      000347 96               [ 1]  781 	ldw	x, sp
      000348 5C               [ 1]  782 	incw	x
      000349 51               [ 1]  783 	exgw	x, y
      00034A C6 52 11         [ 1]  784 	ld	a, 0x5211
      00034D 5F               [ 1]  785 	clrw	x
      00034E 90 89            [ 2]  786 	pushw	y
      000350 97               [ 1]  787 	ld	xl, a
      000351 CDr01r4D         [ 4]  788 	call	_convert_int_to_binary
                                    789 ;	main.c: 224: uart_write("CR2 -> ");
      000354 AEr00r35         [ 2]  790 	ldw	x, #(___str_6+0)
      000357 CDr00r40         [ 4]  791 	call	_uart_write
                                    792 ;	main.c: 225: uart_write(rx_binary_chars);
      00035A 96               [ 1]  793 	ldw	x, sp
      00035B 5C               [ 1]  794 	incw	x
      00035C CDr00r40         [ 4]  795 	call	_uart_write
                                    796 ;	main.c: 226: uart_write(" <-\n");
      00035F AEr00r18         [ 2]  797 	ldw	x, #(___str_2+0)
      000362 CDr00r40         [ 4]  798 	call	_uart_write
                                    799 ;	main.c: 227: convert_int_to_binary(I2C_DR, rx_binary_chars);
      000365 96               [ 1]  800 	ldw	x, sp
      000366 5C               [ 1]  801 	incw	x
      000367 51               [ 1]  802 	exgw	x, y
      000368 C6 52 16         [ 1]  803 	ld	a, 0x5216
      00036B 5F               [ 1]  804 	clrw	x
      00036C 90 89            [ 2]  805 	pushw	y
      00036E 97               [ 1]  806 	ld	xl, a
      00036F CDr01r4D         [ 4]  807 	call	_convert_int_to_binary
                                    808 ;	main.c: 228: uart_write("DR -> ");
      000372 AEr00r3D         [ 2]  809 	ldw	x, #(___str_7+0)
      000375 CDr00r40         [ 4]  810 	call	_uart_write
                                    811 ;	main.c: 229: uart_write(rx_binary_chars);
      000378 96               [ 1]  812 	ldw	x, sp
      000379 5C               [ 1]  813 	incw	x
      00037A CDr00r40         [ 4]  814 	call	_uart_write
                                    815 ;	main.c: 230: uart_write(" <-\n");
      00037D AEr00r18         [ 2]  816 	ldw	x, #(___str_2+0)
      000380 CDr00r40         [ 4]  817 	call	_uart_write
                                    818 ;	main.c: 231: uart_write("UART_REGS >.<\n");
      000383 AEr00r44         [ 2]  819 	ldw	x, #(___str_8+0)
      000386 CDr00r40         [ 4]  820 	call	_uart_write
                                    821 ;	main.c: 276: }
      000389 5B 09            [ 2]  822 	addw	sp, #9
      00038B 81               [ 4]  823 	ret
                                    824 ;	main.c: 278: void uart_init(void){
                                    825 ;	-----------------------------------------
                                    826 ;	 function uart_init
                                    827 ;	-----------------------------------------
      00038C                        828 _uart_init:
                                    829 ;	main.c: 279: CLK_CKDIVR = 0;
      00038C 35 00 50 C6      [ 1]  830 	mov	0x50c6+0, #0x00
                                    831 ;	main.c: 282: UART1_CR2 |= UART_CR2_TEN; // Transmitter enable
      000390 72 16 52 35      [ 1]  832 	bset	0x5235, #3
                                    833 ;	main.c: 283: UART1_CR2 |= UART_CR2_REN; // Receiver enable
      000394 72 14 52 35      [ 1]  834 	bset	0x5235, #2
                                    835 ;	main.c: 284: UART1_CR3 &= ~(UART_CR3_STOP1 | UART_CR3_STOP2); // 1 stop bit
      000398 C6 52 36         [ 1]  836 	ld	a, 0x5236
      00039B A4 CF            [ 1]  837 	and	a, #0xcf
      00039D C7 52 36         [ 1]  838 	ld	0x5236, a
                                    839 ;	main.c: 286: UART1_BRR2 = 0x03; UART1_BRR1 = 0x68; // 0x0683 coded funky way (see ref manual)
      0003A0 35 03 52 33      [ 1]  840 	mov	0x5233+0, #0x03
      0003A4 35 68 52 32      [ 1]  841 	mov	0x5232+0, #0x68
                                    842 ;	main.c: 287: }
      0003A8 81               [ 4]  843 	ret
                                    844 ;	main.c: 291: void i2c_init(void) {
                                    845 ;	-----------------------------------------
                                    846 ;	 function i2c_init
                                    847 ;	-----------------------------------------
      0003A9                        848 _i2c_init:
                                    849 ;	main.c: 297: I2C_CR1 = I2C_CR1 & ~0x01;      // PE=0, disable I2C before setup
      0003A9 72 11 52 10      [ 1]  850 	bres	0x5210, #0
                                    851 ;	main.c: 298: I2C_FREQR= 16;                  // peripheral frequence =16MHz
      0003AD 35 10 52 12      [ 1]  852 	mov	0x5212+0, #0x10
                                    853 ;	main.c: 299: I2C_CCRH = 0;                   // =0
      0003B1 35 00 52 1C      [ 1]  854 	mov	0x521c+0, #0x00
                                    855 ;	main.c: 300: I2C_CCRL = 80;                  // 100kHz for I2C
      0003B5 35 50 52 1B      [ 1]  856 	mov	0x521b+0, #0x50
                                    857 ;	main.c: 301: I2C_CCRH = I2C_CCRH & ~0x80;    // set standart mode(100кHz)
      0003B9 72 1F 52 1C      [ 1]  858 	bres	0x521c, #7
                                    859 ;	main.c: 302: I2C_OARH = I2C_OARH & ~0x80;    // 7-bit address mode
      0003BD 72 1F 52 14      [ 1]  860 	bres	0x5214, #7
                                    861 ;	main.c: 303: I2C_OARH = I2C_OARH | 0x40;     // see reference manual
      0003C1 72 1C 52 14      [ 1]  862 	bset	0x5214, #6
                                    863 ;	main.c: 304: I2C_CR1 = I2C_CR1 | 0x01;       // PE=1, enable I2C
      0003C5 72 10 52 10      [ 1]  864 	bset	0x5210, #0
                                    865 ;	main.c: 305: }
      0003C9 81               [ 4]  866 	ret
                                    867 ;	main.c: 314: void i2c_start(void) {
                                    868 ;	-----------------------------------------
                                    869 ;	 function i2c_start
                                    870 ;	-----------------------------------------
      0003CA                        871 _i2c_start:
                                    872 ;	main.c: 315: I2C_CR2 = I2C_CR2 | (1 << 0); // Отправляем стартовый сигнал
      0003CA 72 10 52 11      [ 1]  873 	bset	0x5211, #0
                                    874 ;	main.c: 316: while(!(I2C_SR1 & (1 << 0)));
      0003CE                        875 00101$:
      0003CE 72 01 52 17 FB   [ 2]  876 	btjf	0x5217, #0, 00101$
                                    877 ;	main.c: 318: }
      0003D3 81               [ 4]  878 	ret
                                    879 ;	main.c: 320: void i2c_send_address(uint8_t address) {
                                    880 ;	-----------------------------------------
                                    881 ;	 function i2c_send_address
                                    882 ;	-----------------------------------------
      0003D4                        883 _i2c_send_address:
                                    884 ;	main.c: 321: I2C_DR = address << 1; // Отправка адреса устройства с битом на запись
      0003D4 48               [ 1]  885 	sll	a
      0003D5 C7 52 16         [ 1]  886 	ld	0x5216, a
                                    887 ;	main.c: 323: while (!(I2C_SR1 & (1 << 1)) && !(I2C_SR2 & (1 << 2)));
      0003D8                        888 00102$:
      0003D8 72 03 52 17 01   [ 2]  889 	btjf	0x5217, #1, 00117$
      0003DD 81               [ 4]  890 	ret
      0003DE                        891 00117$:
      0003DE 72 05 52 18 F5   [ 2]  892 	btjf	0x5218, #2, 00102$
                                    893 ;	main.c: 324: }
      0003E3 81               [ 4]  894 	ret
                                    895 ;	main.c: 326: void i2c_stop(void) {
                                    896 ;	-----------------------------------------
                                    897 ;	 function i2c_stop
                                    898 ;	-----------------------------------------
      0003E4                        899 _i2c_stop:
                                    900 ;	main.c: 327: I2C_CR2 = I2C_CR2 | (1 << 1);// Отправка стопового сигнала
      0003E4 72 12 52 11      [ 1]  901 	bset	0x5211, #1
                                    902 ;	main.c: 329: }
      0003E8 81               [ 4]  903 	ret
                                    904 ;	main.c: 330: void i2c_write(void){
                                    905 ;	-----------------------------------------
                                    906 ;	 function i2c_write
                                    907 ;	-----------------------------------------
      0003E9                        908 _i2c_write:
      0003E9 52 02            [ 2]  909 	sub	sp, #2
                                    910 ;	main.c: 331: I2C_DR = d_addr;
      0003EB 55u01u02 52 16   [ 1]  911 	mov	0x5216+0, _d_addr+0
                                    912 ;	main.c: 332: status_check();
      0003F0 CDr02rB5         [ 4]  913 	call	_status_check
                                    914 ;	main.c: 333: while (!(I2C_SR1 & (1 << 7)) && !(I2C_SR2 & (1 << 2))); // Отправка адреса регистра
      0003F3                        915 00102$:
      0003F3 C6 52 17         [ 1]  916 	ld	a, 0x5217
      0003F6 2B 05            [ 1]  917 	jrmi	00104$
      0003F8 72 05 52 18 F6   [ 2]  918 	btjf	0x5218, #2, 00102$
      0003FD                        919 00104$:
                                    920 ;	main.c: 334: status_check();
      0003FD CDr02rB5         [ 4]  921 	call	_status_check
                                    922 ;	main.c: 335: for(int i = 0;i < d_size;i++)
      000400 5F               [ 1]  923 	clrw	x
      000401                        924 00111$:
      000401 C6u01u04         [ 1]  925 	ld	a, _d_size+0
      000404 6B 02            [ 1]  926 	ld	(0x02, sp), a
      000406 0F 01            [ 1]  927 	clr	(0x01, sp)
      000408 13 01            [ 2]  928 	cpw	x, (0x01, sp)
      00040A 2E 20            [ 1]  929 	jrsge	00113$
                                    930 ;	main.c: 337: I2C_DR = data_buf[i];
      00040C 90 93            [ 1]  931 	ldw	y, x
      00040E 90 D6u01u06      [ 1]  932 	ld	a, (_data_buf+0, y)
      000412 C7 52 16         [ 1]  933 	ld	0x5216, a
                                    934 ;	main.c: 338: status_check();
      000415 89               [ 2]  935 	pushw	x
      000416 CDr02rB5         [ 4]  936 	call	_status_check
      000419 85               [ 2]  937 	popw	x
                                    938 ;	main.c: 339: while (!(I2C_SR1 & (1 << 7)) && !(I2C_SR2 & (1 << 2)));
      00041A                        939 00106$:
      00041A C6 52 17         [ 1]  940 	ld	a, 0x5217
      00041D 2B 05            [ 1]  941 	jrmi	00108$
      00041F 72 05 52 18 F6   [ 2]  942 	btjf	0x5218, #2, 00106$
      000424                        943 00108$:
                                    944 ;	main.c: 340: status_check();
      000424 89               [ 2]  945 	pushw	x
      000425 CDr02rB5         [ 4]  946 	call	_status_check
      000428 85               [ 2]  947 	popw	x
                                    948 ;	main.c: 335: for(int i = 0;i < d_size;i++)
      000429 5C               [ 1]  949 	incw	x
      00042A 20 D5            [ 2]  950 	jra	00111$
      00042C                        951 00113$:
                                    952 ;	main.c: 342: }
      00042C 5B 02            [ 2]  953 	addw	sp, #2
      00042E 81               [ 4]  954 	ret
                                    955 ;	main.c: 344: void i2c_read(void){
                                    956 ;	-----------------------------------------
                                    957 ;	 function i2c_read
                                    958 ;	-----------------------------------------
      00042F                        959 _i2c_read:
      00042F 52 04            [ 2]  960 	sub	sp, #4
                                    961 ;	main.c: 345: I2C_DR = d_addr;
      000431 55u01u02 52 16   [ 1]  962 	mov	0x5216+0, _d_addr+0
                                    963 ;	main.c: 346: status_check();
      000436 CDr02rB5         [ 4]  964 	call	_status_check
                                    965 ;	main.c: 347: while (!(I2C_SR1 & (1 << 7)) && !(I2C_SR2 & (1 << 2))); // Отправка адреса регистра
      000439                        966 00102$:
      000439 C6 52 17         [ 1]  967 	ld	a, 0x5217
      00043C 2B 05            [ 1]  968 	jrmi	00104$
      00043E 72 05 52 18 F6   [ 2]  969 	btjf	0x5218, #2, 00102$
      000443                        970 00104$:
                                    971 ;	main.c: 348: i2c_stop();
      000443 CDr03rE4         [ 4]  972 	call	_i2c_stop
                                    973 ;	main.c: 349: i2c_start();
      000446 CDr03rCA         [ 4]  974 	call	_i2c_start
                                    975 ;	main.c: 350: I2C_DR = (current_dev << 1) | (1 << 0);
      000449 C6u02u05         [ 1]  976 	ld	a, _current_dev+0
      00044C 48               [ 1]  977 	sll	a
      00044D AA 01            [ 1]  978 	or	a, #0x01
      00044F C7 52 16         [ 1]  979 	ld	0x5216, a
                                    980 ;	main.c: 351: status_check();
      000452 CDr02rB5         [ 4]  981 	call	_status_check
                                    982 ;	main.c: 352: while (!(I2C_SR1 & (1 << 1)) && !(I2C_SR2 & (1 << 2)));
      000455                        983 00106$:
      000455 72 02 52 17 05   [ 2]  984 	btjt	0x5217, #1, 00108$
      00045A 72 05 52 18 F6   [ 2]  985 	btjf	0x5218, #2, 00106$
      00045F                        986 00108$:
                                    987 ;	main.c: 353: status_check();
      00045F CDr02rB5         [ 4]  988 	call	_status_check
                                    989 ;	main.c: 355: for(int i = 0;i < d_size;i++)
      000462 5F               [ 1]  990 	clrw	x
      000463 1F 03            [ 2]  991 	ldw	(0x03, sp), x
      000465                        992 00114$:
      000465 C6u01u04         [ 1]  993 	ld	a, _d_size+0
      000468 6B 02            [ 1]  994 	ld	(0x02, sp), a
      00046A 0F 01            [ 1]  995 	clr	(0x01, sp)
      00046C 1E 03            [ 2]  996 	ldw	x, (0x03, sp)
      00046E 13 01            [ 2]  997 	cpw	x, (0x01, sp)
      000470 2E 1D            [ 1]  998 	jrsge	00116$
                                    999 ;	main.c: 357: status_check();
      000472 CDr02rB5         [ 4] 1000 	call	_status_check
                                   1001 ;	main.c: 358: data_buf[i] = I2C_DR;
      000475 1E 03            [ 2] 1002 	ldw	x, (0x03, sp)
      000477 C6 52 16         [ 1] 1003 	ld	a, 0x5216
      00047A D7u01u06         [ 1] 1004 	ld	((_data_buf+0), x), a
                                   1005 ;	main.c: 359: status_check();
      00047D CDr02rB5         [ 4] 1006 	call	_status_check
                                   1007 ;	main.c: 360: while (!(I2C_SR1 & (1 << 6)));
      000480                       1008 00109$:
      000480 72 0D 52 17 FB   [ 2] 1009 	btjf	0x5217, #6, 00109$
                                   1010 ;	main.c: 361: status_check();
      000485 CDr02rB5         [ 4] 1011 	call	_status_check
                                   1012 ;	main.c: 355: for(int i = 0;i < d_size;i++)
      000488 1E 03            [ 2] 1013 	ldw	x, (0x03, sp)
      00048A 5C               [ 1] 1014 	incw	x
      00048B 1F 03            [ 2] 1015 	ldw	(0x03, sp), x
      00048D 20 D6            [ 2] 1016 	jra	00114$
      00048F                       1017 00116$:
                                   1018 ;	main.c: 363: }
      00048F 5B 04            [ 2] 1019 	addw	sp, #4
      000491 81               [ 4] 1020 	ret
                                   1021 ;	main.c: 364: void i2c_scan(void) {
                                   1022 ;	-----------------------------------------
                                   1023 ;	 function i2c_scan
                                   1024 ;	-----------------------------------------
      000492                       1025 _i2c_scan:
      000492 52 02            [ 2] 1026 	sub	sp, #2
                                   1027 ;	main.c: 365: for (uint8_t addr = current_dev; addr < 127; addr++) {
      000494 C6u02u05         [ 1] 1028 	ld	a, _current_dev+0
      000497 6B 01            [ 1] 1029 	ld	(0x01, sp), a
      000499 6B 02            [ 1] 1030 	ld	(0x02, sp), a
      00049B                       1031 00105$:
      00049B 7B 02            [ 1] 1032 	ld	a, (0x02, sp)
      00049D A1 7F            [ 1] 1033 	cp	a, #0x7f
      00049F 24 26            [ 1] 1034 	jrnc	00107$
                                   1035 ;	main.c: 366: i2c_start();
      0004A1 CDr03rCA         [ 4] 1036 	call	_i2c_start
                                   1037 ;	main.c: 367: i2c_send_address(addr);
      0004A4 7B 02            [ 1] 1038 	ld	a, (0x02, sp)
      0004A6 CDr03rD4         [ 4] 1039 	call	_i2c_send_address
                                   1040 ;	main.c: 368: if (!(I2C_SR2 & (1 << 2))) { // Проверка на ACK
      0004A9 72 04 52 18 0A   [ 2] 1041 	btjt	0x5218, #2, 00102$
                                   1042 ;	main.c: 370: current_dev = addr;
      0004AE 7B 01            [ 1] 1043 	ld	a, (0x01, sp)
      0004B0 C7u02u05         [ 1] 1044 	ld	_current_dev+0, a
                                   1045 ;	main.c: 371: i2c_stop();
      0004B3 5B 02            [ 2] 1046 	addw	sp, #2
                                   1047 ;	main.c: 372: break;
      0004B5 CCr03rE4         [ 2] 1048 	jp	_i2c_stop
      0004B8                       1049 00102$:
                                   1050 ;	main.c: 374: i2c_stop();
      0004B8 CDr03rE4         [ 4] 1051 	call	_i2c_stop
                                   1052 ;	main.c: 375: I2C_SR2 = I2C_SR2 & ~(1 << 2); // Очистка флага ошибки
      0004BB 72 15 52 18      [ 1] 1053 	bres	0x5218, #2
                                   1054 ;	main.c: 365: for (uint8_t addr = current_dev; addr < 127; addr++) {
      0004BF 0C 02            [ 1] 1055 	inc	(0x02, sp)
      0004C1 7B 02            [ 1] 1056 	ld	a, (0x02, sp)
      0004C3 6B 01            [ 1] 1057 	ld	(0x01, sp), a
      0004C5 20 D4            [ 2] 1058 	jra	00105$
      0004C7                       1059 00107$:
                                   1060 ;	main.c: 377: }
      0004C7 5B 02            [ 2] 1061 	addw	sp, #2
      0004C9 81               [ 4] 1062 	ret
                                   1063 ;	main.c: 387: void cm_SM(void)
                                   1064 ;	-----------------------------------------
                                   1065 ;	 function cm_SM
                                   1066 ;	-----------------------------------------
      0004CA                       1067 _cm_SM:
      0004CA 52 04            [ 2] 1068 	sub	sp, #4
                                   1069 ;	main.c: 389: char cur_dev[4]={0};
      0004CC 0F 01            [ 1] 1070 	clr	(0x01, sp)
      0004CE 0F 02            [ 1] 1071 	clr	(0x02, sp)
      0004D0 0F 03            [ 1] 1072 	clr	(0x03, sp)
      0004D2 0F 04            [ 1] 1073 	clr	(0x04, sp)
                                   1074 ;	main.c: 390: convert_int_to_chars(current_dev, cur_dev);
      0004D4 96               [ 1] 1075 	ldw	x, sp
      0004D5 5C               [ 1] 1076 	incw	x
      0004D6 C6u02u05         [ 1] 1077 	ld	a, _current_dev+0
      0004D9 CDr00rA1         [ 4] 1078 	call	_convert_int_to_chars
                                   1079 ;	main.c: 391: uart_write("SM ");
      0004DC AEr00r53         [ 2] 1080 	ldw	x, #(___str_9+0)
      0004DF CDr00r40         [ 4] 1081 	call	_uart_write
                                   1082 ;	main.c: 392: uart_write(cur_dev);
      0004E2 96               [ 1] 1083 	ldw	x, sp
      0004E3 5C               [ 1] 1084 	incw	x
      0004E4 CDr00r40         [ 4] 1085 	call	_uart_write
                                   1086 ;	main.c: 393: uart_write("\r\n");
      0004E7 AEr00r57         [ 2] 1087 	ldw	x, #(___str_10+0)
      0004EA CDr00r40         [ 4] 1088 	call	_uart_write
                                   1089 ;	main.c: 394: }
      0004ED 5B 04            [ 2] 1090 	addw	sp, #4
      0004EF 81               [ 4] 1091 	ret
                                   1092 ;	main.c: 395: void cm_SN(void)
                                   1093 ;	-----------------------------------------
                                   1094 ;	 function cm_SN
                                   1095 ;	-----------------------------------------
      0004F0                       1096 _cm_SN:
                                   1097 ;	main.c: 397: i2c_scan();
      0004F0 CDr04r92         [ 4] 1098 	call	_i2c_scan
                                   1099 ;	main.c: 398: cm_SM();
                                   1100 ;	main.c: 399: }
      0004F3 CCr04rCA         [ 2] 1101 	jp	_cm_SM
                                   1102 ;	main.c: 400: void cm_RM(void)
                                   1103 ;	-----------------------------------------
                                   1104 ;	 function cm_RM
                                   1105 ;	-----------------------------------------
      0004F6                       1106 _cm_RM:
                                   1107 ;	main.c: 402: current_dev = 0;
      0004F6 72 5Fu02u05      [ 1] 1108 	clr	_current_dev+0
                                   1109 ;	main.c: 403: uart_write("RM\n");
      0004FA AEr00r5A         [ 2] 1110 	ldw	x, #(___str_11+0)
                                   1111 ;	main.c: 404: }
      0004FD CCr00r40         [ 2] 1112 	jp	_uart_write
                                   1113 ;	main.c: 406: void cm_DB(void)
                                   1114 ;	-----------------------------------------
                                   1115 ;	 function cm_DB
                                   1116 ;	-----------------------------------------
      000500                       1117 _cm_DB:
                                   1118 ;	main.c: 408: status_check();
                                   1119 ;	main.c: 409: }
      000500 CCr02rB5         [ 2] 1120 	jp	_status_check
                                   1121 ;	main.c: 411: void cm_ST(void)
                                   1122 ;	-----------------------------------------
                                   1123 ;	 function cm_ST
                                   1124 ;	-----------------------------------------
      000503                       1125 _cm_ST:
                                   1126 ;	main.c: 413: get_addr_from_buff();
      000503 CDr01r85         [ 4] 1127 	call	_get_addr_from_buff
                                   1128 ;	main.c: 414: current_dev = d_addr;
      000506 55u01u02u02u05   [ 1] 1129 	mov	_current_dev+0, _d_addr+0
                                   1130 ;	main.c: 415: uart_write("ST\n");
      00050B AEr00r5E         [ 2] 1131 	ldw	x, #(___str_12+0)
                                   1132 ;	main.c: 416: }
      00050E CCr00r40         [ 2] 1133 	jp	_uart_write
                                   1134 ;	main.c: 417: void cm_SR(void)
                                   1135 ;	-----------------------------------------
                                   1136 ;	 function cm_SR
                                   1137 ;	-----------------------------------------
      000511                       1138 _cm_SR:
      000511 52 04            [ 2] 1139 	sub	sp, #4
                                   1140 ;	main.c: 419: i2c_start();
      000513 CDr03rCA         [ 4] 1141 	call	_i2c_start
                                   1142 ;	main.c: 420: i2c_send_address(current_dev);
      000516 C6u02u05         [ 1] 1143 	ld	a, _current_dev+0
      000519 CDr03rD4         [ 4] 1144 	call	_i2c_send_address
                                   1145 ;	main.c: 421: i2c_read();
      00051C CDr04r2F         [ 4] 1146 	call	_i2c_read
                                   1147 ;	main.c: 422: i2c_stop();
      00051F CDr03rE4         [ 4] 1148 	call	_i2c_stop
                                   1149 ;	main.c: 423: uart_write("SR ");
      000522 AEr00r62         [ 2] 1150 	ldw	x, #(___str_13+0)
      000525 CDr00r40         [ 4] 1151 	call	_uart_write
                                   1152 ;	main.c: 424: convert_int_to_chars(d_addr, a);
      000528 AEr00rFF         [ 2] 1153 	ldw	x, #(_a+0)
      00052B C6u01u02         [ 1] 1154 	ld	a, _d_addr+0
      00052E CDr00rA1         [ 4] 1155 	call	_convert_int_to_chars
                                   1156 ;	main.c: 425: uart_write(a);
      000531 AEr00rFF         [ 2] 1157 	ldw	x, #(_a+0)
      000534 CDr00r40         [ 4] 1158 	call	_uart_write
                                   1159 ;	main.c: 426: uart_write(" ");
      000537 AEr00r66         [ 2] 1160 	ldw	x, #(___str_14+0)
      00053A CDr00r40         [ 4] 1161 	call	_uart_write
                                   1162 ;	main.c: 427: convert_int_to_chars(d_size, a);
      00053D AEr00rFF         [ 2] 1163 	ldw	x, #(_a+0)
      000540 C6u01u04         [ 1] 1164 	ld	a, _d_size+0
      000543 CDr00rA1         [ 4] 1165 	call	_convert_int_to_chars
                                   1166 ;	main.c: 428: uart_write(a);
      000546 AEr00rFF         [ 2] 1167 	ldw	x, #(_a+0)
      000549 CDr00r40         [ 4] 1168 	call	_uart_write
                                   1169 ;	main.c: 429: for(int i = 0;i < d_size;i++)
      00054C 5F               [ 1] 1170 	clrw	x
      00054D 1F 03            [ 2] 1171 	ldw	(0x03, sp), x
      00054F                       1172 00103$:
      00054F C6u01u04         [ 1] 1173 	ld	a, _d_size+0
      000552 6B 02            [ 1] 1174 	ld	(0x02, sp), a
      000554 0F 01            [ 1] 1175 	clr	(0x01, sp)
      000556 1E 03            [ 2] 1176 	ldw	x, (0x03, sp)
      000558 13 01            [ 2] 1177 	cpw	x, (0x01, sp)
      00055A 2E 1E            [ 1] 1178 	jrsge	00101$
                                   1179 ;	main.c: 431: uart_write(" ");
      00055C AEr00r66         [ 2] 1180 	ldw	x, #(___str_14+0)
      00055F CDr00r40         [ 4] 1181 	call	_uart_write
                                   1182 ;	main.c: 432: convert_int_to_chars(data_buf[i], a);
      000562 1E 03            [ 2] 1183 	ldw	x, (0x03, sp)
      000564 D6u01u06         [ 1] 1184 	ld	a, (_data_buf+0, x)
      000567 AEr00rFF         [ 2] 1185 	ldw	x, #(_a+0)
      00056A CDr00rA1         [ 4] 1186 	call	_convert_int_to_chars
                                   1187 ;	main.c: 433: uart_write(a);
      00056D AEr00rFF         [ 2] 1188 	ldw	x, #(_a+0)
      000570 CDr00r40         [ 4] 1189 	call	_uart_write
                                   1190 ;	main.c: 429: for(int i = 0;i < d_size;i++)
      000573 1E 03            [ 2] 1191 	ldw	x, (0x03, sp)
      000575 5C               [ 1] 1192 	incw	x
      000576 1F 03            [ 2] 1193 	ldw	(0x03, sp), x
      000578 20 D5            [ 2] 1194 	jra	00103$
      00057A                       1195 00101$:
                                   1196 ;	main.c: 436: uart_write("\r\n");
      00057A AEr00r57         [ 2] 1197 	ldw	x, #(___str_10+0)
      00057D 5B 04            [ 2] 1198 	addw	sp, #4
                                   1199 ;	main.c: 437: }
      00057F CCr00r40         [ 2] 1200 	jp	_uart_write
                                   1201 ;	main.c: 438: void cm_SW(void)
                                   1202 ;	-----------------------------------------
                                   1203 ;	 function cm_SW
                                   1204 ;	-----------------------------------------
      000582                       1205 _cm_SW:
      000582 52 04            [ 2] 1206 	sub	sp, #4
                                   1207 ;	main.c: 440: i2c_start();
      000584 CDr03rCA         [ 4] 1208 	call	_i2c_start
                                   1209 ;	main.c: 441: i2c_send_address(current_dev);
      000587 C6u02u05         [ 1] 1210 	ld	a, _current_dev+0
      00058A CDr03rD4         [ 4] 1211 	call	_i2c_send_address
                                   1212 ;	main.c: 442: i2c_write();
      00058D CDr03rE9         [ 4] 1213 	call	_i2c_write
                                   1214 ;	main.c: 443: i2c_stop();
      000590 CDr03rE4         [ 4] 1215 	call	_i2c_stop
                                   1216 ;	main.c: 444: uart_write("SW ");
      000593 AEr00r68         [ 2] 1217 	ldw	x, #(___str_15+0)
      000596 CDr00r40         [ 4] 1218 	call	_uart_write
                                   1219 ;	main.c: 445: convert_int_to_chars(d_addr, a);
      000599 AEr00rFF         [ 2] 1220 	ldw	x, #(_a+0)
      00059C C6u01u02         [ 1] 1221 	ld	a, _d_addr+0
      00059F CDr00rA1         [ 4] 1222 	call	_convert_int_to_chars
                                   1223 ;	main.c: 446: uart_write(a);
      0005A2 AEr00rFF         [ 2] 1224 	ldw	x, #(_a+0)
      0005A5 CDr00r40         [ 4] 1225 	call	_uart_write
                                   1226 ;	main.c: 447: uart_write(" ");
      0005A8 AEr00r66         [ 2] 1227 	ldw	x, #(___str_14+0)
      0005AB CDr00r40         [ 4] 1228 	call	_uart_write
                                   1229 ;	main.c: 448: convert_int_to_chars(d_size, a);
      0005AE AEr00rFF         [ 2] 1230 	ldw	x, #(_a+0)
      0005B1 C6u01u04         [ 1] 1231 	ld	a, _d_size+0
      0005B4 CDr00rA1         [ 4] 1232 	call	_convert_int_to_chars
                                   1233 ;	main.c: 449: uart_write(a);
      0005B7 AEr00rFF         [ 2] 1234 	ldw	x, #(_a+0)
      0005BA CDr00r40         [ 4] 1235 	call	_uart_write
                                   1236 ;	main.c: 450: for(int i = 0;i < d_size;i++)
      0005BD 5F               [ 1] 1237 	clrw	x
      0005BE 1F 03            [ 2] 1238 	ldw	(0x03, sp), x
      0005C0                       1239 00103$:
      0005C0 C6u01u04         [ 1] 1240 	ld	a, _d_size+0
      0005C3 6B 02            [ 1] 1241 	ld	(0x02, sp), a
      0005C5 0F 01            [ 1] 1242 	clr	(0x01, sp)
      0005C7 1E 03            [ 2] 1243 	ldw	x, (0x03, sp)
      0005C9 13 01            [ 2] 1244 	cpw	x, (0x01, sp)
      0005CB 2E 1E            [ 1] 1245 	jrsge	00101$
                                   1246 ;	main.c: 452: uart_write(" ");
      0005CD AEr00r66         [ 2] 1247 	ldw	x, #(___str_14+0)
      0005D0 CDr00r40         [ 4] 1248 	call	_uart_write
                                   1249 ;	main.c: 453: convert_int_to_chars(data_buf[i], a);
      0005D3 1E 03            [ 2] 1250 	ldw	x, (0x03, sp)
      0005D5 D6u01u06         [ 1] 1251 	ld	a, (_data_buf+0, x)
      0005D8 AEr00rFF         [ 2] 1252 	ldw	x, #(_a+0)
      0005DB CDr00rA1         [ 4] 1253 	call	_convert_int_to_chars
                                   1254 ;	main.c: 454: uart_write(a);
      0005DE AEr00rFF         [ 2] 1255 	ldw	x, #(_a+0)
      0005E1 CDr00r40         [ 4] 1256 	call	_uart_write
                                   1257 ;	main.c: 450: for(int i = 0;i < d_size;i++)
      0005E4 1E 03            [ 2] 1258 	ldw	x, (0x03, sp)
      0005E6 5C               [ 1] 1259 	incw	x
      0005E7 1F 03            [ 2] 1260 	ldw	(0x03, sp), x
      0005E9 20 D5            [ 2] 1261 	jra	00103$
      0005EB                       1262 00101$:
                                   1263 ;	main.c: 457: uart_write("\r\n");
      0005EB AEr00r57         [ 2] 1264 	ldw	x, #(___str_10+0)
      0005EE 5B 04            [ 2] 1265 	addw	sp, #4
                                   1266 ;	main.c: 458: }
      0005F0 CCr00r40         [ 2] 1267 	jp	_uart_write
                                   1268 ;	main.c: 466: int data_handler(void)
                                   1269 ;	-----------------------------------------
                                   1270 ;	 function data_handler
                                   1271 ;	-----------------------------------------
      0005F3                       1272 _data_handler:
                                   1273 ;	main.c: 468: p_size = 0;
      0005F3 72 5Fu01u03      [ 1] 1274 	clr	_p_size+0
                                   1275 ;	main.c: 469: p_bytes = 0;
      0005F7 72 5Fu01u05      [ 1] 1276 	clr	_p_bytes+0
                                   1277 ;	main.c: 470: d_addr = 0;
      0005FB 72 5Fu01u02      [ 1] 1278 	clr	_d_addr+0
                                   1279 ;	main.c: 471: d_size = 0;
      0005FF 72 5Fu01u04      [ 1] 1280 	clr	_d_size+0
                                   1281 ;	main.c: 472: memset(a, 0, sizeof(a));
      000603 4B 03            [ 1] 1282 	push	#0x03
      000605 4B 00            [ 1] 1283 	push	#0x00
      000607 5F               [ 1] 1284 	clrw	x
      000608 89               [ 2] 1285 	pushw	x
      000609 AEr00rFF         [ 2] 1286 	ldw	x, #(_a+0)
      00060C CDr00r00         [ 4] 1287 	call	_memset
                                   1288 ;	main.c: 473: memset(data_buf, 0, sizeof(data_buf));
      00060F 4B FF            [ 1] 1289 	push	#0xff
      000611 4B 00            [ 1] 1290 	push	#0x00
      000613 5F               [ 1] 1291 	clrw	x
      000614 89               [ 2] 1292 	pushw	x
      000615 AEr01r06         [ 2] 1293 	ldw	x, #(_data_buf+0)
      000618 CDr00r00         [ 4] 1294 	call	_memset
                                   1295 ;	main.c: 474: if(memcmp(&buffer[0],"SM",2) == 0)
      00061B 4B 02            [ 1] 1296 	push	#0x02
      00061D 4B 00            [ 1] 1297 	push	#0x00
      00061F 4Br6C            [ 1] 1298 	push	#<(___str_16+0)
      000621 4Bs00            [ 1] 1299 	push	#((___str_16+0) >> 8)
      000623 AEr00r00         [ 2] 1300 	ldw	x, #(_buffer+0)
      000626 CDr00r00         [ 4] 1301 	call	_memcmp
                                   1302 ;	main.c: 475: return 1;
      000629 5D               [ 2] 1303 	tnzw	x
      00062A 26 02            [ 1] 1304 	jrne	00102$
      00062C 5C               [ 1] 1305 	incw	x
      00062D 81               [ 4] 1306 	ret
      00062E                       1307 00102$:
                                   1308 ;	main.c: 476: if(memcmp(&buffer[0],"SN",2) == 0)
      00062E 4B 02            [ 1] 1309 	push	#0x02
      000630 4B 00            [ 1] 1310 	push	#0x00
      000632 4Br6F            [ 1] 1311 	push	#<(___str_17+0)
      000634 4Bs00            [ 1] 1312 	push	#((___str_17+0) >> 8)
      000636 AEr00r00         [ 2] 1313 	ldw	x, #(_buffer+0)
      000639 CDr00r00         [ 4] 1314 	call	_memcmp
      00063C 5D               [ 2] 1315 	tnzw	x
      00063D 26 04            [ 1] 1316 	jrne	00104$
                                   1317 ;	main.c: 477: return 2;
      00063F AE 00 02         [ 2] 1318 	ldw	x, #0x0002
      000642 81               [ 4] 1319 	ret
      000643                       1320 00104$:
                                   1321 ;	main.c: 478: if(memcmp(&buffer[0],"ST",2) == 0)
      000643 4B 02            [ 1] 1322 	push	#0x02
      000645 4B 00            [ 1] 1323 	push	#0x00
      000647 4Br72            [ 1] 1324 	push	#<(___str_18+0)
      000649 4Bs00            [ 1] 1325 	push	#((___str_18+0) >> 8)
      00064B AEr00r00         [ 2] 1326 	ldw	x, #(_buffer+0)
      00064E CDr00r00         [ 4] 1327 	call	_memcmp
      000651 5D               [ 2] 1328 	tnzw	x
      000652 26 04            [ 1] 1329 	jrne	00106$
                                   1330 ;	main.c: 479: return 5;
      000654 AE 00 05         [ 2] 1331 	ldw	x, #0x0005
      000657 81               [ 4] 1332 	ret
      000658                       1333 00106$:
                                   1334 ;	main.c: 480: if(memcmp(&buffer[0],"RM",2) == 0)
      000658 4B 02            [ 1] 1335 	push	#0x02
      00065A 4B 00            [ 1] 1336 	push	#0x00
      00065C 4Br75            [ 1] 1337 	push	#<(___str_19+0)
      00065E 4Bs00            [ 1] 1338 	push	#((___str_19+0) >> 8)
      000660 AEr00r00         [ 2] 1339 	ldw	x, #(_buffer+0)
      000663 CDr00r00         [ 4] 1340 	call	_memcmp
      000666 5D               [ 2] 1341 	tnzw	x
      000667 26 04            [ 1] 1342 	jrne	00108$
                                   1343 ;	main.c: 481: return 6;
      000669 AE 00 06         [ 2] 1344 	ldw	x, #0x0006
      00066C 81               [ 4] 1345 	ret
      00066D                       1346 00108$:
                                   1347 ;	main.c: 482: if(memcmp(&buffer[0],"DB",2) == 0)
      00066D 4B 02            [ 1] 1348 	push	#0x02
      00066F 4B 00            [ 1] 1349 	push	#0x00
      000671 4Br78            [ 1] 1350 	push	#<(___str_20+0)
      000673 4Bs00            [ 1] 1351 	push	#((___str_20+0) >> 8)
      000675 AEr00r00         [ 2] 1352 	ldw	x, #(_buffer+0)
      000678 CDr00r00         [ 4] 1353 	call	_memcmp
      00067B 5D               [ 2] 1354 	tnzw	x
      00067C 26 04            [ 1] 1355 	jrne	00110$
                                   1356 ;	main.c: 483: return 7;
      00067E AE 00 07         [ 2] 1357 	ldw	x, #0x0007
      000681 81               [ 4] 1358 	ret
      000682                       1359 00110$:
                                   1360 ;	main.c: 485: get_addr_from_buff();
      000682 CDr01r85         [ 4] 1361 	call	_get_addr_from_buff
                                   1362 ;	main.c: 486: get_size_from_buff();
      000685 CDr01rCA         [ 4] 1363 	call	_get_size_from_buff
                                   1364 ;	main.c: 488: if(memcmp(&buffer[0],"SR",2) == 0)
      000688 4B 02            [ 1] 1365 	push	#0x02
      00068A 4B 00            [ 1] 1366 	push	#0x00
      00068C 4Br7B            [ 1] 1367 	push	#<(___str_21+0)
      00068E 4Bs00            [ 1] 1368 	push	#((___str_21+0) >> 8)
      000690 AEr00r00         [ 2] 1369 	ldw	x, #(_buffer+0)
      000693 CDr00r00         [ 4] 1370 	call	_memcmp
      000696 5D               [ 2] 1371 	tnzw	x
      000697 26 04            [ 1] 1372 	jrne	00112$
                                   1373 ;	main.c: 489: return 3;
      000699 AE 00 03         [ 2] 1374 	ldw	x, #0x0003
      00069C 81               [ 4] 1375 	ret
      00069D                       1376 00112$:
                                   1377 ;	main.c: 491: char_buffer_to_int();
      00069D CDr02r24         [ 4] 1378 	call	_char_buffer_to_int
                                   1379 ;	main.c: 493: if(memcmp(&buffer[0],"SW",2) == 0)
      0006A0 4B 02            [ 1] 1380 	push	#0x02
      0006A2 4B 00            [ 1] 1381 	push	#0x00
      0006A4 4Br7E            [ 1] 1382 	push	#<(___str_22+0)
      0006A6 4Bs00            [ 1] 1383 	push	#((___str_22+0) >> 8)
      0006A8 AEr00r00         [ 2] 1384 	ldw	x, #(_buffer+0)
      0006AB CDr00r00         [ 4] 1385 	call	_memcmp
      0006AE 5D               [ 2] 1386 	tnzw	x
      0006AF 26 04            [ 1] 1387 	jrne	00114$
                                   1388 ;	main.c: 494: return 4;
      0006B1 AE 00 04         [ 2] 1389 	ldw	x, #0x0004
      0006B4 81               [ 4] 1390 	ret
      0006B5                       1391 00114$:
                                   1392 ;	main.c: 495: return 0;
      0006B5 5F               [ 1] 1393 	clrw	x
                                   1394 ;	main.c: 497: }
      0006B6 81               [ 4] 1395 	ret
                                   1396 ;	main.c: 499: void command_switcher(void)
                                   1397 ;	-----------------------------------------
                                   1398 ;	 function command_switcher
                                   1399 ;	-----------------------------------------
      0006B7                       1400 _command_switcher:
      0006B7 52 04            [ 2] 1401 	sub	sp, #4
                                   1402 ;	main.c: 501: char ar[4]={0};
      0006B9 0F 01            [ 1] 1403 	clr	(0x01, sp)
      0006BB 0F 02            [ 1] 1404 	clr	(0x02, sp)
      0006BD 0F 03            [ 1] 1405 	clr	(0x03, sp)
      0006BF 0F 04            [ 1] 1406 	clr	(0x04, sp)
                                   1407 ;	main.c: 503: switch(data_handler())
      0006C1 CDr05rF3         [ 4] 1408 	call	_data_handler
      0006C4 5D               [ 2] 1409 	tnzw	x
      0006C5 2B 3B            [ 1] 1410 	jrmi	00109$
      0006C7 A3 00 07         [ 2] 1411 	cpw	x, #0x0007
      0006CA 2C 36            [ 1] 1412 	jrsgt	00109$
      0006CC 58               [ 2] 1413 	sllw	x
      0006CD DEu06uD1         [ 2] 1414 	ldw	x, (#00123$, x)
      0006D0 FC               [ 2] 1415 	jp	(x)
      0006D1                       1416 00123$:
      0006D1r07r02                 1417 	.dw	#00109$
      0006D3r06rE1                 1418 	.dw	#00101$
      0006D5r06rE6                 1419 	.dw	#00102$
      0006D7r06rEB                 1420 	.dw	#00103$
      0006D9r06rF0                 1421 	.dw	#00104$
      0006DBr06rF5                 1422 	.dw	#00105$
      0006DDr06rFA                 1423 	.dw	#00106$
      0006DFr06rFF                 1424 	.dw	#00107$
                                   1425 ;	main.c: 505: case 1:
      0006E1                       1426 00101$:
                                   1427 ;	main.c: 506: cm_SM();
      0006E1 CDr04rCA         [ 4] 1428 	call	_cm_SM
                                   1429 ;	main.c: 507: break;
      0006E4 20 1C            [ 2] 1430 	jra	00109$
                                   1431 ;	main.c: 508: case 2:
      0006E6                       1432 00102$:
                                   1433 ;	main.c: 509: cm_SN();
      0006E6 CDr04rF0         [ 4] 1434 	call	_cm_SN
                                   1435 ;	main.c: 510: break;
      0006E9 20 17            [ 2] 1436 	jra	00109$
                                   1437 ;	main.c: 511: case 3:
      0006EB                       1438 00103$:
                                   1439 ;	main.c: 512: cm_SR();
      0006EB CDr05r11         [ 4] 1440 	call	_cm_SR
                                   1441 ;	main.c: 513: break;
      0006EE 20 12            [ 2] 1442 	jra	00109$
                                   1443 ;	main.c: 514: case 4:
      0006F0                       1444 00104$:
                                   1445 ;	main.c: 515: cm_SW();
      0006F0 CDr05r82         [ 4] 1446 	call	_cm_SW
                                   1447 ;	main.c: 516: break;
      0006F3 20 0D            [ 2] 1448 	jra	00109$
                                   1449 ;	main.c: 517: case 5:
      0006F5                       1450 00105$:
                                   1451 ;	main.c: 518: cm_ST();
      0006F5 CDr05r03         [ 4] 1452 	call	_cm_ST
                                   1453 ;	main.c: 519: break;
      0006F8 20 08            [ 2] 1454 	jra	00109$
                                   1455 ;	main.c: 520: case 6:
      0006FA                       1456 00106$:
                                   1457 ;	main.c: 521: cm_RM();
      0006FA CDr04rF6         [ 4] 1458 	call	_cm_RM
                                   1459 ;	main.c: 522: break;
      0006FD 20 03            [ 2] 1460 	jra	00109$
                                   1461 ;	main.c: 523: case 7:
      0006FF                       1462 00107$:
                                   1463 ;	main.c: 524: cm_DB();
      0006FF CDr05r00         [ 4] 1464 	call	_cm_DB
                                   1465 ;	main.c: 526: }
      000702                       1466 00109$:
                                   1467 ;	main.c: 527: }
      000702 5B 04            [ 2] 1468 	addw	sp, #4
      000704 81               [ 4] 1469 	ret
                                   1470 ;	main.c: 530: void main(void)
                                   1471 ;	-----------------------------------------
                                   1472 ;	 function main
                                   1473 ;	-----------------------------------------
      000705                       1474 _main:
                                   1475 ;	main.c: 532: uart_init();
      000705 CDr03r8C         [ 4] 1476 	call	_uart_init
                                   1477 ;	main.c: 533: i2c_init();
      000708 CDr03rA9         [ 4] 1478 	call	_i2c_init
                                   1479 ;	main.c: 534: uart_write("SS\n");
      00070B AEr00r81         [ 2] 1480 	ldw	x, #(___str_23+0)
      00070E CDr00r40         [ 4] 1481 	call	_uart_write
                                   1482 ;	main.c: 535: while(1)
      000711                       1483 00102$:
                                   1484 ;	main.c: 537: uart_read();
      000711 CDr00r6B         [ 4] 1485 	call	_uart_read
                                   1486 ;	main.c: 538: command_switcher();
      000714 CDr06rB7         [ 4] 1487 	call	_command_switcher
      000717 20 F8            [ 2] 1488 	jra	00102$
                                   1489 ;	main.c: 540: }
      000719 81               [ 4] 1490 	ret
                                   1491 	.area CODE
                                   1492 	.area CONST
                                   1493 	.area CONST
      000000                       1494 ___str_0:
      000000 0A                    1495 	.db 0x0a
      000001 49 32 43 5F 52 45 47  1496 	.ascii "I2C_REGS >.<"
             53 20 3E 2E 3C
      00000D 0A                    1497 	.db 0x0a
      00000E 00                    1498 	.db 0x00
                                   1499 	.area CODE
                                   1500 	.area CONST
      00000F                       1501 ___str_1:
      00000F 0A                    1502 	.db 0x0a
      000010 53 52 31 20 2D 3E 20  1503 	.ascii "SR1 -> "
      000017 00                    1504 	.db 0x00
                                   1505 	.area CODE
                                   1506 	.area CONST
      000018                       1507 ___str_2:
      000018 20 3C 2D              1508 	.ascii " <-"
      00001B 0A                    1509 	.db 0x0a
      00001C 00                    1510 	.db 0x00
                                   1511 	.area CODE
                                   1512 	.area CONST
      00001D                       1513 ___str_3:
      00001D 53 52 32 20 2D 3E 20  1514 	.ascii "SR2 -> "
      000024 00                    1515 	.db 0x00
                                   1516 	.area CODE
                                   1517 	.area CONST
      000025                       1518 ___str_4:
      000025 53 52 33 20 2D 3E 20  1519 	.ascii "SR3 -> "
      00002C 00                    1520 	.db 0x00
                                   1521 	.area CODE
                                   1522 	.area CONST
      00002D                       1523 ___str_5:
      00002D 43 52 31 20 2D 3E 20  1524 	.ascii "CR1 -> "
      000034 00                    1525 	.db 0x00
                                   1526 	.area CODE
                                   1527 	.area CONST
      000035                       1528 ___str_6:
      000035 43 52 32 20 2D 3E 20  1529 	.ascii "CR2 -> "
      00003C 00                    1530 	.db 0x00
                                   1531 	.area CODE
                                   1532 	.area CONST
      00003D                       1533 ___str_7:
      00003D 44 52 20 2D 3E 20     1534 	.ascii "DR -> "
      000043 00                    1535 	.db 0x00
                                   1536 	.area CODE
                                   1537 	.area CONST
      000044                       1538 ___str_8:
      000044 55 41 52 54 5F 52 45  1539 	.ascii "UART_REGS >.<"
             47 53 20 3E 2E 3C
      000051 0A                    1540 	.db 0x0a
      000052 00                    1541 	.db 0x00
                                   1542 	.area CODE
                                   1543 	.area CONST
      000053                       1544 ___str_9:
      000053 53 4D 20              1545 	.ascii "SM "
      000056 00                    1546 	.db 0x00
                                   1547 	.area CODE
                                   1548 	.area CONST
      000057                       1549 ___str_10:
      000057 0D                    1550 	.db 0x0d
      000058 0A                    1551 	.db 0x0a
      000059 00                    1552 	.db 0x00
                                   1553 	.area CODE
                                   1554 	.area CONST
      00005A                       1555 ___str_11:
      00005A 52 4D                 1556 	.ascii "RM"
      00005C 0A                    1557 	.db 0x0a
      00005D 00                    1558 	.db 0x00
                                   1559 	.area CODE
                                   1560 	.area CONST
      00005E                       1561 ___str_12:
      00005E 53 54                 1562 	.ascii "ST"
      000060 0A                    1563 	.db 0x0a
      000061 00                    1564 	.db 0x00
                                   1565 	.area CODE
                                   1566 	.area CONST
      000062                       1567 ___str_13:
      000062 53 52 20              1568 	.ascii "SR "
      000065 00                    1569 	.db 0x00
                                   1570 	.area CODE
                                   1571 	.area CONST
      000066                       1572 ___str_14:
      000066 20                    1573 	.ascii " "
      000067 00                    1574 	.db 0x00
                                   1575 	.area CODE
                                   1576 	.area CONST
      000068                       1577 ___str_15:
      000068 53 57 20              1578 	.ascii "SW "
      00006B 00                    1579 	.db 0x00
                                   1580 	.area CODE
                                   1581 	.area CONST
      00006C                       1582 ___str_16:
      00006C 53 4D                 1583 	.ascii "SM"
      00006E 00                    1584 	.db 0x00
                                   1585 	.area CODE
                                   1586 	.area CONST
      00006F                       1587 ___str_17:
      00006F 53 4E                 1588 	.ascii "SN"
      000071 00                    1589 	.db 0x00
                                   1590 	.area CODE
                                   1591 	.area CONST
      000072                       1592 ___str_18:
      000072 53 54                 1593 	.ascii "ST"
      000074 00                    1594 	.db 0x00
                                   1595 	.area CODE
                                   1596 	.area CONST
      000075                       1597 ___str_19:
      000075 52 4D                 1598 	.ascii "RM"
      000077 00                    1599 	.db 0x00
                                   1600 	.area CODE
                                   1601 	.area CONST
      000078                       1602 ___str_20:
      000078 44 42                 1603 	.ascii "DB"
      00007A 00                    1604 	.db 0x00
                                   1605 	.area CODE
                                   1606 	.area CONST
      00007B                       1607 ___str_21:
      00007B 53 52                 1608 	.ascii "SR"
      00007D 00                    1609 	.db 0x00
                                   1610 	.area CODE
                                   1611 	.area CONST
      00007E                       1612 ___str_22:
      00007E 53 57                 1613 	.ascii "SW"
      000080 00                    1614 	.db 0x00
                                   1615 	.area CODE
                                   1616 	.area CONST
      000081                       1617 ___str_23:
      000081 53 53                 1618 	.ascii "SS"
      000083 0A                    1619 	.db 0x0a
      000084 00                    1620 	.db 0x00
                                   1621 	.area CODE
                                   1622 	.area INITIALIZER
      000000                       1623 __xinit__buffer:
      000000 00                    1624 	.db #0x00	; 0
      000001 00                    1625 	.db 0x00
      000002 00                    1626 	.db 0x00
      000003 00                    1627 	.db 0x00
      000004 00                    1628 	.db 0x00
      000005 00                    1629 	.db 0x00
      000006 00                    1630 	.db 0x00
      000007 00                    1631 	.db 0x00
      000008 00                    1632 	.db 0x00
      000009 00                    1633 	.db 0x00
      00000A 00                    1634 	.db 0x00
      00000B 00                    1635 	.db 0x00
      00000C 00                    1636 	.db 0x00
      00000D 00                    1637 	.db 0x00
      00000E 00                    1638 	.db 0x00
      00000F 00                    1639 	.db 0x00
      000010 00                    1640 	.db 0x00
      000011 00                    1641 	.db 0x00
      000012 00                    1642 	.db 0x00
      000013 00                    1643 	.db 0x00
      000014 00                    1644 	.db 0x00
      000015 00                    1645 	.db 0x00
      000016 00                    1646 	.db 0x00
      000017 00                    1647 	.db 0x00
      000018 00                    1648 	.db 0x00
      000019 00                    1649 	.db 0x00
      00001A 00                    1650 	.db 0x00
      00001B 00                    1651 	.db 0x00
      00001C 00                    1652 	.db 0x00
      00001D 00                    1653 	.db 0x00
      00001E 00                    1654 	.db 0x00
      00001F 00                    1655 	.db 0x00
      000020 00                    1656 	.db 0x00
      000021 00                    1657 	.db 0x00
      000022 00                    1658 	.db 0x00
      000023 00                    1659 	.db 0x00
      000024 00                    1660 	.db 0x00
      000025 00                    1661 	.db 0x00
      000026 00                    1662 	.db 0x00
      000027 00                    1663 	.db 0x00
      000028 00                    1664 	.db 0x00
      000029 00                    1665 	.db 0x00
      00002A 00                    1666 	.db 0x00
      00002B 00                    1667 	.db 0x00
      00002C 00                    1668 	.db 0x00
      00002D 00                    1669 	.db 0x00
      00002E 00                    1670 	.db 0x00
      00002F 00                    1671 	.db 0x00
      000030 00                    1672 	.db 0x00
      000031 00                    1673 	.db 0x00
      000032 00                    1674 	.db 0x00
      000033 00                    1675 	.db 0x00
      000034 00                    1676 	.db 0x00
      000035 00                    1677 	.db 0x00
      000036 00                    1678 	.db 0x00
      000037 00                    1679 	.db 0x00
      000038 00                    1680 	.db 0x00
      000039 00                    1681 	.db 0x00
      00003A 00                    1682 	.db 0x00
      00003B 00                    1683 	.db 0x00
      00003C 00                    1684 	.db 0x00
      00003D 00                    1685 	.db 0x00
      00003E 00                    1686 	.db 0x00
      00003F 00                    1687 	.db 0x00
      000040 00                    1688 	.db 0x00
      000041 00                    1689 	.db 0x00
      000042 00                    1690 	.db 0x00
      000043 00                    1691 	.db 0x00
      000044 00                    1692 	.db 0x00
      000045 00                    1693 	.db 0x00
      000046 00                    1694 	.db 0x00
      000047 00                    1695 	.db 0x00
      000048 00                    1696 	.db 0x00
      000049 00                    1697 	.db 0x00
      00004A 00                    1698 	.db 0x00
      00004B 00                    1699 	.db 0x00
      00004C 00                    1700 	.db 0x00
      00004D 00                    1701 	.db 0x00
      00004E 00                    1702 	.db 0x00
      00004F 00                    1703 	.db 0x00
      000050 00                    1704 	.db 0x00
      000051 00                    1705 	.db 0x00
      000052 00                    1706 	.db 0x00
      000053 00                    1707 	.db 0x00
      000054 00                    1708 	.db 0x00
      000055 00                    1709 	.db 0x00
      000056 00                    1710 	.db 0x00
      000057 00                    1711 	.db 0x00
      000058 00                    1712 	.db 0x00
      000059 00                    1713 	.db 0x00
      00005A 00                    1714 	.db 0x00
      00005B 00                    1715 	.db 0x00
      00005C 00                    1716 	.db 0x00
      00005D 00                    1717 	.db 0x00
      00005E 00                    1718 	.db 0x00
      00005F 00                    1719 	.db 0x00
      000060 00                    1720 	.db 0x00
      000061 00                    1721 	.db 0x00
      000062 00                    1722 	.db 0x00
      000063 00                    1723 	.db 0x00
      000064 00                    1724 	.db 0x00
      000065 00                    1725 	.db 0x00
      000066 00                    1726 	.db 0x00
      000067 00                    1727 	.db 0x00
      000068 00                    1728 	.db 0x00
      000069 00                    1729 	.db 0x00
      00006A 00                    1730 	.db 0x00
      00006B 00                    1731 	.db 0x00
      00006C 00                    1732 	.db 0x00
      00006D 00                    1733 	.db 0x00
      00006E 00                    1734 	.db 0x00
      00006F 00                    1735 	.db 0x00
      000070 00                    1736 	.db 0x00
      000071 00                    1737 	.db 0x00
      000072 00                    1738 	.db 0x00
      000073 00                    1739 	.db 0x00
      000074 00                    1740 	.db 0x00
      000075 00                    1741 	.db 0x00
      000076 00                    1742 	.db 0x00
      000077 00                    1743 	.db 0x00
      000078 00                    1744 	.db 0x00
      000079 00                    1745 	.db 0x00
      00007A 00                    1746 	.db 0x00
      00007B 00                    1747 	.db 0x00
      00007C 00                    1748 	.db 0x00
      00007D 00                    1749 	.db 0x00
      00007E 00                    1750 	.db 0x00
      00007F 00                    1751 	.db 0x00
      000080 00                    1752 	.db 0x00
      000081 00                    1753 	.db 0x00
      000082 00                    1754 	.db 0x00
      000083 00                    1755 	.db 0x00
      000084 00                    1756 	.db 0x00
      000085 00                    1757 	.db 0x00
      000086 00                    1758 	.db 0x00
      000087 00                    1759 	.db 0x00
      000088 00                    1760 	.db 0x00
      000089 00                    1761 	.db 0x00
      00008A 00                    1762 	.db 0x00
      00008B 00                    1763 	.db 0x00
      00008C 00                    1764 	.db 0x00
      00008D 00                    1765 	.db 0x00
      00008E 00                    1766 	.db 0x00
      00008F 00                    1767 	.db 0x00
      000090 00                    1768 	.db 0x00
      000091 00                    1769 	.db 0x00
      000092 00                    1770 	.db 0x00
      000093 00                    1771 	.db 0x00
      000094 00                    1772 	.db 0x00
      000095 00                    1773 	.db 0x00
      000096 00                    1774 	.db 0x00
      000097 00                    1775 	.db 0x00
      000098 00                    1776 	.db 0x00
      000099 00                    1777 	.db 0x00
      00009A 00                    1778 	.db 0x00
      00009B 00                    1779 	.db 0x00
      00009C 00                    1780 	.db 0x00
      00009D 00                    1781 	.db 0x00
      00009E 00                    1782 	.db 0x00
      00009F 00                    1783 	.db 0x00
      0000A0 00                    1784 	.db 0x00
      0000A1 00                    1785 	.db 0x00
      0000A2 00                    1786 	.db 0x00
      0000A3 00                    1787 	.db 0x00
      0000A4 00                    1788 	.db 0x00
      0000A5 00                    1789 	.db 0x00
      0000A6 00                    1790 	.db 0x00
      0000A7 00                    1791 	.db 0x00
      0000A8 00                    1792 	.db 0x00
      0000A9 00                    1793 	.db 0x00
      0000AA 00                    1794 	.db 0x00
      0000AB 00                    1795 	.db 0x00
      0000AC 00                    1796 	.db 0x00
      0000AD 00                    1797 	.db 0x00
      0000AE 00                    1798 	.db 0x00
      0000AF 00                    1799 	.db 0x00
      0000B0 00                    1800 	.db 0x00
      0000B1 00                    1801 	.db 0x00
      0000B2 00                    1802 	.db 0x00
      0000B3 00                    1803 	.db 0x00
      0000B4 00                    1804 	.db 0x00
      0000B5 00                    1805 	.db 0x00
      0000B6 00                    1806 	.db 0x00
      0000B7 00                    1807 	.db 0x00
      0000B8 00                    1808 	.db 0x00
      0000B9 00                    1809 	.db 0x00
      0000BA 00                    1810 	.db 0x00
      0000BB 00                    1811 	.db 0x00
      0000BC 00                    1812 	.db 0x00
      0000BD 00                    1813 	.db 0x00
      0000BE 00                    1814 	.db 0x00
      0000BF 00                    1815 	.db 0x00
      0000C0 00                    1816 	.db 0x00
      0000C1 00                    1817 	.db 0x00
      0000C2 00                    1818 	.db 0x00
      0000C3 00                    1819 	.db 0x00
      0000C4 00                    1820 	.db 0x00
      0000C5 00                    1821 	.db 0x00
      0000C6 00                    1822 	.db 0x00
      0000C7 00                    1823 	.db 0x00
      0000C8 00                    1824 	.db 0x00
      0000C9 00                    1825 	.db 0x00
      0000CA 00                    1826 	.db 0x00
      0000CB 00                    1827 	.db 0x00
      0000CC 00                    1828 	.db 0x00
      0000CD 00                    1829 	.db 0x00
      0000CE 00                    1830 	.db 0x00
      0000CF 00                    1831 	.db 0x00
      0000D0 00                    1832 	.db 0x00
      0000D1 00                    1833 	.db 0x00
      0000D2 00                    1834 	.db 0x00
      0000D3 00                    1835 	.db 0x00
      0000D4 00                    1836 	.db 0x00
      0000D5 00                    1837 	.db 0x00
      0000D6 00                    1838 	.db 0x00
      0000D7 00                    1839 	.db 0x00
      0000D8 00                    1840 	.db 0x00
      0000D9 00                    1841 	.db 0x00
      0000DA 00                    1842 	.db 0x00
      0000DB 00                    1843 	.db 0x00
      0000DC 00                    1844 	.db 0x00
      0000DD 00                    1845 	.db 0x00
      0000DE 00                    1846 	.db 0x00
      0000DF 00                    1847 	.db 0x00
      0000E0 00                    1848 	.db 0x00
      0000E1 00                    1849 	.db 0x00
      0000E2 00                    1850 	.db 0x00
      0000E3 00                    1851 	.db 0x00
      0000E4 00                    1852 	.db 0x00
      0000E5 00                    1853 	.db 0x00
      0000E6 00                    1854 	.db 0x00
      0000E7 00                    1855 	.db 0x00
      0000E8 00                    1856 	.db 0x00
      0000E9 00                    1857 	.db 0x00
      0000EA 00                    1858 	.db 0x00
      0000EB 00                    1859 	.db 0x00
      0000EC 00                    1860 	.db 0x00
      0000ED 00                    1861 	.db 0x00
      0000EE 00                    1862 	.db 0x00
      0000EF 00                    1863 	.db 0x00
      0000F0 00                    1864 	.db 0x00
      0000F1 00                    1865 	.db 0x00
      0000F2 00                    1866 	.db 0x00
      0000F3 00                    1867 	.db 0x00
      0000F4 00                    1868 	.db 0x00
      0000F5 00                    1869 	.db 0x00
      0000F6 00                    1870 	.db 0x00
      0000F7 00                    1871 	.db 0x00
      0000F8 00                    1872 	.db 0x00
      0000F9 00                    1873 	.db 0x00
      0000FA 00                    1874 	.db 0x00
      0000FB 00                    1875 	.db 0x00
      0000FC 00                    1876 	.db 0x00
      0000FD 00                    1877 	.db 0x00
      0000FE 00                    1878 	.db 0x00
      0000FF                       1879 __xinit__a:
      0000FF 00                    1880 	.db #0x00	; 0
      000100 00                    1881 	.db 0x00
      000101 00                    1882 	.db 0x00
      000102                       1883 __xinit__d_addr:
      000102 00                    1884 	.db #0x00	; 0
      000103                       1885 __xinit__p_size:
      000103 00                    1886 	.db #0x00	; 0
      000104                       1887 __xinit__d_size:
      000104 00                    1888 	.db #0x00	; 0
      000105                       1889 __xinit__p_bytes:
      000105 00                    1890 	.db #0x00	; 0
      000106                       1891 __xinit__data_buf:
      000106 00                    1892 	.db #0x00	; 0
      000107 00                    1893 	.db 0x00
      000108 00                    1894 	.db 0x00
      000109 00                    1895 	.db 0x00
      00010A 00                    1896 	.db 0x00
      00010B 00                    1897 	.db 0x00
      00010C 00                    1898 	.db 0x00
      00010D 00                    1899 	.db 0x00
      00010E 00                    1900 	.db 0x00
      00010F 00                    1901 	.db 0x00
      000110 00                    1902 	.db 0x00
      000111 00                    1903 	.db 0x00
      000112 00                    1904 	.db 0x00
      000113 00                    1905 	.db 0x00
      000114 00                    1906 	.db 0x00
      000115 00                    1907 	.db 0x00
      000116 00                    1908 	.db 0x00
      000117 00                    1909 	.db 0x00
      000118 00                    1910 	.db 0x00
      000119 00                    1911 	.db 0x00
      00011A 00                    1912 	.db 0x00
      00011B 00                    1913 	.db 0x00
      00011C 00                    1914 	.db 0x00
      00011D 00                    1915 	.db 0x00
      00011E 00                    1916 	.db 0x00
      00011F 00                    1917 	.db 0x00
      000120 00                    1918 	.db 0x00
      000121 00                    1919 	.db 0x00
      000122 00                    1920 	.db 0x00
      000123 00                    1921 	.db 0x00
      000124 00                    1922 	.db 0x00
      000125 00                    1923 	.db 0x00
      000126 00                    1924 	.db 0x00
      000127 00                    1925 	.db 0x00
      000128 00                    1926 	.db 0x00
      000129 00                    1927 	.db 0x00
      00012A 00                    1928 	.db 0x00
      00012B 00                    1929 	.db 0x00
      00012C 00                    1930 	.db 0x00
      00012D 00                    1931 	.db 0x00
      00012E 00                    1932 	.db 0x00
      00012F 00                    1933 	.db 0x00
      000130 00                    1934 	.db 0x00
      000131 00                    1935 	.db 0x00
      000132 00                    1936 	.db 0x00
      000133 00                    1937 	.db 0x00
      000134 00                    1938 	.db 0x00
      000135 00                    1939 	.db 0x00
      000136 00                    1940 	.db 0x00
      000137 00                    1941 	.db 0x00
      000138 00                    1942 	.db 0x00
      000139 00                    1943 	.db 0x00
      00013A 00                    1944 	.db 0x00
      00013B 00                    1945 	.db 0x00
      00013C 00                    1946 	.db 0x00
      00013D 00                    1947 	.db 0x00
      00013E 00                    1948 	.db 0x00
      00013F 00                    1949 	.db 0x00
      000140 00                    1950 	.db 0x00
      000141 00                    1951 	.db 0x00
      000142 00                    1952 	.db 0x00
      000143 00                    1953 	.db 0x00
      000144 00                    1954 	.db 0x00
      000145 00                    1955 	.db 0x00
      000146 00                    1956 	.db 0x00
      000147 00                    1957 	.db 0x00
      000148 00                    1958 	.db 0x00
      000149 00                    1959 	.db 0x00
      00014A 00                    1960 	.db 0x00
      00014B 00                    1961 	.db 0x00
      00014C 00                    1962 	.db 0x00
      00014D 00                    1963 	.db 0x00
      00014E 00                    1964 	.db 0x00
      00014F 00                    1965 	.db 0x00
      000150 00                    1966 	.db 0x00
      000151 00                    1967 	.db 0x00
      000152 00                    1968 	.db 0x00
      000153 00                    1969 	.db 0x00
      000154 00                    1970 	.db 0x00
      000155 00                    1971 	.db 0x00
      000156 00                    1972 	.db 0x00
      000157 00                    1973 	.db 0x00
      000158 00                    1974 	.db 0x00
      000159 00                    1975 	.db 0x00
      00015A 00                    1976 	.db 0x00
      00015B 00                    1977 	.db 0x00
      00015C 00                    1978 	.db 0x00
      00015D 00                    1979 	.db 0x00
      00015E 00                    1980 	.db 0x00
      00015F 00                    1981 	.db 0x00
      000160 00                    1982 	.db 0x00
      000161 00                    1983 	.db 0x00
      000162 00                    1984 	.db 0x00
      000163 00                    1985 	.db 0x00
      000164 00                    1986 	.db 0x00
      000165 00                    1987 	.db 0x00
      000166 00                    1988 	.db 0x00
      000167 00                    1989 	.db 0x00
      000168 00                    1990 	.db 0x00
      000169 00                    1991 	.db 0x00
      00016A 00                    1992 	.db 0x00
      00016B 00                    1993 	.db 0x00
      00016C 00                    1994 	.db 0x00
      00016D 00                    1995 	.db 0x00
      00016E 00                    1996 	.db 0x00
      00016F 00                    1997 	.db 0x00
      000170 00                    1998 	.db 0x00
      000171 00                    1999 	.db 0x00
      000172 00                    2000 	.db 0x00
      000173 00                    2001 	.db 0x00
      000174 00                    2002 	.db 0x00
      000175 00                    2003 	.db 0x00
      000176 00                    2004 	.db 0x00
      000177 00                    2005 	.db 0x00
      000178 00                    2006 	.db 0x00
      000179 00                    2007 	.db 0x00
      00017A 00                    2008 	.db 0x00
      00017B 00                    2009 	.db 0x00
      00017C 00                    2010 	.db 0x00
      00017D 00                    2011 	.db 0x00
      00017E 00                    2012 	.db 0x00
      00017F 00                    2013 	.db 0x00
      000180 00                    2014 	.db 0x00
      000181 00                    2015 	.db 0x00
      000182 00                    2016 	.db 0x00
      000183 00                    2017 	.db 0x00
      000184 00                    2018 	.db 0x00
      000185 00                    2019 	.db 0x00
      000186 00                    2020 	.db 0x00
      000187 00                    2021 	.db 0x00
      000188 00                    2022 	.db 0x00
      000189 00                    2023 	.db 0x00
      00018A 00                    2024 	.db 0x00
      00018B 00                    2025 	.db 0x00
      00018C 00                    2026 	.db 0x00
      00018D 00                    2027 	.db 0x00
      00018E 00                    2028 	.db 0x00
      00018F 00                    2029 	.db 0x00
      000190 00                    2030 	.db 0x00
      000191 00                    2031 	.db 0x00
      000192 00                    2032 	.db 0x00
      000193 00                    2033 	.db 0x00
      000194 00                    2034 	.db 0x00
      000195 00                    2035 	.db 0x00
      000196 00                    2036 	.db 0x00
      000197 00                    2037 	.db 0x00
      000198 00                    2038 	.db 0x00
      000199 00                    2039 	.db 0x00
      00019A 00                    2040 	.db 0x00
      00019B 00                    2041 	.db 0x00
      00019C 00                    2042 	.db 0x00
      00019D 00                    2043 	.db 0x00
      00019E 00                    2044 	.db 0x00
      00019F 00                    2045 	.db 0x00
      0001A0 00                    2046 	.db 0x00
      0001A1 00                    2047 	.db 0x00
      0001A2 00                    2048 	.db 0x00
      0001A3 00                    2049 	.db 0x00
      0001A4 00                    2050 	.db 0x00
      0001A5 00                    2051 	.db 0x00
      0001A6 00                    2052 	.db 0x00
      0001A7 00                    2053 	.db 0x00
      0001A8 00                    2054 	.db 0x00
      0001A9 00                    2055 	.db 0x00
      0001AA 00                    2056 	.db 0x00
      0001AB 00                    2057 	.db 0x00
      0001AC 00                    2058 	.db 0x00
      0001AD 00                    2059 	.db 0x00
      0001AE 00                    2060 	.db 0x00
      0001AF 00                    2061 	.db 0x00
      0001B0 00                    2062 	.db 0x00
      0001B1 00                    2063 	.db 0x00
      0001B2 00                    2064 	.db 0x00
      0001B3 00                    2065 	.db 0x00
      0001B4 00                    2066 	.db 0x00
      0001B5 00                    2067 	.db 0x00
      0001B6 00                    2068 	.db 0x00
      0001B7 00                    2069 	.db 0x00
      0001B8 00                    2070 	.db 0x00
      0001B9 00                    2071 	.db 0x00
      0001BA 00                    2072 	.db 0x00
      0001BB 00                    2073 	.db 0x00
      0001BC 00                    2074 	.db 0x00
      0001BD 00                    2075 	.db 0x00
      0001BE 00                    2076 	.db 0x00
      0001BF 00                    2077 	.db 0x00
      0001C0 00                    2078 	.db 0x00
      0001C1 00                    2079 	.db 0x00
      0001C2 00                    2080 	.db 0x00
      0001C3 00                    2081 	.db 0x00
      0001C4 00                    2082 	.db 0x00
      0001C5 00                    2083 	.db 0x00
      0001C6 00                    2084 	.db 0x00
      0001C7 00                    2085 	.db 0x00
      0001C8 00                    2086 	.db 0x00
      0001C9 00                    2087 	.db 0x00
      0001CA 00                    2088 	.db 0x00
      0001CB 00                    2089 	.db 0x00
      0001CC 00                    2090 	.db 0x00
      0001CD 00                    2091 	.db 0x00
      0001CE 00                    2092 	.db 0x00
      0001CF 00                    2093 	.db 0x00
      0001D0 00                    2094 	.db 0x00
      0001D1 00                    2095 	.db 0x00
      0001D2 00                    2096 	.db 0x00
      0001D3 00                    2097 	.db 0x00
      0001D4 00                    2098 	.db 0x00
      0001D5 00                    2099 	.db 0x00
      0001D6 00                    2100 	.db 0x00
      0001D7 00                    2101 	.db 0x00
      0001D8 00                    2102 	.db 0x00
      0001D9 00                    2103 	.db 0x00
      0001DA 00                    2104 	.db 0x00
      0001DB 00                    2105 	.db 0x00
      0001DC 00                    2106 	.db 0x00
      0001DD 00                    2107 	.db 0x00
      0001DE 00                    2108 	.db 0x00
      0001DF 00                    2109 	.db 0x00
      0001E0 00                    2110 	.db 0x00
      0001E1 00                    2111 	.db 0x00
      0001E2 00                    2112 	.db 0x00
      0001E3 00                    2113 	.db 0x00
      0001E4 00                    2114 	.db 0x00
      0001E5 00                    2115 	.db 0x00
      0001E6 00                    2116 	.db 0x00
      0001E7 00                    2117 	.db 0x00
      0001E8 00                    2118 	.db 0x00
      0001E9 00                    2119 	.db 0x00
      0001EA 00                    2120 	.db 0x00
      0001EB 00                    2121 	.db 0x00
      0001EC 00                    2122 	.db 0x00
      0001ED 00                    2123 	.db 0x00
      0001EE 00                    2124 	.db 0x00
      0001EF 00                    2125 	.db 0x00
      0001F0 00                    2126 	.db 0x00
      0001F1 00                    2127 	.db 0x00
      0001F2 00                    2128 	.db 0x00
      0001F3 00                    2129 	.db 0x00
      0001F4 00                    2130 	.db 0x00
      0001F5 00                    2131 	.db 0x00
      0001F6 00                    2132 	.db 0x00
      0001F7 00                    2133 	.db 0x00
      0001F8 00                    2134 	.db 0x00
      0001F9 00                    2135 	.db 0x00
      0001FA 00                    2136 	.db 0x00
      0001FB 00                    2137 	.db 0x00
      0001FC 00                    2138 	.db 0x00
      0001FD 00                    2139 	.db 0x00
      0001FE 00                    2140 	.db 0x00
      0001FF 00                    2141 	.db 0x00
      000200 00                    2142 	.db 0x00
      000201 00                    2143 	.db 0x00
      000202 00                    2144 	.db 0x00
      000203 00                    2145 	.db 0x00
      000204 00                    2146 	.db 0x00
      000205                       2147 __xinit__current_dev:
      000205 00                    2148 	.db #0x00	; 0
                                   2149 	.area CABS (ABS)
