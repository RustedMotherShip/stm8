                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.3.0 #14184 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _command_switcher
                                     13 	.globl _data_handler
                                     14 	.globl _cm_SW
                                     15 	.globl _cm_SR
                                     16 	.globl _cm_ST
                                     17 	.globl _cm_DB
                                     18 	.globl _cm_RM
                                     19 	.globl _cm_SN
                                     20 	.globl _cm_SM
                                     21 	.globl _i2c_scan
                                     22 	.globl _i2c_read
                                     23 	.globl _i2c_write
                                     24 	.globl _i2c_stop
                                     25 	.globl _i2c_send_address
                                     26 	.globl _i2c_start
                                     27 	.globl _i2c_init
                                     28 	.globl _uart_init
                                     29 	.globl _status_check
                                     30 	.globl _char_buffer_to_int
                                     31 	.globl _get_size_from_buff
                                     32 	.globl _get_addr_from_buff
                                     33 	.globl _convert_int_to_binary
                                     34 	.globl _convert_chars_to_int
                                     35 	.globl _convert_int_to_chars
                                     36 	.globl _uart_read
                                     37 	.globl _uart_write
                                     38 	.globl _UART_RX
                                     39 	.globl _UART_TX
                                     40 	.globl _delay
                                     41 	.globl ___memcpy
                                     42 	.globl _strlen
                                     43 	.globl _memset
                                     44 	.globl _memcmp
                                     45 	.globl _current_dev
                                     46 	.globl _data_buf
                                     47 	.globl _p_bytes
                                     48 	.globl _d_size
                                     49 	.globl _p_size
                                     50 	.globl _d_addr
                                     51 	.globl _a
                                     52 	.globl _buffer
                                     53 ;--------------------------------------------------------
                                     54 ; ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area DATA
                                     57 ;--------------------------------------------------------
                                     58 ; ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area INITIALIZED
      000000                         61 _buffer::
      000000                         62 	.ds 255
      0000FF                         63 _a::
      0000FF                         64 	.ds 3
      000102                         65 _d_addr::
      000102                         66 	.ds 1
      000103                         67 _p_size::
      000103                         68 	.ds 1
      000104                         69 _d_size::
      000104                         70 	.ds 1
      000105                         71 _p_bytes::
      000105                         72 	.ds 1
      000106                         73 _data_buf::
      000106                         74 	.ds 255
      000205                         75 _current_dev::
      000205                         76 	.ds 1
                                     77 ;--------------------------------------------------------
                                     78 ; Stack segment in internal ram
                                     79 ;--------------------------------------------------------
                                     80 	.area SSEG
      000000                         81 __start__stack:
      000000                         82 	.ds	1
                                     83 
                                     84 ;--------------------------------------------------------
                                     85 ; absolute external ram data
                                     86 ;--------------------------------------------------------
                                     87 	.area DABS (ABS)
                                     88 
                                     89 ; default segment ordering for linker
                                     90 	.area HOME
                                     91 	.area GSINIT
                                     92 	.area GSFINAL
                                     93 	.area CONST
                                     94 	.area INITIALIZER
                                     95 	.area CODE
                                     96 
                                     97 ;--------------------------------------------------------
                                     98 ; interrupt vector
                                     99 ;--------------------------------------------------------
                                    100 	.area HOME
      000000                        101 __interrupt_vect:
      000000 82v00u00u00            102 	int s_GSINIT ; reset
                                    103 ;--------------------------------------------------------
                                    104 ; global & static initialisations
                                    105 ;--------------------------------------------------------
                                    106 	.area HOME
                                    107 	.area GSINIT
                                    108 	.area GSFINAL
                                    109 	.area GSINIT
      000000 CDr00r00         [ 4]  110 	call	___sdcc_external_startup
      000003 4D               [ 1]  111 	tnz	a
      000004 27 03            [ 1]  112 	jreq	__sdcc_init_data
      000006 CCr00r04         [ 2]  113 	jp	__sdcc_program_startup
      000009                        114 __sdcc_init_data:
                                    115 ; stm8_genXINIT() start
      000009 AEr00r00         [ 2]  116 	ldw x, #l_DATA
      00000C 27 07            [ 1]  117 	jreq	00002$
      00000E                        118 00001$:
      00000E 72 4FuFFuFF      [ 1]  119 	clr (s_DATA - 1, x)
      000012 5A               [ 2]  120 	decw x
      000013 26 F9            [ 1]  121 	jrne	00001$
      000015                        122 00002$:
      000015 AEr00r00         [ 2]  123 	ldw	x, #l_INITIALIZER
      000018 27 09            [ 1]  124 	jreq	00004$
      00001A                        125 00003$:
      00001A D6uFFuFF         [ 1]  126 	ld	a, (s_INITIALIZER - 1, x)
      00001D D7uFFuFF         [ 1]  127 	ld	(s_INITIALIZED - 1, x), a
      000020 5A               [ 2]  128 	decw	x
      000021 26 F7            [ 1]  129 	jrne	00003$
      000023                        130 00004$:
                                    131 ; stm8_genXINIT() end
                                    132 	.area GSFINAL
      000000 CCr00r04         [ 2]  133 	jp	__sdcc_program_startup
                                    134 ;--------------------------------------------------------
                                    135 ; Home
                                    136 ;--------------------------------------------------------
                                    137 	.area HOME
                                    138 	.area HOME
      000004                        139 __sdcc_program_startup:
      000004 CCr06r47         [ 2]  140 	jp	_main
                                    141 ;	return from main will return to caller
                                    142 ;--------------------------------------------------------
                                    143 ; code
                                    144 ;--------------------------------------------------------
                                    145 	.area CODE
                                    146 ;	main.c: 26: void delay(unsigned long count) {
                                    147 ;	-----------------------------------------
                                    148 ;	 function delay
                                    149 ;	-----------------------------------------
      000000                        150 _delay:
      000000 52 08            [ 2]  151 	sub	sp, #8
                                    152 ;	main.c: 27: while (count--)
      000002 16 0D            [ 2]  153 	ldw	y, (0x0d, sp)
      000004 17 07            [ 2]  154 	ldw	(0x07, sp), y
      000006 1E 0B            [ 2]  155 	ldw	x, (0x0b, sp)
      000008                        156 00101$:
      000008 1F 01            [ 2]  157 	ldw	(0x01, sp), x
      00000A 7B 07            [ 1]  158 	ld	a, (0x07, sp)
      00000C 6B 03            [ 1]  159 	ld	(0x03, sp), a
      00000E 7B 08            [ 1]  160 	ld	a, (0x08, sp)
      000010 16 07            [ 2]  161 	ldw	y, (0x07, sp)
      000012 72 A2 00 01      [ 2]  162 	subw	y, #0x0001
      000016 17 07            [ 2]  163 	ldw	(0x07, sp), y
      000018 24 01            [ 1]  164 	jrnc	00117$
      00001A 5A               [ 2]  165 	decw	x
      00001B                        166 00117$:
      00001B 4D               [ 1]  167 	tnz	a
      00001C 26 08            [ 1]  168 	jrne	00118$
      00001E 16 02            [ 2]  169 	ldw	y, (0x02, sp)
      000020 26 04            [ 1]  170 	jrne	00118$
      000022 0D 01            [ 1]  171 	tnz	(0x01, sp)
      000024 27 03            [ 1]  172 	jreq	00104$
      000026                        173 00118$:
                                    174 ;	main.c: 28: nop();
      000026 9D               [ 1]  175 	nop
      000027 20 DF            [ 2]  176 	jra	00101$
      000029                        177 00104$:
                                    178 ;	main.c: 29: }
      000029 1E 09            [ 2]  179 	ldw	x, (9, sp)
      00002B 5B 0E            [ 2]  180 	addw	sp, #14
      00002D FC               [ 2]  181 	jp	(x)
                                    182 ;	main.c: 37: void UART_TX(unsigned char value)
                                    183 ;	-----------------------------------------
                                    184 ;	 function UART_TX
                                    185 ;	-----------------------------------------
      00002E                        186 _UART_TX:
                                    187 ;	main.c: 39: UART1_DR = value;
      00002E C7 52 31         [ 1]  188 	ld	0x5231, a
                                    189 ;	main.c: 40: while(!(UART1_SR & UART_SR_TXE));
      000031                        190 00101$:
      000031 C6 52 30         [ 1]  191 	ld	a, 0x5230
      000034 2A FB            [ 1]  192 	jrpl	00101$
                                    193 ;	main.c: 41: }
      000036 81               [ 4]  194 	ret
                                    195 ;	main.c: 42: unsigned char UART_RX(void)
                                    196 ;	-----------------------------------------
                                    197 ;	 function UART_RX
                                    198 ;	-----------------------------------------
      000037                        199 _UART_RX:
                                    200 ;	main.c: 44: while(!(UART1_SR & UART_SR_TXE));
      000037                        201 00101$:
      000037 C6 52 30         [ 1]  202 	ld	a, 0x5230
      00003A 2A FB            [ 1]  203 	jrpl	00101$
                                    204 ;	main.c: 45: return UART1_DR;
      00003C C6 52 31         [ 1]  205 	ld	a, 0x5231
                                    206 ;	main.c: 46: }
      00003F 81               [ 4]  207 	ret
                                    208 ;	main.c: 47: int uart_write(const char *str) {
                                    209 ;	-----------------------------------------
                                    210 ;	 function uart_write
                                    211 ;	-----------------------------------------
      000040                        212 _uart_write:
      000040 52 05            [ 2]  213 	sub	sp, #5
      000042 1F 03            [ 2]  214 	ldw	(0x03, sp), x
                                    215 ;	main.c: 49: for(i = 0; i < strlen(str); i++) {
      000044 0F 05            [ 1]  216 	clr	(0x05, sp)
      000046                        217 00103$:
      000046 1E 03            [ 2]  218 	ldw	x, (0x03, sp)
      000048 CDr00r00         [ 4]  219 	call	_strlen
      00004B 1F 01            [ 2]  220 	ldw	(0x01, sp), x
      00004D 7B 05            [ 1]  221 	ld	a, (0x05, sp)
      00004F 5F               [ 1]  222 	clrw	x
      000050 97               [ 1]  223 	ld	xl, a
      000051 13 01            [ 2]  224 	cpw	x, (0x01, sp)
      000053 24 0F            [ 1]  225 	jrnc	00101$
                                    226 ;	main.c: 51: UART_TX(str[i]);
      000055 5F               [ 1]  227 	clrw	x
      000056 7B 05            [ 1]  228 	ld	a, (0x05, sp)
      000058 97               [ 1]  229 	ld	xl, a
      000059 72 FB 03         [ 2]  230 	addw	x, (0x03, sp)
      00005C F6               [ 1]  231 	ld	a, (x)
      00005D CDr00r2E         [ 4]  232 	call	_UART_TX
                                    233 ;	main.c: 49: for(i = 0; i < strlen(str); i++) {
      000060 0C 05            [ 1]  234 	inc	(0x05, sp)
      000062 20 E2            [ 2]  235 	jra	00103$
      000064                        236 00101$:
                                    237 ;	main.c: 53: return(i); // Bytes sent
      000064 7B 05            [ 1]  238 	ld	a, (0x05, sp)
      000066 5F               [ 1]  239 	clrw	x
      000067 97               [ 1]  240 	ld	xl, a
                                    241 ;	main.c: 54: }
      000068 5B 05            [ 2]  242 	addw	sp, #5
      00006A 81               [ 4]  243 	ret
                                    244 ;	main.c: 55: int uart_read(void)
                                    245 ;	-----------------------------------------
                                    246 ;	 function uart_read
                                    247 ;	-----------------------------------------
      00006B                        248 _uart_read:
                                    249 ;	main.c: 57: memset(buffer, 0, sizeof(buffer));
      00006B 4B FF            [ 1]  250 	push	#0xff
      00006D 4B 00            [ 1]  251 	push	#0x00
      00006F 5F               [ 1]  252 	clrw	x
      000070 89               [ 2]  253 	pushw	x
      000071 AEr00r00         [ 2]  254 	ldw	x, #(_buffer+0)
      000074 CDr00r00         [ 4]  255 	call	_memset
                                    256 ;	main.c: 59: while(i<256)
      000077 5F               [ 1]  257 	clrw	x
      000078                        258 00105$:
      000078 A3 01 00         [ 2]  259 	cpw	x, #0x0100
      00007B 2E 22            [ 1]  260 	jrsge	00107$
                                    261 ;	main.c: 61: if(UART1_SR & UART_SR_RXNE)
      00007D C6 52 30         [ 1]  262 	ld	a, 0x5230
      000080 A5 20            [ 1]  263 	bcp	a, #0x20
      000082 27 F4            [ 1]  264 	jreq	00105$
                                    265 ;	main.c: 63: buffer[i] = UART_RX();
      000084 90 93            [ 1]  266 	ldw	y, x
      000086 72 A9r00r00      [ 2]  267 	addw	y, #(_buffer+0)
      00008A 89               [ 2]  268 	pushw	x
      00008B 90 89            [ 2]  269 	pushw	y
      00008D CDr00r37         [ 4]  270 	call	_UART_RX
      000090 90 85            [ 2]  271 	popw	y
      000092 85               [ 2]  272 	popw	x
      000093 90 F7            [ 1]  273 	ld	(y), a
                                    274 ;	main.c: 64: if(buffer[i] == '\r\n' )
      000095 A1 0D            [ 1]  275 	cp	a, #0x0d
      000097 26 03            [ 1]  276 	jrne	00102$
                                    277 ;	main.c: 66: return 1;
      000099 5F               [ 1]  278 	clrw	x
      00009A 5C               [ 1]  279 	incw	x
      00009B 81               [ 4]  280 	ret
                                    281 ;	main.c: 67: break;
      00009C                        282 00102$:
                                    283 ;	main.c: 69: i++;
      00009C 5C               [ 1]  284 	incw	x
      00009D 20 D9            [ 2]  285 	jra	00105$
      00009F                        286 00107$:
                                    287 ;	main.c: 72: return 0;
      00009F 5F               [ 1]  288 	clrw	x
                                    289 ;	main.c: 73: }
      0000A0 81               [ 4]  290 	ret
                                    291 ;	main.c: 82: void convert_int_to_chars(uint8_t num, char* rx_int_chars) {
                                    292 ;	-----------------------------------------
                                    293 ;	 function convert_int_to_chars
                                    294 ;	-----------------------------------------
      0000A1                        295 _convert_int_to_chars:
      0000A1 52 0D            [ 2]  296 	sub	sp, #13
      0000A3 6B 0D            [ 1]  297 	ld	(0x0d, sp), a
      0000A5 1F 0B            [ 2]  298 	ldw	(0x0b, sp), x
                                    299 ;	main.c: 85: rx_int_chars[0] = num / 100 + '0';
      0000A7 7B 0D            [ 1]  300 	ld	a, (0x0d, sp)
      0000A9 6B 02            [ 1]  301 	ld	(0x02, sp), a
      0000AB 0F 01            [ 1]  302 	clr	(0x01, sp)
                                    303 ;	main.c: 86: rx_int_chars[1] = num / 10 % 10 + '0';
      0000AD 1E 0B            [ 2]  304 	ldw	x, (0x0b, sp)
      0000AF 5C               [ 1]  305 	incw	x
      0000B0 1F 03            [ 2]  306 	ldw	(0x03, sp), x
                                    307 ;	main.c: 87: rx_int_chars[2] = num % 10 + '0';
      0000B2 1E 0B            [ 2]  308 	ldw	x, (0x0b, sp)
      0000B4 5C               [ 1]  309 	incw	x
      0000B5 5C               [ 1]  310 	incw	x
      0000B6 1F 05            [ 2]  311 	ldw	(0x05, sp), x
                                    312 ;	main.c: 86: rx_int_chars[1] = num / 10 % 10 + '0';
      0000B8 4B 0A            [ 1]  313 	push	#0x0a
      0000BA 4B 00            [ 1]  314 	push	#0x00
      0000BC 1E 03            [ 2]  315 	ldw	x, (0x03, sp)
                                    316 ;	main.c: 87: rx_int_chars[2] = num % 10 + '0';
      0000BE CDr00r00         [ 4]  317 	call	__divsint
      0000C1 1F 07            [ 2]  318 	ldw	(0x07, sp), x
      0000C3 4B 0A            [ 1]  319 	push	#0x0a
      0000C5 4B 00            [ 1]  320 	push	#0x00
      0000C7 1E 03            [ 2]  321 	ldw	x, (0x03, sp)
      0000C9 CDr00r00         [ 4]  322 	call	__modsint
      0000CC 9F               [ 1]  323 	ld	a, xl
      0000CD AB 30            [ 1]  324 	add	a, #0x30
      0000CF 6B 09            [ 1]  325 	ld	(0x09, sp), a
                                    326 ;	main.c: 83: if (num > 99) {
      0000D1 7B 0D            [ 1]  327 	ld	a, (0x0d, sp)
      0000D3 A1 63            [ 1]  328 	cp	a, #0x63
      0000D5 23 29            [ 2]  329 	jrule	00105$
                                    330 ;	main.c: 85: rx_int_chars[0] = num / 100 + '0';
      0000D7 4B 64            [ 1]  331 	push	#0x64
      0000D9 4B 00            [ 1]  332 	push	#0x00
      0000DB 1E 03            [ 2]  333 	ldw	x, (0x03, sp)
      0000DD CDr00r00         [ 4]  334 	call	__divsint
      0000E0 9F               [ 1]  335 	ld	a, xl
      0000E1 AB 30            [ 1]  336 	add	a, #0x30
      0000E3 1E 0B            [ 2]  337 	ldw	x, (0x0b, sp)
      0000E5 F7               [ 1]  338 	ld	(x), a
                                    339 ;	main.c: 86: rx_int_chars[1] = num / 10 % 10 + '0';
      0000E6 4B 0A            [ 1]  340 	push	#0x0a
      0000E8 4B 00            [ 1]  341 	push	#0x00
      0000EA 1E 09            [ 2]  342 	ldw	x, (0x09, sp)
      0000EC CDr00r00         [ 4]  343 	call	__modsint
      0000EF 9F               [ 1]  344 	ld	a, xl
      0000F0 AB 30            [ 1]  345 	add	a, #0x30
      0000F2 1E 03            [ 2]  346 	ldw	x, (0x03, sp)
      0000F4 F7               [ 1]  347 	ld	(x), a
                                    348 ;	main.c: 87: rx_int_chars[2] = num % 10 + '0';
      0000F5 1E 05            [ 2]  349 	ldw	x, (0x05, sp)
      0000F7 7B 09            [ 1]  350 	ld	a, (0x09, sp)
      0000F9 F7               [ 1]  351 	ld	(x), a
                                    352 ;	main.c: 88: rx_int_chars[3] ='\0';
      0000FA 1E 0B            [ 2]  353 	ldw	x, (0x0b, sp)
      0000FC 6F 03            [ 1]  354 	clr	(0x0003, x)
      0000FE 20 23            [ 2]  355 	jra	00107$
      000100                        356 00105$:
                                    357 ;	main.c: 90: } else if (num > 9) {
      000100 7B 0D            [ 1]  358 	ld	a, (0x0d, sp)
      000102 A1 09            [ 1]  359 	cp	a, #0x09
      000104 23 13            [ 2]  360 	jrule	00102$
                                    361 ;	main.c: 92: rx_int_chars[0] = num / 10 + '0';
      000106 7B 08            [ 1]  362 	ld	a, (0x08, sp)
      000108 6B 0A            [ 1]  363 	ld	(0x0a, sp), a
      00010A AB 30            [ 1]  364 	add	a, #0x30
      00010C 1E 0B            [ 2]  365 	ldw	x, (0x0b, sp)
      00010E F7               [ 1]  366 	ld	(x), a
                                    367 ;	main.c: 93: rx_int_chars[1] = num % 10 + '0';
      00010F 1E 03            [ 2]  368 	ldw	x, (0x03, sp)
      000111 7B 09            [ 1]  369 	ld	a, (0x09, sp)
      000113 F7               [ 1]  370 	ld	(x), a
                                    371 ;	main.c: 94: rx_int_chars[2] ='\0'; // Заканчиваем строку символом конца строки
      000114 1E 05            [ 2]  372 	ldw	x, (0x05, sp)
      000116 7F               [ 1]  373 	clr	(x)
      000117 20 0A            [ 2]  374 	jra	00107$
      000119                        375 00102$:
                                    376 ;	main.c: 97: rx_int_chars[0] = num + '0';
      000119 7B 0D            [ 1]  377 	ld	a, (0x0d, sp)
      00011B AB 30            [ 1]  378 	add	a, #0x30
      00011D 1E 0B            [ 2]  379 	ldw	x, (0x0b, sp)
      00011F F7               [ 1]  380 	ld	(x), a
                                    381 ;	main.c: 98: rx_int_chars[1] ='\0';
      000120 1E 03            [ 2]  382 	ldw	x, (0x03, sp)
      000122 7F               [ 1]  383 	clr	(x)
      000123                        384 00107$:
                                    385 ;	main.c: 100: }
      000123 5B 0D            [ 2]  386 	addw	sp, #13
      000125 81               [ 4]  387 	ret
                                    388 ;	main.c: 102: uint8_t convert_chars_to_int(char* rx_chars_int, const int i) {
                                    389 ;	-----------------------------------------
                                    390 ;	 function convert_chars_to_int
                                    391 ;	-----------------------------------------
      000126                        392 _convert_chars_to_int:
      000126 52 03            [ 2]  393 	sub	sp, #3
      000128 1F 02            [ 2]  394 	ldw	(0x02, sp), x
                                    395 ;	main.c: 103: uint8_t result = 0;
      00012A 4F               [ 1]  396 	clr	a
                                    397 ;	main.c: 105: for (int o = 0; o < i; o++) {
      00012B 5F               [ 1]  398 	clrw	x
      00012C                        399 00103$:
      00012C 13 06            [ 2]  400 	cpw	x, (0x06, sp)
      00012E 2E 18            [ 1]  401 	jrsge	00101$
                                    402 ;	main.c: 107: result = (result * 10) + (rx_chars_int[o] - '0');
      000130 90 97            [ 1]  403 	ld	yl, a
      000132 A6 0A            [ 1]  404 	ld	a, #0x0a
      000134 90 42            [ 4]  405 	mul	y, a
      000136 61               [ 1]  406 	exg	a, yl
      000137 6B 01            [ 1]  407 	ld	(0x01, sp), a
      000139 61               [ 1]  408 	exg	a, yl
      00013A 90 93            [ 1]  409 	ldw	y, x
      00013C 72 F9 02         [ 2]  410 	addw	y, (0x02, sp)
      00013F 90 F6            [ 1]  411 	ld	a, (y)
      000141 A0 30            [ 1]  412 	sub	a, #0x30
      000143 1B 01            [ 1]  413 	add	a, (0x01, sp)
                                    414 ;	main.c: 105: for (int o = 0; o < i; o++) {
      000145 5C               [ 1]  415 	incw	x
      000146 20 E4            [ 2]  416 	jra	00103$
      000148                        417 00101$:
                                    418 ;	main.c: 110: return result;
                                    419 ;	main.c: 111: }
      000148 1E 04            [ 2]  420 	ldw	x, (4, sp)
      00014A 5B 07            [ 2]  421 	addw	sp, #7
      00014C FC               [ 2]  422 	jp	(x)
                                    423 ;	main.c: 114: void convert_int_to_binary(int num, char* rx_binary_chars) {
                                    424 ;	-----------------------------------------
                                    425 ;	 function convert_int_to_binary
                                    426 ;	-----------------------------------------
      00014D                        427 _convert_int_to_binary:
      00014D 52 04            [ 2]  428 	sub	sp, #4
      00014F 1F 01            [ 2]  429 	ldw	(0x01, sp), x
                                    430 ;	main.c: 116: for(int i = 7; i >= 0; i--) {
      000151 AE 00 07         [ 2]  431 	ldw	x, #0x0007
      000154 1F 03            [ 2]  432 	ldw	(0x03, sp), x
      000156                        433 00103$:
      000156 0D 03            [ 1]  434 	tnz	(0x03, sp)
      000158 2B 22            [ 1]  435 	jrmi	00101$
                                    436 ;	main.c: 118: rx_binary_chars[7 - i] = ((num >> i) & 1) + '0';
      00015A AE 00 07         [ 2]  437 	ldw	x, #0x0007
      00015D 72 F0 03         [ 2]  438 	subw	x, (0x03, sp)
      000160 72 FB 07         [ 2]  439 	addw	x, (0x07, sp)
      000163 16 01            [ 2]  440 	ldw	y, (0x01, sp)
      000165 7B 04            [ 1]  441 	ld	a, (0x04, sp)
      000167 27 05            [ 1]  442 	jreq	00120$
      000169                        443 00119$:
      000169 90 57            [ 2]  444 	sraw	y
      00016B 4A               [ 1]  445 	dec	a
      00016C 26 FB            [ 1]  446 	jrne	00119$
      00016E                        447 00120$:
      00016E 90 9F            [ 1]  448 	ld	a, yl
      000170 A4 01            [ 1]  449 	and	a, #0x01
      000172 AB 30            [ 1]  450 	add	a, #0x30
      000174 F7               [ 1]  451 	ld	(x), a
                                    452 ;	main.c: 116: for(int i = 7; i >= 0; i--) {
      000175 1E 03            [ 2]  453 	ldw	x, (0x03, sp)
      000177 5A               [ 2]  454 	decw	x
      000178 1F 03            [ 2]  455 	ldw	(0x03, sp), x
      00017A 20 DA            [ 2]  456 	jra	00103$
      00017C                        457 00101$:
                                    458 ;	main.c: 120: rx_binary_chars[8] = '\0'; // Добавляем символ конца строки
      00017C 1E 07            [ 2]  459 	ldw	x, (0x07, sp)
      00017E 6F 08            [ 1]  460 	clr	(0x0008, x)
                                    461 ;	main.c: 121: }
      000180 1E 05            [ 2]  462 	ldw	x, (5, sp)
      000182 5B 08            [ 2]  463 	addw	sp, #8
      000184 FC               [ 2]  464 	jp	(x)
                                    465 ;	main.c: 130: void get_addr_from_buff(void)
                                    466 ;	-----------------------------------------
                                    467 ;	 function get_addr_from_buff
                                    468 ;	-----------------------------------------
      000185                        469 _get_addr_from_buff:
      000185 52 02            [ 2]  470 	sub	sp, #2
                                    471 ;	main.c: 134: while(1)
      000187 A6 03            [ 1]  472 	ld	a, #0x03
      000189 6B 01            [ 1]  473 	ld	(0x01, sp), a
      00018B 0F 02            [ 1]  474 	clr	(0x02, sp)
      00018D                        475 00105$:
                                    476 ;	main.c: 136: if(buffer[i] == ' ' || buffer[i] == '\r\n')
      00018D 5F               [ 1]  477 	clrw	x
      00018E 7B 01            [ 1]  478 	ld	a, (0x01, sp)
      000190 97               [ 1]  479 	ld	xl, a
      000191 D6u00u00         [ 1]  480 	ld	a, (_buffer+0, x)
      000194 A1 20            [ 1]  481 	cp	a, #0x20
      000196 27 04            [ 1]  482 	jreq	00101$
      000198 A1 0D            [ 1]  483 	cp	a, #0x0d
      00019A 26 08            [ 1]  484 	jrne	00102$
      00019C                        485 00101$:
                                    486 ;	main.c: 138: p_size = i+1;
      00019C 7B 01            [ 1]  487 	ld	a, (0x01, sp)
      00019E 4C               [ 1]  488 	inc	a
      00019F C7u01u03         [ 1]  489 	ld	_p_size+0, a
                                    490 ;	main.c: 139: break;
      0001A2 20 06            [ 2]  491 	jra	00106$
      0001A4                        492 00102$:
                                    493 ;	main.c: 141: i++;
      0001A4 0C 01            [ 1]  494 	inc	(0x01, sp)
                                    495 ;	main.c: 142: counter++;
      0001A6 0C 02            [ 1]  496 	inc	(0x02, sp)
      0001A8 20 E3            [ 2]  497 	jra	00105$
      0001AA                        498 00106$:
                                    499 ;	main.c: 144: memcpy(a, &buffer[3], counter);
      0001AA 5F               [ 1]  500 	clrw	x
      0001AB 7B 02            [ 1]  501 	ld	a, (0x02, sp)
      0001AD 97               [ 1]  502 	ld	xl, a
      0001AE 89               [ 2]  503 	pushw	x
      0001AF 4Br03            [ 1]  504 	push	#<(_buffer+3)
      0001B1 4Bs00            [ 1]  505 	push	#((_buffer+3) >> 8)
      0001B3 AEr00rFF         [ 2]  506 	ldw	x, #(_a+0)
      0001B6 CDr00r00         [ 4]  507 	call	___memcpy
                                    508 ;	main.c: 145: d_addr = convert_chars_to_int(a, counter);
      0001B9 5F               [ 1]  509 	clrw	x
      0001BA 7B 02            [ 1]  510 	ld	a, (0x02, sp)
      0001BC 97               [ 1]  511 	ld	xl, a
      0001BD 89               [ 2]  512 	pushw	x
      0001BE AEr00rFF         [ 2]  513 	ldw	x, #(_a+0)
      0001C1 CDr01r26         [ 4]  514 	call	_convert_chars_to_int
      0001C4 C7u01u02         [ 1]  515 	ld	_d_addr+0, a
                                    516 ;	main.c: 146: }
      0001C7 5B 02            [ 2]  517 	addw	sp, #2
      0001C9 81               [ 4]  518 	ret
                                    519 ;	main.c: 148: void get_size_from_buff(void)
                                    520 ;	-----------------------------------------
                                    521 ;	 function get_size_from_buff
                                    522 ;	-----------------------------------------
      0001CA                        523 _get_size_from_buff:
      0001CA 52 02            [ 2]  524 	sub	sp, #2
                                    525 ;	main.c: 150: memset(a, 0, sizeof(a));
      0001CC 4B 03            [ 1]  526 	push	#0x03
      0001CE 4B 00            [ 1]  527 	push	#0x00
      0001D0 5F               [ 1]  528 	clrw	x
      0001D1 89               [ 2]  529 	pushw	x
      0001D2 AEr00rFF         [ 2]  530 	ldw	x, #(_a+0)
      0001D5 CDr00r00         [ 4]  531 	call	_memset
                                    532 ;	main.c: 152: uint8_t i = p_size;
      0001D8 C6u01u03         [ 1]  533 	ld	a, _p_size+0
      0001DB 6B 01            [ 1]  534 	ld	(0x01, sp), a
                                    535 ;	main.c: 153: while(1)
      0001DD 0F 02            [ 1]  536 	clr	(0x02, sp)
      0001DF                        537 00105$:
                                    538 ;	main.c: 155: if(buffer[i] == ' ' || buffer[i] == '\r\n')
      0001DF 5F               [ 1]  539 	clrw	x
      0001E0 7B 01            [ 1]  540 	ld	a, (0x01, sp)
      0001E2 97               [ 1]  541 	ld	xl, a
      0001E3 D6u00u00         [ 1]  542 	ld	a, (_buffer+0, x)
      0001E6 A1 20            [ 1]  543 	cp	a, #0x20
      0001E8 27 04            [ 1]  544 	jreq	00101$
      0001EA A1 0D            [ 1]  545 	cp	a, #0x0d
      0001EC 26 08            [ 1]  546 	jrne	00102$
      0001EE                        547 00101$:
                                    548 ;	main.c: 158: p_bytes = i+1;
      0001EE 7B 01            [ 1]  549 	ld	a, (0x01, sp)
      0001F0 4C               [ 1]  550 	inc	a
      0001F1 C7u01u05         [ 1]  551 	ld	_p_bytes+0, a
                                    552 ;	main.c: 159: break;
      0001F4 20 06            [ 2]  553 	jra	00106$
      0001F6                        554 00102$:
                                    555 ;	main.c: 161: i++;
      0001F6 0C 01            [ 1]  556 	inc	(0x01, sp)
                                    557 ;	main.c: 162: counter++;
      0001F8 0C 02            [ 1]  558 	inc	(0x02, sp)
      0001FA 20 E3            [ 2]  559 	jra	00105$
      0001FC                        560 00106$:
                                    561 ;	main.c: 165: memcpy(a, &buffer[p_size], counter);
      0001FC 90 5F            [ 1]  562 	clrw	y
      0001FE 7B 02            [ 1]  563 	ld	a, (0x02, sp)
      000200 90 97            [ 1]  564 	ld	yl, a
      000202 5F               [ 1]  565 	clrw	x
      000203 C6u01u03         [ 1]  566 	ld	a, _p_size+0
      000206 97               [ 1]  567 	ld	xl, a
      000207 1Cr00r00         [ 2]  568 	addw	x, #(_buffer+0)
      00020A 90 89            [ 2]  569 	pushw	y
      00020C 89               [ 2]  570 	pushw	x
      00020D AEr00rFF         [ 2]  571 	ldw	x, #(_a+0)
      000210 CDr00r00         [ 4]  572 	call	___memcpy
                                    573 ;	main.c: 166: d_size = convert_chars_to_int(a, counter);
      000213 5F               [ 1]  574 	clrw	x
      000214 7B 02            [ 1]  575 	ld	a, (0x02, sp)
      000216 97               [ 1]  576 	ld	xl, a
      000217 89               [ 2]  577 	pushw	x
      000218 AEr00rFF         [ 2]  578 	ldw	x, #(_a+0)
      00021B CDr01r26         [ 4]  579 	call	_convert_chars_to_int
      00021E C7u01u04         [ 1]  580 	ld	_d_size+0, a
                                    581 ;	main.c: 167: }
      000221 5B 02            [ 2]  582 	addw	sp, #2
      000223 81               [ 4]  583 	ret
                                    584 ;	main.c: 168: void char_buffer_to_int(void)
                                    585 ;	-----------------------------------------
                                    586 ;	 function char_buffer_to_int
                                    587 ;	-----------------------------------------
      000224                        588 _char_buffer_to_int:
      000224 52 08            [ 2]  589 	sub	sp, #8
                                    590 ;	main.c: 170: memset(a, 0, sizeof(a));
      000226 4B 03            [ 1]  591 	push	#0x03
      000228 4B 00            [ 1]  592 	push	#0x00
      00022A 5F               [ 1]  593 	clrw	x
      00022B 89               [ 2]  594 	pushw	x
      00022C AEr00rFF         [ 2]  595 	ldw	x, #(_a+0)
      00022F CDr00r00         [ 4]  596 	call	_memset
                                    597 ;	main.c: 171: uint8_t counter = d_size;
      000232 C6u01u04         [ 1]  598 	ld	a, _d_size+0
      000235 6B 01            [ 1]  599 	ld	(0x01, sp), a
                                    600 ;	main.c: 172: uint8_t i = p_bytes;
      000237 C6u01u05         [ 1]  601 	ld	a, _p_bytes+0
      00023A 6B 03            [ 1]  602 	ld	(0x03, sp), a
                                    603 ;	main.c: 175: for(int o = 0; o < counter;o++)
      00023C 0F 04            [ 1]  604 	clr	(0x04, sp)
      00023E 5F               [ 1]  605 	clrw	x
      00023F 1F 05            [ 2]  606 	ldw	(0x05, sp), x
      000241                        607 00112$:
      000241 7B 01            [ 1]  608 	ld	a, (0x01, sp)
      000243 6B 08            [ 1]  609 	ld	(0x08, sp), a
      000245 0F 07            [ 1]  610 	clr	(0x07, sp)
      000247 1E 05            [ 2]  611 	ldw	x, (0x05, sp)
      000249 13 07            [ 2]  612 	cpw	x, (0x07, sp)
      00024B 2E 65            [ 1]  613 	jrsge	00114$
                                    614 ;	main.c: 177: uint8_t number_counter = 0;
      00024D 0F 02            [ 1]  615 	clr	(0x02, sp)
                                    616 ;	main.c: 178: while(1)
      00024F 7B 03            [ 1]  617 	ld	a, (0x03, sp)
      000251 6B 07            [ 1]  618 	ld	(0x07, sp), a
      000253 0F 08            [ 1]  619 	clr	(0x08, sp)
      000255                        620 00108$:
                                    621 ;	main.c: 180: if(buffer[i] == ' ')
      000255 5F               [ 1]  622 	clrw	x
      000256 7B 07            [ 1]  623 	ld	a, (0x07, sp)
      000258 97               [ 1]  624 	ld	xl, a
      000259 D6u00u00         [ 1]  625 	ld	a, (_buffer+0, x)
      00025C A1 20            [ 1]  626 	cp	a, #0x20
      00025E 26 04            [ 1]  627 	jrne	00105$
                                    628 ;	main.c: 182: i++;
      000260 0C 03            [ 1]  629 	inc	(0x03, sp)
                                    630 ;	main.c: 183: break;
      000262 20 12            [ 2]  631 	jra	00109$
      000264                        632 00105$:
                                    633 ;	main.c: 185: else if(buffer[i] == '\r\n')
      000264 A1 0D            [ 1]  634 	cp	a, #0x0d
      000266 27 0E            [ 1]  635 	jreq	00109$
                                    636 ;	main.c: 188: i++;
      000268 0C 07            [ 1]  637 	inc	(0x07, sp)
      00026A 7B 07            [ 1]  638 	ld	a, (0x07, sp)
      00026C 6B 03            [ 1]  639 	ld	(0x03, sp), a
                                    640 ;	main.c: 190: number_counter++;
      00026E 0C 08            [ 1]  641 	inc	(0x08, sp)
      000270 7B 08            [ 1]  642 	ld	a, (0x08, sp)
      000272 6B 02            [ 1]  643 	ld	(0x02, sp), a
      000274 20 DF            [ 2]  644 	jra	00108$
      000276                        645 00109$:
                                    646 ;	main.c: 192: memcpy(a, &buffer[i - number_counter], number_counter);
      000276 90 5F            [ 1]  647 	clrw	y
      000278 7B 02            [ 1]  648 	ld	a, (0x02, sp)
      00027A 90 97            [ 1]  649 	ld	yl, a
      00027C 5F               [ 1]  650 	clrw	x
      00027D 7B 03            [ 1]  651 	ld	a, (0x03, sp)
      00027F 97               [ 1]  652 	ld	xl, a
      000280 7B 02            [ 1]  653 	ld	a, (0x02, sp)
      000282 6B 08            [ 1]  654 	ld	(0x08, sp), a
      000284 0F 07            [ 1]  655 	clr	(0x07, sp)
      000286 72 F0 07         [ 2]  656 	subw	x, (0x07, sp)
      000289 1Cr00r00         [ 2]  657 	addw	x, #(_buffer+0)
      00028C 90 89            [ 2]  658 	pushw	y
      00028E 89               [ 2]  659 	pushw	x
      00028F AEr00rFF         [ 2]  660 	ldw	x, #(_a+0)
      000292 CDr00r00         [ 4]  661 	call	___memcpy
                                    662 ;	main.c: 193: data_buf[int_buf_i] = convert_chars_to_int(a, number_counter);
      000295 5F               [ 1]  663 	clrw	x
      000296 7B 04            [ 1]  664 	ld	a, (0x04, sp)
      000298 97               [ 1]  665 	ld	xl, a
      000299 1Cr01r06         [ 2]  666 	addw	x, #(_data_buf+0)
      00029C 89               [ 2]  667 	pushw	x
      00029D 16 09            [ 2]  668 	ldw	y, (0x09, sp)
      00029F 90 89            [ 2]  669 	pushw	y
      0002A1 AEr00rFF         [ 2]  670 	ldw	x, #(_a+0)
      0002A4 CDr01r26         [ 4]  671 	call	_convert_chars_to_int
      0002A7 85               [ 2]  672 	popw	x
      0002A8 F7               [ 1]  673 	ld	(x), a
                                    674 ;	main.c: 194: int_buf_i++;
      0002A9 0C 04            [ 1]  675 	inc	(0x04, sp)
                                    676 ;	main.c: 175: for(int o = 0; o < counter;o++)
      0002AB 1E 05            [ 2]  677 	ldw	x, (0x05, sp)
      0002AD 5C               [ 1]  678 	incw	x
      0002AE 1F 05            [ 2]  679 	ldw	(0x05, sp), x
      0002B0 20 8F            [ 2]  680 	jra	00112$
      0002B2                        681 00114$:
                                    682 ;	main.c: 196: }
      0002B2 5B 08            [ 2]  683 	addw	sp, #8
      0002B4 81               [ 4]  684 	ret
                                    685 ;	main.c: 204: void status_check(void){
                                    686 ;	-----------------------------------------
                                    687 ;	 function status_check
                                    688 ;	-----------------------------------------
      0002B5                        689 _status_check:
      0002B5 52 09            [ 2]  690 	sub	sp, #9
                                    691 ;	main.c: 205: char rx_binary_chars[9]={0};
      0002B7 0F 01            [ 1]  692 	clr	(0x01, sp)
      0002B9 0F 02            [ 1]  693 	clr	(0x02, sp)
      0002BB 0F 03            [ 1]  694 	clr	(0x03, sp)
      0002BD 0F 04            [ 1]  695 	clr	(0x04, sp)
      0002BF 0F 05            [ 1]  696 	clr	(0x05, sp)
      0002C1 0F 06            [ 1]  697 	clr	(0x06, sp)
      0002C3 0F 07            [ 1]  698 	clr	(0x07, sp)
      0002C5 0F 08            [ 1]  699 	clr	(0x08, sp)
      0002C7 0F 09            [ 1]  700 	clr	(0x09, sp)
                                    701 ;	main.c: 206: uart_write("\nI2C_REGS >.<\n");
      0002C9 AEr00r00         [ 2]  702 	ldw	x, #(___str_0+0)
      0002CC CDr00r40         [ 4]  703 	call	_uart_write
                                    704 ;	main.c: 227: convert_int_to_binary(I2C_DR, rx_binary_chars);
      0002CF 96               [ 1]  705 	ldw	x, sp
      0002D0 5C               [ 1]  706 	incw	x
      0002D1 51               [ 1]  707 	exgw	x, y
      0002D2 C6 52 16         [ 1]  708 	ld	a, 0x5216
      0002D5 5F               [ 1]  709 	clrw	x
      0002D6 90 89            [ 2]  710 	pushw	y
      0002D8 97               [ 1]  711 	ld	xl, a
      0002D9 CDr01r4D         [ 4]  712 	call	_convert_int_to_binary
                                    713 ;	main.c: 228: uart_write("DR -> ");
      0002DC AEr00r0F         [ 2]  714 	ldw	x, #(___str_1+0)
      0002DF CDr00r40         [ 4]  715 	call	_uart_write
                                    716 ;	main.c: 229: uart_write(rx_binary_chars);
      0002E2 96               [ 1]  717 	ldw	x, sp
      0002E3 5C               [ 1]  718 	incw	x
      0002E4 CDr00r40         [ 4]  719 	call	_uart_write
                                    720 ;	main.c: 230: uart_write(" <-\n");
      0002E7 AEr00r16         [ 2]  721 	ldw	x, #(___str_2+0)
      0002EA CDr00r40         [ 4]  722 	call	_uart_write
                                    723 ;	main.c: 276: }
      0002ED 5B 09            [ 2]  724 	addw	sp, #9
      0002EF 81               [ 4]  725 	ret
                                    726 ;	main.c: 278: void uart_init(void){
                                    727 ;	-----------------------------------------
                                    728 ;	 function uart_init
                                    729 ;	-----------------------------------------
      0002F0                        730 _uart_init:
                                    731 ;	main.c: 279: CLK_CKDIVR = 0;
      0002F0 35 00 50 C6      [ 1]  732 	mov	0x50c6+0, #0x00
                                    733 ;	main.c: 282: UART1_CR2 |= UART_CR2_TEN; // Transmitter enable
      0002F4 72 16 52 35      [ 1]  734 	bset	0x5235, #3
                                    735 ;	main.c: 283: UART1_CR2 |= UART_CR2_REN; // Receiver enable
      0002F8 72 14 52 35      [ 1]  736 	bset	0x5235, #2
                                    737 ;	main.c: 284: UART1_CR3 &= ~(UART_CR3_STOP1 | UART_CR3_STOP2); // 1 stop bit
      0002FC C6 52 36         [ 1]  738 	ld	a, 0x5236
      0002FF A4 CF            [ 1]  739 	and	a, #0xcf
      000301 C7 52 36         [ 1]  740 	ld	0x5236, a
                                    741 ;	main.c: 286: UART1_BRR2 = 0x03; UART1_BRR1 = 0x68; // 0x0683 coded funky way (see ref manual)
      000304 35 03 52 33      [ 1]  742 	mov	0x5233+0, #0x03
      000308 35 68 52 32      [ 1]  743 	mov	0x5232+0, #0x68
                                    744 ;	main.c: 287: }
      00030C 81               [ 4]  745 	ret
                                    746 ;	main.c: 291: void i2c_init(void) {
                                    747 ;	-----------------------------------------
                                    748 ;	 function i2c_init
                                    749 ;	-----------------------------------------
      00030D                        750 _i2c_init:
                                    751 ;	main.c: 297: I2C_CR1 = I2C_CR1 & ~0x01;      // PE=0, disable I2C before setup
      00030D 72 11 52 10      [ 1]  752 	bres	0x5210, #0
                                    753 ;	main.c: 298: I2C_FREQR= 16;                  // peripheral frequence =16MHz
      000311 35 10 52 12      [ 1]  754 	mov	0x5212+0, #0x10
                                    755 ;	main.c: 299: I2C_CCRH = 0;                   // =0
      000315 35 00 52 1C      [ 1]  756 	mov	0x521c+0, #0x00
                                    757 ;	main.c: 300: I2C_CCRL = 80;                  // 100kHz for I2C
      000319 35 50 52 1B      [ 1]  758 	mov	0x521b+0, #0x50
                                    759 ;	main.c: 301: I2C_CCRH = I2C_CCRH & ~0x80;    // set standart mode(100кHz)
      00031D 72 1F 52 1C      [ 1]  760 	bres	0x521c, #7
                                    761 ;	main.c: 302: I2C_OARH = I2C_OARH & ~0x80;    // 7-bit address mode
      000321 72 1F 52 14      [ 1]  762 	bres	0x5214, #7
                                    763 ;	main.c: 303: I2C_OARH = I2C_OARH | 0x40;     // see reference manual
      000325 72 1C 52 14      [ 1]  764 	bset	0x5214, #6
                                    765 ;	main.c: 304: I2C_CR1 = I2C_CR1 | 0x01;       // PE=1, enable I2C
      000329 72 10 52 10      [ 1]  766 	bset	0x5210, #0
                                    767 ;	main.c: 305: }
      00032D 81               [ 4]  768 	ret
                                    769 ;	main.c: 314: void i2c_start(void) {
                                    770 ;	-----------------------------------------
                                    771 ;	 function i2c_start
                                    772 ;	-----------------------------------------
      00032E                        773 _i2c_start:
                                    774 ;	main.c: 315: I2C_CR2 = I2C_CR2 | (1 << 0); // Отправляем стартовый сигнал
      00032E 72 10 52 11      [ 1]  775 	bset	0x5211, #0
                                    776 ;	main.c: 316: while(!(I2C_SR1 & (1 << 0)));
      000332                        777 00101$:
      000332 72 01 52 17 FB   [ 2]  778 	btjf	0x5217, #0, 00101$
                                    779 ;	main.c: 318: }
      000337 81               [ 4]  780 	ret
                                    781 ;	main.c: 320: void i2c_send_address(uint8_t address) {
                                    782 ;	-----------------------------------------
                                    783 ;	 function i2c_send_address
                                    784 ;	-----------------------------------------
      000338                        785 _i2c_send_address:
                                    786 ;	main.c: 321: I2C_DR = address << 1; // Отправка адреса устройства с битом на запись
      000338 48               [ 1]  787 	sll	a
      000339 C7 52 16         [ 1]  788 	ld	0x5216, a
                                    789 ;	main.c: 322: status_check();
      00033C CDr02rB5         [ 4]  790 	call	_status_check
                                    791 ;	main.c: 323: while (!(I2C_SR1 & (1 << 1)) && !(I2C_SR2 & (1 << 2)));
      00033F                        792 00102$:
      00033F 72 03 52 17 01   [ 2]  793 	btjf	0x5217, #1, 00117$
      000344 81               [ 4]  794 	ret
      000345                        795 00117$:
      000345 72 05 52 18 F5   [ 2]  796 	btjf	0x5218, #2, 00102$
                                    797 ;	main.c: 324: }
      00034A 81               [ 4]  798 	ret
                                    799 ;	main.c: 326: void i2c_stop(void) {
                                    800 ;	-----------------------------------------
                                    801 ;	 function i2c_stop
                                    802 ;	-----------------------------------------
      00034B                        803 _i2c_stop:
                                    804 ;	main.c: 327: I2C_CR2 = I2C_CR2 | (1 << 1); // Отправка стопового сигнала
      00034B 72 12 52 11      [ 1]  805 	bset	0x5211, #1
                                    806 ;	main.c: 329: }
      00034F 81               [ 4]  807 	ret
                                    808 ;	main.c: 330: void i2c_write(void){
                                    809 ;	-----------------------------------------
                                    810 ;	 function i2c_write
                                    811 ;	-----------------------------------------
      000350                        812 _i2c_write:
      000350 52 02            [ 2]  813 	sub	sp, #2
                                    814 ;	main.c: 331: I2C_DR = d_addr;
      000352 55u01u02 52 16   [ 1]  815 	mov	0x5216+0, _d_addr+0
                                    816 ;	main.c: 332: while (!(I2C_SR1 & (1 << 1)) && !(I2C_SR2 & (1 << 2))); // Отправка адреса регистра
      000357                        817 00102$:
      000357 72 02 52 17 05   [ 2]  818 	btjt	0x5217, #1, 00120$
      00035C 72 05 52 18 F6   [ 2]  819 	btjf	0x5218, #2, 00102$
                                    820 ;	main.c: 333: for(int i = 0;i < d_size;i++)
      000361                        821 00120$:
      000361 5F               [ 1]  822 	clrw	x
      000362                        823 00111$:
      000362 C6u01u04         [ 1]  824 	ld	a, _d_size+0
      000365 6B 02            [ 1]  825 	ld	(0x02, sp), a
      000367 0F 01            [ 1]  826 	clr	(0x01, sp)
      000369 13 01            [ 2]  827 	cpw	x, (0x01, sp)
      00036B 2E 1B            [ 1]  828 	jrsge	00113$
                                    829 ;	main.c: 335: I2C_DR = data_buf[i];
      00036D 90 93            [ 1]  830 	ldw	y, x
      00036F 90 D6u01u06      [ 1]  831 	ld	a, (_data_buf+0, y)
      000373 C7 52 16         [ 1]  832 	ld	0x5216, a
                                    833 ;	main.c: 336: status_check();
      000376 89               [ 2]  834 	pushw	x
      000377 CDr02rB5         [ 4]  835 	call	_status_check
      00037A 85               [ 2]  836 	popw	x
                                    837 ;	main.c: 337: while (!(I2C_SR1 & (1 << 1)) && !(I2C_SR2 & (1 << 2)));
      00037B                        838 00106$:
      00037B 72 02 52 17 05   [ 2]  839 	btjt	0x5217, #1, 00112$
      000380 72 05 52 18 F6   [ 2]  840 	btjf	0x5218, #2, 00106$
      000385                        841 00112$:
                                    842 ;	main.c: 333: for(int i = 0;i < d_size;i++)
      000385 5C               [ 1]  843 	incw	x
      000386 20 DA            [ 2]  844 	jra	00111$
      000388                        845 00113$:
                                    846 ;	main.c: 339: }
      000388 5B 02            [ 2]  847 	addw	sp, #2
      00038A 81               [ 4]  848 	ret
                                    849 ;	main.c: 341: void i2c_read(void){
                                    850 ;	-----------------------------------------
                                    851 ;	 function i2c_read
                                    852 ;	-----------------------------------------
      00038B                        853 _i2c_read:
      00038B 52 02            [ 2]  854 	sub	sp, #2
                                    855 ;	main.c: 342: I2C_DR = (current_dev << 1) & (1 << 0);
      00038D C6u02u05         [ 1]  856 	ld	a, _current_dev+0
      000390 48               [ 1]  857 	sll	a
      000391 A4 01            [ 1]  858 	and	a, #0x01
      000393 C7 52 16         [ 1]  859 	ld	0x5216, a
                                    860 ;	main.c: 343: while (!(I2C_SR1 & (1 << 1)) && !(I2C_SR2 & (1 << 2)));
      000396                        861 00102$:
      000396 72 02 52 17 05   [ 2]  862 	btjt	0x5217, #1, 00104$
      00039B 72 05 52 18 F6   [ 2]  863 	btjf	0x5218, #2, 00102$
      0003A0                        864 00104$:
                                    865 ;	main.c: 345: I2C_DR = d_addr;
      0003A0 55u01u02 52 16   [ 1]  866 	mov	0x5216+0, _d_addr+0
                                    867 ;	main.c: 346: while (!(I2C_SR1 & (1 << 1)) && !(I2C_SR2 & (1 << 2)));
      0003A5                        868 00106$:
      0003A5 72 02 52 17 05   [ 2]  869 	btjt	0x5217, #1, 00108$
      0003AA 72 05 52 18 F6   [ 2]  870 	btjf	0x5218, #2, 00106$
      0003AF                        871 00108$:
                                    872 ;	main.c: 347: i2c_stop();
      0003AF CDr03r4B         [ 4]  873 	call	_i2c_stop
                                    874 ;	main.c: 348: for(int i = 0;i < d_size;i++)
      0003B2 5F               [ 1]  875 	clrw	x
      0003B3                        876 00115$:
      0003B3 C6u01u04         [ 1]  877 	ld	a, _d_size+0
      0003B6 6B 02            [ 1]  878 	ld	(0x02, sp), a
      0003B8 0F 01            [ 1]  879 	clr	(0x01, sp)
      0003BA 13 01            [ 2]  880 	cpw	x, (0x01, sp)
      0003BC 2E 13            [ 1]  881 	jrsge	00117$
                                    882 ;	main.c: 350: data_buf[i] = I2C_DR;
      0003BE C6 52 16         [ 1]  883 	ld	a, 0x5216
      0003C1 D7u01u06         [ 1]  884 	ld	((_data_buf+0), x), a
                                    885 ;	main.c: 351: while (!(I2C_SR1 & (1 << 1)) && !(I2C_SR2 & (1 << 2)));
      0003C4                        886 00110$:
      0003C4 72 02 52 17 05   [ 2]  887 	btjt	0x5217, #1, 00116$
      0003C9 72 05 52 18 F6   [ 2]  888 	btjf	0x5218, #2, 00110$
      0003CE                        889 00116$:
                                    890 ;	main.c: 348: for(int i = 0;i < d_size;i++)
      0003CE 5C               [ 1]  891 	incw	x
      0003CF 20 E2            [ 2]  892 	jra	00115$
      0003D1                        893 00117$:
                                    894 ;	main.c: 354: }
      0003D1 5B 02            [ 2]  895 	addw	sp, #2
      0003D3 81               [ 4]  896 	ret
                                    897 ;	main.c: 355: void i2c_scan(void) {
                                    898 ;	-----------------------------------------
                                    899 ;	 function i2c_scan
                                    900 ;	-----------------------------------------
      0003D4                        901 _i2c_scan:
      0003D4 52 02            [ 2]  902 	sub	sp, #2
                                    903 ;	main.c: 356: for (uint8_t addr = current_dev; addr < 127; addr++) {
      0003D6 C6u02u05         [ 1]  904 	ld	a, _current_dev+0
      0003D9 6B 01            [ 1]  905 	ld	(0x01, sp), a
      0003DB 6B 02            [ 1]  906 	ld	(0x02, sp), a
      0003DD                        907 00105$:
      0003DD 7B 02            [ 1]  908 	ld	a, (0x02, sp)
      0003DF A1 7F            [ 1]  909 	cp	a, #0x7f
      0003E1 24 26            [ 1]  910 	jrnc	00107$
                                    911 ;	main.c: 357: i2c_start();
      0003E3 CDr03r2E         [ 4]  912 	call	_i2c_start
                                    913 ;	main.c: 358: i2c_send_address(addr);
      0003E6 7B 02            [ 1]  914 	ld	a, (0x02, sp)
      0003E8 CDr03r38         [ 4]  915 	call	_i2c_send_address
                                    916 ;	main.c: 359: if (!(I2C_SR2 & (1 << 2))) { // Проверка на ACK
      0003EB 72 04 52 18 0A   [ 2]  917 	btjt	0x5218, #2, 00102$
                                    918 ;	main.c: 361: current_dev = addr;
      0003F0 7B 01            [ 1]  919 	ld	a, (0x01, sp)
      0003F2 C7u02u05         [ 1]  920 	ld	_current_dev+0, a
                                    921 ;	main.c: 362: i2c_stop();
      0003F5 5B 02            [ 2]  922 	addw	sp, #2
                                    923 ;	main.c: 363: break;
      0003F7 CCr03r4B         [ 2]  924 	jp	_i2c_stop
      0003FA                        925 00102$:
                                    926 ;	main.c: 365: i2c_stop();
      0003FA CDr03r4B         [ 4]  927 	call	_i2c_stop
                                    928 ;	main.c: 366: I2C_SR2 = I2C_SR2 & ~(1 << 2); // Очистка флага ошибки
      0003FD 72 15 52 18      [ 1]  929 	bres	0x5218, #2
                                    930 ;	main.c: 356: for (uint8_t addr = current_dev; addr < 127; addr++) {
      000401 0C 02            [ 1]  931 	inc	(0x02, sp)
      000403 7B 02            [ 1]  932 	ld	a, (0x02, sp)
      000405 6B 01            [ 1]  933 	ld	(0x01, sp), a
      000407 20 D4            [ 2]  934 	jra	00105$
      000409                        935 00107$:
                                    936 ;	main.c: 368: }
      000409 5B 02            [ 2]  937 	addw	sp, #2
      00040B 81               [ 4]  938 	ret
                                    939 ;	main.c: 378: void cm_SM(void)
                                    940 ;	-----------------------------------------
                                    941 ;	 function cm_SM
                                    942 ;	-----------------------------------------
      00040C                        943 _cm_SM:
      00040C 52 04            [ 2]  944 	sub	sp, #4
                                    945 ;	main.c: 380: char cur_dev[4]={0};
      00040E 0F 01            [ 1]  946 	clr	(0x01, sp)
      000410 0F 02            [ 1]  947 	clr	(0x02, sp)
      000412 0F 03            [ 1]  948 	clr	(0x03, sp)
      000414 0F 04            [ 1]  949 	clr	(0x04, sp)
                                    950 ;	main.c: 381: convert_int_to_chars(current_dev, cur_dev);
      000416 96               [ 1]  951 	ldw	x, sp
      000417 5C               [ 1]  952 	incw	x
      000418 C6u02u05         [ 1]  953 	ld	a, _current_dev+0
      00041B CDr00rA1         [ 4]  954 	call	_convert_int_to_chars
                                    955 ;	main.c: 382: uart_write("SM ");
      00041E AEr00r1B         [ 2]  956 	ldw	x, #(___str_3+0)
      000421 CDr00r40         [ 4]  957 	call	_uart_write
                                    958 ;	main.c: 383: uart_write(cur_dev);
      000424 96               [ 1]  959 	ldw	x, sp
      000425 5C               [ 1]  960 	incw	x
      000426 CDr00r40         [ 4]  961 	call	_uart_write
                                    962 ;	main.c: 384: uart_write("\r\n");
      000429 AEr00r1F         [ 2]  963 	ldw	x, #(___str_4+0)
      00042C CDr00r40         [ 4]  964 	call	_uart_write
                                    965 ;	main.c: 385: }
      00042F 5B 04            [ 2]  966 	addw	sp, #4
      000431 81               [ 4]  967 	ret
                                    968 ;	main.c: 386: void cm_SN(void)
                                    969 ;	-----------------------------------------
                                    970 ;	 function cm_SN
                                    971 ;	-----------------------------------------
      000432                        972 _cm_SN:
                                    973 ;	main.c: 388: i2c_scan();
      000432 CDr03rD4         [ 4]  974 	call	_i2c_scan
                                    975 ;	main.c: 389: cm_SM();
                                    976 ;	main.c: 390: }
      000435 CCr04r0C         [ 2]  977 	jp	_cm_SM
                                    978 ;	main.c: 391: void cm_RM(void)
                                    979 ;	-----------------------------------------
                                    980 ;	 function cm_RM
                                    981 ;	-----------------------------------------
      000438                        982 _cm_RM:
                                    983 ;	main.c: 393: current_dev = 0;
      000438 72 5Fu02u05      [ 1]  984 	clr	_current_dev+0
                                    985 ;	main.c: 394: uart_write("RM\n");
      00043C AEr00r22         [ 2]  986 	ldw	x, #(___str_5+0)
                                    987 ;	main.c: 395: }
      00043F CCr00r40         [ 2]  988 	jp	_uart_write
                                    989 ;	main.c: 397: void cm_DB(void)
                                    990 ;	-----------------------------------------
                                    991 ;	 function cm_DB
                                    992 ;	-----------------------------------------
      000442                        993 _cm_DB:
                                    994 ;	main.c: 399: status_check();
                                    995 ;	main.c: 400: }
      000442 CCr02rB5         [ 2]  996 	jp	_status_check
                                    997 ;	main.c: 402: void cm_ST(void)
                                    998 ;	-----------------------------------------
                                    999 ;	 function cm_ST
                                   1000 ;	-----------------------------------------
      000445                       1001 _cm_ST:
                                   1002 ;	main.c: 404: get_addr_from_buff();
      000445 CDr01r85         [ 4] 1003 	call	_get_addr_from_buff
                                   1004 ;	main.c: 405: current_dev = d_addr;
      000448 55u01u02u02u05   [ 1] 1005 	mov	_current_dev+0, _d_addr+0
                                   1006 ;	main.c: 406: uart_write("ST\n");
      00044D AEr00r26         [ 2] 1007 	ldw	x, #(___str_6+0)
                                   1008 ;	main.c: 407: }
      000450 CCr00r40         [ 2] 1009 	jp	_uart_write
                                   1010 ;	main.c: 408: void cm_SR(void)
                                   1011 ;	-----------------------------------------
                                   1012 ;	 function cm_SR
                                   1013 ;	-----------------------------------------
      000453                       1014 _cm_SR:
      000453 52 04            [ 2] 1015 	sub	sp, #4
                                   1016 ;	main.c: 410: i2c_start();
      000455 CDr03r2E         [ 4] 1017 	call	_i2c_start
                                   1018 ;	main.c: 411: i2c_send_address(current_dev);
      000458 C6u02u05         [ 1] 1019 	ld	a, _current_dev+0
      00045B CDr03r38         [ 4] 1020 	call	_i2c_send_address
                                   1021 ;	main.c: 412: i2c_read();
      00045E CDr03r8B         [ 4] 1022 	call	_i2c_read
                                   1023 ;	main.c: 413: i2c_stop();
      000461 CDr03r4B         [ 4] 1024 	call	_i2c_stop
                                   1025 ;	main.c: 414: uart_write("SR ");
      000464 AEr00r2A         [ 2] 1026 	ldw	x, #(___str_7+0)
      000467 CDr00r40         [ 4] 1027 	call	_uart_write
                                   1028 ;	main.c: 415: convert_int_to_chars(d_addr, a);
      00046A AEr00rFF         [ 2] 1029 	ldw	x, #(_a+0)
      00046D C6u01u02         [ 1] 1030 	ld	a, _d_addr+0
      000470 CDr00rA1         [ 4] 1031 	call	_convert_int_to_chars
                                   1032 ;	main.c: 416: uart_write(a);
      000473 AEr00rFF         [ 2] 1033 	ldw	x, #(_a+0)
      000476 CDr00r40         [ 4] 1034 	call	_uart_write
                                   1035 ;	main.c: 417: uart_write(" ");
      000479 AEr00r2E         [ 2] 1036 	ldw	x, #(___str_8+0)
      00047C CDr00r40         [ 4] 1037 	call	_uart_write
                                   1038 ;	main.c: 418: convert_int_to_chars(d_size, a);
      00047F AEr00rFF         [ 2] 1039 	ldw	x, #(_a+0)
      000482 C6u01u04         [ 1] 1040 	ld	a, _d_size+0
      000485 CDr00rA1         [ 4] 1041 	call	_convert_int_to_chars
                                   1042 ;	main.c: 419: uart_write(a);
      000488 AEr00rFF         [ 2] 1043 	ldw	x, #(_a+0)
      00048B CDr00r40         [ 4] 1044 	call	_uart_write
                                   1045 ;	main.c: 420: for(int i = 0;i < d_size;i++)
      00048E 5F               [ 1] 1046 	clrw	x
      00048F 1F 03            [ 2] 1047 	ldw	(0x03, sp), x
      000491                       1048 00103$:
      000491 C6u01u04         [ 1] 1049 	ld	a, _d_size+0
      000494 6B 02            [ 1] 1050 	ld	(0x02, sp), a
      000496 0F 01            [ 1] 1051 	clr	(0x01, sp)
      000498 1E 03            [ 2] 1052 	ldw	x, (0x03, sp)
      00049A 13 01            [ 2] 1053 	cpw	x, (0x01, sp)
      00049C 2E 1E            [ 1] 1054 	jrsge	00101$
                                   1055 ;	main.c: 422: uart_write(" ");
      00049E AEr00r2E         [ 2] 1056 	ldw	x, #(___str_8+0)
      0004A1 CDr00r40         [ 4] 1057 	call	_uart_write
                                   1058 ;	main.c: 423: convert_int_to_chars(data_buf[i], a);
      0004A4 1E 03            [ 2] 1059 	ldw	x, (0x03, sp)
      0004A6 D6u01u06         [ 1] 1060 	ld	a, (_data_buf+0, x)
      0004A9 AEr00rFF         [ 2] 1061 	ldw	x, #(_a+0)
      0004AC CDr00rA1         [ 4] 1062 	call	_convert_int_to_chars
                                   1063 ;	main.c: 424: uart_write(a);
      0004AF AEr00rFF         [ 2] 1064 	ldw	x, #(_a+0)
      0004B2 CDr00r40         [ 4] 1065 	call	_uart_write
                                   1066 ;	main.c: 420: for(int i = 0;i < d_size;i++)
      0004B5 1E 03            [ 2] 1067 	ldw	x, (0x03, sp)
      0004B7 5C               [ 1] 1068 	incw	x
      0004B8 1F 03            [ 2] 1069 	ldw	(0x03, sp), x
      0004BA 20 D5            [ 2] 1070 	jra	00103$
      0004BC                       1071 00101$:
                                   1072 ;	main.c: 427: uart_write("\r\n");
      0004BC AEr00r1F         [ 2] 1073 	ldw	x, #(___str_4+0)
      0004BF 5B 04            [ 2] 1074 	addw	sp, #4
                                   1075 ;	main.c: 428: }
      0004C1 CCr00r40         [ 2] 1076 	jp	_uart_write
                                   1077 ;	main.c: 429: void cm_SW(void)
                                   1078 ;	-----------------------------------------
                                   1079 ;	 function cm_SW
                                   1080 ;	-----------------------------------------
      0004C4                       1081 _cm_SW:
      0004C4 52 04            [ 2] 1082 	sub	sp, #4
                                   1083 ;	main.c: 431: i2c_start();
      0004C6 CDr03r2E         [ 4] 1084 	call	_i2c_start
                                   1085 ;	main.c: 432: i2c_send_address(current_dev);
      0004C9 C6u02u05         [ 1] 1086 	ld	a, _current_dev+0
      0004CC CDr03r38         [ 4] 1087 	call	_i2c_send_address
                                   1088 ;	main.c: 433: i2c_write();
      0004CF CDr03r50         [ 4] 1089 	call	_i2c_write
                                   1090 ;	main.c: 434: i2c_stop();
      0004D2 CDr03r4B         [ 4] 1091 	call	_i2c_stop
                                   1092 ;	main.c: 435: uart_write("SW ");
      0004D5 AEr00r30         [ 2] 1093 	ldw	x, #(___str_9+0)
      0004D8 CDr00r40         [ 4] 1094 	call	_uart_write
                                   1095 ;	main.c: 436: convert_int_to_chars(d_addr, a);
      0004DB AEr00rFF         [ 2] 1096 	ldw	x, #(_a+0)
      0004DE C6u01u02         [ 1] 1097 	ld	a, _d_addr+0
      0004E1 CDr00rA1         [ 4] 1098 	call	_convert_int_to_chars
                                   1099 ;	main.c: 437: uart_write(a);
      0004E4 AEr00rFF         [ 2] 1100 	ldw	x, #(_a+0)
      0004E7 CDr00r40         [ 4] 1101 	call	_uart_write
                                   1102 ;	main.c: 438: uart_write(" ");
      0004EA AEr00r2E         [ 2] 1103 	ldw	x, #(___str_8+0)
      0004ED CDr00r40         [ 4] 1104 	call	_uart_write
                                   1105 ;	main.c: 439: convert_int_to_chars(d_size, a);
      0004F0 AEr00rFF         [ 2] 1106 	ldw	x, #(_a+0)
      0004F3 C6u01u04         [ 1] 1107 	ld	a, _d_size+0
      0004F6 CDr00rA1         [ 4] 1108 	call	_convert_int_to_chars
                                   1109 ;	main.c: 440: uart_write(a);
      0004F9 AEr00rFF         [ 2] 1110 	ldw	x, #(_a+0)
      0004FC CDr00r40         [ 4] 1111 	call	_uart_write
                                   1112 ;	main.c: 441: for(int i = 0;i < d_size;i++)
      0004FF 5F               [ 1] 1113 	clrw	x
      000500 1F 03            [ 2] 1114 	ldw	(0x03, sp), x
      000502                       1115 00103$:
      000502 C6u01u04         [ 1] 1116 	ld	a, _d_size+0
      000505 6B 02            [ 1] 1117 	ld	(0x02, sp), a
      000507 0F 01            [ 1] 1118 	clr	(0x01, sp)
      000509 1E 03            [ 2] 1119 	ldw	x, (0x03, sp)
      00050B 13 01            [ 2] 1120 	cpw	x, (0x01, sp)
      00050D 2E 1E            [ 1] 1121 	jrsge	00101$
                                   1122 ;	main.c: 443: uart_write(" ");
      00050F AEr00r2E         [ 2] 1123 	ldw	x, #(___str_8+0)
      000512 CDr00r40         [ 4] 1124 	call	_uart_write
                                   1125 ;	main.c: 444: convert_int_to_chars(data_buf[i], a);
      000515 1E 03            [ 2] 1126 	ldw	x, (0x03, sp)
      000517 D6u01u06         [ 1] 1127 	ld	a, (_data_buf+0, x)
      00051A AEr00rFF         [ 2] 1128 	ldw	x, #(_a+0)
      00051D CDr00rA1         [ 4] 1129 	call	_convert_int_to_chars
                                   1130 ;	main.c: 445: uart_write(a);
      000520 AEr00rFF         [ 2] 1131 	ldw	x, #(_a+0)
      000523 CDr00r40         [ 4] 1132 	call	_uart_write
                                   1133 ;	main.c: 441: for(int i = 0;i < d_size;i++)
      000526 1E 03            [ 2] 1134 	ldw	x, (0x03, sp)
      000528 5C               [ 1] 1135 	incw	x
      000529 1F 03            [ 2] 1136 	ldw	(0x03, sp), x
      00052B 20 D5            [ 2] 1137 	jra	00103$
      00052D                       1138 00101$:
                                   1139 ;	main.c: 448: uart_write("\r\n");
      00052D AEr00r1F         [ 2] 1140 	ldw	x, #(___str_4+0)
      000530 5B 04            [ 2] 1141 	addw	sp, #4
                                   1142 ;	main.c: 449: }
      000532 CCr00r40         [ 2] 1143 	jp	_uart_write
                                   1144 ;	main.c: 457: int data_handler(void)
                                   1145 ;	-----------------------------------------
                                   1146 ;	 function data_handler
                                   1147 ;	-----------------------------------------
      000535                       1148 _data_handler:
                                   1149 ;	main.c: 459: p_size = 0;
      000535 72 5Fu01u03      [ 1] 1150 	clr	_p_size+0
                                   1151 ;	main.c: 460: p_bytes = 0;
      000539 72 5Fu01u05      [ 1] 1152 	clr	_p_bytes+0
                                   1153 ;	main.c: 461: d_addr = 0;
      00053D 72 5Fu01u02      [ 1] 1154 	clr	_d_addr+0
                                   1155 ;	main.c: 462: d_size = 0;
      000541 72 5Fu01u04      [ 1] 1156 	clr	_d_size+0
                                   1157 ;	main.c: 463: memset(a, 0, sizeof(a));
      000545 4B 03            [ 1] 1158 	push	#0x03
      000547 4B 00            [ 1] 1159 	push	#0x00
      000549 5F               [ 1] 1160 	clrw	x
      00054A 89               [ 2] 1161 	pushw	x
      00054B AEr00rFF         [ 2] 1162 	ldw	x, #(_a+0)
      00054E CDr00r00         [ 4] 1163 	call	_memset
                                   1164 ;	main.c: 464: memset(data_buf, 0, sizeof(data_buf));
      000551 4B FF            [ 1] 1165 	push	#0xff
      000553 4B 00            [ 1] 1166 	push	#0x00
      000555 5F               [ 1] 1167 	clrw	x
      000556 89               [ 2] 1168 	pushw	x
      000557 AEr01r06         [ 2] 1169 	ldw	x, #(_data_buf+0)
      00055A CDr00r00         [ 4] 1170 	call	_memset
                                   1171 ;	main.c: 465: if(memcmp(&buffer[0],"SM",2) == 0)
      00055D 4B 02            [ 1] 1172 	push	#0x02
      00055F 4B 00            [ 1] 1173 	push	#0x00
      000561 4Br34            [ 1] 1174 	push	#<(___str_10+0)
      000563 4Bs00            [ 1] 1175 	push	#((___str_10+0) >> 8)
      000565 AEr00r00         [ 2] 1176 	ldw	x, #(_buffer+0)
      000568 CDr00r00         [ 4] 1177 	call	_memcmp
                                   1178 ;	main.c: 466: return 1;
      00056B 5D               [ 2] 1179 	tnzw	x
      00056C 26 02            [ 1] 1180 	jrne	00102$
      00056E 5C               [ 1] 1181 	incw	x
      00056F 81               [ 4] 1182 	ret
      000570                       1183 00102$:
                                   1184 ;	main.c: 467: if(memcmp(&buffer[0],"SN",2) == 0)
      000570 4B 02            [ 1] 1185 	push	#0x02
      000572 4B 00            [ 1] 1186 	push	#0x00
      000574 4Br37            [ 1] 1187 	push	#<(___str_11+0)
      000576 4Bs00            [ 1] 1188 	push	#((___str_11+0) >> 8)
      000578 AEr00r00         [ 2] 1189 	ldw	x, #(_buffer+0)
      00057B CDr00r00         [ 4] 1190 	call	_memcmp
      00057E 5D               [ 2] 1191 	tnzw	x
      00057F 26 04            [ 1] 1192 	jrne	00104$
                                   1193 ;	main.c: 468: return 2;
      000581 AE 00 02         [ 2] 1194 	ldw	x, #0x0002
      000584 81               [ 4] 1195 	ret
      000585                       1196 00104$:
                                   1197 ;	main.c: 469: if(memcmp(&buffer[0],"ST",2) == 0)
      000585 4B 02            [ 1] 1198 	push	#0x02
      000587 4B 00            [ 1] 1199 	push	#0x00
      000589 4Br3A            [ 1] 1200 	push	#<(___str_12+0)
      00058B 4Bs00            [ 1] 1201 	push	#((___str_12+0) >> 8)
      00058D AEr00r00         [ 2] 1202 	ldw	x, #(_buffer+0)
      000590 CDr00r00         [ 4] 1203 	call	_memcmp
      000593 5D               [ 2] 1204 	tnzw	x
      000594 26 04            [ 1] 1205 	jrne	00106$
                                   1206 ;	main.c: 470: return 5;
      000596 AE 00 05         [ 2] 1207 	ldw	x, #0x0005
      000599 81               [ 4] 1208 	ret
      00059A                       1209 00106$:
                                   1210 ;	main.c: 471: if(memcmp(&buffer[0],"RM",2) == 0)
      00059A 4B 02            [ 1] 1211 	push	#0x02
      00059C 4B 00            [ 1] 1212 	push	#0x00
      00059E 4Br3D            [ 1] 1213 	push	#<(___str_13+0)
      0005A0 4Bs00            [ 1] 1214 	push	#((___str_13+0) >> 8)
      0005A2 AEr00r00         [ 2] 1215 	ldw	x, #(_buffer+0)
      0005A5 CDr00r00         [ 4] 1216 	call	_memcmp
      0005A8 5D               [ 2] 1217 	tnzw	x
      0005A9 26 04            [ 1] 1218 	jrne	00108$
                                   1219 ;	main.c: 472: return 6;
      0005AB AE 00 06         [ 2] 1220 	ldw	x, #0x0006
      0005AE 81               [ 4] 1221 	ret
      0005AF                       1222 00108$:
                                   1223 ;	main.c: 473: if(memcmp(&buffer[0],"DB",2) == 0)
      0005AF 4B 02            [ 1] 1224 	push	#0x02
      0005B1 4B 00            [ 1] 1225 	push	#0x00
      0005B3 4Br40            [ 1] 1226 	push	#<(___str_14+0)
      0005B5 4Bs00            [ 1] 1227 	push	#((___str_14+0) >> 8)
      0005B7 AEr00r00         [ 2] 1228 	ldw	x, #(_buffer+0)
      0005BA CDr00r00         [ 4] 1229 	call	_memcmp
      0005BD 5D               [ 2] 1230 	tnzw	x
      0005BE 26 04            [ 1] 1231 	jrne	00110$
                                   1232 ;	main.c: 474: return 7;
      0005C0 AE 00 07         [ 2] 1233 	ldw	x, #0x0007
      0005C3 81               [ 4] 1234 	ret
      0005C4                       1235 00110$:
                                   1236 ;	main.c: 476: get_addr_from_buff();
      0005C4 CDr01r85         [ 4] 1237 	call	_get_addr_from_buff
                                   1238 ;	main.c: 477: get_size_from_buff();
      0005C7 CDr01rCA         [ 4] 1239 	call	_get_size_from_buff
                                   1240 ;	main.c: 479: if(memcmp(&buffer[0],"SR",2) == 0)
      0005CA 4B 02            [ 1] 1241 	push	#0x02
      0005CC 4B 00            [ 1] 1242 	push	#0x00
      0005CE 4Br43            [ 1] 1243 	push	#<(___str_15+0)
      0005D0 4Bs00            [ 1] 1244 	push	#((___str_15+0) >> 8)
      0005D2 AEr00r00         [ 2] 1245 	ldw	x, #(_buffer+0)
      0005D5 CDr00r00         [ 4] 1246 	call	_memcmp
      0005D8 5D               [ 2] 1247 	tnzw	x
      0005D9 26 04            [ 1] 1248 	jrne	00112$
                                   1249 ;	main.c: 480: return 3;
      0005DB AE 00 03         [ 2] 1250 	ldw	x, #0x0003
      0005DE 81               [ 4] 1251 	ret
      0005DF                       1252 00112$:
                                   1253 ;	main.c: 482: char_buffer_to_int();
      0005DF CDr02r24         [ 4] 1254 	call	_char_buffer_to_int
                                   1255 ;	main.c: 484: if(memcmp(&buffer[0],"SW",2) == 0)
      0005E2 4B 02            [ 1] 1256 	push	#0x02
      0005E4 4B 00            [ 1] 1257 	push	#0x00
      0005E6 4Br46            [ 1] 1258 	push	#<(___str_16+0)
      0005E8 4Bs00            [ 1] 1259 	push	#((___str_16+0) >> 8)
      0005EA AEr00r00         [ 2] 1260 	ldw	x, #(_buffer+0)
      0005ED CDr00r00         [ 4] 1261 	call	_memcmp
      0005F0 5D               [ 2] 1262 	tnzw	x
      0005F1 26 04            [ 1] 1263 	jrne	00114$
                                   1264 ;	main.c: 485: return 4;
      0005F3 AE 00 04         [ 2] 1265 	ldw	x, #0x0004
      0005F6 81               [ 4] 1266 	ret
      0005F7                       1267 00114$:
                                   1268 ;	main.c: 486: return 0;
      0005F7 5F               [ 1] 1269 	clrw	x
                                   1270 ;	main.c: 488: }
      0005F8 81               [ 4] 1271 	ret
                                   1272 ;	main.c: 490: void command_switcher(void)
                                   1273 ;	-----------------------------------------
                                   1274 ;	 function command_switcher
                                   1275 ;	-----------------------------------------
      0005F9                       1276 _command_switcher:
      0005F9 52 04            [ 2] 1277 	sub	sp, #4
                                   1278 ;	main.c: 492: char ar[4]={0};
      0005FB 0F 01            [ 1] 1279 	clr	(0x01, sp)
      0005FD 0F 02            [ 1] 1280 	clr	(0x02, sp)
      0005FF 0F 03            [ 1] 1281 	clr	(0x03, sp)
      000601 0F 04            [ 1] 1282 	clr	(0x04, sp)
                                   1283 ;	main.c: 494: switch(data_handler())
      000603 CDr05r35         [ 4] 1284 	call	_data_handler
      000606 5D               [ 2] 1285 	tnzw	x
      000607 2B 3B            [ 1] 1286 	jrmi	00109$
      000609 A3 00 07         [ 2] 1287 	cpw	x, #0x0007
      00060C 2C 36            [ 1] 1288 	jrsgt	00109$
      00060E 58               [ 2] 1289 	sllw	x
      00060F DEu06u13         [ 2] 1290 	ldw	x, (#00123$, x)
      000612 FC               [ 2] 1291 	jp	(x)
      000613                       1292 00123$:
      000613r06r44                 1293 	.dw	#00109$
      000615r06r23                 1294 	.dw	#00101$
      000617r06r28                 1295 	.dw	#00102$
      000619r06r2D                 1296 	.dw	#00103$
      00061Br06r32                 1297 	.dw	#00104$
      00061Dr06r37                 1298 	.dw	#00105$
      00061Fr06r3C                 1299 	.dw	#00106$
      000621r06r41                 1300 	.dw	#00107$
                                   1301 ;	main.c: 496: case 1:
      000623                       1302 00101$:
                                   1303 ;	main.c: 497: cm_SM();
      000623 CDr04r0C         [ 4] 1304 	call	_cm_SM
                                   1305 ;	main.c: 498: break;
      000626 20 1C            [ 2] 1306 	jra	00109$
                                   1307 ;	main.c: 499: case 2:
      000628                       1308 00102$:
                                   1309 ;	main.c: 500: cm_SN();
      000628 CDr04r32         [ 4] 1310 	call	_cm_SN
                                   1311 ;	main.c: 501: break;
      00062B 20 17            [ 2] 1312 	jra	00109$
                                   1313 ;	main.c: 502: case 3:
      00062D                       1314 00103$:
                                   1315 ;	main.c: 503: cm_SR();
      00062D CDr04r53         [ 4] 1316 	call	_cm_SR
                                   1317 ;	main.c: 504: break;
      000630 20 12            [ 2] 1318 	jra	00109$
                                   1319 ;	main.c: 505: case 4:
      000632                       1320 00104$:
                                   1321 ;	main.c: 506: cm_SW();
      000632 CDr04rC4         [ 4] 1322 	call	_cm_SW
                                   1323 ;	main.c: 507: break;
      000635 20 0D            [ 2] 1324 	jra	00109$
                                   1325 ;	main.c: 508: case 5:
      000637                       1326 00105$:
                                   1327 ;	main.c: 509: cm_ST();
      000637 CDr04r45         [ 4] 1328 	call	_cm_ST
                                   1329 ;	main.c: 510: break;
      00063A 20 08            [ 2] 1330 	jra	00109$
                                   1331 ;	main.c: 511: case 6:
      00063C                       1332 00106$:
                                   1333 ;	main.c: 512: cm_RM();
      00063C CDr04r38         [ 4] 1334 	call	_cm_RM
                                   1335 ;	main.c: 513: break;
      00063F 20 03            [ 2] 1336 	jra	00109$
                                   1337 ;	main.c: 514: case 7:
      000641                       1338 00107$:
                                   1339 ;	main.c: 515: cm_DB();
      000641 CDr04r42         [ 4] 1340 	call	_cm_DB
                                   1341 ;	main.c: 517: }
      000644                       1342 00109$:
                                   1343 ;	main.c: 518: }
      000644 5B 04            [ 2] 1344 	addw	sp, #4
      000646 81               [ 4] 1345 	ret
                                   1346 ;	main.c: 521: void main(void)
                                   1347 ;	-----------------------------------------
                                   1348 ;	 function main
                                   1349 ;	-----------------------------------------
      000647                       1350 _main:
                                   1351 ;	main.c: 523: uart_init();
      000647 CDr02rF0         [ 4] 1352 	call	_uart_init
                                   1353 ;	main.c: 524: i2c_init();
      00064A CDr03r0D         [ 4] 1354 	call	_i2c_init
                                   1355 ;	main.c: 525: uart_write("SS\n");
      00064D AEr00r49         [ 2] 1356 	ldw	x, #(___str_17+0)
      000650 CDr00r40         [ 4] 1357 	call	_uart_write
                                   1358 ;	main.c: 526: while(1)
      000653                       1359 00102$:
                                   1360 ;	main.c: 528: uart_read();
      000653 CDr00r6B         [ 4] 1361 	call	_uart_read
                                   1362 ;	main.c: 529: command_switcher();
      000656 CDr05rF9         [ 4] 1363 	call	_command_switcher
      000659 20 F8            [ 2] 1364 	jra	00102$
                                   1365 ;	main.c: 531: }
      00065B 81               [ 4] 1366 	ret
                                   1367 	.area CODE
                                   1368 	.area CONST
                                   1369 	.area CONST
      000000                       1370 ___str_0:
      000000 0A                    1371 	.db 0x0a
      000001 49 32 43 5F 52 45 47  1372 	.ascii "I2C_REGS >.<"
             53 20 3E 2E 3C
      00000D 0A                    1373 	.db 0x0a
      00000E 00                    1374 	.db 0x00
                                   1375 	.area CODE
                                   1376 	.area CONST
      00000F                       1377 ___str_1:
      00000F 44 52 20 2D 3E 20     1378 	.ascii "DR -> "
      000015 00                    1379 	.db 0x00
                                   1380 	.area CODE
                                   1381 	.area CONST
      000016                       1382 ___str_2:
      000016 20 3C 2D              1383 	.ascii " <-"
      000019 0A                    1384 	.db 0x0a
      00001A 00                    1385 	.db 0x00
                                   1386 	.area CODE
                                   1387 	.area CONST
      00001B                       1388 ___str_3:
      00001B 53 4D 20              1389 	.ascii "SM "
      00001E 00                    1390 	.db 0x00
                                   1391 	.area CODE
                                   1392 	.area CONST
      00001F                       1393 ___str_4:
      00001F 0D                    1394 	.db 0x0d
      000020 0A                    1395 	.db 0x0a
      000021 00                    1396 	.db 0x00
                                   1397 	.area CODE
                                   1398 	.area CONST
      000022                       1399 ___str_5:
      000022 52 4D                 1400 	.ascii "RM"
      000024 0A                    1401 	.db 0x0a
      000025 00                    1402 	.db 0x00
                                   1403 	.area CODE
                                   1404 	.area CONST
      000026                       1405 ___str_6:
      000026 53 54                 1406 	.ascii "ST"
      000028 0A                    1407 	.db 0x0a
      000029 00                    1408 	.db 0x00
                                   1409 	.area CODE
                                   1410 	.area CONST
      00002A                       1411 ___str_7:
      00002A 53 52 20              1412 	.ascii "SR "
      00002D 00                    1413 	.db 0x00
                                   1414 	.area CODE
                                   1415 	.area CONST
      00002E                       1416 ___str_8:
      00002E 20                    1417 	.ascii " "
      00002F 00                    1418 	.db 0x00
                                   1419 	.area CODE
                                   1420 	.area CONST
      000030                       1421 ___str_9:
      000030 53 57 20              1422 	.ascii "SW "
      000033 00                    1423 	.db 0x00
                                   1424 	.area CODE
                                   1425 	.area CONST
      000034                       1426 ___str_10:
      000034 53 4D                 1427 	.ascii "SM"
      000036 00                    1428 	.db 0x00
                                   1429 	.area CODE
                                   1430 	.area CONST
      000037                       1431 ___str_11:
      000037 53 4E                 1432 	.ascii "SN"
      000039 00                    1433 	.db 0x00
                                   1434 	.area CODE
                                   1435 	.area CONST
      00003A                       1436 ___str_12:
      00003A 53 54                 1437 	.ascii "ST"
      00003C 00                    1438 	.db 0x00
                                   1439 	.area CODE
                                   1440 	.area CONST
      00003D                       1441 ___str_13:
      00003D 52 4D                 1442 	.ascii "RM"
      00003F 00                    1443 	.db 0x00
                                   1444 	.area CODE
                                   1445 	.area CONST
      000040                       1446 ___str_14:
      000040 44 42                 1447 	.ascii "DB"
      000042 00                    1448 	.db 0x00
                                   1449 	.area CODE
                                   1450 	.area CONST
      000043                       1451 ___str_15:
      000043 53 52                 1452 	.ascii "SR"
      000045 00                    1453 	.db 0x00
                                   1454 	.area CODE
                                   1455 	.area CONST
      000046                       1456 ___str_16:
      000046 53 57                 1457 	.ascii "SW"
      000048 00                    1458 	.db 0x00
                                   1459 	.area CODE
                                   1460 	.area CONST
      000049                       1461 ___str_17:
      000049 53 53                 1462 	.ascii "SS"
      00004B 0A                    1463 	.db 0x0a
      00004C 00                    1464 	.db 0x00
                                   1465 	.area CODE
                                   1466 	.area INITIALIZER
      000000                       1467 __xinit__buffer:
      000000 00                    1468 	.db #0x00	; 0
      000001 00                    1469 	.db 0x00
      000002 00                    1470 	.db 0x00
      000003 00                    1471 	.db 0x00
      000004 00                    1472 	.db 0x00
      000005 00                    1473 	.db 0x00
      000006 00                    1474 	.db 0x00
      000007 00                    1475 	.db 0x00
      000008 00                    1476 	.db 0x00
      000009 00                    1477 	.db 0x00
      00000A 00                    1478 	.db 0x00
      00000B 00                    1479 	.db 0x00
      00000C 00                    1480 	.db 0x00
      00000D 00                    1481 	.db 0x00
      00000E 00                    1482 	.db 0x00
      00000F 00                    1483 	.db 0x00
      000010 00                    1484 	.db 0x00
      000011 00                    1485 	.db 0x00
      000012 00                    1486 	.db 0x00
      000013 00                    1487 	.db 0x00
      000014 00                    1488 	.db 0x00
      000015 00                    1489 	.db 0x00
      000016 00                    1490 	.db 0x00
      000017 00                    1491 	.db 0x00
      000018 00                    1492 	.db 0x00
      000019 00                    1493 	.db 0x00
      00001A 00                    1494 	.db 0x00
      00001B 00                    1495 	.db 0x00
      00001C 00                    1496 	.db 0x00
      00001D 00                    1497 	.db 0x00
      00001E 00                    1498 	.db 0x00
      00001F 00                    1499 	.db 0x00
      000020 00                    1500 	.db 0x00
      000021 00                    1501 	.db 0x00
      000022 00                    1502 	.db 0x00
      000023 00                    1503 	.db 0x00
      000024 00                    1504 	.db 0x00
      000025 00                    1505 	.db 0x00
      000026 00                    1506 	.db 0x00
      000027 00                    1507 	.db 0x00
      000028 00                    1508 	.db 0x00
      000029 00                    1509 	.db 0x00
      00002A 00                    1510 	.db 0x00
      00002B 00                    1511 	.db 0x00
      00002C 00                    1512 	.db 0x00
      00002D 00                    1513 	.db 0x00
      00002E 00                    1514 	.db 0x00
      00002F 00                    1515 	.db 0x00
      000030 00                    1516 	.db 0x00
      000031 00                    1517 	.db 0x00
      000032 00                    1518 	.db 0x00
      000033 00                    1519 	.db 0x00
      000034 00                    1520 	.db 0x00
      000035 00                    1521 	.db 0x00
      000036 00                    1522 	.db 0x00
      000037 00                    1523 	.db 0x00
      000038 00                    1524 	.db 0x00
      000039 00                    1525 	.db 0x00
      00003A 00                    1526 	.db 0x00
      00003B 00                    1527 	.db 0x00
      00003C 00                    1528 	.db 0x00
      00003D 00                    1529 	.db 0x00
      00003E 00                    1530 	.db 0x00
      00003F 00                    1531 	.db 0x00
      000040 00                    1532 	.db 0x00
      000041 00                    1533 	.db 0x00
      000042 00                    1534 	.db 0x00
      000043 00                    1535 	.db 0x00
      000044 00                    1536 	.db 0x00
      000045 00                    1537 	.db 0x00
      000046 00                    1538 	.db 0x00
      000047 00                    1539 	.db 0x00
      000048 00                    1540 	.db 0x00
      000049 00                    1541 	.db 0x00
      00004A 00                    1542 	.db 0x00
      00004B 00                    1543 	.db 0x00
      00004C 00                    1544 	.db 0x00
      00004D 00                    1545 	.db 0x00
      00004E 00                    1546 	.db 0x00
      00004F 00                    1547 	.db 0x00
      000050 00                    1548 	.db 0x00
      000051 00                    1549 	.db 0x00
      000052 00                    1550 	.db 0x00
      000053 00                    1551 	.db 0x00
      000054 00                    1552 	.db 0x00
      000055 00                    1553 	.db 0x00
      000056 00                    1554 	.db 0x00
      000057 00                    1555 	.db 0x00
      000058 00                    1556 	.db 0x00
      000059 00                    1557 	.db 0x00
      00005A 00                    1558 	.db 0x00
      00005B 00                    1559 	.db 0x00
      00005C 00                    1560 	.db 0x00
      00005D 00                    1561 	.db 0x00
      00005E 00                    1562 	.db 0x00
      00005F 00                    1563 	.db 0x00
      000060 00                    1564 	.db 0x00
      000061 00                    1565 	.db 0x00
      000062 00                    1566 	.db 0x00
      000063 00                    1567 	.db 0x00
      000064 00                    1568 	.db 0x00
      000065 00                    1569 	.db 0x00
      000066 00                    1570 	.db 0x00
      000067 00                    1571 	.db 0x00
      000068 00                    1572 	.db 0x00
      000069 00                    1573 	.db 0x00
      00006A 00                    1574 	.db 0x00
      00006B 00                    1575 	.db 0x00
      00006C 00                    1576 	.db 0x00
      00006D 00                    1577 	.db 0x00
      00006E 00                    1578 	.db 0x00
      00006F 00                    1579 	.db 0x00
      000070 00                    1580 	.db 0x00
      000071 00                    1581 	.db 0x00
      000072 00                    1582 	.db 0x00
      000073 00                    1583 	.db 0x00
      000074 00                    1584 	.db 0x00
      000075 00                    1585 	.db 0x00
      000076 00                    1586 	.db 0x00
      000077 00                    1587 	.db 0x00
      000078 00                    1588 	.db 0x00
      000079 00                    1589 	.db 0x00
      00007A 00                    1590 	.db 0x00
      00007B 00                    1591 	.db 0x00
      00007C 00                    1592 	.db 0x00
      00007D 00                    1593 	.db 0x00
      00007E 00                    1594 	.db 0x00
      00007F 00                    1595 	.db 0x00
      000080 00                    1596 	.db 0x00
      000081 00                    1597 	.db 0x00
      000082 00                    1598 	.db 0x00
      000083 00                    1599 	.db 0x00
      000084 00                    1600 	.db 0x00
      000085 00                    1601 	.db 0x00
      000086 00                    1602 	.db 0x00
      000087 00                    1603 	.db 0x00
      000088 00                    1604 	.db 0x00
      000089 00                    1605 	.db 0x00
      00008A 00                    1606 	.db 0x00
      00008B 00                    1607 	.db 0x00
      00008C 00                    1608 	.db 0x00
      00008D 00                    1609 	.db 0x00
      00008E 00                    1610 	.db 0x00
      00008F 00                    1611 	.db 0x00
      000090 00                    1612 	.db 0x00
      000091 00                    1613 	.db 0x00
      000092 00                    1614 	.db 0x00
      000093 00                    1615 	.db 0x00
      000094 00                    1616 	.db 0x00
      000095 00                    1617 	.db 0x00
      000096 00                    1618 	.db 0x00
      000097 00                    1619 	.db 0x00
      000098 00                    1620 	.db 0x00
      000099 00                    1621 	.db 0x00
      00009A 00                    1622 	.db 0x00
      00009B 00                    1623 	.db 0x00
      00009C 00                    1624 	.db 0x00
      00009D 00                    1625 	.db 0x00
      00009E 00                    1626 	.db 0x00
      00009F 00                    1627 	.db 0x00
      0000A0 00                    1628 	.db 0x00
      0000A1 00                    1629 	.db 0x00
      0000A2 00                    1630 	.db 0x00
      0000A3 00                    1631 	.db 0x00
      0000A4 00                    1632 	.db 0x00
      0000A5 00                    1633 	.db 0x00
      0000A6 00                    1634 	.db 0x00
      0000A7 00                    1635 	.db 0x00
      0000A8 00                    1636 	.db 0x00
      0000A9 00                    1637 	.db 0x00
      0000AA 00                    1638 	.db 0x00
      0000AB 00                    1639 	.db 0x00
      0000AC 00                    1640 	.db 0x00
      0000AD 00                    1641 	.db 0x00
      0000AE 00                    1642 	.db 0x00
      0000AF 00                    1643 	.db 0x00
      0000B0 00                    1644 	.db 0x00
      0000B1 00                    1645 	.db 0x00
      0000B2 00                    1646 	.db 0x00
      0000B3 00                    1647 	.db 0x00
      0000B4 00                    1648 	.db 0x00
      0000B5 00                    1649 	.db 0x00
      0000B6 00                    1650 	.db 0x00
      0000B7 00                    1651 	.db 0x00
      0000B8 00                    1652 	.db 0x00
      0000B9 00                    1653 	.db 0x00
      0000BA 00                    1654 	.db 0x00
      0000BB 00                    1655 	.db 0x00
      0000BC 00                    1656 	.db 0x00
      0000BD 00                    1657 	.db 0x00
      0000BE 00                    1658 	.db 0x00
      0000BF 00                    1659 	.db 0x00
      0000C0 00                    1660 	.db 0x00
      0000C1 00                    1661 	.db 0x00
      0000C2 00                    1662 	.db 0x00
      0000C3 00                    1663 	.db 0x00
      0000C4 00                    1664 	.db 0x00
      0000C5 00                    1665 	.db 0x00
      0000C6 00                    1666 	.db 0x00
      0000C7 00                    1667 	.db 0x00
      0000C8 00                    1668 	.db 0x00
      0000C9 00                    1669 	.db 0x00
      0000CA 00                    1670 	.db 0x00
      0000CB 00                    1671 	.db 0x00
      0000CC 00                    1672 	.db 0x00
      0000CD 00                    1673 	.db 0x00
      0000CE 00                    1674 	.db 0x00
      0000CF 00                    1675 	.db 0x00
      0000D0 00                    1676 	.db 0x00
      0000D1 00                    1677 	.db 0x00
      0000D2 00                    1678 	.db 0x00
      0000D3 00                    1679 	.db 0x00
      0000D4 00                    1680 	.db 0x00
      0000D5 00                    1681 	.db 0x00
      0000D6 00                    1682 	.db 0x00
      0000D7 00                    1683 	.db 0x00
      0000D8 00                    1684 	.db 0x00
      0000D9 00                    1685 	.db 0x00
      0000DA 00                    1686 	.db 0x00
      0000DB 00                    1687 	.db 0x00
      0000DC 00                    1688 	.db 0x00
      0000DD 00                    1689 	.db 0x00
      0000DE 00                    1690 	.db 0x00
      0000DF 00                    1691 	.db 0x00
      0000E0 00                    1692 	.db 0x00
      0000E1 00                    1693 	.db 0x00
      0000E2 00                    1694 	.db 0x00
      0000E3 00                    1695 	.db 0x00
      0000E4 00                    1696 	.db 0x00
      0000E5 00                    1697 	.db 0x00
      0000E6 00                    1698 	.db 0x00
      0000E7 00                    1699 	.db 0x00
      0000E8 00                    1700 	.db 0x00
      0000E9 00                    1701 	.db 0x00
      0000EA 00                    1702 	.db 0x00
      0000EB 00                    1703 	.db 0x00
      0000EC 00                    1704 	.db 0x00
      0000ED 00                    1705 	.db 0x00
      0000EE 00                    1706 	.db 0x00
      0000EF 00                    1707 	.db 0x00
      0000F0 00                    1708 	.db 0x00
      0000F1 00                    1709 	.db 0x00
      0000F2 00                    1710 	.db 0x00
      0000F3 00                    1711 	.db 0x00
      0000F4 00                    1712 	.db 0x00
      0000F5 00                    1713 	.db 0x00
      0000F6 00                    1714 	.db 0x00
      0000F7 00                    1715 	.db 0x00
      0000F8 00                    1716 	.db 0x00
      0000F9 00                    1717 	.db 0x00
      0000FA 00                    1718 	.db 0x00
      0000FB 00                    1719 	.db 0x00
      0000FC 00                    1720 	.db 0x00
      0000FD 00                    1721 	.db 0x00
      0000FE 00                    1722 	.db 0x00
      0000FF                       1723 __xinit__a:
      0000FF 00                    1724 	.db #0x00	; 0
      000100 00                    1725 	.db 0x00
      000101 00                    1726 	.db 0x00
      000102                       1727 __xinit__d_addr:
      000102 00                    1728 	.db #0x00	; 0
      000103                       1729 __xinit__p_size:
      000103 00                    1730 	.db #0x00	; 0
      000104                       1731 __xinit__d_size:
      000104 00                    1732 	.db #0x00	; 0
      000105                       1733 __xinit__p_bytes:
      000105 00                    1734 	.db #0x00	; 0
      000106                       1735 __xinit__data_buf:
      000106 00                    1736 	.db #0x00	; 0
      000107 00                    1737 	.db 0x00
      000108 00                    1738 	.db 0x00
      000109 00                    1739 	.db 0x00
      00010A 00                    1740 	.db 0x00
      00010B 00                    1741 	.db 0x00
      00010C 00                    1742 	.db 0x00
      00010D 00                    1743 	.db 0x00
      00010E 00                    1744 	.db 0x00
      00010F 00                    1745 	.db 0x00
      000110 00                    1746 	.db 0x00
      000111 00                    1747 	.db 0x00
      000112 00                    1748 	.db 0x00
      000113 00                    1749 	.db 0x00
      000114 00                    1750 	.db 0x00
      000115 00                    1751 	.db 0x00
      000116 00                    1752 	.db 0x00
      000117 00                    1753 	.db 0x00
      000118 00                    1754 	.db 0x00
      000119 00                    1755 	.db 0x00
      00011A 00                    1756 	.db 0x00
      00011B 00                    1757 	.db 0x00
      00011C 00                    1758 	.db 0x00
      00011D 00                    1759 	.db 0x00
      00011E 00                    1760 	.db 0x00
      00011F 00                    1761 	.db 0x00
      000120 00                    1762 	.db 0x00
      000121 00                    1763 	.db 0x00
      000122 00                    1764 	.db 0x00
      000123 00                    1765 	.db 0x00
      000124 00                    1766 	.db 0x00
      000125 00                    1767 	.db 0x00
      000126 00                    1768 	.db 0x00
      000127 00                    1769 	.db 0x00
      000128 00                    1770 	.db 0x00
      000129 00                    1771 	.db 0x00
      00012A 00                    1772 	.db 0x00
      00012B 00                    1773 	.db 0x00
      00012C 00                    1774 	.db 0x00
      00012D 00                    1775 	.db 0x00
      00012E 00                    1776 	.db 0x00
      00012F 00                    1777 	.db 0x00
      000130 00                    1778 	.db 0x00
      000131 00                    1779 	.db 0x00
      000132 00                    1780 	.db 0x00
      000133 00                    1781 	.db 0x00
      000134 00                    1782 	.db 0x00
      000135 00                    1783 	.db 0x00
      000136 00                    1784 	.db 0x00
      000137 00                    1785 	.db 0x00
      000138 00                    1786 	.db 0x00
      000139 00                    1787 	.db 0x00
      00013A 00                    1788 	.db 0x00
      00013B 00                    1789 	.db 0x00
      00013C 00                    1790 	.db 0x00
      00013D 00                    1791 	.db 0x00
      00013E 00                    1792 	.db 0x00
      00013F 00                    1793 	.db 0x00
      000140 00                    1794 	.db 0x00
      000141 00                    1795 	.db 0x00
      000142 00                    1796 	.db 0x00
      000143 00                    1797 	.db 0x00
      000144 00                    1798 	.db 0x00
      000145 00                    1799 	.db 0x00
      000146 00                    1800 	.db 0x00
      000147 00                    1801 	.db 0x00
      000148 00                    1802 	.db 0x00
      000149 00                    1803 	.db 0x00
      00014A 00                    1804 	.db 0x00
      00014B 00                    1805 	.db 0x00
      00014C 00                    1806 	.db 0x00
      00014D 00                    1807 	.db 0x00
      00014E 00                    1808 	.db 0x00
      00014F 00                    1809 	.db 0x00
      000150 00                    1810 	.db 0x00
      000151 00                    1811 	.db 0x00
      000152 00                    1812 	.db 0x00
      000153 00                    1813 	.db 0x00
      000154 00                    1814 	.db 0x00
      000155 00                    1815 	.db 0x00
      000156 00                    1816 	.db 0x00
      000157 00                    1817 	.db 0x00
      000158 00                    1818 	.db 0x00
      000159 00                    1819 	.db 0x00
      00015A 00                    1820 	.db 0x00
      00015B 00                    1821 	.db 0x00
      00015C 00                    1822 	.db 0x00
      00015D 00                    1823 	.db 0x00
      00015E 00                    1824 	.db 0x00
      00015F 00                    1825 	.db 0x00
      000160 00                    1826 	.db 0x00
      000161 00                    1827 	.db 0x00
      000162 00                    1828 	.db 0x00
      000163 00                    1829 	.db 0x00
      000164 00                    1830 	.db 0x00
      000165 00                    1831 	.db 0x00
      000166 00                    1832 	.db 0x00
      000167 00                    1833 	.db 0x00
      000168 00                    1834 	.db 0x00
      000169 00                    1835 	.db 0x00
      00016A 00                    1836 	.db 0x00
      00016B 00                    1837 	.db 0x00
      00016C 00                    1838 	.db 0x00
      00016D 00                    1839 	.db 0x00
      00016E 00                    1840 	.db 0x00
      00016F 00                    1841 	.db 0x00
      000170 00                    1842 	.db 0x00
      000171 00                    1843 	.db 0x00
      000172 00                    1844 	.db 0x00
      000173 00                    1845 	.db 0x00
      000174 00                    1846 	.db 0x00
      000175 00                    1847 	.db 0x00
      000176 00                    1848 	.db 0x00
      000177 00                    1849 	.db 0x00
      000178 00                    1850 	.db 0x00
      000179 00                    1851 	.db 0x00
      00017A 00                    1852 	.db 0x00
      00017B 00                    1853 	.db 0x00
      00017C 00                    1854 	.db 0x00
      00017D 00                    1855 	.db 0x00
      00017E 00                    1856 	.db 0x00
      00017F 00                    1857 	.db 0x00
      000180 00                    1858 	.db 0x00
      000181 00                    1859 	.db 0x00
      000182 00                    1860 	.db 0x00
      000183 00                    1861 	.db 0x00
      000184 00                    1862 	.db 0x00
      000185 00                    1863 	.db 0x00
      000186 00                    1864 	.db 0x00
      000187 00                    1865 	.db 0x00
      000188 00                    1866 	.db 0x00
      000189 00                    1867 	.db 0x00
      00018A 00                    1868 	.db 0x00
      00018B 00                    1869 	.db 0x00
      00018C 00                    1870 	.db 0x00
      00018D 00                    1871 	.db 0x00
      00018E 00                    1872 	.db 0x00
      00018F 00                    1873 	.db 0x00
      000190 00                    1874 	.db 0x00
      000191 00                    1875 	.db 0x00
      000192 00                    1876 	.db 0x00
      000193 00                    1877 	.db 0x00
      000194 00                    1878 	.db 0x00
      000195 00                    1879 	.db 0x00
      000196 00                    1880 	.db 0x00
      000197 00                    1881 	.db 0x00
      000198 00                    1882 	.db 0x00
      000199 00                    1883 	.db 0x00
      00019A 00                    1884 	.db 0x00
      00019B 00                    1885 	.db 0x00
      00019C 00                    1886 	.db 0x00
      00019D 00                    1887 	.db 0x00
      00019E 00                    1888 	.db 0x00
      00019F 00                    1889 	.db 0x00
      0001A0 00                    1890 	.db 0x00
      0001A1 00                    1891 	.db 0x00
      0001A2 00                    1892 	.db 0x00
      0001A3 00                    1893 	.db 0x00
      0001A4 00                    1894 	.db 0x00
      0001A5 00                    1895 	.db 0x00
      0001A6 00                    1896 	.db 0x00
      0001A7 00                    1897 	.db 0x00
      0001A8 00                    1898 	.db 0x00
      0001A9 00                    1899 	.db 0x00
      0001AA 00                    1900 	.db 0x00
      0001AB 00                    1901 	.db 0x00
      0001AC 00                    1902 	.db 0x00
      0001AD 00                    1903 	.db 0x00
      0001AE 00                    1904 	.db 0x00
      0001AF 00                    1905 	.db 0x00
      0001B0 00                    1906 	.db 0x00
      0001B1 00                    1907 	.db 0x00
      0001B2 00                    1908 	.db 0x00
      0001B3 00                    1909 	.db 0x00
      0001B4 00                    1910 	.db 0x00
      0001B5 00                    1911 	.db 0x00
      0001B6 00                    1912 	.db 0x00
      0001B7 00                    1913 	.db 0x00
      0001B8 00                    1914 	.db 0x00
      0001B9 00                    1915 	.db 0x00
      0001BA 00                    1916 	.db 0x00
      0001BB 00                    1917 	.db 0x00
      0001BC 00                    1918 	.db 0x00
      0001BD 00                    1919 	.db 0x00
      0001BE 00                    1920 	.db 0x00
      0001BF 00                    1921 	.db 0x00
      0001C0 00                    1922 	.db 0x00
      0001C1 00                    1923 	.db 0x00
      0001C2 00                    1924 	.db 0x00
      0001C3 00                    1925 	.db 0x00
      0001C4 00                    1926 	.db 0x00
      0001C5 00                    1927 	.db 0x00
      0001C6 00                    1928 	.db 0x00
      0001C7 00                    1929 	.db 0x00
      0001C8 00                    1930 	.db 0x00
      0001C9 00                    1931 	.db 0x00
      0001CA 00                    1932 	.db 0x00
      0001CB 00                    1933 	.db 0x00
      0001CC 00                    1934 	.db 0x00
      0001CD 00                    1935 	.db 0x00
      0001CE 00                    1936 	.db 0x00
      0001CF 00                    1937 	.db 0x00
      0001D0 00                    1938 	.db 0x00
      0001D1 00                    1939 	.db 0x00
      0001D2 00                    1940 	.db 0x00
      0001D3 00                    1941 	.db 0x00
      0001D4 00                    1942 	.db 0x00
      0001D5 00                    1943 	.db 0x00
      0001D6 00                    1944 	.db 0x00
      0001D7 00                    1945 	.db 0x00
      0001D8 00                    1946 	.db 0x00
      0001D9 00                    1947 	.db 0x00
      0001DA 00                    1948 	.db 0x00
      0001DB 00                    1949 	.db 0x00
      0001DC 00                    1950 	.db 0x00
      0001DD 00                    1951 	.db 0x00
      0001DE 00                    1952 	.db 0x00
      0001DF 00                    1953 	.db 0x00
      0001E0 00                    1954 	.db 0x00
      0001E1 00                    1955 	.db 0x00
      0001E2 00                    1956 	.db 0x00
      0001E3 00                    1957 	.db 0x00
      0001E4 00                    1958 	.db 0x00
      0001E5 00                    1959 	.db 0x00
      0001E6 00                    1960 	.db 0x00
      0001E7 00                    1961 	.db 0x00
      0001E8 00                    1962 	.db 0x00
      0001E9 00                    1963 	.db 0x00
      0001EA 00                    1964 	.db 0x00
      0001EB 00                    1965 	.db 0x00
      0001EC 00                    1966 	.db 0x00
      0001ED 00                    1967 	.db 0x00
      0001EE 00                    1968 	.db 0x00
      0001EF 00                    1969 	.db 0x00
      0001F0 00                    1970 	.db 0x00
      0001F1 00                    1971 	.db 0x00
      0001F2 00                    1972 	.db 0x00
      0001F3 00                    1973 	.db 0x00
      0001F4 00                    1974 	.db 0x00
      0001F5 00                    1975 	.db 0x00
      0001F6 00                    1976 	.db 0x00
      0001F7 00                    1977 	.db 0x00
      0001F8 00                    1978 	.db 0x00
      0001F9 00                    1979 	.db 0x00
      0001FA 00                    1980 	.db 0x00
      0001FB 00                    1981 	.db 0x00
      0001FC 00                    1982 	.db 0x00
      0001FD 00                    1983 	.db 0x00
      0001FE 00                    1984 	.db 0x00
      0001FF 00                    1985 	.db 0x00
      000200 00                    1986 	.db 0x00
      000201 00                    1987 	.db 0x00
      000202 00                    1988 	.db 0x00
      000203 00                    1989 	.db 0x00
      000204 00                    1990 	.db 0x00
      000205                       1991 __xinit__current_dev:
      000205 77                    1992 	.db #0x77	; 119	'w'
                                   1993 	.area CABS (ABS)
