                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.3.0 #14184 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _uart_read
                                     13 	.globl _i2c_scan
                                     14 	.globl _i2c_stop
                                     15 	.globl _i2c_send_address
                                     16 	.globl _i2c_start
                                     17 	.globl _i2c_init
                                     18 	.globl _uart_init
                                     19 	.globl _status_check
                                     20 	.globl _convert_int_to_binary
                                     21 	.globl _convert_int_to_chars
                                     22 	.globl _uart_write
                                     23 	.globl _delay
                                     24 	.globl _strlen
                                     25 	.globl _current_dev
                                     26 	.globl _buffer
                                     27 ;--------------------------------------------------------
                                     28 ; ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area DATA
                                     31 ;--------------------------------------------------------
                                     32 ; ram data
                                     33 ;--------------------------------------------------------
                                     34 	.area INITIALIZED
      000000                         35 _buffer::
      000000                         36 	.ds 256
      000100                         37 _current_dev::
      000100                         38 	.ds 1
                                     39 ;--------------------------------------------------------
                                     40 ; Stack segment in internal ram
                                     41 ;--------------------------------------------------------
                                     42 	.area SSEG
      000000                         43 __start__stack:
      000000                         44 	.ds	1
                                     45 
                                     46 ;--------------------------------------------------------
                                     47 ; absolute external ram data
                                     48 ;--------------------------------------------------------
                                     49 	.area DABS (ABS)
                                     50 
                                     51 ; default segment ordering for linker
                                     52 	.area HOME
                                     53 	.area GSINIT
                                     54 	.area GSFINAL
                                     55 	.area CONST
                                     56 	.area INITIALIZER
                                     57 	.area CODE
                                     58 
                                     59 ;--------------------------------------------------------
                                     60 ; interrupt vector
                                     61 ;--------------------------------------------------------
                                     62 	.area HOME
      000000                         63 __interrupt_vect:
      000000 82v00u00u00             64 	int s_GSINIT ; reset
                                     65 ;--------------------------------------------------------
                                     66 ; global & static initialisations
                                     67 ;--------------------------------------------------------
                                     68 	.area HOME
                                     69 	.area GSINIT
                                     70 	.area GSFINAL
                                     71 	.area GSINIT
      000000 CDr00r00         [ 4]   72 	call	___sdcc_external_startup
      000003 4D               [ 1]   73 	tnz	a
      000004 27 03            [ 1]   74 	jreq	__sdcc_init_data
      000006 CCr00r04         [ 2]   75 	jp	__sdcc_program_startup
      000009                         76 __sdcc_init_data:
                                     77 ; stm8_genXINIT() start
      000009 AEr00r00         [ 2]   78 	ldw x, #l_DATA
      00000C 27 07            [ 1]   79 	jreq	00002$
      00000E                         80 00001$:
      00000E 72 4FuFFuFF      [ 1]   81 	clr (s_DATA - 1, x)
      000012 5A               [ 2]   82 	decw x
      000013 26 F9            [ 1]   83 	jrne	00001$
      000015                         84 00002$:
      000015 AEr00r00         [ 2]   85 	ldw	x, #l_INITIALIZER
      000018 27 09            [ 1]   86 	jreq	00004$
      00001A                         87 00003$:
      00001A D6uFFuFF         [ 1]   88 	ld	a, (s_INITIALIZER - 1, x)
      00001D D7uFFuFF         [ 1]   89 	ld	(s_INITIALIZED - 1, x), a
      000020 5A               [ 2]   90 	decw	x
      000021 26 F7            [ 1]   91 	jrne	00003$
      000023                         92 00004$:
                                     93 ; stm8_genXINIT() end
                                     94 	.area GSFINAL
      000000 CCr00r04         [ 2]   95 	jp	__sdcc_program_startup
                                     96 ;--------------------------------------------------------
                                     97 ; Home
                                     98 ;--------------------------------------------------------
                                     99 	.area HOME
                                    100 	.area HOME
      000004                        101 __sdcc_program_startup:
      000004 CCr04r44         [ 2]  102 	jp	_main
                                    103 ;	return from main will return to caller
                                    104 ;--------------------------------------------------------
                                    105 ; code
                                    106 ;--------------------------------------------------------
                                    107 	.area CODE
                                    108 ;	main.c: 8: void delay(unsigned long count) {
                                    109 ;	-----------------------------------------
                                    110 ;	 function delay
                                    111 ;	-----------------------------------------
      000000                        112 _delay:
      000000 52 08            [ 2]  113 	sub	sp, #8
                                    114 ;	main.c: 9: while (count--)
      000002 16 0D            [ 2]  115 	ldw	y, (0x0d, sp)
      000004 17 07            [ 2]  116 	ldw	(0x07, sp), y
      000006 1E 0B            [ 2]  117 	ldw	x, (0x0b, sp)
      000008                        118 00101$:
      000008 1F 01            [ 2]  119 	ldw	(0x01, sp), x
      00000A 7B 07            [ 1]  120 	ld	a, (0x07, sp)
      00000C 6B 03            [ 1]  121 	ld	(0x03, sp), a
      00000E 7B 08            [ 1]  122 	ld	a, (0x08, sp)
      000010 16 07            [ 2]  123 	ldw	y, (0x07, sp)
      000012 72 A2 00 01      [ 2]  124 	subw	y, #0x0001
      000016 17 07            [ 2]  125 	ldw	(0x07, sp), y
      000018 24 01            [ 1]  126 	jrnc	00117$
      00001A 5A               [ 2]  127 	decw	x
      00001B                        128 00117$:
      00001B 4D               [ 1]  129 	tnz	a
      00001C 26 08            [ 1]  130 	jrne	00118$
      00001E 16 02            [ 2]  131 	ldw	y, (0x02, sp)
      000020 26 04            [ 1]  132 	jrne	00118$
      000022 0D 01            [ 1]  133 	tnz	(0x01, sp)
      000024 27 03            [ 1]  134 	jreq	00104$
      000026                        135 00118$:
                                    136 ;	main.c: 10: nop();
      000026 9D               [ 1]  137 	nop
      000027 20 DF            [ 2]  138 	jra	00101$
      000029                        139 00104$:
                                    140 ;	main.c: 11: }
      000029 1E 09            [ 2]  141 	ldw	x, (9, sp)
      00002B 5B 0E            [ 2]  142 	addw	sp, #14
      00002D FC               [ 2]  143 	jp	(x)
                                    144 ;	main.c: 13: int uart_write(const char *str) {
                                    145 ;	-----------------------------------------
                                    146 ;	 function uart_write
                                    147 ;	-----------------------------------------
      00002E                        148 _uart_write:
      00002E 52 05            [ 2]  149 	sub	sp, #5
      000030 1F 03            [ 2]  150 	ldw	(0x03, sp), x
                                    151 ;	main.c: 15: for(i = 0; i < strlen(str); i++) {
      000032 0F 05            [ 1]  152 	clr	(0x05, sp)
      000034                        153 00106$:
      000034 1E 03            [ 2]  154 	ldw	x, (0x03, sp)
      000036 CDr00r00         [ 4]  155 	call	_strlen
      000039 1F 01            [ 2]  156 	ldw	(0x01, sp), x
      00003B 5F               [ 1]  157 	clrw	x
      00003C 7B 05            [ 1]  158 	ld	a, (0x05, sp)
      00003E 97               [ 1]  159 	ld	xl, a
      00003F 13 01            [ 2]  160 	cpw	x, (0x01, sp)
      000041 24 14            [ 1]  161 	jrnc	00104$
                                    162 ;	main.c: 16: while(!(UART1_SR & UART_SR_TXE)); // !Transmit data register empty
      000043                        163 00101$:
      000043 C6 52 30         [ 1]  164 	ld	a, 0x5230
      000046 2A FB            [ 1]  165 	jrpl	00101$
                                    166 ;	main.c: 17: UART1_DR = str[i];
      000048 5F               [ 1]  167 	clrw	x
      000049 7B 05            [ 1]  168 	ld	a, (0x05, sp)
      00004B 97               [ 1]  169 	ld	xl, a
      00004C 72 FB 03         [ 2]  170 	addw	x, (0x03, sp)
      00004F F6               [ 1]  171 	ld	a, (x)
      000050 C7 52 31         [ 1]  172 	ld	0x5231, a
                                    173 ;	main.c: 15: for(i = 0; i < strlen(str); i++) {
      000053 0C 05            [ 1]  174 	inc	(0x05, sp)
      000055 20 DD            [ 2]  175 	jra	00106$
      000057                        176 00104$:
                                    177 ;	main.c: 19: return(i); // Bytes sent
      000057 7B 05            [ 1]  178 	ld	a, (0x05, sp)
      000059 5F               [ 1]  179 	clrw	x
      00005A 97               [ 1]  180 	ld	xl, a
                                    181 ;	main.c: 20: }
      00005B 5B 05            [ 2]  182 	addw	sp, #5
      00005D 81               [ 4]  183 	ret
                                    184 ;	main.c: 24: void convert_int_to_chars(uint8_t num, char* rx_int_chars) {
                                    185 ;	-----------------------------------------
                                    186 ;	 function convert_int_to_chars
                                    187 ;	-----------------------------------------
      00005E                        188 _convert_int_to_chars:
      00005E 52 0D            [ 2]  189 	sub	sp, #13
      000060 6B 0D            [ 1]  190 	ld	(0x0d, sp), a
      000062 1F 0B            [ 2]  191 	ldw	(0x0b, sp), x
                                    192 ;	main.c: 27: rx_int_chars[0] = num / 100 + '0';
      000064 7B 0D            [ 1]  193 	ld	a, (0x0d, sp)
      000066 6B 02            [ 1]  194 	ld	(0x02, sp), a
      000068 0F 01            [ 1]  195 	clr	(0x01, sp)
                                    196 ;	main.c: 28: rx_int_chars[1] = num / 10 % 10 + '0';
      00006A 1E 0B            [ 2]  197 	ldw	x, (0x0b, sp)
      00006C 5C               [ 1]  198 	incw	x
      00006D 1F 03            [ 2]  199 	ldw	(0x03, sp), x
                                    200 ;	main.c: 29: rx_int_chars[2] = num % 10 + '0';
      00006F 1E 0B            [ 2]  201 	ldw	x, (0x0b, sp)
      000071 5C               [ 1]  202 	incw	x
      000072 5C               [ 1]  203 	incw	x
      000073 1F 05            [ 2]  204 	ldw	(0x05, sp), x
                                    205 ;	main.c: 28: rx_int_chars[1] = num / 10 % 10 + '0';
      000075 4B 0A            [ 1]  206 	push	#0x0a
      000077 4B 00            [ 1]  207 	push	#0x00
      000079 1E 03            [ 2]  208 	ldw	x, (0x03, sp)
                                    209 ;	main.c: 29: rx_int_chars[2] = num % 10 + '0';
      00007B CDr00r00         [ 4]  210 	call	__divsint
      00007E 1F 07            [ 2]  211 	ldw	(0x07, sp), x
      000080 4B 0A            [ 1]  212 	push	#0x0a
      000082 4B 00            [ 1]  213 	push	#0x00
      000084 1E 03            [ 2]  214 	ldw	x, (0x03, sp)
      000086 CDr00r00         [ 4]  215 	call	__modsint
      000089 9F               [ 1]  216 	ld	a, xl
      00008A AB 30            [ 1]  217 	add	a, #0x30
      00008C 6B 09            [ 1]  218 	ld	(0x09, sp), a
                                    219 ;	main.c: 25: if (num > 99) {
      00008E 7B 0D            [ 1]  220 	ld	a, (0x0d, sp)
      000090 A1 63            [ 1]  221 	cp	a, #0x63
      000092 23 29            [ 2]  222 	jrule	00105$
                                    223 ;	main.c: 27: rx_int_chars[0] = num / 100 + '0';
      000094 4B 64            [ 1]  224 	push	#0x64
      000096 4B 00            [ 1]  225 	push	#0x00
      000098 1E 03            [ 2]  226 	ldw	x, (0x03, sp)
      00009A CDr00r00         [ 4]  227 	call	__divsint
      00009D 9F               [ 1]  228 	ld	a, xl
      00009E AB 30            [ 1]  229 	add	a, #0x30
      0000A0 1E 0B            [ 2]  230 	ldw	x, (0x0b, sp)
      0000A2 F7               [ 1]  231 	ld	(x), a
                                    232 ;	main.c: 28: rx_int_chars[1] = num / 10 % 10 + '0';
      0000A3 4B 0A            [ 1]  233 	push	#0x0a
      0000A5 4B 00            [ 1]  234 	push	#0x00
      0000A7 1E 09            [ 2]  235 	ldw	x, (0x09, sp)
      0000A9 CDr00r00         [ 4]  236 	call	__modsint
      0000AC 9F               [ 1]  237 	ld	a, xl
      0000AD AB 30            [ 1]  238 	add	a, #0x30
      0000AF 1E 03            [ 2]  239 	ldw	x, (0x03, sp)
      0000B1 F7               [ 1]  240 	ld	(x), a
                                    241 ;	main.c: 29: rx_int_chars[2] = num % 10 + '0';
      0000B2 1E 05            [ 2]  242 	ldw	x, (0x05, sp)
      0000B4 7B 09            [ 1]  243 	ld	a, (0x09, sp)
      0000B6 F7               [ 1]  244 	ld	(x), a
                                    245 ;	main.c: 30: rx_int_chars[3] ='\0';
      0000B7 1E 0B            [ 2]  246 	ldw	x, (0x0b, sp)
      0000B9 6F 03            [ 1]  247 	clr	(0x0003, x)
      0000BB 20 23            [ 2]  248 	jra	00107$
      0000BD                        249 00105$:
                                    250 ;	main.c: 32: } else if (num > 9) {
      0000BD 7B 0D            [ 1]  251 	ld	a, (0x0d, sp)
      0000BF A1 09            [ 1]  252 	cp	a, #0x09
      0000C1 23 13            [ 2]  253 	jrule	00102$
                                    254 ;	main.c: 34: rx_int_chars[0] = num / 10 + '0';
      0000C3 7B 08            [ 1]  255 	ld	a, (0x08, sp)
      0000C5 6B 0A            [ 1]  256 	ld	(0x0a, sp), a
      0000C7 AB 30            [ 1]  257 	add	a, #0x30
      0000C9 1E 0B            [ 2]  258 	ldw	x, (0x0b, sp)
      0000CB F7               [ 1]  259 	ld	(x), a
                                    260 ;	main.c: 35: rx_int_chars[1] = num % 10 + '0';
      0000CC 1E 03            [ 2]  261 	ldw	x, (0x03, sp)
      0000CE 7B 09            [ 1]  262 	ld	a, (0x09, sp)
      0000D0 F7               [ 1]  263 	ld	(x), a
                                    264 ;	main.c: 36: rx_int_chars[2] ='\0';
      0000D1 1E 05            [ 2]  265 	ldw	x, (0x05, sp)
      0000D3 7F               [ 1]  266 	clr	(x)
      0000D4 20 0A            [ 2]  267 	jra	00107$
      0000D6                        268 00102$:
                                    269 ;	main.c: 41: rx_int_chars[0] = num + '0';
      0000D6 7B 0D            [ 1]  270 	ld	a, (0x0d, sp)
      0000D8 AB 30            [ 1]  271 	add	a, #0x30
      0000DA 1E 0B            [ 2]  272 	ldw	x, (0x0b, sp)
      0000DC F7               [ 1]  273 	ld	(x), a
                                    274 ;	main.c: 42: rx_int_chars[1] ='\0';
      0000DD 1E 03            [ 2]  275 	ldw	x, (0x03, sp)
      0000DF 7F               [ 1]  276 	clr	(x)
      0000E0                        277 00107$:
                                    278 ;	main.c: 44: }
      0000E0 5B 0D            [ 2]  279 	addw	sp, #13
      0000E2 81               [ 4]  280 	ret
                                    281 ;	main.c: 46: void convert_int_to_binary(int num, char* rx_binary_chars) {
                                    282 ;	-----------------------------------------
                                    283 ;	 function convert_int_to_binary
                                    284 ;	-----------------------------------------
      0000E3                        285 _convert_int_to_binary:
      0000E3 52 04            [ 2]  286 	sub	sp, #4
      0000E5 1F 01            [ 2]  287 	ldw	(0x01, sp), x
                                    288 ;	main.c: 48: for(int i = 7; i >= 0; i--) {
      0000E7 AE 00 07         [ 2]  289 	ldw	x, #0x0007
      0000EA 1F 03            [ 2]  290 	ldw	(0x03, sp), x
      0000EC                        291 00103$:
      0000EC 0D 03            [ 1]  292 	tnz	(0x03, sp)
      0000EE 2B 22            [ 1]  293 	jrmi	00101$
                                    294 ;	main.c: 50: rx_binary_chars[7 - i] = ((num >> i) & 1) + '0';
      0000F0 AE 00 07         [ 2]  295 	ldw	x, #0x0007
      0000F3 72 F0 03         [ 2]  296 	subw	x, (0x03, sp)
      0000F6 72 FB 07         [ 2]  297 	addw	x, (0x07, sp)
      0000F9 16 01            [ 2]  298 	ldw	y, (0x01, sp)
      0000FB 7B 04            [ 1]  299 	ld	a, (0x04, sp)
      0000FD 27 05            [ 1]  300 	jreq	00120$
      0000FF                        301 00119$:
      0000FF 90 57            [ 2]  302 	sraw	y
      000101 4A               [ 1]  303 	dec	a
      000102 26 FB            [ 1]  304 	jrne	00119$
      000104                        305 00120$:
      000104 90 9F            [ 1]  306 	ld	a, yl
      000106 A4 01            [ 1]  307 	and	a, #0x01
      000108 AB 30            [ 1]  308 	add	a, #0x30
      00010A F7               [ 1]  309 	ld	(x), a
                                    310 ;	main.c: 48: for(int i = 7; i >= 0; i--) {
      00010B 1E 03            [ 2]  311 	ldw	x, (0x03, sp)
      00010D 5A               [ 2]  312 	decw	x
      00010E 1F 03            [ 2]  313 	ldw	(0x03, sp), x
      000110 20 DA            [ 2]  314 	jra	00103$
      000112                        315 00101$:
                                    316 ;	main.c: 52: rx_binary_chars[8] = '\0'; // Добавляем символ конца строки
      000112 1E 07            [ 2]  317 	ldw	x, (0x07, sp)
      000114 6F 08            [ 1]  318 	clr	(0x0008, x)
                                    319 ;	main.c: 53: }
      000116 1E 05            [ 2]  320 	ldw	x, (5, sp)
      000118 5B 08            [ 2]  321 	addw	sp, #8
      00011A FC               [ 2]  322 	jp	(x)
                                    323 ;	main.c: 55: void status_check(void){
                                    324 ;	-----------------------------------------
                                    325 ;	 function status_check
                                    326 ;	-----------------------------------------
      00011B                        327 _status_check:
      00011B 52 09            [ 2]  328 	sub	sp, #9
                                    329 ;	main.c: 56: char rx_binary_chars[9]={0};
      00011D 0F 01            [ 1]  330 	clr	(0x01, sp)
      00011F 0F 02            [ 1]  331 	clr	(0x02, sp)
      000121 0F 03            [ 1]  332 	clr	(0x03, sp)
      000123 0F 04            [ 1]  333 	clr	(0x04, sp)
      000125 0F 05            [ 1]  334 	clr	(0x05, sp)
      000127 0F 06            [ 1]  335 	clr	(0x06, sp)
      000129 0F 07            [ 1]  336 	clr	(0x07, sp)
      00012B 0F 08            [ 1]  337 	clr	(0x08, sp)
      00012D 0F 09            [ 1]  338 	clr	(0x09, sp)
                                    339 ;	main.c: 57: uart_write("\nI2C_REGS >.<\n");
      00012F AEr00r00         [ 2]  340 	ldw	x, #(___str_0+0)
      000132 CDr00r2E         [ 4]  341 	call	_uart_write
                                    342 ;	main.c: 58: convert_int_to_binary(I2C_SR1, rx_binary_chars);
      000135 96               [ 1]  343 	ldw	x, sp
      000136 5C               [ 1]  344 	incw	x
      000137 51               [ 1]  345 	exgw	x, y
      000138 C6 52 17         [ 1]  346 	ld	a, 0x5217
      00013B 5F               [ 1]  347 	clrw	x
      00013C 90 89            [ 2]  348 	pushw	y
      00013E 97               [ 1]  349 	ld	xl, a
      00013F CDr00rE3         [ 4]  350 	call	_convert_int_to_binary
                                    351 ;	main.c: 59: uart_write("\nSR1 -> ");
      000142 AEr00r0F         [ 2]  352 	ldw	x, #(___str_1+0)
      000145 CDr00r2E         [ 4]  353 	call	_uart_write
                                    354 ;	main.c: 60: uart_write(rx_binary_chars);
      000148 96               [ 1]  355 	ldw	x, sp
      000149 5C               [ 1]  356 	incw	x
      00014A CDr00r2E         [ 4]  357 	call	_uart_write
                                    358 ;	main.c: 61: uart_write(" <-\n");
      00014D AEr00r18         [ 2]  359 	ldw	x, #(___str_2+0)
      000150 CDr00r2E         [ 4]  360 	call	_uart_write
                                    361 ;	main.c: 62: convert_int_to_binary(I2C_SR2, rx_binary_chars);
      000153 96               [ 1]  362 	ldw	x, sp
      000154 5C               [ 1]  363 	incw	x
      000155 51               [ 1]  364 	exgw	x, y
      000156 C6 52 18         [ 1]  365 	ld	a, 0x5218
      000159 5F               [ 1]  366 	clrw	x
      00015A 90 89            [ 2]  367 	pushw	y
      00015C 97               [ 1]  368 	ld	xl, a
      00015D CDr00rE3         [ 4]  369 	call	_convert_int_to_binary
                                    370 ;	main.c: 63: uart_write("SR2 -> ");
      000160 AEr00r1D         [ 2]  371 	ldw	x, #(___str_3+0)
      000163 CDr00r2E         [ 4]  372 	call	_uart_write
                                    373 ;	main.c: 64: uart_write(rx_binary_chars);
      000166 96               [ 1]  374 	ldw	x, sp
      000167 5C               [ 1]  375 	incw	x
      000168 CDr00r2E         [ 4]  376 	call	_uart_write
                                    377 ;	main.c: 65: uart_write(" <-\n");
      00016B AEr00r18         [ 2]  378 	ldw	x, #(___str_2+0)
      00016E CDr00r2E         [ 4]  379 	call	_uart_write
                                    380 ;	main.c: 66: convert_int_to_binary(I2C_SR3, rx_binary_chars);
      000171 96               [ 1]  381 	ldw	x, sp
      000172 5C               [ 1]  382 	incw	x
      000173 51               [ 1]  383 	exgw	x, y
      000174 C6 52 19         [ 1]  384 	ld	a, 0x5219
      000177 5F               [ 1]  385 	clrw	x
      000178 90 89            [ 2]  386 	pushw	y
      00017A 97               [ 1]  387 	ld	xl, a
      00017B CDr00rE3         [ 4]  388 	call	_convert_int_to_binary
                                    389 ;	main.c: 67: uart_write("SR3 -> ");
      00017E AEr00r25         [ 2]  390 	ldw	x, #(___str_4+0)
      000181 CDr00r2E         [ 4]  391 	call	_uart_write
                                    392 ;	main.c: 68: uart_write(rx_binary_chars);
      000184 96               [ 1]  393 	ldw	x, sp
      000185 5C               [ 1]  394 	incw	x
      000186 CDr00r2E         [ 4]  395 	call	_uart_write
                                    396 ;	main.c: 69: uart_write(" <-\n");
      000189 AEr00r18         [ 2]  397 	ldw	x, #(___str_2+0)
      00018C CDr00r2E         [ 4]  398 	call	_uart_write
                                    399 ;	main.c: 70: convert_int_to_binary(I2C_CR1, rx_binary_chars);
      00018F 96               [ 1]  400 	ldw	x, sp
      000190 5C               [ 1]  401 	incw	x
      000191 51               [ 1]  402 	exgw	x, y
      000192 C6 52 10         [ 1]  403 	ld	a, 0x5210
      000195 5F               [ 1]  404 	clrw	x
      000196 90 89            [ 2]  405 	pushw	y
      000198 97               [ 1]  406 	ld	xl, a
      000199 CDr00rE3         [ 4]  407 	call	_convert_int_to_binary
                                    408 ;	main.c: 71: uart_write("CR1 -> ");
      00019C AEr00r2D         [ 2]  409 	ldw	x, #(___str_5+0)
      00019F CDr00r2E         [ 4]  410 	call	_uart_write
                                    411 ;	main.c: 72: uart_write(rx_binary_chars);
      0001A2 96               [ 1]  412 	ldw	x, sp
      0001A3 5C               [ 1]  413 	incw	x
      0001A4 CDr00r2E         [ 4]  414 	call	_uart_write
                                    415 ;	main.c: 73: uart_write(" <-\n");
      0001A7 AEr00r18         [ 2]  416 	ldw	x, #(___str_2+0)
      0001AA CDr00r2E         [ 4]  417 	call	_uart_write
                                    418 ;	main.c: 74: convert_int_to_binary(I2C_CR2, rx_binary_chars);
      0001AD 96               [ 1]  419 	ldw	x, sp
      0001AE 5C               [ 1]  420 	incw	x
      0001AF 51               [ 1]  421 	exgw	x, y
      0001B0 C6 52 11         [ 1]  422 	ld	a, 0x5211
      0001B3 5F               [ 1]  423 	clrw	x
      0001B4 90 89            [ 2]  424 	pushw	y
      0001B6 97               [ 1]  425 	ld	xl, a
      0001B7 CDr00rE3         [ 4]  426 	call	_convert_int_to_binary
                                    427 ;	main.c: 75: uart_write("CR2 -> ");
      0001BA AEr00r35         [ 2]  428 	ldw	x, #(___str_6+0)
      0001BD CDr00r2E         [ 4]  429 	call	_uart_write
                                    430 ;	main.c: 76: uart_write(rx_binary_chars);
      0001C0 96               [ 1]  431 	ldw	x, sp
      0001C1 5C               [ 1]  432 	incw	x
      0001C2 CDr00r2E         [ 4]  433 	call	_uart_write
                                    434 ;	main.c: 77: uart_write(" <-\n");
      0001C5 AEr00r18         [ 2]  435 	ldw	x, #(___str_2+0)
      0001C8 CDr00r2E         [ 4]  436 	call	_uart_write
                                    437 ;	main.c: 78: convert_int_to_binary(I2C_DR, rx_binary_chars);
      0001CB 96               [ 1]  438 	ldw	x, sp
      0001CC 5C               [ 1]  439 	incw	x
      0001CD 51               [ 1]  440 	exgw	x, y
      0001CE C6 52 16         [ 1]  441 	ld	a, 0x5216
      0001D1 5F               [ 1]  442 	clrw	x
      0001D2 90 89            [ 2]  443 	pushw	y
      0001D4 97               [ 1]  444 	ld	xl, a
      0001D5 CDr00rE3         [ 4]  445 	call	_convert_int_to_binary
                                    446 ;	main.c: 79: uart_write("DR -> ");
      0001D8 AEr00r3D         [ 2]  447 	ldw	x, #(___str_7+0)
      0001DB CDr00r2E         [ 4]  448 	call	_uart_write
                                    449 ;	main.c: 80: uart_write(rx_binary_chars);
      0001DE 96               [ 1]  450 	ldw	x, sp
      0001DF 5C               [ 1]  451 	incw	x
      0001E0 CDr00r2E         [ 4]  452 	call	_uart_write
                                    453 ;	main.c: 81: uart_write(" <-\n");
      0001E3 AEr00r18         [ 2]  454 	ldw	x, #(___str_2+0)
      0001E6 CDr00r2E         [ 4]  455 	call	_uart_write
                                    456 ;	main.c: 82: uart_write("UART_REGS >.<\n");
      0001E9 AEr00r44         [ 2]  457 	ldw	x, #(___str_8+0)
      0001EC CDr00r2E         [ 4]  458 	call	_uart_write
                                    459 ;	main.c: 83: convert_int_to_binary(UART1_SR, rx_binary_chars);
      0001EF 96               [ 1]  460 	ldw	x, sp
      0001F0 5C               [ 1]  461 	incw	x
      0001F1 51               [ 1]  462 	exgw	x, y
      0001F2 C6 52 30         [ 1]  463 	ld	a, 0x5230
      0001F5 5F               [ 1]  464 	clrw	x
      0001F6 90 89            [ 2]  465 	pushw	y
      0001F8 97               [ 1]  466 	ld	xl, a
      0001F9 CDr00rE3         [ 4]  467 	call	_convert_int_to_binary
                                    468 ;	main.c: 84: uart_write("\nSR -> ");
      0001FC AEr00r53         [ 2]  469 	ldw	x, #(___str_9+0)
      0001FF CDr00r2E         [ 4]  470 	call	_uart_write
                                    471 ;	main.c: 85: uart_write(rx_binary_chars);
      000202 96               [ 1]  472 	ldw	x, sp
      000203 5C               [ 1]  473 	incw	x
      000204 CDr00r2E         [ 4]  474 	call	_uart_write
                                    475 ;	main.c: 86: uart_write(" <-\n");
      000207 AEr00r18         [ 2]  476 	ldw	x, #(___str_2+0)
      00020A CDr00r2E         [ 4]  477 	call	_uart_write
                                    478 ;	main.c: 87: convert_int_to_binary(UART1_DR, rx_binary_chars);
      00020D 96               [ 1]  479 	ldw	x, sp
      00020E 5C               [ 1]  480 	incw	x
      00020F 51               [ 1]  481 	exgw	x, y
      000210 C6 52 31         [ 1]  482 	ld	a, 0x5231
      000213 5F               [ 1]  483 	clrw	x
      000214 90 89            [ 2]  484 	pushw	y
      000216 97               [ 1]  485 	ld	xl, a
      000217 CDr00rE3         [ 4]  486 	call	_convert_int_to_binary
                                    487 ;	main.c: 88: uart_write("DR -> ");
      00021A AEr00r3D         [ 2]  488 	ldw	x, #(___str_7+0)
      00021D CDr00r2E         [ 4]  489 	call	_uart_write
                                    490 ;	main.c: 89: uart_write(rx_binary_chars);
      000220 96               [ 1]  491 	ldw	x, sp
      000221 5C               [ 1]  492 	incw	x
      000222 CDr00r2E         [ 4]  493 	call	_uart_write
                                    494 ;	main.c: 90: uart_write(" <-\n");
      000225 AEr00r18         [ 2]  495 	ldw	x, #(___str_2+0)
      000228 CDr00r2E         [ 4]  496 	call	_uart_write
                                    497 ;	main.c: 91: convert_int_to_binary(UART1_BRR1, rx_binary_chars);
      00022B 96               [ 1]  498 	ldw	x, sp
      00022C 5C               [ 1]  499 	incw	x
      00022D 51               [ 1]  500 	exgw	x, y
      00022E C6 52 32         [ 1]  501 	ld	a, 0x5232
      000231 5F               [ 1]  502 	clrw	x
      000232 90 89            [ 2]  503 	pushw	y
      000234 97               [ 1]  504 	ld	xl, a
      000235 CDr00rE3         [ 4]  505 	call	_convert_int_to_binary
                                    506 ;	main.c: 92: uart_write("BRR1 -> ");
      000238 AEr00r5B         [ 2]  507 	ldw	x, #(___str_10+0)
      00023B CDr00r2E         [ 4]  508 	call	_uart_write
                                    509 ;	main.c: 93: uart_write(rx_binary_chars);
      00023E 96               [ 1]  510 	ldw	x, sp
      00023F 5C               [ 1]  511 	incw	x
      000240 CDr00r2E         [ 4]  512 	call	_uart_write
                                    513 ;	main.c: 94: uart_write(" <-\n");
      000243 AEr00r18         [ 2]  514 	ldw	x, #(___str_2+0)
      000246 CDr00r2E         [ 4]  515 	call	_uart_write
                                    516 ;	main.c: 95: convert_int_to_binary(UART1_BRR2, rx_binary_chars);
      000249 96               [ 1]  517 	ldw	x, sp
      00024A 5C               [ 1]  518 	incw	x
      00024B 51               [ 1]  519 	exgw	x, y
      00024C C6 52 33         [ 1]  520 	ld	a, 0x5233
      00024F 5F               [ 1]  521 	clrw	x
      000250 90 89            [ 2]  522 	pushw	y
      000252 97               [ 1]  523 	ld	xl, a
      000253 CDr00rE3         [ 4]  524 	call	_convert_int_to_binary
                                    525 ;	main.c: 96: uart_write("BRR2 -> ");
      000256 AEr00r64         [ 2]  526 	ldw	x, #(___str_11+0)
      000259 CDr00r2E         [ 4]  527 	call	_uart_write
                                    528 ;	main.c: 97: uart_write(rx_binary_chars);
      00025C 96               [ 1]  529 	ldw	x, sp
      00025D 5C               [ 1]  530 	incw	x
      00025E CDr00r2E         [ 4]  531 	call	_uart_write
                                    532 ;	main.c: 98: uart_write(" <-\n");
      000261 AEr00r18         [ 2]  533 	ldw	x, #(___str_2+0)
      000264 CDr00r2E         [ 4]  534 	call	_uart_write
                                    535 ;	main.c: 99: convert_int_to_binary(UART1_CR1, rx_binary_chars);
      000267 96               [ 1]  536 	ldw	x, sp
      000268 5C               [ 1]  537 	incw	x
      000269 51               [ 1]  538 	exgw	x, y
      00026A C6 52 34         [ 1]  539 	ld	a, 0x5234
      00026D 5F               [ 1]  540 	clrw	x
      00026E 90 89            [ 2]  541 	pushw	y
      000270 97               [ 1]  542 	ld	xl, a
      000271 CDr00rE3         [ 4]  543 	call	_convert_int_to_binary
                                    544 ;	main.c: 100: uart_write("CR1 -> ");
      000274 AEr00r2D         [ 2]  545 	ldw	x, #(___str_5+0)
      000277 CDr00r2E         [ 4]  546 	call	_uart_write
                                    547 ;	main.c: 101: uart_write(rx_binary_chars);
      00027A 96               [ 1]  548 	ldw	x, sp
      00027B 5C               [ 1]  549 	incw	x
      00027C CDr00r2E         [ 4]  550 	call	_uart_write
                                    551 ;	main.c: 102: uart_write(" <-\n");
      00027F AEr00r18         [ 2]  552 	ldw	x, #(___str_2+0)
      000282 CDr00r2E         [ 4]  553 	call	_uart_write
                                    554 ;	main.c: 103: convert_int_to_binary(UART1_CR2, rx_binary_chars);
      000285 96               [ 1]  555 	ldw	x, sp
      000286 5C               [ 1]  556 	incw	x
      000287 51               [ 1]  557 	exgw	x, y
      000288 C6 52 35         [ 1]  558 	ld	a, 0x5235
      00028B 5F               [ 1]  559 	clrw	x
      00028C 90 89            [ 2]  560 	pushw	y
      00028E 97               [ 1]  561 	ld	xl, a
      00028F CDr00rE3         [ 4]  562 	call	_convert_int_to_binary
                                    563 ;	main.c: 104: uart_write("CR2 -> ");
      000292 AEr00r35         [ 2]  564 	ldw	x, #(___str_6+0)
      000295 CDr00r2E         [ 4]  565 	call	_uart_write
                                    566 ;	main.c: 105: uart_write(rx_binary_chars);
      000298 96               [ 1]  567 	ldw	x, sp
      000299 5C               [ 1]  568 	incw	x
      00029A CDr00r2E         [ 4]  569 	call	_uart_write
                                    570 ;	main.c: 106: uart_write(" <-\n");
      00029D AEr00r18         [ 2]  571 	ldw	x, #(___str_2+0)
      0002A0 CDr00r2E         [ 4]  572 	call	_uart_write
                                    573 ;	main.c: 107: convert_int_to_binary(UART1_CR3, rx_binary_chars);
      0002A3 96               [ 1]  574 	ldw	x, sp
      0002A4 5C               [ 1]  575 	incw	x
      0002A5 51               [ 1]  576 	exgw	x, y
      0002A6 C6 52 36         [ 1]  577 	ld	a, 0x5236
      0002A9 5F               [ 1]  578 	clrw	x
      0002AA 90 89            [ 2]  579 	pushw	y
      0002AC 97               [ 1]  580 	ld	xl, a
      0002AD CDr00rE3         [ 4]  581 	call	_convert_int_to_binary
                                    582 ;	main.c: 108: uart_write("CR3 -> ");
      0002B0 AEr00r6D         [ 2]  583 	ldw	x, #(___str_12+0)
      0002B3 CDr00r2E         [ 4]  584 	call	_uart_write
                                    585 ;	main.c: 109: uart_write(rx_binary_chars);
      0002B6 96               [ 1]  586 	ldw	x, sp
      0002B7 5C               [ 1]  587 	incw	x
      0002B8 CDr00r2E         [ 4]  588 	call	_uart_write
                                    589 ;	main.c: 110: uart_write(" <-\n");
      0002BB AEr00r18         [ 2]  590 	ldw	x, #(___str_2+0)
      0002BE CDr00r2E         [ 4]  591 	call	_uart_write
                                    592 ;	main.c: 111: convert_int_to_binary(UART1_CR4, rx_binary_chars);
      0002C1 96               [ 1]  593 	ldw	x, sp
      0002C2 5C               [ 1]  594 	incw	x
      0002C3 51               [ 1]  595 	exgw	x, y
      0002C4 C6 52 37         [ 1]  596 	ld	a, 0x5237
      0002C7 5F               [ 1]  597 	clrw	x
      0002C8 90 89            [ 2]  598 	pushw	y
      0002CA 97               [ 1]  599 	ld	xl, a
      0002CB CDr00rE3         [ 4]  600 	call	_convert_int_to_binary
                                    601 ;	main.c: 112: uart_write("CR4 -> ");
      0002CE AEr00r75         [ 2]  602 	ldw	x, #(___str_13+0)
      0002D1 CDr00r2E         [ 4]  603 	call	_uart_write
                                    604 ;	main.c: 113: uart_write(rx_binary_chars);
      0002D4 96               [ 1]  605 	ldw	x, sp
      0002D5 5C               [ 1]  606 	incw	x
      0002D6 CDr00r2E         [ 4]  607 	call	_uart_write
                                    608 ;	main.c: 114: uart_write(" <-\n");
      0002D9 AEr00r18         [ 2]  609 	ldw	x, #(___str_2+0)
      0002DC CDr00r2E         [ 4]  610 	call	_uart_write
                                    611 ;	main.c: 115: convert_int_to_binary(UART1_CR5, rx_binary_chars);
      0002DF 96               [ 1]  612 	ldw	x, sp
      0002E0 5C               [ 1]  613 	incw	x
      0002E1 51               [ 1]  614 	exgw	x, y
      0002E2 C6 52 38         [ 1]  615 	ld	a, 0x5238
      0002E5 5F               [ 1]  616 	clrw	x
      0002E6 90 89            [ 2]  617 	pushw	y
      0002E8 97               [ 1]  618 	ld	xl, a
      0002E9 CDr00rE3         [ 4]  619 	call	_convert_int_to_binary
                                    620 ;	main.c: 116: uart_write("CR5 -> ");
      0002EC AEr00r7D         [ 2]  621 	ldw	x, #(___str_14+0)
      0002EF CDr00r2E         [ 4]  622 	call	_uart_write
                                    623 ;	main.c: 117: uart_write(rx_binary_chars);
      0002F2 96               [ 1]  624 	ldw	x, sp
      0002F3 5C               [ 1]  625 	incw	x
      0002F4 CDr00r2E         [ 4]  626 	call	_uart_write
                                    627 ;	main.c: 118: uart_write(" <-\n");
      0002F7 AEr00r18         [ 2]  628 	ldw	x, #(___str_2+0)
      0002FA CDr00r2E         [ 4]  629 	call	_uart_write
                                    630 ;	main.c: 119: convert_int_to_binary(UART1_GTR, rx_binary_chars);
      0002FD 96               [ 1]  631 	ldw	x, sp
      0002FE 5C               [ 1]  632 	incw	x
      0002FF 51               [ 1]  633 	exgw	x, y
      000300 C6 52 39         [ 1]  634 	ld	a, 0x5239
      000303 5F               [ 1]  635 	clrw	x
      000304 90 89            [ 2]  636 	pushw	y
      000306 97               [ 1]  637 	ld	xl, a
      000307 CDr00rE3         [ 4]  638 	call	_convert_int_to_binary
                                    639 ;	main.c: 120: uart_write("GTR -> ");
      00030A AEr00r85         [ 2]  640 	ldw	x, #(___str_15+0)
      00030D CDr00r2E         [ 4]  641 	call	_uart_write
                                    642 ;	main.c: 121: uart_write(rx_binary_chars);
      000310 96               [ 1]  643 	ldw	x, sp
      000311 5C               [ 1]  644 	incw	x
      000312 CDr00r2E         [ 4]  645 	call	_uart_write
                                    646 ;	main.c: 122: uart_write(" <-\n");
      000315 AEr00r18         [ 2]  647 	ldw	x, #(___str_2+0)
      000318 CDr00r2E         [ 4]  648 	call	_uart_write
                                    649 ;	main.c: 123: convert_int_to_binary(UART1_PSCR, rx_binary_chars);
      00031B 96               [ 1]  650 	ldw	x, sp
      00031C 5C               [ 1]  651 	incw	x
      00031D 51               [ 1]  652 	exgw	x, y
      00031E C6 52 3A         [ 1]  653 	ld	a, 0x523a
      000321 5F               [ 1]  654 	clrw	x
      000322 90 89            [ 2]  655 	pushw	y
      000324 97               [ 1]  656 	ld	xl, a
      000325 CDr00rE3         [ 4]  657 	call	_convert_int_to_binary
                                    658 ;	main.c: 124: uart_write("PSCR -> ");
      000328 AEr00r8D         [ 2]  659 	ldw	x, #(___str_16+0)
      00032B CDr00r2E         [ 4]  660 	call	_uart_write
                                    661 ;	main.c: 125: uart_write(rx_binary_chars);
      00032E 96               [ 1]  662 	ldw	x, sp
      00032F 5C               [ 1]  663 	incw	x
      000330 CDr00r2E         [ 4]  664 	call	_uart_write
                                    665 ;	main.c: 126: uart_write(" <-\n");
      000333 AEr00r18         [ 2]  666 	ldw	x, #(___str_2+0)
      000336 CDr00r2E         [ 4]  667 	call	_uart_write
                                    668 ;	main.c: 127: }
      000339 5B 09            [ 2]  669 	addw	sp, #9
      00033B 81               [ 4]  670 	ret
                                    671 ;	main.c: 129: void uart_init(void){
                                    672 ;	-----------------------------------------
                                    673 ;	 function uart_init
                                    674 ;	-----------------------------------------
      00033C                        675 _uart_init:
                                    676 ;	main.c: 130: CLK_CKDIVR = 0;
      00033C 35 00 50 C6      [ 1]  677 	mov	0x50c6+0, #0x00
                                    678 ;	main.c: 133: UART1_CR2 |= UART_CR2_TEN; // Transmitter enable
      000340 72 16 52 35      [ 1]  679 	bset	0x5235, #3
                                    680 ;	main.c: 134: UART1_CR2 |= UART_CR2_REN; // Receiver enable
      000344 72 14 52 35      [ 1]  681 	bset	0x5235, #2
                                    682 ;	main.c: 135: UART1_CR3 &= ~(UART_CR3_STOP1 | UART_CR3_STOP2); // 1 stop bit
      000348 C6 52 36         [ 1]  683 	ld	a, 0x5236
      00034B A4 CF            [ 1]  684 	and	a, #0xcf
      00034D C7 52 36         [ 1]  685 	ld	0x5236, a
                                    686 ;	main.c: 137: UART1_BRR2 = 0x03; UART1_BRR1 = 0x68; // 0x0683 coded funky way (see ref manual)
      000350 35 03 52 33      [ 1]  687 	mov	0x5233+0, #0x03
      000354 35 68 52 32      [ 1]  688 	mov	0x5232+0, #0x68
                                    689 ;	main.c: 138: }
      000358 81               [ 4]  690 	ret
                                    691 ;	main.c: 142: void i2c_init(void) {
                                    692 ;	-----------------------------------------
                                    693 ;	 function i2c_init
                                    694 ;	-----------------------------------------
      000359                        695 _i2c_init:
                                    696 ;	main.c: 148: I2C_CR1 = I2C_CR1 & ~0x01;      // PE=0, disable I2C before setup
      000359 72 11 52 10      [ 1]  697 	bres	0x5210, #0
                                    698 ;	main.c: 149: I2C_FREQR= 16;                  // peripheral frequence =16MHz
      00035D 35 10 52 12      [ 1]  699 	mov	0x5212+0, #0x10
                                    700 ;	main.c: 150: I2C_CCRH = 0;                   // =0
      000361 35 00 52 1C      [ 1]  701 	mov	0x521c+0, #0x00
                                    702 ;	main.c: 151: I2C_CCRL = 80;                  // 100kHz for I2C
      000365 35 50 52 1B      [ 1]  703 	mov	0x521b+0, #0x50
                                    704 ;	main.c: 152: I2C_CCRH = I2C_CCRH & ~0x80;    // set standart mode(100кHz)
      000369 72 1F 52 1C      [ 1]  705 	bres	0x521c, #7
                                    706 ;	main.c: 153: I2C_OARH = I2C_OARH & ~0x80;    // 7-bit address mode
      00036D 72 1F 52 14      [ 1]  707 	bres	0x5214, #7
                                    708 ;	main.c: 154: I2C_OARH = I2C_OARH | 0x40;     // see reference manual
      000371 72 1C 52 14      [ 1]  709 	bset	0x5214, #6
                                    710 ;	main.c: 155: I2C_CR1 = I2C_CR1 | 0x01;       // PE=1, enable I2C
      000375 72 10 52 10      [ 1]  711 	bset	0x5210, #0
                                    712 ;	main.c: 156: }
      000379 81               [ 4]  713 	ret
                                    714 ;	main.c: 160: void i2c_start(void) {
                                    715 ;	-----------------------------------------
                                    716 ;	 function i2c_start
                                    717 ;	-----------------------------------------
      00037A                        718 _i2c_start:
                                    719 ;	main.c: 161: I2C_CR2 = I2C_CR2 | (1 << 0); // Отправляем стартовый сигнал
      00037A 72 10 52 11      [ 1]  720 	bset	0x5211, #0
                                    721 ;	main.c: 162: while(!(I2C_SR1 & (1 << 0)));
      00037E                        722 00101$:
      00037E 72 01 52 17 FB   [ 2]  723 	btjf	0x5217, #0, 00101$
                                    724 ;	main.c: 164: }
      000383 81               [ 4]  725 	ret
                                    726 ;	main.c: 166: void i2c_send_address(uint8_t address) {
                                    727 ;	-----------------------------------------
                                    728 ;	 function i2c_send_address
                                    729 ;	-----------------------------------------
      000384                        730 _i2c_send_address:
                                    731 ;	main.c: 167: I2C_DR = address << 1; // Отправка адреса устройства с битом на запись
      000384 48               [ 1]  732 	sll	a
      000385 C7 52 16         [ 1]  733 	ld	0x5216, a
                                    734 ;	main.c: 168: while (!(I2C_SR1 & (1 << 1)) && !(I2C_SR2 & (1 << 2)));
      000388                        735 00102$:
      000388 72 03 52 17 01   [ 2]  736 	btjf	0x5217, #1, 00117$
      00038D 81               [ 4]  737 	ret
      00038E                        738 00117$:
      00038E 72 05 52 18 F5   [ 2]  739 	btjf	0x5218, #2, 00102$
                                    740 ;	main.c: 169: }
      000393 81               [ 4]  741 	ret
                                    742 ;	main.c: 171: void i2c_stop(void) {
                                    743 ;	-----------------------------------------
                                    744 ;	 function i2c_stop
                                    745 ;	-----------------------------------------
      000394                        746 _i2c_stop:
                                    747 ;	main.c: 172: I2C_CR2 = I2C_CR2 | (1 << 1); // Отправка стопового сигнала
      000394 72 12 52 11      [ 1]  748 	bset	0x5211, #1
                                    749 ;	main.c: 174: }
      000398 81               [ 4]  750 	ret
                                    751 ;	main.c: 178: void i2c_scan(void) {
                                    752 ;	-----------------------------------------
                                    753 ;	 function i2c_scan
                                    754 ;	-----------------------------------------
      000399                        755 _i2c_scan:
      000399 52 05            [ 2]  756 	sub	sp, #5
                                    757 ;	main.c: 179: for (uint8_t addr = 1; addr < 127; addr++) {
      00039B A6 01            [ 1]  758 	ld	a, #0x01
      00039D 6B 05            [ 1]  759 	ld	(0x05, sp), a
      00039F                        760 00105$:
      00039F 7B 05            [ 1]  761 	ld	a, (0x05, sp)
      0003A1 A1 7F            [ 1]  762 	cp	a, #0x7f
      0003A3 24 40            [ 1]  763 	jrnc	00107$
                                    764 ;	main.c: 180: i2c_start();
      0003A5 CDr03r7A         [ 4]  765 	call	_i2c_start
                                    766 ;	main.c: 181: i2c_send_address(addr);
      0003A8 7B 05            [ 1]  767 	ld	a, (0x05, sp)
      0003AA CDr03r84         [ 4]  768 	call	_i2c_send_address
                                    769 ;	main.c: 182: if (!(I2C_SR2 & (1 << 2))) { // Проверка на ACK
      0003AD 72 04 52 18 28   [ 2]  770 	btjt	0x5218, #2, 00102$
                                    771 ;	main.c: 184: uart_write("SM ");
      0003B2 AEr00r96         [ 2]  772 	ldw	x, #(___str_17+0)
      0003B5 CDr00r2E         [ 4]  773 	call	_uart_write
                                    774 ;	main.c: 185: char rx_int_chars[4]={0};
      0003B8 0F 01            [ 1]  775 	clr	(0x01, sp)
      0003BA 0F 02            [ 1]  776 	clr	(0x02, sp)
      0003BC 0F 03            [ 1]  777 	clr	(0x03, sp)
      0003BE 0F 04            [ 1]  778 	clr	(0x04, sp)
                                    779 ;	main.c: 186: convert_int_to_chars(addr, rx_int_chars);
      0003C0 96               [ 1]  780 	ldw	x, sp
      0003C1 5C               [ 1]  781 	incw	x
      0003C2 7B 05            [ 1]  782 	ld	a, (0x05, sp)
      0003C4 CDr00r5E         [ 4]  783 	call	_convert_int_to_chars
                                    784 ;	main.c: 187: uart_write(rx_int_chars); 
      0003C7 96               [ 1]  785 	ldw	x, sp
      0003C8 5C               [ 1]  786 	incw	x
      0003C9 CDr00r2E         [ 4]  787 	call	_uart_write
                                    788 ;	main.c: 188: uart_write("\r\n");
      0003CC AEr00r9A         [ 2]  789 	ldw	x, #(___str_18+0)
      0003CF CDr00r2E         [ 4]  790 	call	_uart_write
                                    791 ;	main.c: 189: current_dev = addr;
      0003D2 7B 05            [ 1]  792 	ld	a, (0x05, sp)
      0003D4 C7u01u00         [ 1]  793 	ld	_current_dev+0, a
                                    794 ;	main.c: 190: status_check();
      0003D7 CDr01r1B         [ 4]  795 	call	_status_check
      0003DA                        796 00102$:
                                    797 ;	main.c: 192: i2c_stop();
      0003DA CDr03r94         [ 4]  798 	call	_i2c_stop
                                    799 ;	main.c: 193: I2C_SR2 = I2C_SR2 & ~(1 << 2); // Очистка флага ошибки
      0003DD 72 15 52 18      [ 1]  800 	bres	0x5218, #2
                                    801 ;	main.c: 179: for (uint8_t addr = 1; addr < 127; addr++) {
      0003E1 0C 05            [ 1]  802 	inc	(0x05, sp)
      0003E3 20 BA            [ 2]  803 	jra	00105$
      0003E5                        804 00107$:
                                    805 ;	main.c: 197: }
      0003E5 5B 05            [ 2]  806 	addw	sp, #5
      0003E7 81               [ 4]  807 	ret
                                    808 ;	main.c: 200: int uart_read(void)
                                    809 ;	-----------------------------------------
                                    810 ;	 function uart_read
                                    811 ;	-----------------------------------------
      0003E8                        812 _uart_read:
      0003E8 52 0B            [ 2]  813 	sub	sp, #11
                                    814 ;	main.c: 202: char rx_binary_chars[9]={0};
      0003EA 0F 01            [ 1]  815 	clr	(0x01, sp)
      0003EC 0F 02            [ 1]  816 	clr	(0x02, sp)
      0003EE 0F 03            [ 1]  817 	clr	(0x03, sp)
      0003F0 0F 04            [ 1]  818 	clr	(0x04, sp)
      0003F2 0F 05            [ 1]  819 	clr	(0x05, sp)
      0003F4 0F 06            [ 1]  820 	clr	(0x06, sp)
      0003F6 0F 07            [ 1]  821 	clr	(0x07, sp)
      0003F8 0F 08            [ 1]  822 	clr	(0x08, sp)
      0003FA 0F 09            [ 1]  823 	clr	(0x09, sp)
                                    824 ;	main.c: 203: for(int i = 0; i < 256; i++)
      0003FC 5F               [ 1]  825 	clrw	x
      0003FD                        826 00112$:
      0003FD A3 01 00         [ 2]  827 	cpw	x, #0x0100
      000400 2E 09            [ 1]  828 	jrsge	00101$
                                    829 ;	main.c: 205: buffer[i] = 0;
      000402 90 93            [ 1]  830 	ldw	y, x
      000404 90 4Fu00u00      [ 1]  831 	clr	((_buffer+0), y)
                                    832 ;	main.c: 203: for(int i = 0; i < 256; i++)
      000408 5C               [ 1]  833 	incw	x
      000409 20 F2            [ 2]  834 	jra	00112$
      00040B                        835 00101$:
                                    836 ;	main.c: 207: int i = 0;
      00040B 5F               [ 1]  837 	clrw	x
      00040C 1F 0A            [ 2]  838 	ldw	(0x0a, sp), x
                                    839 ;	main.c: 208: while(i < 256)
      00040E 90 5F            [ 1]  840 	clrw	y
      000410                        841 00108$:
      000410 90 A3 01 00      [ 2]  842 	cpw	y, #0x0100
      000414 2E 2A            [ 1]  843 	jrsge	00110$
                                    844 ;	main.c: 210: while(!(UART1_SR & UART_SR_RXNE));
      000416                        845 00102$:
      000416 72 0B 52 30 FB   [ 2]  846 	btjf	0x5230, #5, 00102$
                                    847 ;	main.c: 211: buffer[i] = UART1_DR;
      00041B 93               [ 1]  848 	ldw	x, y
      00041C 1Cr00r00         [ 2]  849 	addw	x, #(_buffer+0)
      00041F C6 52 31         [ 1]  850 	ld	a, 0x5231
      000422 F7               [ 1]  851 	ld	(x), a
                                    852 ;	main.c: 212: if(buffer[i] == '\n' || buffer[i] == '\0')
      000423 A1 0A            [ 1]  853 	cp	a, #0x0a
      000425 27 03            [ 1]  854 	jreq	00105$
      000427 F6               [ 1]  855 	ld	a, (x)
      000428 26 10            [ 1]  856 	jrne	00106$
      00042A                        857 00105$:
                                    858 ;	main.c: 214: buffer[i] = '\0';
      00042A 1E 0A            [ 2]  859 	ldw	x, (0x0a, sp)
      00042C 72 4Fu00u00      [ 1]  860 	clr	((_buffer+0), x)
                                    861 ;	main.c: 215: uart_write("flag_S");
      000430 AEr00r9D         [ 2]  862 	ldw	x, #(___str_19+0)
      000433 CDr00r2E         [ 4]  863 	call	_uart_write
                                    864 ;	main.c: 216: return 1;
      000436 5F               [ 1]  865 	clrw	x
      000437 5C               [ 1]  866 	incw	x
      000438 20 07            [ 2]  867 	jra	00114$
      00043A                        868 00106$:
                                    869 ;	main.c: 218: i++;
      00043A 90 5C            [ 1]  870 	incw	y
      00043C 17 0A            [ 2]  871 	ldw	(0x0a, sp), y
      00043E 20 D0            [ 2]  872 	jra	00108$
      000440                        873 00110$:
                                    874 ;	main.c: 220: return 0;
      000440 5F               [ 1]  875 	clrw	x
      000441                        876 00114$:
                                    877 ;	main.c: 246: }
      000441 5B 0B            [ 2]  878 	addw	sp, #11
      000443 81               [ 4]  879 	ret
                                    880 ;	main.c: 249: int main(void)
                                    881 ;	-----------------------------------------
                                    882 ;	 function main
                                    883 ;	-----------------------------------------
      000444                        884 _main:
                                    885 ;	main.c: 251: uart_init();
      000444 CDr03r3C         [ 4]  886 	call	_uart_init
                                    887 ;	main.c: 252: uart_write("SS\n");
      000447 AEr00rA4         [ 2]  888 	ldw	x, #(___str_20+0)
      00044A CDr00r2E         [ 4]  889 	call	_uart_write
                                    890 ;	main.c: 254: while(uart_read())
      00044D                        891 00102$:
      00044D CDr03rE8         [ 4]  892 	call	_uart_read
      000450 5D               [ 2]  893 	tnzw	x
      000451 27 29            [ 1]  894 	jreq	00104$
                                    895 ;	main.c: 256: uart_write("\n>buffer start<\n");
      000453 AEr00rA8         [ 2]  896 	ldw	x, #(___str_21+0)
      000456 CDr00r2E         [ 4]  897 	call	_uart_write
                                    898 ;	main.c: 257: for(int i = 0; i < 256; i++)
      000459 5F               [ 1]  899 	clrw	x
      00045A                        900 00106$:
      00045A A3 01 00         [ 2]  901 	cpw	x, #0x0100
      00045D 2E 15            [ 1]  902 	jrsge	00101$
                                    903 ;	main.c: 259: uart_write(&buffer[i] + '\0');
      00045F 90 93            [ 1]  904 	ldw	y, x
      000461 72 A9r00r00      [ 2]  905 	addw	y, #(_buffer+0)
      000465 89               [ 2]  906 	pushw	x
      000466 93               [ 1]  907 	ldw	x, y
      000467 CDr00r2E         [ 4]  908 	call	_uart_write
      00046A AEr00rB9         [ 2]  909 	ldw	x, #(___str_22+0)
      00046D CDr00r2E         [ 4]  910 	call	_uart_write
      000470 85               [ 2]  911 	popw	x
                                    912 ;	main.c: 257: for(int i = 0; i < 256; i++)
      000471 5C               [ 1]  913 	incw	x
      000472 20 E6            [ 2]  914 	jra	00106$
      000474                        915 00101$:
                                    916 ;	main.c: 262: uart_write("> buffer end <");
      000474 AEr00rBB         [ 2]  917 	ldw	x, #(___str_23+0)
      000477 CDr00r2E         [ 4]  918 	call	_uart_write
      00047A 20 D1            [ 2]  919 	jra	00102$
      00047C                        920 00104$:
                                    921 ;	main.c: 264: i2c_init();
      00047C CDr03r59         [ 4]  922 	call	_i2c_init
                                    923 ;	main.c: 268: i2c_scan(); 
      00047F CDr03r99         [ 4]  924 	call	_i2c_scan
                                    925 ;	main.c: 270: return 0;
      000482 5F               [ 1]  926 	clrw	x
                                    927 ;	main.c: 271: }
      000483 81               [ 4]  928 	ret
                                    929 	.area CODE
                                    930 	.area CONST
                                    931 	.area CONST
      000000                        932 ___str_0:
      000000 0A                     933 	.db 0x0a
      000001 49 32 43 5F 52 45 47   934 	.ascii "I2C_REGS >.<"
             53 20 3E 2E 3C
      00000D 0A                     935 	.db 0x0a
      00000E 00                     936 	.db 0x00
                                    937 	.area CODE
                                    938 	.area CONST
      00000F                        939 ___str_1:
      00000F 0A                     940 	.db 0x0a
      000010 53 52 31 20 2D 3E 20   941 	.ascii "SR1 -> "
      000017 00                     942 	.db 0x00
                                    943 	.area CODE
                                    944 	.area CONST
      000018                        945 ___str_2:
      000018 20 3C 2D               946 	.ascii " <-"
      00001B 0A                     947 	.db 0x0a
      00001C 00                     948 	.db 0x00
                                    949 	.area CODE
                                    950 	.area CONST
      00001D                        951 ___str_3:
      00001D 53 52 32 20 2D 3E 20   952 	.ascii "SR2 -> "
      000024 00                     953 	.db 0x00
                                    954 	.area CODE
                                    955 	.area CONST
      000025                        956 ___str_4:
      000025 53 52 33 20 2D 3E 20   957 	.ascii "SR3 -> "
      00002C 00                     958 	.db 0x00
                                    959 	.area CODE
                                    960 	.area CONST
      00002D                        961 ___str_5:
      00002D 43 52 31 20 2D 3E 20   962 	.ascii "CR1 -> "
      000034 00                     963 	.db 0x00
                                    964 	.area CODE
                                    965 	.area CONST
      000035                        966 ___str_6:
      000035 43 52 32 20 2D 3E 20   967 	.ascii "CR2 -> "
      00003C 00                     968 	.db 0x00
                                    969 	.area CODE
                                    970 	.area CONST
      00003D                        971 ___str_7:
      00003D 44 52 20 2D 3E 20      972 	.ascii "DR -> "
      000043 00                     973 	.db 0x00
                                    974 	.area CODE
                                    975 	.area CONST
      000044                        976 ___str_8:
      000044 55 41 52 54 5F 52 45   977 	.ascii "UART_REGS >.<"
             47 53 20 3E 2E 3C
      000051 0A                     978 	.db 0x0a
      000052 00                     979 	.db 0x00
                                    980 	.area CODE
                                    981 	.area CONST
      000053                        982 ___str_9:
      000053 0A                     983 	.db 0x0a
      000054 53 52 20 2D 3E 20      984 	.ascii "SR -> "
      00005A 00                     985 	.db 0x00
                                    986 	.area CODE
                                    987 	.area CONST
      00005B                        988 ___str_10:
      00005B 42 52 52 31 20 2D 3E   989 	.ascii "BRR1 -> "
             20
      000063 00                     990 	.db 0x00
                                    991 	.area CODE
                                    992 	.area CONST
      000064                        993 ___str_11:
      000064 42 52 52 32 20 2D 3E   994 	.ascii "BRR2 -> "
             20
      00006C 00                     995 	.db 0x00
                                    996 	.area CODE
                                    997 	.area CONST
      00006D                        998 ___str_12:
      00006D 43 52 33 20 2D 3E 20   999 	.ascii "CR3 -> "
      000074 00                    1000 	.db 0x00
                                   1001 	.area CODE
                                   1002 	.area CONST
      000075                       1003 ___str_13:
      000075 43 52 34 20 2D 3E 20  1004 	.ascii "CR4 -> "
      00007C 00                    1005 	.db 0x00
                                   1006 	.area CODE
                                   1007 	.area CONST
      00007D                       1008 ___str_14:
      00007D 43 52 35 20 2D 3E 20  1009 	.ascii "CR5 -> "
      000084 00                    1010 	.db 0x00
                                   1011 	.area CODE
                                   1012 	.area CONST
      000085                       1013 ___str_15:
      000085 47 54 52 20 2D 3E 20  1014 	.ascii "GTR -> "
      00008C 00                    1015 	.db 0x00
                                   1016 	.area CODE
                                   1017 	.area CONST
      00008D                       1018 ___str_16:
      00008D 50 53 43 52 20 2D 3E  1019 	.ascii "PSCR -> "
             20
      000095 00                    1020 	.db 0x00
                                   1021 	.area CODE
                                   1022 	.area CONST
      000096                       1023 ___str_17:
      000096 53 4D 20              1024 	.ascii "SM "
      000099 00                    1025 	.db 0x00
                                   1026 	.area CODE
                                   1027 	.area CONST
      00009A                       1028 ___str_18:
      00009A 0D                    1029 	.db 0x0d
      00009B 0A                    1030 	.db 0x0a
      00009C 00                    1031 	.db 0x00
                                   1032 	.area CODE
                                   1033 	.area CONST
      00009D                       1034 ___str_19:
      00009D 66 6C 61 67 5F 53     1035 	.ascii "flag_S"
      0000A3 00                    1036 	.db 0x00
                                   1037 	.area CODE
                                   1038 	.area CONST
      0000A4                       1039 ___str_20:
      0000A4 53 53                 1040 	.ascii "SS"
      0000A6 0A                    1041 	.db 0x0a
      0000A7 00                    1042 	.db 0x00
                                   1043 	.area CODE
                                   1044 	.area CONST
      0000A8                       1045 ___str_21:
      0000A8 0A                    1046 	.db 0x0a
      0000A9 3E 62 75 66 66 65 72  1047 	.ascii ">buffer start<"
             20 73 74 61 72 74 3C
      0000B7 0A                    1048 	.db 0x0a
      0000B8 00                    1049 	.db 0x00
                                   1050 	.area CODE
                                   1051 	.area CONST
      0000B9                       1052 ___str_22:
      0000B9 20                    1053 	.ascii " "
      0000BA 00                    1054 	.db 0x00
                                   1055 	.area CODE
                                   1056 	.area CONST
      0000BB                       1057 ___str_23:
      0000BB 3E 20 62 75 66 66 65  1058 	.ascii "> buffer end <"
             72 20 65 6E 64 20 3C
      0000C9 00                    1059 	.db 0x00
                                   1060 	.area CODE
                                   1061 	.area INITIALIZER
      000000                       1062 __xinit__buffer:
      000000 00                    1063 	.db #0x00	; 0
      000001 00                    1064 	.db 0x00
      000002 00                    1065 	.db 0x00
      000003 00                    1066 	.db 0x00
      000004 00                    1067 	.db 0x00
      000005 00                    1068 	.db 0x00
      000006 00                    1069 	.db 0x00
      000007 00                    1070 	.db 0x00
      000008 00                    1071 	.db 0x00
      000009 00                    1072 	.db 0x00
      00000A 00                    1073 	.db 0x00
      00000B 00                    1074 	.db 0x00
      00000C 00                    1075 	.db 0x00
      00000D 00                    1076 	.db 0x00
      00000E 00                    1077 	.db 0x00
      00000F 00                    1078 	.db 0x00
      000010 00                    1079 	.db 0x00
      000011 00                    1080 	.db 0x00
      000012 00                    1081 	.db 0x00
      000013 00                    1082 	.db 0x00
      000014 00                    1083 	.db 0x00
      000015 00                    1084 	.db 0x00
      000016 00                    1085 	.db 0x00
      000017 00                    1086 	.db 0x00
      000018 00                    1087 	.db 0x00
      000019 00                    1088 	.db 0x00
      00001A 00                    1089 	.db 0x00
      00001B 00                    1090 	.db 0x00
      00001C 00                    1091 	.db 0x00
      00001D 00                    1092 	.db 0x00
      00001E 00                    1093 	.db 0x00
      00001F 00                    1094 	.db 0x00
      000020 00                    1095 	.db 0x00
      000021 00                    1096 	.db 0x00
      000022 00                    1097 	.db 0x00
      000023 00                    1098 	.db 0x00
      000024 00                    1099 	.db 0x00
      000025 00                    1100 	.db 0x00
      000026 00                    1101 	.db 0x00
      000027 00                    1102 	.db 0x00
      000028 00                    1103 	.db 0x00
      000029 00                    1104 	.db 0x00
      00002A 00                    1105 	.db 0x00
      00002B 00                    1106 	.db 0x00
      00002C 00                    1107 	.db 0x00
      00002D 00                    1108 	.db 0x00
      00002E 00                    1109 	.db 0x00
      00002F 00                    1110 	.db 0x00
      000030 00                    1111 	.db 0x00
      000031 00                    1112 	.db 0x00
      000032 00                    1113 	.db 0x00
      000033 00                    1114 	.db 0x00
      000034 00                    1115 	.db 0x00
      000035 00                    1116 	.db 0x00
      000036 00                    1117 	.db 0x00
      000037 00                    1118 	.db 0x00
      000038 00                    1119 	.db 0x00
      000039 00                    1120 	.db 0x00
      00003A 00                    1121 	.db 0x00
      00003B 00                    1122 	.db 0x00
      00003C 00                    1123 	.db 0x00
      00003D 00                    1124 	.db 0x00
      00003E 00                    1125 	.db 0x00
      00003F 00                    1126 	.db 0x00
      000040 00                    1127 	.db 0x00
      000041 00                    1128 	.db 0x00
      000042 00                    1129 	.db 0x00
      000043 00                    1130 	.db 0x00
      000044 00                    1131 	.db 0x00
      000045 00                    1132 	.db 0x00
      000046 00                    1133 	.db 0x00
      000047 00                    1134 	.db 0x00
      000048 00                    1135 	.db 0x00
      000049 00                    1136 	.db 0x00
      00004A 00                    1137 	.db 0x00
      00004B 00                    1138 	.db 0x00
      00004C 00                    1139 	.db 0x00
      00004D 00                    1140 	.db 0x00
      00004E 00                    1141 	.db 0x00
      00004F 00                    1142 	.db 0x00
      000050 00                    1143 	.db 0x00
      000051 00                    1144 	.db 0x00
      000052 00                    1145 	.db 0x00
      000053 00                    1146 	.db 0x00
      000054 00                    1147 	.db 0x00
      000055 00                    1148 	.db 0x00
      000056 00                    1149 	.db 0x00
      000057 00                    1150 	.db 0x00
      000058 00                    1151 	.db 0x00
      000059 00                    1152 	.db 0x00
      00005A 00                    1153 	.db 0x00
      00005B 00                    1154 	.db 0x00
      00005C 00                    1155 	.db 0x00
      00005D 00                    1156 	.db 0x00
      00005E 00                    1157 	.db 0x00
      00005F 00                    1158 	.db 0x00
      000060 00                    1159 	.db 0x00
      000061 00                    1160 	.db 0x00
      000062 00                    1161 	.db 0x00
      000063 00                    1162 	.db 0x00
      000064 00                    1163 	.db 0x00
      000065 00                    1164 	.db 0x00
      000066 00                    1165 	.db 0x00
      000067 00                    1166 	.db 0x00
      000068 00                    1167 	.db 0x00
      000069 00                    1168 	.db 0x00
      00006A 00                    1169 	.db 0x00
      00006B 00                    1170 	.db 0x00
      00006C 00                    1171 	.db 0x00
      00006D 00                    1172 	.db 0x00
      00006E 00                    1173 	.db 0x00
      00006F 00                    1174 	.db 0x00
      000070 00                    1175 	.db 0x00
      000071 00                    1176 	.db 0x00
      000072 00                    1177 	.db 0x00
      000073 00                    1178 	.db 0x00
      000074 00                    1179 	.db 0x00
      000075 00                    1180 	.db 0x00
      000076 00                    1181 	.db 0x00
      000077 00                    1182 	.db 0x00
      000078 00                    1183 	.db 0x00
      000079 00                    1184 	.db 0x00
      00007A 00                    1185 	.db 0x00
      00007B 00                    1186 	.db 0x00
      00007C 00                    1187 	.db 0x00
      00007D 00                    1188 	.db 0x00
      00007E 00                    1189 	.db 0x00
      00007F 00                    1190 	.db 0x00
      000080 00                    1191 	.db 0x00
      000081 00                    1192 	.db 0x00
      000082 00                    1193 	.db 0x00
      000083 00                    1194 	.db 0x00
      000084 00                    1195 	.db 0x00
      000085 00                    1196 	.db 0x00
      000086 00                    1197 	.db 0x00
      000087 00                    1198 	.db 0x00
      000088 00                    1199 	.db 0x00
      000089 00                    1200 	.db 0x00
      00008A 00                    1201 	.db 0x00
      00008B 00                    1202 	.db 0x00
      00008C 00                    1203 	.db 0x00
      00008D 00                    1204 	.db 0x00
      00008E 00                    1205 	.db 0x00
      00008F 00                    1206 	.db 0x00
      000090 00                    1207 	.db 0x00
      000091 00                    1208 	.db 0x00
      000092 00                    1209 	.db 0x00
      000093 00                    1210 	.db 0x00
      000094 00                    1211 	.db 0x00
      000095 00                    1212 	.db 0x00
      000096 00                    1213 	.db 0x00
      000097 00                    1214 	.db 0x00
      000098 00                    1215 	.db 0x00
      000099 00                    1216 	.db 0x00
      00009A 00                    1217 	.db 0x00
      00009B 00                    1218 	.db 0x00
      00009C 00                    1219 	.db 0x00
      00009D 00                    1220 	.db 0x00
      00009E 00                    1221 	.db 0x00
      00009F 00                    1222 	.db 0x00
      0000A0 00                    1223 	.db 0x00
      0000A1 00                    1224 	.db 0x00
      0000A2 00                    1225 	.db 0x00
      0000A3 00                    1226 	.db 0x00
      0000A4 00                    1227 	.db 0x00
      0000A5 00                    1228 	.db 0x00
      0000A6 00                    1229 	.db 0x00
      0000A7 00                    1230 	.db 0x00
      0000A8 00                    1231 	.db 0x00
      0000A9 00                    1232 	.db 0x00
      0000AA 00                    1233 	.db 0x00
      0000AB 00                    1234 	.db 0x00
      0000AC 00                    1235 	.db 0x00
      0000AD 00                    1236 	.db 0x00
      0000AE 00                    1237 	.db 0x00
      0000AF 00                    1238 	.db 0x00
      0000B0 00                    1239 	.db 0x00
      0000B1 00                    1240 	.db 0x00
      0000B2 00                    1241 	.db 0x00
      0000B3 00                    1242 	.db 0x00
      0000B4 00                    1243 	.db 0x00
      0000B5 00                    1244 	.db 0x00
      0000B6 00                    1245 	.db 0x00
      0000B7 00                    1246 	.db 0x00
      0000B8 00                    1247 	.db 0x00
      0000B9 00                    1248 	.db 0x00
      0000BA 00                    1249 	.db 0x00
      0000BB 00                    1250 	.db 0x00
      0000BC 00                    1251 	.db 0x00
      0000BD 00                    1252 	.db 0x00
      0000BE 00                    1253 	.db 0x00
      0000BF 00                    1254 	.db 0x00
      0000C0 00                    1255 	.db 0x00
      0000C1 00                    1256 	.db 0x00
      0000C2 00                    1257 	.db 0x00
      0000C3 00                    1258 	.db 0x00
      0000C4 00                    1259 	.db 0x00
      0000C5 00                    1260 	.db 0x00
      0000C6 00                    1261 	.db 0x00
      0000C7 00                    1262 	.db 0x00
      0000C8 00                    1263 	.db 0x00
      0000C9 00                    1264 	.db 0x00
      0000CA 00                    1265 	.db 0x00
      0000CB 00                    1266 	.db 0x00
      0000CC 00                    1267 	.db 0x00
      0000CD 00                    1268 	.db 0x00
      0000CE 00                    1269 	.db 0x00
      0000CF 00                    1270 	.db 0x00
      0000D0 00                    1271 	.db 0x00
      0000D1 00                    1272 	.db 0x00
      0000D2 00                    1273 	.db 0x00
      0000D3 00                    1274 	.db 0x00
      0000D4 00                    1275 	.db 0x00
      0000D5 00                    1276 	.db 0x00
      0000D6 00                    1277 	.db 0x00
      0000D7 00                    1278 	.db 0x00
      0000D8 00                    1279 	.db 0x00
      0000D9 00                    1280 	.db 0x00
      0000DA 00                    1281 	.db 0x00
      0000DB 00                    1282 	.db 0x00
      0000DC 00                    1283 	.db 0x00
      0000DD 00                    1284 	.db 0x00
      0000DE 00                    1285 	.db 0x00
      0000DF 00                    1286 	.db 0x00
      0000E0 00                    1287 	.db 0x00
      0000E1 00                    1288 	.db 0x00
      0000E2 00                    1289 	.db 0x00
      0000E3 00                    1290 	.db 0x00
      0000E4 00                    1291 	.db 0x00
      0000E5 00                    1292 	.db 0x00
      0000E6 00                    1293 	.db 0x00
      0000E7 00                    1294 	.db 0x00
      0000E8 00                    1295 	.db 0x00
      0000E9 00                    1296 	.db 0x00
      0000EA 00                    1297 	.db 0x00
      0000EB 00                    1298 	.db 0x00
      0000EC 00                    1299 	.db 0x00
      0000ED 00                    1300 	.db 0x00
      0000EE 00                    1301 	.db 0x00
      0000EF 00                    1302 	.db 0x00
      0000F0 00                    1303 	.db 0x00
      0000F1 00                    1304 	.db 0x00
      0000F2 00                    1305 	.db 0x00
      0000F3 00                    1306 	.db 0x00
      0000F4 00                    1307 	.db 0x00
      0000F5 00                    1308 	.db 0x00
      0000F6 00                    1309 	.db 0x00
      0000F7 00                    1310 	.db 0x00
      0000F8 00                    1311 	.db 0x00
      0000F9 00                    1312 	.db 0x00
      0000FA 00                    1313 	.db 0x00
      0000FB 00                    1314 	.db 0x00
      0000FC 00                    1315 	.db 0x00
      0000FD 00                    1316 	.db 0x00
      0000FE 00                    1317 	.db 0x00
      0000FF 00                    1318 	.db 0x00
      000100                       1319 __xinit__current_dev:
      000100 00                    1320 	.db #0x00	; 0
                                   1321 	.area CABS (ABS)
