                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.3.0 #14184 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _uart_write_char
                                     13 	.globl _uart_write_line
                                     14 	.globl _delay
                                     15 	.globl _strlen
                                     16 ;--------------------------------------------------------
                                     17 ; ram data
                                     18 ;--------------------------------------------------------
                                     19 	.area DATA
                                     20 ;--------------------------------------------------------
                                     21 ; ram data
                                     22 ;--------------------------------------------------------
                                     23 	.area INITIALIZED
                                     24 ;--------------------------------------------------------
                                     25 ; Stack segment in internal ram
                                     26 ;--------------------------------------------------------
                                     27 	.area SSEG
      000000                         28 __start__stack:
      000000                         29 	.ds	1
                                     30 
                                     31 ;--------------------------------------------------------
                                     32 ; absolute external ram data
                                     33 ;--------------------------------------------------------
                                     34 	.area DABS (ABS)
                                     35 
                                     36 ; default segment ordering for linker
                                     37 	.area HOME
                                     38 	.area GSINIT
                                     39 	.area GSFINAL
                                     40 	.area CONST
                                     41 	.area INITIALIZER
                                     42 	.area CODE
                                     43 
                                     44 ;--------------------------------------------------------
                                     45 ; interrupt vector
                                     46 ;--------------------------------------------------------
                                     47 	.area HOME
      000000                         48 __interrupt_vect:
      000000 82v00u00u00             49 	int s_GSINIT ; reset
                                     50 ;--------------------------------------------------------
                                     51 ; global & static initialisations
                                     52 ;--------------------------------------------------------
                                     53 	.area HOME
                                     54 	.area GSINIT
                                     55 	.area GSFINAL
                                     56 	.area GSINIT
      000000 CDr00r00         [ 4]   57 	call	___sdcc_external_startup
      000003 4D               [ 1]   58 	tnz	a
      000004 27 03            [ 1]   59 	jreq	__sdcc_init_data
      000006 CCr00r04         [ 2]   60 	jp	__sdcc_program_startup
      000009                         61 __sdcc_init_data:
                                     62 ; stm8_genXINIT() start
      000009 AEr00r00         [ 2]   63 	ldw x, #l_DATA
      00000C 27 07            [ 1]   64 	jreq	00002$
      00000E                         65 00001$:
      00000E 72 4FuFFuFF      [ 1]   66 	clr (s_DATA - 1, x)
      000012 5A               [ 2]   67 	decw x
      000013 26 F9            [ 1]   68 	jrne	00001$
      000015                         69 00002$:
      000015 AEr00r00         [ 2]   70 	ldw	x, #l_INITIALIZER
      000018 27 09            [ 1]   71 	jreq	00004$
      00001A                         72 00003$:
      00001A D6uFFuFF         [ 1]   73 	ld	a, (s_INITIALIZER - 1, x)
      00001D D7uFFuFF         [ 1]   74 	ld	(s_INITIALIZED - 1, x), a
      000020 5A               [ 2]   75 	decw	x
      000021 26 F7            [ 1]   76 	jrne	00003$
      000023                         77 00004$:
                                     78 ; stm8_genXINIT() end
                                     79 	.area GSFINAL
      000000 CCr00r04         [ 2]   80 	jp	__sdcc_program_startup
                                     81 ;--------------------------------------------------------
                                     82 ; Home
                                     83 ;--------------------------------------------------------
                                     84 	.area HOME
                                     85 	.area HOME
      000004                         86 __sdcc_program_startup:
      000004 CCr00r6E         [ 2]   87 	jp	_main
                                     88 ;	return from main will return to caller
                                     89 ;--------------------------------------------------------
                                     90 ; code
                                     91 ;--------------------------------------------------------
                                     92 	.area CODE
                                     93 ;	main.c: 5: void delay(unsigned long count) {
                                     94 ;	-----------------------------------------
                                     95 ;	 function delay
                                     96 ;	-----------------------------------------
      000000                         97 _delay:
      000000 52 08            [ 2]   98 	sub	sp, #8
                                     99 ;	main.c: 6: while (count--)
      000002 16 0D            [ 2]  100 	ldw	y, (0x0d, sp)
      000004 17 07            [ 2]  101 	ldw	(0x07, sp), y
      000006 1E 0B            [ 2]  102 	ldw	x, (0x0b, sp)
      000008                        103 00101$:
      000008 1F 01            [ 2]  104 	ldw	(0x01, sp), x
      00000A 7B 07            [ 1]  105 	ld	a, (0x07, sp)
      00000C 6B 03            [ 1]  106 	ld	(0x03, sp), a
      00000E 7B 08            [ 1]  107 	ld	a, (0x08, sp)
      000010 16 07            [ 2]  108 	ldw	y, (0x07, sp)
      000012 72 A2 00 01      [ 2]  109 	subw	y, #0x0001
      000016 17 07            [ 2]  110 	ldw	(0x07, sp), y
      000018 24 01            [ 1]  111 	jrnc	00117$
      00001A 5A               [ 2]  112 	decw	x
      00001B                        113 00117$:
      00001B 4D               [ 1]  114 	tnz	a
      00001C 26 08            [ 1]  115 	jrne	00118$
      00001E 16 02            [ 2]  116 	ldw	y, (0x02, sp)
      000020 26 04            [ 1]  117 	jrne	00118$
      000022 0D 01            [ 1]  118 	tnz	(0x01, sp)
      000024 27 03            [ 1]  119 	jreq	00104$
      000026                        120 00118$:
                                    121 ;	main.c: 7: nop();
      000026 9D               [ 1]  122 	nop
      000027 20 DF            [ 2]  123 	jra	00101$
      000029                        124 00104$:
                                    125 ;	main.c: 8: }
      000029 1E 09            [ 2]  126 	ldw	x, (9, sp)
      00002B 5B 0E            [ 2]  127 	addw	sp, #14
      00002D FC               [ 2]  128 	jp	(x)
                                    129 ;	main.c: 10: int uart_write_line(const char *str) {
                                    130 ;	-----------------------------------------
                                    131 ;	 function uart_write_line
                                    132 ;	-----------------------------------------
      00002E                        133 _uart_write_line:
      00002E 52 05            [ 2]  134 	sub	sp, #5
      000030 1F 03            [ 2]  135 	ldw	(0x03, sp), x
                                    136 ;	main.c: 12: for(i = 0; i < strlen(str); i++) {
      000032 0F 05            [ 1]  137 	clr	(0x05, sp)
      000034                        138 00106$:
      000034 1E 03            [ 2]  139 	ldw	x, (0x03, sp)
      000036 CDr00r00         [ 4]  140 	call	_strlen
      000039 1F 01            [ 2]  141 	ldw	(0x01, sp), x
      00003B 5F               [ 1]  142 	clrw	x
      00003C 7B 05            [ 1]  143 	ld	a, (0x05, sp)
      00003E 97               [ 1]  144 	ld	xl, a
      00003F 13 01            [ 2]  145 	cpw	x, (0x01, sp)
      000041 24 14            [ 1]  146 	jrnc	00104$
                                    147 ;	main.c: 13: while(!(UART1_SR & UART_SR_TXE)); // !Transmit data register empty
      000043                        148 00101$:
      000043 C6 52 30         [ 1]  149 	ld	a, 0x5230
      000046 2A FB            [ 1]  150 	jrpl	00101$
                                    151 ;	main.c: 14: UART1_DR = str[i];
      000048 5F               [ 1]  152 	clrw	x
      000049 7B 05            [ 1]  153 	ld	a, (0x05, sp)
      00004B 97               [ 1]  154 	ld	xl, a
      00004C 72 FB 03         [ 2]  155 	addw	x, (0x03, sp)
      00004F F6               [ 1]  156 	ld	a, (x)
      000050 C7 52 31         [ 1]  157 	ld	0x5231, a
                                    158 ;	main.c: 12: for(i = 0; i < strlen(str); i++) {
      000053 0C 05            [ 1]  159 	inc	(0x05, sp)
      000055 20 DD            [ 2]  160 	jra	00106$
      000057                        161 00104$:
                                    162 ;	main.c: 16: return(i); // Bytes sent
      000057 7B 05            [ 1]  163 	ld	a, (0x05, sp)
      000059 5F               [ 1]  164 	clrw	x
      00005A 97               [ 1]  165 	ld	xl, a
                                    166 ;	main.c: 17: }
      00005B 5B 05            [ 2]  167 	addw	sp, #5
      00005D 81               [ 4]  168 	ret
                                    169 ;	main.c: 19: void uart_write_char(char str_char) {
                                    170 ;	-----------------------------------------
                                    171 ;	 function uart_write_char
                                    172 ;	-----------------------------------------
      00005E                        173 _uart_write_char:
      00005E 88               [ 1]  174 	push	a
      00005F 6B 01            [ 1]  175 	ld	(0x01, sp), a
                                    176 ;	main.c: 20: while(!(UART1_SR & UART_SR_TXE)); // !Transmit data register empty
      000061                        177 00101$:
      000061 C6 52 30         [ 1]  178 	ld	a, 0x5230
      000064 2A FB            [ 1]  179 	jrpl	00101$
                                    180 ;	main.c: 21: UART1_DR = str_char;
      000066 AE 52 31         [ 2]  181 	ldw	x, #0x5231
      000069 7B 01            [ 1]  182 	ld	a, (0x01, sp)
      00006B F7               [ 1]  183 	ld	(x), a
                                    184 ;	main.c: 22: }
      00006C 84               [ 1]  185 	pop	a
      00006D 81               [ 4]  186 	ret
                                    187 ;	main.c: 25: int main(void)
                                    188 ;	-----------------------------------------
                                    189 ;	 function main
                                    190 ;	-----------------------------------------
      00006E                        191 _main:
      00006E 88               [ 1]  192 	push	a
                                    193 ;	main.c: 28: CLK_CKDIVR = 0;
      00006F 35 00 50 C6      [ 1]  194 	mov	0x50c6+0, #0x00
                                    195 ;	main.c: 31: UART1_CR2 |= UART_CR2_TEN; // Transmitter enable
      000073 72 16 52 35      [ 1]  196 	bset	0x5235, #3
                                    197 ;	main.c: 33: UART1_CR3 &= ~(UART_CR3_STOP1 | UART_CR3_STOP2); // 1 stop bit
      000077 C6 52 36         [ 1]  198 	ld	a, 0x5236
      00007A A4 CF            [ 1]  199 	and	a, #0xcf
      00007C C7 52 36         [ 1]  200 	ld	0x5236, a
                                    201 ;	main.c: 35: UART1_BRR2 = 0x03; UART1_BRR1 = 0x68; // 0x0683 coded funky way (see ref manual)
      00007F 35 03 52 33      [ 1]  202 	mov	0x5233+0, #0x03
      000083 35 68 52 32      [ 1]  203 	mov	0x5232+0, #0x68
                                    204 ;	main.c: 38: I2C_CR1 = 0x01;  // включаем подключение к шине
      000087 35 01 52 10      [ 1]  205 	mov	0x5210+0, #0x01
                                    206 ;	main.c: 39: I2C_FREQR = 0x01;  
      00008B 35 01 52 12      [ 1]  207 	mov	0x5212+0, #0x01
                                    208 ;	main.c: 40: I2C_CCRL = 0x50;  // Загружаем нижние 8 бит делителя для получения 100 кГц
      00008F 35 50 52 1B      [ 1]  209 	mov	0x521b+0, #0x50
                                    210 ;	main.c: 41: I2C_CCRH = 0x00;  // Обнуляем верхние биты делителя
      000093 35 00 52 1C      [ 1]  211 	mov	0x521c+0, #0x00
                                    212 ;	main.c: 44: while(1) {
      000097                        213 00103$:
                                    214 ;	main.c: 45: uart_write_line("Start Scanning\n");
      000097 AEr00r00         [ 2]  215 	ldw	x, #(___str_0+0)
      00009A CDr00r2E         [ 4]  216 	call	_uart_write_line
                                    217 ;	main.c: 47: for(char addr = 0x00; addr < 0xFF;addr++)
      00009D 0F 01            [ 1]  218 	clr	(0x01, sp)
      00009F                        219 00106$:
      00009F 7B 01            [ 1]  220 	ld	a, (0x01, sp)
      0000A1 A1 FF            [ 1]  221 	cp	a, #0xff
      0000A3 24 F2            [ 1]  222 	jrnc	00103$
                                    223 ;	main.c: 50: uart_write_line("_______Start______\n");
      0000A5 AEr00r10         [ 2]  224 	ldw	x, #(___str_1+0)
      0000A8 CDr00r2E         [ 4]  225 	call	_uart_write_line
                                    226 ;	main.c: 51: uart_write_line("Dev -> ");
      0000AB AEr00r24         [ 2]  227 	ldw	x, #(___str_2+0)
      0000AE CDr00r2E         [ 4]  228 	call	_uart_write_line
                                    229 ;	main.c: 52: uart_write_char(addr);
      0000B1 7B 01            [ 1]  230 	ld	a, (0x01, sp)
      0000B3 CDr00r5E         [ 4]  231 	call	_uart_write_char
                                    232 ;	main.c: 53: uart_write_line(" <-Dev\n");
      0000B6 AEr00r2C         [ 2]  233 	ldw	x, #(___str_3+0)
      0000B9 CDr00r2E         [ 4]  234 	call	_uart_write_line
                                    235 ;	main.c: 56: I2C_DR = addr;
      0000BC AE 52 16         [ 2]  236 	ldw	x, #0x5216
      0000BF 7B 01            [ 1]  237 	ld	a, (0x01, sp)
      0000C1 F7               [ 1]  238 	ld	(x), a
                                    239 ;	main.c: 61: uart_write_line("_______Stop_______\n");
      0000C2 AEr00r34         [ 2]  240 	ldw	x, #(___str_4+0)
      0000C5 CDr00r2E         [ 4]  241 	call	_uart_write_line
                                    242 ;	main.c: 62: delay(2000000L);
      0000C8 4B 80            [ 1]  243 	push	#0x80
      0000CA 4B 84            [ 1]  244 	push	#0x84
      0000CC 4B 1E            [ 1]  245 	push	#0x1e
      0000CE 4B 00            [ 1]  246 	push	#0x00
      0000D0 CDr00r00         [ 4]  247 	call	_delay
                                    248 ;	main.c: 47: for(char addr = 0x00; addr < 0xFF;addr++)
      0000D3 0C 01            [ 1]  249 	inc	(0x01, sp)
      0000D5 20 C8            [ 2]  250 	jra	00106$
                                    251 ;	main.c: 67: }
      0000D7 84               [ 1]  252 	pop	a
      0000D8 81               [ 4]  253 	ret
                                    254 	.area CODE
                                    255 	.area CONST
                                    256 	.area CONST
      000000                        257 ___str_0:
      000000 53 74 61 72 74 20 53   258 	.ascii "Start Scanning"
             63 61 6E 6E 69 6E 67
      00000E 0A                     259 	.db 0x0a
      00000F 00                     260 	.db 0x00
                                    261 	.area CODE
                                    262 	.area CONST
      000010                        263 ___str_1:
      000010 5F 5F 5F 5F 5F 5F 5F   264 	.ascii "_______Start______"
             53 74 61 72 74 5F 5F
             5F 5F 5F 5F
      000022 0A                     265 	.db 0x0a
      000023 00                     266 	.db 0x00
                                    267 	.area CODE
                                    268 	.area CONST
      000024                        269 ___str_2:
      000024 44 65 76 20 2D 3E 20   270 	.ascii "Dev -> "
      00002B 00                     271 	.db 0x00
                                    272 	.area CODE
                                    273 	.area CONST
      00002C                        274 ___str_3:
      00002C 20 3C 2D 44 65 76      275 	.ascii " <-Dev"
      000032 0A                     276 	.db 0x0a
      000033 00                     277 	.db 0x00
                                    278 	.area CODE
                                    279 	.area CONST
      000034                        280 ___str_4:
      000034 5F 5F 5F 5F 5F 5F 5F   281 	.ascii "_______Stop_______"
             53 74 6F 70 5F 5F 5F
             5F 5F 5F 5F
      000046 0A                     282 	.db 0x0a
      000047 00                     283 	.db 0x00
                                    284 	.area CODE
                                    285 	.area INITIALIZER
                                    286 	.area CABS (ABS)
