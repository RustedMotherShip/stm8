                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.3.0 #14184 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _command_switcher
                                     13 	.globl _data_handler
                                     14 	.globl _cm_SW
                                     15 	.globl _cm_SR
                                     16 	.globl _cm_ST
                                     17 	.globl _cm_DB
                                     18 	.globl _cm_RM
                                     19 	.globl _cm_SN
                                     20 	.globl _cm_SM
                                     21 	.globl _i2c_scan
                                     22 	.globl _i2c_read
                                     23 	.globl _i2c_write
                                     24 	.globl _i2c_stop
                                     25 	.globl _i2c_send_address
                                     26 	.globl _i2c_start
                                     27 	.globl _i2c_init
                                     28 	.globl _uart_init
                                     29 	.globl _status_check
                                     30 	.globl _reg_check
                                     31 	.globl _char_buffer_to_int
                                     32 	.globl _get_size_from_buff
                                     33 	.globl _get_addr_from_buff
                                     34 	.globl _convert_int_to_binary
                                     35 	.globl _convert_chars_to_int
                                     36 	.globl _convert_int_to_chars
                                     37 	.globl _uart_read
                                     38 	.globl _UART_RX
                                     39 	.globl _uart_write
                                     40 	.globl _UART_TX
                                     41 	.globl _delay
                                     42 	.globl ___memcpy
                                     43 	.globl _strlen
                                     44 	.globl _memset
                                     45 	.globl _memcmp
                                     46 	.globl _current_dev
                                     47 	.globl _data_buf
                                     48 	.globl _p_bytes
                                     49 	.globl _d_size
                                     50 	.globl _p_size
                                     51 	.globl _d_addr
                                     52 	.globl _a
                                     53 	.globl _buffer
                                     54 	.globl _status_registers
                                     55 ;--------------------------------------------------------
                                     56 ; ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area DATA
                                     59 ;--------------------------------------------------------
                                     60 ; ram data
                                     61 ;--------------------------------------------------------
                                     62 	.area INITIALIZED
      000000                         63 _status_registers::
      000000                         64 	.ds 256
      000100                         65 _buffer::
      000100                         66 	.ds 256
      000200                         67 _a::
      000200                         68 	.ds 3
      000203                         69 _d_addr::
      000203                         70 	.ds 1
      000204                         71 _p_size::
      000204                         72 	.ds 1
      000205                         73 _d_size::
      000205                         74 	.ds 1
      000206                         75 _p_bytes::
      000206                         76 	.ds 1
      000207                         77 _data_buf::
      000207                         78 	.ds 256
      000307                         79 _current_dev::
      000307                         80 	.ds 1
                                     81 ;--------------------------------------------------------
                                     82 ; Stack segment in internal ram
                                     83 ;--------------------------------------------------------
                                     84 	.area SSEG
      000000                         85 __start__stack:
      000000                         86 	.ds	1
                                     87 
                                     88 ;--------------------------------------------------------
                                     89 ; absolute external ram data
                                     90 ;--------------------------------------------------------
                                     91 	.area DABS (ABS)
                                     92 
                                     93 ; default segment ordering for linker
                                     94 	.area HOME
                                     95 	.area GSINIT
                                     96 	.area GSFINAL
                                     97 	.area CONST
                                     98 	.area INITIALIZER
                                     99 	.area CODE
                                    100 
                                    101 ;--------------------------------------------------------
                                    102 ; interrupt vector
                                    103 ;--------------------------------------------------------
                                    104 	.area HOME
      000000                        105 __interrupt_vect:
      000000 82v00u00u00            106 	int s_GSINIT ; reset
                                    107 ;--------------------------------------------------------
                                    108 ; global & static initialisations
                                    109 ;--------------------------------------------------------
                                    110 	.area HOME
                                    111 	.area GSINIT
                                    112 	.area GSFINAL
                                    113 	.area GSINIT
      000000 CDr00r00         [ 4]  114 	call	___sdcc_external_startup
      000003 4D               [ 1]  115 	tnz	a
      000004 27 03            [ 1]  116 	jreq	__sdcc_init_data
      000006 CCr00r04         [ 2]  117 	jp	__sdcc_program_startup
      000009                        118 __sdcc_init_data:
                                    119 ; stm8_genXINIT() start
      000009 AEr00r00         [ 2]  120 	ldw x, #l_DATA
      00000C 27 07            [ 1]  121 	jreq	00002$
      00000E                        122 00001$:
      00000E 72 4FuFFuFF      [ 1]  123 	clr (s_DATA - 1, x)
      000012 5A               [ 2]  124 	decw x
      000013 26 F9            [ 1]  125 	jrne	00001$
      000015                        126 00002$:
      000015 AEr00r00         [ 2]  127 	ldw	x, #l_INITIALIZER
      000018 27 09            [ 1]  128 	jreq	00004$
      00001A                        129 00003$:
      00001A D6uFFuFF         [ 1]  130 	ld	a, (s_INITIALIZER - 1, x)
      00001D D7uFFuFF         [ 1]  131 	ld	(s_INITIALIZED - 1, x), a
      000020 5A               [ 2]  132 	decw	x
      000021 26 F7            [ 1]  133 	jrne	00003$
      000023                        134 00004$:
                                    135 ; stm8_genXINIT() end
                                    136 	.area GSFINAL
      000000 CCr00r04         [ 2]  137 	jp	__sdcc_program_startup
                                    138 ;--------------------------------------------------------
                                    139 ; Home
                                    140 ;--------------------------------------------------------
                                    141 	.area HOME
                                    142 	.area HOME
      000004                        143 __sdcc_program_startup:
      000004 CCr07r1C         [ 2]  144 	jp	_main
                                    145 ;	return from main will return to caller
                                    146 ;--------------------------------------------------------
                                    147 ; code
                                    148 ;--------------------------------------------------------
                                    149 	.area CODE
                                    150 ;	main.c: 27: void delay(unsigned long count) {
                                    151 ;	-----------------------------------------
                                    152 ;	 function delay
                                    153 ;	-----------------------------------------
      000000                        154 _delay:
      000000 52 08            [ 2]  155 	sub	sp, #8
                                    156 ;	main.c: 28: while (count--)
      000002 16 0D            [ 2]  157 	ldw	y, (0x0d, sp)
      000004 17 07            [ 2]  158 	ldw	(0x07, sp), y
      000006 1E 0B            [ 2]  159 	ldw	x, (0x0b, sp)
      000008                        160 00101$:
      000008 1F 01            [ 2]  161 	ldw	(0x01, sp), x
      00000A 7B 07            [ 1]  162 	ld	a, (0x07, sp)
      00000C 6B 03            [ 1]  163 	ld	(0x03, sp), a
      00000E 7B 08            [ 1]  164 	ld	a, (0x08, sp)
      000010 16 07            [ 2]  165 	ldw	y, (0x07, sp)
      000012 72 A2 00 01      [ 2]  166 	subw	y, #0x0001
      000016 17 07            [ 2]  167 	ldw	(0x07, sp), y
      000018 24 01            [ 1]  168 	jrnc	00117$
      00001A 5A               [ 2]  169 	decw	x
      00001B                        170 00117$:
      00001B 4D               [ 1]  171 	tnz	a
      00001C 26 08            [ 1]  172 	jrne	00118$
      00001E 16 02            [ 2]  173 	ldw	y, (0x02, sp)
      000020 26 04            [ 1]  174 	jrne	00118$
      000022 0D 01            [ 1]  175 	tnz	(0x01, sp)
      000024 27 03            [ 1]  176 	jreq	00104$
      000026                        177 00118$:
                                    178 ;	main.c: 29: nop();
      000026 9D               [ 1]  179 	nop
      000027 20 DF            [ 2]  180 	jra	00101$
      000029                        181 00104$:
                                    182 ;	main.c: 30: }
      000029 1E 09            [ 2]  183 	ldw	x, (9, sp)
      00002B 5B 0E            [ 2]  184 	addw	sp, #14
      00002D FC               [ 2]  185 	jp	(x)
                                    186 ;	main.c: 38: void UART_TX(unsigned char value)
                                    187 ;	-----------------------------------------
                                    188 ;	 function UART_TX
                                    189 ;	-----------------------------------------
      00002E                        190 _UART_TX:
                                    191 ;	main.c: 40: UART1_DR = value;
      00002E C7 52 31         [ 1]  192 	ld	0x5231, a
                                    193 ;	main.c: 41: while(!(UART1_SR & UART_SR_TXE));
      000031                        194 00101$:
      000031 C6 52 30         [ 1]  195 	ld	a, 0x5230
      000034 2A FB            [ 1]  196 	jrpl	00101$
                                    197 ;	main.c: 42: }
      000036 81               [ 4]  198 	ret
                                    199 ;	main.c: 44: int uart_write(const char *str) {
                                    200 ;	-----------------------------------------
                                    201 ;	 function uart_write
                                    202 ;	-----------------------------------------
      000037                        203 _uart_write:
      000037 52 05            [ 2]  204 	sub	sp, #5
      000039 1F 03            [ 2]  205 	ldw	(0x03, sp), x
                                    206 ;	main.c: 46: for(i = 0; i < strlen(str); i++) {
      00003B 0F 05            [ 1]  207 	clr	(0x05, sp)
      00003D                        208 00103$:
      00003D 1E 03            [ 2]  209 	ldw	x, (0x03, sp)
      00003F CDr00r00         [ 4]  210 	call	_strlen
      000042 1F 01            [ 2]  211 	ldw	(0x01, sp), x
      000044 7B 05            [ 1]  212 	ld	a, (0x05, sp)
      000046 5F               [ 1]  213 	clrw	x
      000047 97               [ 1]  214 	ld	xl, a
      000048 13 01            [ 2]  215 	cpw	x, (0x01, sp)
      00004A 24 0F            [ 1]  216 	jrnc	00101$
                                    217 ;	main.c: 48: UART_TX(str[i]);
      00004C 5F               [ 1]  218 	clrw	x
      00004D 7B 05            [ 1]  219 	ld	a, (0x05, sp)
      00004F 97               [ 1]  220 	ld	xl, a
      000050 72 FB 03         [ 2]  221 	addw	x, (0x03, sp)
      000053 F6               [ 1]  222 	ld	a, (x)
      000054 CDr00r2E         [ 4]  223 	call	_UART_TX
                                    224 ;	main.c: 46: for(i = 0; i < strlen(str); i++) {
      000057 0C 05            [ 1]  225 	inc	(0x05, sp)
      000059 20 E2            [ 2]  226 	jra	00103$
      00005B                        227 00101$:
                                    228 ;	main.c: 51: return(i); // Bytes sent
      00005B 7B 05            [ 1]  229 	ld	a, (0x05, sp)
      00005D 5F               [ 1]  230 	clrw	x
      00005E 97               [ 1]  231 	ld	xl, a
                                    232 ;	main.c: 52: }
      00005F 5B 05            [ 2]  233 	addw	sp, #5
      000061 81               [ 4]  234 	ret
                                    235 ;	main.c: 53: unsigned char UART_RX(void)
                                    236 ;	-----------------------------------------
                                    237 ;	 function UART_RX
                                    238 ;	-----------------------------------------
      000062                        239 _UART_RX:
                                    240 ;	main.c: 56: while(!(UART1_SR & UART_SR_TXE));
      000062                        241 00101$:
      000062 C6 52 30         [ 1]  242 	ld	a, 0x5230
      000065 2A FB            [ 1]  243 	jrpl	00101$
                                    244 ;	main.c: 58: return UART1_DR;
      000067 C6 52 31         [ 1]  245 	ld	a, 0x5231
                                    246 ;	main.c: 59: }
      00006A 81               [ 4]  247 	ret
                                    248 ;	main.c: 60: int uart_read(void)
                                    249 ;	-----------------------------------------
                                    250 ;	 function uart_read
                                    251 ;	-----------------------------------------
      00006B                        252 _uart_read:
                                    253 ;	main.c: 63: memset(buffer, 0, sizeof(buffer));
      00006B 4B 00            [ 1]  254 	push	#0x00
      00006D 4B 01            [ 1]  255 	push	#0x01
      00006F 5F               [ 1]  256 	clrw	x
      000070 89               [ 2]  257 	pushw	x
      000071 AEr01r00         [ 2]  258 	ldw	x, #(_buffer+0)
      000074 CDr00r00         [ 4]  259 	call	_memset
                                    260 ;	main.c: 66: while(i<256)
      000077 5F               [ 1]  261 	clrw	x
      000078                        262 00105$:
      000078 A3 01 00         [ 2]  263 	cpw	x, #0x0100
      00007B 2E 22            [ 1]  264 	jrsge	00107$
                                    265 ;	main.c: 69: if(UART1_SR & UART_SR_RXNE)
      00007D C6 52 30         [ 1]  266 	ld	a, 0x5230
      000080 A5 20            [ 1]  267 	bcp	a, #0x20
      000082 27 F4            [ 1]  268 	jreq	00105$
                                    269 ;	main.c: 72: buffer[i] = UART_RX();
      000084 90 93            [ 1]  270 	ldw	y, x
      000086 72 A9r01r00      [ 2]  271 	addw	y, #(_buffer+0)
      00008A 89               [ 2]  272 	pushw	x
      00008B 90 89            [ 2]  273 	pushw	y
      00008D CDr00r62         [ 4]  274 	call	_UART_RX
      000090 90 85            [ 2]  275 	popw	y
      000092 85               [ 2]  276 	popw	x
      000093 90 F7            [ 1]  277 	ld	(y), a
                                    278 ;	main.c: 73: if(buffer[i] == '\r\n' )
      000095 A1 0D            [ 1]  279 	cp	a, #0x0d
      000097 26 03            [ 1]  280 	jrne	00102$
                                    281 ;	main.c: 75: return 1;
      000099 5F               [ 1]  282 	clrw	x
      00009A 5C               [ 1]  283 	incw	x
      00009B 81               [ 4]  284 	ret
                                    285 ;	main.c: 76: break;
      00009C                        286 00102$:
                                    287 ;	main.c: 78: i++;
      00009C 5C               [ 1]  288 	incw	x
      00009D 20 D9            [ 2]  289 	jra	00105$
      00009F                        290 00107$:
                                    291 ;	main.c: 82: return 0;
      00009F 5F               [ 1]  292 	clrw	x
                                    293 ;	main.c: 83: }
      0000A0 81               [ 4]  294 	ret
                                    295 ;	main.c: 92: void convert_int_to_chars(uint8_t num, char* rx_int_chars) {
                                    296 ;	-----------------------------------------
                                    297 ;	 function convert_int_to_chars
                                    298 ;	-----------------------------------------
      0000A1                        299 _convert_int_to_chars:
      0000A1 52 0D            [ 2]  300 	sub	sp, #13
      0000A3 6B 0D            [ 1]  301 	ld	(0x0d, sp), a
      0000A5 1F 0B            [ 2]  302 	ldw	(0x0b, sp), x
                                    303 ;	main.c: 95: rx_int_chars[0] = num / 100 + '0';
      0000A7 7B 0D            [ 1]  304 	ld	a, (0x0d, sp)
      0000A9 6B 02            [ 1]  305 	ld	(0x02, sp), a
      0000AB 0F 01            [ 1]  306 	clr	(0x01, sp)
                                    307 ;	main.c: 96: rx_int_chars[1] = num / 10 % 10 + '0';
      0000AD 1E 0B            [ 2]  308 	ldw	x, (0x0b, sp)
      0000AF 5C               [ 1]  309 	incw	x
      0000B0 1F 03            [ 2]  310 	ldw	(0x03, sp), x
                                    311 ;	main.c: 97: rx_int_chars[2] = num % 10 + '0';
      0000B2 1E 0B            [ 2]  312 	ldw	x, (0x0b, sp)
      0000B4 5C               [ 1]  313 	incw	x
      0000B5 5C               [ 1]  314 	incw	x
      0000B6 1F 05            [ 2]  315 	ldw	(0x05, sp), x
                                    316 ;	main.c: 96: rx_int_chars[1] = num / 10 % 10 + '0';
      0000B8 4B 0A            [ 1]  317 	push	#0x0a
      0000BA 4B 00            [ 1]  318 	push	#0x00
      0000BC 1E 03            [ 2]  319 	ldw	x, (0x03, sp)
                                    320 ;	main.c: 97: rx_int_chars[2] = num % 10 + '0';
      0000BE CDr00r00         [ 4]  321 	call	__divsint
      0000C1 1F 07            [ 2]  322 	ldw	(0x07, sp), x
      0000C3 4B 0A            [ 1]  323 	push	#0x0a
      0000C5 4B 00            [ 1]  324 	push	#0x00
      0000C7 1E 03            [ 2]  325 	ldw	x, (0x03, sp)
      0000C9 CDr00r00         [ 4]  326 	call	__modsint
      0000CC 9F               [ 1]  327 	ld	a, xl
      0000CD AB 30            [ 1]  328 	add	a, #0x30
      0000CF 6B 09            [ 1]  329 	ld	(0x09, sp), a
                                    330 ;	main.c: 93: if (num > 99) {
      0000D1 7B 0D            [ 1]  331 	ld	a, (0x0d, sp)
      0000D3 A1 63            [ 1]  332 	cp	a, #0x63
      0000D5 23 29            [ 2]  333 	jrule	00105$
                                    334 ;	main.c: 95: rx_int_chars[0] = num / 100 + '0';
      0000D7 4B 64            [ 1]  335 	push	#0x64
      0000D9 4B 00            [ 1]  336 	push	#0x00
      0000DB 1E 03            [ 2]  337 	ldw	x, (0x03, sp)
      0000DD CDr00r00         [ 4]  338 	call	__divsint
      0000E0 9F               [ 1]  339 	ld	a, xl
      0000E1 AB 30            [ 1]  340 	add	a, #0x30
      0000E3 1E 0B            [ 2]  341 	ldw	x, (0x0b, sp)
      0000E5 F7               [ 1]  342 	ld	(x), a
                                    343 ;	main.c: 96: rx_int_chars[1] = num / 10 % 10 + '0';
      0000E6 4B 0A            [ 1]  344 	push	#0x0a
      0000E8 4B 00            [ 1]  345 	push	#0x00
      0000EA 1E 09            [ 2]  346 	ldw	x, (0x09, sp)
      0000EC CDr00r00         [ 4]  347 	call	__modsint
      0000EF 9F               [ 1]  348 	ld	a, xl
      0000F0 AB 30            [ 1]  349 	add	a, #0x30
      0000F2 1E 03            [ 2]  350 	ldw	x, (0x03, sp)
      0000F4 F7               [ 1]  351 	ld	(x), a
                                    352 ;	main.c: 97: rx_int_chars[2] = num % 10 + '0';
      0000F5 1E 05            [ 2]  353 	ldw	x, (0x05, sp)
      0000F7 7B 09            [ 1]  354 	ld	a, (0x09, sp)
      0000F9 F7               [ 1]  355 	ld	(x), a
                                    356 ;	main.c: 98: rx_int_chars[3] ='\0';
      0000FA 1E 0B            [ 2]  357 	ldw	x, (0x0b, sp)
      0000FC 6F 03            [ 1]  358 	clr	(0x0003, x)
      0000FE 20 23            [ 2]  359 	jra	00107$
      000100                        360 00105$:
                                    361 ;	main.c: 100: } else if (num > 9) {
      000100 7B 0D            [ 1]  362 	ld	a, (0x0d, sp)
      000102 A1 09            [ 1]  363 	cp	a, #0x09
      000104 23 13            [ 2]  364 	jrule	00102$
                                    365 ;	main.c: 102: rx_int_chars[0] = num / 10 + '0';
      000106 7B 08            [ 1]  366 	ld	a, (0x08, sp)
      000108 6B 0A            [ 1]  367 	ld	(0x0a, sp), a
      00010A AB 30            [ 1]  368 	add	a, #0x30
      00010C 1E 0B            [ 2]  369 	ldw	x, (0x0b, sp)
      00010E F7               [ 1]  370 	ld	(x), a
                                    371 ;	main.c: 103: rx_int_chars[1] = num % 10 + '0';
      00010F 1E 03            [ 2]  372 	ldw	x, (0x03, sp)
      000111 7B 09            [ 1]  373 	ld	a, (0x09, sp)
      000113 F7               [ 1]  374 	ld	(x), a
                                    375 ;	main.c: 104: rx_int_chars[2] ='\0'; // Заканчиваем строку символом конца строки
      000114 1E 05            [ 2]  376 	ldw	x, (0x05, sp)
      000116 7F               [ 1]  377 	clr	(x)
      000117 20 0A            [ 2]  378 	jra	00107$
      000119                        379 00102$:
                                    380 ;	main.c: 107: rx_int_chars[0] = num + '0';
      000119 7B 0D            [ 1]  381 	ld	a, (0x0d, sp)
      00011B AB 30            [ 1]  382 	add	a, #0x30
      00011D 1E 0B            [ 2]  383 	ldw	x, (0x0b, sp)
      00011F F7               [ 1]  384 	ld	(x), a
                                    385 ;	main.c: 108: rx_int_chars[1] ='\0';
      000120 1E 03            [ 2]  386 	ldw	x, (0x03, sp)
      000122 7F               [ 1]  387 	clr	(x)
      000123                        388 00107$:
                                    389 ;	main.c: 110: }
      000123 5B 0D            [ 2]  390 	addw	sp, #13
      000125 81               [ 4]  391 	ret
                                    392 ;	main.c: 112: uint8_t convert_chars_to_int(char* rx_chars_int, const int i) {
                                    393 ;	-----------------------------------------
                                    394 ;	 function convert_chars_to_int
                                    395 ;	-----------------------------------------
      000126                        396 _convert_chars_to_int:
      000126 52 03            [ 2]  397 	sub	sp, #3
      000128 1F 02            [ 2]  398 	ldw	(0x02, sp), x
                                    399 ;	main.c: 113: uint8_t result = 0;
      00012A 4F               [ 1]  400 	clr	a
                                    401 ;	main.c: 115: for (int o = 0; o < i; o++) {
      00012B 5F               [ 1]  402 	clrw	x
      00012C                        403 00103$:
      00012C 13 06            [ 2]  404 	cpw	x, (0x06, sp)
      00012E 2E 18            [ 1]  405 	jrsge	00101$
                                    406 ;	main.c: 117: result = (result * 10) + (rx_chars_int[o] - '0');
      000130 90 97            [ 1]  407 	ld	yl, a
      000132 A6 0A            [ 1]  408 	ld	a, #0x0a
      000134 90 42            [ 4]  409 	mul	y, a
      000136 61               [ 1]  410 	exg	a, yl
      000137 6B 01            [ 1]  411 	ld	(0x01, sp), a
      000139 61               [ 1]  412 	exg	a, yl
      00013A 90 93            [ 1]  413 	ldw	y, x
      00013C 72 F9 02         [ 2]  414 	addw	y, (0x02, sp)
      00013F 90 F6            [ 1]  415 	ld	a, (y)
      000141 A0 30            [ 1]  416 	sub	a, #0x30
      000143 1B 01            [ 1]  417 	add	a, (0x01, sp)
                                    418 ;	main.c: 115: for (int o = 0; o < i; o++) {
      000145 5C               [ 1]  419 	incw	x
      000146 20 E4            [ 2]  420 	jra	00103$
      000148                        421 00101$:
                                    422 ;	main.c: 120: return result;
                                    423 ;	main.c: 121: }
      000148 1E 04            [ 2]  424 	ldw	x, (4, sp)
      00014A 5B 07            [ 2]  425 	addw	sp, #7
      00014C FC               [ 2]  426 	jp	(x)
                                    427 ;	main.c: 124: void convert_int_to_binary(int num, char* rx_binary_chars) {
                                    428 ;	-----------------------------------------
                                    429 ;	 function convert_int_to_binary
                                    430 ;	-----------------------------------------
      00014D                        431 _convert_int_to_binary:
      00014D 52 04            [ 2]  432 	sub	sp, #4
      00014F 1F 01            [ 2]  433 	ldw	(0x01, sp), x
                                    434 ;	main.c: 126: for(int i = 7; i >= 0; i--) {
      000151 AE 00 07         [ 2]  435 	ldw	x, #0x0007
      000154 1F 03            [ 2]  436 	ldw	(0x03, sp), x
      000156                        437 00103$:
      000156 0D 03            [ 1]  438 	tnz	(0x03, sp)
      000158 2B 22            [ 1]  439 	jrmi	00101$
                                    440 ;	main.c: 128: rx_binary_chars[7 - i] = ((num >> i) & 1) + '0';
      00015A AE 00 07         [ 2]  441 	ldw	x, #0x0007
      00015D 72 F0 03         [ 2]  442 	subw	x, (0x03, sp)
      000160 72 FB 07         [ 2]  443 	addw	x, (0x07, sp)
      000163 16 01            [ 2]  444 	ldw	y, (0x01, sp)
      000165 7B 04            [ 1]  445 	ld	a, (0x04, sp)
      000167 27 05            [ 1]  446 	jreq	00120$
      000169                        447 00119$:
      000169 90 57            [ 2]  448 	sraw	y
      00016B 4A               [ 1]  449 	dec	a
      00016C 26 FB            [ 1]  450 	jrne	00119$
      00016E                        451 00120$:
      00016E 90 9F            [ 1]  452 	ld	a, yl
      000170 A4 01            [ 1]  453 	and	a, #0x01
      000172 AB 30            [ 1]  454 	add	a, #0x30
      000174 F7               [ 1]  455 	ld	(x), a
                                    456 ;	main.c: 126: for(int i = 7; i >= 0; i--) {
      000175 1E 03            [ 2]  457 	ldw	x, (0x03, sp)
      000177 5A               [ 2]  458 	decw	x
      000178 1F 03            [ 2]  459 	ldw	(0x03, sp), x
      00017A 20 DA            [ 2]  460 	jra	00103$
      00017C                        461 00101$:
                                    462 ;	main.c: 130: rx_binary_chars[8] = '\0'; // Добавляем символ конца строки
      00017C 1E 07            [ 2]  463 	ldw	x, (0x07, sp)
      00017E 6F 08            [ 1]  464 	clr	(0x0008, x)
                                    465 ;	main.c: 131: }
      000180 1E 05            [ 2]  466 	ldw	x, (5, sp)
      000182 5B 08            [ 2]  467 	addw	sp, #8
      000184 FC               [ 2]  468 	jp	(x)
                                    469 ;	main.c: 140: void get_addr_from_buff(void)
                                    470 ;	-----------------------------------------
                                    471 ;	 function get_addr_from_buff
                                    472 ;	-----------------------------------------
      000185                        473 _get_addr_from_buff:
      000185 52 02            [ 2]  474 	sub	sp, #2
                                    475 ;	main.c: 144: while(1)
      000187 A6 03            [ 1]  476 	ld	a, #0x03
      000189 6B 01            [ 1]  477 	ld	(0x01, sp), a
      00018B 0F 02            [ 1]  478 	clr	(0x02, sp)
      00018D                        479 00105$:
                                    480 ;	main.c: 146: if(buffer[i] == ' ' || buffer[i] == '\r\n')
      00018D 5F               [ 1]  481 	clrw	x
      00018E 7B 01            [ 1]  482 	ld	a, (0x01, sp)
      000190 97               [ 1]  483 	ld	xl, a
      000191 D6u01u00         [ 1]  484 	ld	a, (_buffer+0, x)
      000194 A1 20            [ 1]  485 	cp	a, #0x20
      000196 27 04            [ 1]  486 	jreq	00101$
      000198 A1 0D            [ 1]  487 	cp	a, #0x0d
      00019A 26 08            [ 1]  488 	jrne	00102$
      00019C                        489 00101$:
                                    490 ;	main.c: 148: p_size = i+1;
      00019C 7B 01            [ 1]  491 	ld	a, (0x01, sp)
      00019E 4C               [ 1]  492 	inc	a
      00019F C7u02u04         [ 1]  493 	ld	_p_size+0, a
                                    494 ;	main.c: 149: break;
      0001A2 20 06            [ 2]  495 	jra	00106$
      0001A4                        496 00102$:
                                    497 ;	main.c: 151: i++;
      0001A4 0C 01            [ 1]  498 	inc	(0x01, sp)
                                    499 ;	main.c: 152: counter++;
      0001A6 0C 02            [ 1]  500 	inc	(0x02, sp)
      0001A8 20 E3            [ 2]  501 	jra	00105$
      0001AA                        502 00106$:
                                    503 ;	main.c: 154: memcpy(a, &buffer[3], counter);
      0001AA 5F               [ 1]  504 	clrw	x
      0001AB 7B 02            [ 1]  505 	ld	a, (0x02, sp)
      0001AD 97               [ 1]  506 	ld	xl, a
      0001AE 89               [ 2]  507 	pushw	x
      0001AF 4Br03            [ 1]  508 	push	#<(_buffer+3)
      0001B1 4Bs01            [ 1]  509 	push	#((_buffer+3) >> 8)
      0001B3 AEr02r00         [ 2]  510 	ldw	x, #(_a+0)
      0001B6 CDr00r00         [ 4]  511 	call	___memcpy
                                    512 ;	main.c: 155: d_addr = convert_chars_to_int(a, counter);
      0001B9 5F               [ 1]  513 	clrw	x
      0001BA 7B 02            [ 1]  514 	ld	a, (0x02, sp)
      0001BC 97               [ 1]  515 	ld	xl, a
      0001BD 89               [ 2]  516 	pushw	x
      0001BE AEr02r00         [ 2]  517 	ldw	x, #(_a+0)
      0001C1 CDr01r26         [ 4]  518 	call	_convert_chars_to_int
      0001C4 C7u02u03         [ 1]  519 	ld	_d_addr+0, a
                                    520 ;	main.c: 156: }
      0001C7 5B 02            [ 2]  521 	addw	sp, #2
      0001C9 81               [ 4]  522 	ret
                                    523 ;	main.c: 158: void get_size_from_buff(void)
                                    524 ;	-----------------------------------------
                                    525 ;	 function get_size_from_buff
                                    526 ;	-----------------------------------------
      0001CA                        527 _get_size_from_buff:
      0001CA 52 02            [ 2]  528 	sub	sp, #2
                                    529 ;	main.c: 160: memset(a, 0, sizeof(a));
      0001CC 4B 03            [ 1]  530 	push	#0x03
      0001CE 4B 00            [ 1]  531 	push	#0x00
      0001D0 5F               [ 1]  532 	clrw	x
      0001D1 89               [ 2]  533 	pushw	x
      0001D2 AEr02r00         [ 2]  534 	ldw	x, #(_a+0)
      0001D5 CDr00r00         [ 4]  535 	call	_memset
                                    536 ;	main.c: 162: uint8_t i = p_size;
      0001D8 C6u02u04         [ 1]  537 	ld	a, _p_size+0
      0001DB 6B 01            [ 1]  538 	ld	(0x01, sp), a
                                    539 ;	main.c: 163: while(1)
      0001DD 0F 02            [ 1]  540 	clr	(0x02, sp)
      0001DF                        541 00105$:
                                    542 ;	main.c: 165: if(buffer[i] == ' ' || buffer[i] == '\r\n')
      0001DF 5F               [ 1]  543 	clrw	x
      0001E0 7B 01            [ 1]  544 	ld	a, (0x01, sp)
      0001E2 97               [ 1]  545 	ld	xl, a
      0001E3 D6u01u00         [ 1]  546 	ld	a, (_buffer+0, x)
      0001E6 A1 20            [ 1]  547 	cp	a, #0x20
      0001E8 27 04            [ 1]  548 	jreq	00101$
      0001EA A1 0D            [ 1]  549 	cp	a, #0x0d
      0001EC 26 08            [ 1]  550 	jrne	00102$
      0001EE                        551 00101$:
                                    552 ;	main.c: 168: p_bytes = i+1;
      0001EE 7B 01            [ 1]  553 	ld	a, (0x01, sp)
      0001F0 4C               [ 1]  554 	inc	a
      0001F1 C7u02u06         [ 1]  555 	ld	_p_bytes+0, a
                                    556 ;	main.c: 169: break;
      0001F4 20 06            [ 2]  557 	jra	00106$
      0001F6                        558 00102$:
                                    559 ;	main.c: 171: i++;
      0001F6 0C 01            [ 1]  560 	inc	(0x01, sp)
                                    561 ;	main.c: 172: counter++;
      0001F8 0C 02            [ 1]  562 	inc	(0x02, sp)
      0001FA 20 E3            [ 2]  563 	jra	00105$
      0001FC                        564 00106$:
                                    565 ;	main.c: 175: memcpy(a, &buffer[p_size], counter);
      0001FC 90 5F            [ 1]  566 	clrw	y
      0001FE 7B 02            [ 1]  567 	ld	a, (0x02, sp)
      000200 90 97            [ 1]  568 	ld	yl, a
      000202 5F               [ 1]  569 	clrw	x
      000203 C6u02u04         [ 1]  570 	ld	a, _p_size+0
      000206 97               [ 1]  571 	ld	xl, a
      000207 1Cr01r00         [ 2]  572 	addw	x, #(_buffer+0)
      00020A 90 89            [ 2]  573 	pushw	y
      00020C 89               [ 2]  574 	pushw	x
      00020D AEr02r00         [ 2]  575 	ldw	x, #(_a+0)
      000210 CDr00r00         [ 4]  576 	call	___memcpy
                                    577 ;	main.c: 176: d_size = convert_chars_to_int(a, counter);
      000213 5F               [ 1]  578 	clrw	x
      000214 7B 02            [ 1]  579 	ld	a, (0x02, sp)
      000216 97               [ 1]  580 	ld	xl, a
      000217 89               [ 2]  581 	pushw	x
      000218 AEr02r00         [ 2]  582 	ldw	x, #(_a+0)
      00021B CDr01r26         [ 4]  583 	call	_convert_chars_to_int
      00021E C7u02u05         [ 1]  584 	ld	_d_size+0, a
                                    585 ;	main.c: 177: }
      000221 5B 02            [ 2]  586 	addw	sp, #2
      000223 81               [ 4]  587 	ret
                                    588 ;	main.c: 178: void char_buffer_to_int(void)
                                    589 ;	-----------------------------------------
                                    590 ;	 function char_buffer_to_int
                                    591 ;	-----------------------------------------
      000224                        592 _char_buffer_to_int:
      000224 52 08            [ 2]  593 	sub	sp, #8
                                    594 ;	main.c: 180: memset(a, 0, sizeof(a));
      000226 4B 03            [ 1]  595 	push	#0x03
      000228 4B 00            [ 1]  596 	push	#0x00
      00022A 5F               [ 1]  597 	clrw	x
      00022B 89               [ 2]  598 	pushw	x
      00022C AEr02r00         [ 2]  599 	ldw	x, #(_a+0)
      00022F CDr00r00         [ 4]  600 	call	_memset
                                    601 ;	main.c: 181: uint8_t counter = d_size;
      000232 C6u02u05         [ 1]  602 	ld	a, _d_size+0
      000235 6B 01            [ 1]  603 	ld	(0x01, sp), a
                                    604 ;	main.c: 182: uint8_t i = p_bytes;
      000237 C6u02u06         [ 1]  605 	ld	a, _p_bytes+0
      00023A 6B 03            [ 1]  606 	ld	(0x03, sp), a
                                    607 ;	main.c: 185: for(int o = 0; o < counter;o++)
      00023C 0F 04            [ 1]  608 	clr	(0x04, sp)
      00023E 5F               [ 1]  609 	clrw	x
      00023F 1F 05            [ 2]  610 	ldw	(0x05, sp), x
      000241                        611 00112$:
      000241 7B 01            [ 1]  612 	ld	a, (0x01, sp)
      000243 6B 08            [ 1]  613 	ld	(0x08, sp), a
      000245 0F 07            [ 1]  614 	clr	(0x07, sp)
      000247 1E 05            [ 2]  615 	ldw	x, (0x05, sp)
      000249 13 07            [ 2]  616 	cpw	x, (0x07, sp)
      00024B 2E 65            [ 1]  617 	jrsge	00114$
                                    618 ;	main.c: 187: uint8_t number_counter = 0;
      00024D 0F 02            [ 1]  619 	clr	(0x02, sp)
                                    620 ;	main.c: 188: while(1)
      00024F 7B 03            [ 1]  621 	ld	a, (0x03, sp)
      000251 6B 07            [ 1]  622 	ld	(0x07, sp), a
      000253 0F 08            [ 1]  623 	clr	(0x08, sp)
      000255                        624 00108$:
                                    625 ;	main.c: 190: if(buffer[i] == ' ')
      000255 5F               [ 1]  626 	clrw	x
      000256 7B 07            [ 1]  627 	ld	a, (0x07, sp)
      000258 97               [ 1]  628 	ld	xl, a
      000259 D6u01u00         [ 1]  629 	ld	a, (_buffer+0, x)
      00025C A1 20            [ 1]  630 	cp	a, #0x20
      00025E 26 04            [ 1]  631 	jrne	00105$
                                    632 ;	main.c: 192: i++;
      000260 0C 03            [ 1]  633 	inc	(0x03, sp)
                                    634 ;	main.c: 193: break;
      000262 20 12            [ 2]  635 	jra	00109$
      000264                        636 00105$:
                                    637 ;	main.c: 195: else if(buffer[i] == '\r\n')
      000264 A1 0D            [ 1]  638 	cp	a, #0x0d
      000266 27 0E            [ 1]  639 	jreq	00109$
                                    640 ;	main.c: 198: i++;
      000268 0C 07            [ 1]  641 	inc	(0x07, sp)
      00026A 7B 07            [ 1]  642 	ld	a, (0x07, sp)
      00026C 6B 03            [ 1]  643 	ld	(0x03, sp), a
                                    644 ;	main.c: 200: number_counter++;
      00026E 0C 08            [ 1]  645 	inc	(0x08, sp)
      000270 7B 08            [ 1]  646 	ld	a, (0x08, sp)
      000272 6B 02            [ 1]  647 	ld	(0x02, sp), a
      000274 20 DF            [ 2]  648 	jra	00108$
      000276                        649 00109$:
                                    650 ;	main.c: 202: memcpy(a, &buffer[i - number_counter], number_counter);
      000276 90 5F            [ 1]  651 	clrw	y
      000278 7B 02            [ 1]  652 	ld	a, (0x02, sp)
      00027A 90 97            [ 1]  653 	ld	yl, a
      00027C 5F               [ 1]  654 	clrw	x
      00027D 7B 03            [ 1]  655 	ld	a, (0x03, sp)
      00027F 97               [ 1]  656 	ld	xl, a
      000280 7B 02            [ 1]  657 	ld	a, (0x02, sp)
      000282 6B 08            [ 1]  658 	ld	(0x08, sp), a
      000284 0F 07            [ 1]  659 	clr	(0x07, sp)
      000286 72 F0 07         [ 2]  660 	subw	x, (0x07, sp)
      000289 1Cr01r00         [ 2]  661 	addw	x, #(_buffer+0)
      00028C 90 89            [ 2]  662 	pushw	y
      00028E 89               [ 2]  663 	pushw	x
      00028F AEr02r00         [ 2]  664 	ldw	x, #(_a+0)
      000292 CDr00r00         [ 4]  665 	call	___memcpy
                                    666 ;	main.c: 203: data_buf[int_buf_i] = convert_chars_to_int(a, number_counter);
      000295 5F               [ 1]  667 	clrw	x
      000296 7B 04            [ 1]  668 	ld	a, (0x04, sp)
      000298 97               [ 1]  669 	ld	xl, a
      000299 1Cr02r07         [ 2]  670 	addw	x, #(_data_buf+0)
      00029C 89               [ 2]  671 	pushw	x
      00029D 16 09            [ 2]  672 	ldw	y, (0x09, sp)
      00029F 90 89            [ 2]  673 	pushw	y
      0002A1 AEr02r00         [ 2]  674 	ldw	x, #(_a+0)
      0002A4 CDr01r26         [ 4]  675 	call	_convert_chars_to_int
      0002A7 85               [ 2]  676 	popw	x
      0002A8 F7               [ 1]  677 	ld	(x), a
                                    678 ;	main.c: 204: int_buf_i++;
      0002A9 0C 04            [ 1]  679 	inc	(0x04, sp)
                                    680 ;	main.c: 185: for(int o = 0; o < counter;o++)
      0002AB 1E 05            [ 2]  681 	ldw	x, (0x05, sp)
      0002AD 5C               [ 1]  682 	incw	x
      0002AE 1F 05            [ 2]  683 	ldw	(0x05, sp), x
      0002B0 20 8F            [ 2]  684 	jra	00112$
      0002B2                        685 00114$:
                                    686 ;	main.c: 206: }
      0002B2 5B 08            [ 2]  687 	addw	sp, #8
      0002B4 81               [ 4]  688 	ret
                                    689 ;	main.c: 214: void reg_check(void)
                                    690 ;	-----------------------------------------
                                    691 ;	 function reg_check
                                    692 ;	-----------------------------------------
      0002B5                        693 _reg_check:
                                    694 ;	main.c: 216: status_registers[0] = I2C_SR1;
      0002B5 55 52 17u00u00   [ 1]  695 	mov	_status_registers+0, 0x5217
                                    696 ;	main.c: 217: status_registers[1] = I2C_SR2;
      0002BA 55 52 18u00u01   [ 1]  697 	mov	_status_registers+1, 0x5218
                                    698 ;	main.c: 218: status_registers[2] = I2C_SR3;
      0002BF 55 52 19u00u02   [ 1]  699 	mov	_status_registers+2, 0x5219
                                    700 ;	main.c: 219: }
      0002C4 81               [ 4]  701 	ret
                                    702 ;	main.c: 222: void status_check(void){
                                    703 ;	-----------------------------------------
                                    704 ;	 function status_check
                                    705 ;	-----------------------------------------
      0002C5                        706 _status_check:
      0002C5 52 09            [ 2]  707 	sub	sp, #9
                                    708 ;	main.c: 223: char rx_binary_chars[9]={0};
      0002C7 0F 01            [ 1]  709 	clr	(0x01, sp)
      0002C9 0F 02            [ 1]  710 	clr	(0x02, sp)
      0002CB 0F 03            [ 1]  711 	clr	(0x03, sp)
      0002CD 0F 04            [ 1]  712 	clr	(0x04, sp)
      0002CF 0F 05            [ 1]  713 	clr	(0x05, sp)
      0002D1 0F 06            [ 1]  714 	clr	(0x06, sp)
      0002D3 0F 07            [ 1]  715 	clr	(0x07, sp)
      0002D5 0F 08            [ 1]  716 	clr	(0x08, sp)
      0002D7 0F 09            [ 1]  717 	clr	(0x09, sp)
                                    718 ;	main.c: 224: uart_write("\nI2C_REGS >.<\n");
      0002D9 AEr00r00         [ 2]  719 	ldw	x, #(___str_0+0)
      0002DC CDr00r37         [ 4]  720 	call	_uart_write
                                    721 ;	main.c: 225: convert_int_to_binary(I2C_SR1, rx_binary_chars);
      0002DF 96               [ 1]  722 	ldw	x, sp
      0002E0 5C               [ 1]  723 	incw	x
      0002E1 51               [ 1]  724 	exgw	x, y
      0002E2 C6 52 17         [ 1]  725 	ld	a, 0x5217
      0002E5 5F               [ 1]  726 	clrw	x
      0002E6 90 89            [ 2]  727 	pushw	y
      0002E8 97               [ 1]  728 	ld	xl, a
      0002E9 CDr01r4D         [ 4]  729 	call	_convert_int_to_binary
                                    730 ;	main.c: 226: uart_write("\nSR1 -> ");
      0002EC AEr00r0F         [ 2]  731 	ldw	x, #(___str_1+0)
      0002EF CDr00r37         [ 4]  732 	call	_uart_write
                                    733 ;	main.c: 227: uart_write(rx_binary_chars);
      0002F2 96               [ 1]  734 	ldw	x, sp
      0002F3 5C               [ 1]  735 	incw	x
      0002F4 CDr00r37         [ 4]  736 	call	_uart_write
                                    737 ;	main.c: 228: uart_write(" <-\n");
      0002F7 AEr00r18         [ 2]  738 	ldw	x, #(___str_2+0)
      0002FA CDr00r37         [ 4]  739 	call	_uart_write
                                    740 ;	main.c: 229: convert_int_to_binary(I2C_SR2, rx_binary_chars);
      0002FD 96               [ 1]  741 	ldw	x, sp
      0002FE 5C               [ 1]  742 	incw	x
      0002FF 51               [ 1]  743 	exgw	x, y
      000300 C6 52 18         [ 1]  744 	ld	a, 0x5218
      000303 5F               [ 1]  745 	clrw	x
      000304 90 89            [ 2]  746 	pushw	y
      000306 97               [ 1]  747 	ld	xl, a
      000307 CDr01r4D         [ 4]  748 	call	_convert_int_to_binary
                                    749 ;	main.c: 230: uart_write("SR2 -> ");
      00030A AEr00r1D         [ 2]  750 	ldw	x, #(___str_3+0)
      00030D CDr00r37         [ 4]  751 	call	_uart_write
                                    752 ;	main.c: 231: uart_write(rx_binary_chars);
      000310 96               [ 1]  753 	ldw	x, sp
      000311 5C               [ 1]  754 	incw	x
      000312 CDr00r37         [ 4]  755 	call	_uart_write
                                    756 ;	main.c: 232: uart_write(" <-\n");
      000315 AEr00r18         [ 2]  757 	ldw	x, #(___str_2+0)
      000318 CDr00r37         [ 4]  758 	call	_uart_write
                                    759 ;	main.c: 233: convert_int_to_binary(I2C_SR3, rx_binary_chars);
      00031B 96               [ 1]  760 	ldw	x, sp
      00031C 5C               [ 1]  761 	incw	x
      00031D 51               [ 1]  762 	exgw	x, y
      00031E C6 52 19         [ 1]  763 	ld	a, 0x5219
      000321 5F               [ 1]  764 	clrw	x
      000322 90 89            [ 2]  765 	pushw	y
      000324 97               [ 1]  766 	ld	xl, a
      000325 CDr01r4D         [ 4]  767 	call	_convert_int_to_binary
                                    768 ;	main.c: 234: uart_write("SR3 -> ");
      000328 AEr00r25         [ 2]  769 	ldw	x, #(___str_4+0)
      00032B CDr00r37         [ 4]  770 	call	_uart_write
                                    771 ;	main.c: 235: uart_write(rx_binary_chars);
      00032E 96               [ 1]  772 	ldw	x, sp
      00032F 5C               [ 1]  773 	incw	x
      000330 CDr00r37         [ 4]  774 	call	_uart_write
                                    775 ;	main.c: 236: uart_write(" <-\n");
      000333 AEr00r18         [ 2]  776 	ldw	x, #(___str_2+0)
      000336 CDr00r37         [ 4]  777 	call	_uart_write
                                    778 ;	main.c: 237: convert_int_to_binary(I2C_CR1, rx_binary_chars);
      000339 96               [ 1]  779 	ldw	x, sp
      00033A 5C               [ 1]  780 	incw	x
      00033B 51               [ 1]  781 	exgw	x, y
      00033C C6 52 10         [ 1]  782 	ld	a, 0x5210
      00033F 5F               [ 1]  783 	clrw	x
      000340 90 89            [ 2]  784 	pushw	y
      000342 97               [ 1]  785 	ld	xl, a
      000343 CDr01r4D         [ 4]  786 	call	_convert_int_to_binary
                                    787 ;	main.c: 238: uart_write("CR1 -> ");
      000346 AEr00r2D         [ 2]  788 	ldw	x, #(___str_5+0)
      000349 CDr00r37         [ 4]  789 	call	_uart_write
                                    790 ;	main.c: 239: uart_write(rx_binary_chars);
      00034C 96               [ 1]  791 	ldw	x, sp
      00034D 5C               [ 1]  792 	incw	x
      00034E CDr00r37         [ 4]  793 	call	_uart_write
                                    794 ;	main.c: 240: uart_write(" <-\n");
      000351 AEr00r18         [ 2]  795 	ldw	x, #(___str_2+0)
      000354 CDr00r37         [ 4]  796 	call	_uart_write
                                    797 ;	main.c: 241: convert_int_to_binary(I2C_CR2, rx_binary_chars);
      000357 96               [ 1]  798 	ldw	x, sp
      000358 5C               [ 1]  799 	incw	x
      000359 51               [ 1]  800 	exgw	x, y
      00035A C6 52 11         [ 1]  801 	ld	a, 0x5211
      00035D 5F               [ 1]  802 	clrw	x
      00035E 90 89            [ 2]  803 	pushw	y
      000360 97               [ 1]  804 	ld	xl, a
      000361 CDr01r4D         [ 4]  805 	call	_convert_int_to_binary
                                    806 ;	main.c: 242: uart_write("CR2 -> ");
      000364 AEr00r35         [ 2]  807 	ldw	x, #(___str_6+0)
      000367 CDr00r37         [ 4]  808 	call	_uart_write
                                    809 ;	main.c: 243: uart_write(rx_binary_chars);
      00036A 96               [ 1]  810 	ldw	x, sp
      00036B 5C               [ 1]  811 	incw	x
      00036C CDr00r37         [ 4]  812 	call	_uart_write
                                    813 ;	main.c: 244: uart_write(" <-\n");
      00036F AEr00r18         [ 2]  814 	ldw	x, #(___str_2+0)
      000372 CDr00r37         [ 4]  815 	call	_uart_write
                                    816 ;	main.c: 245: convert_int_to_binary(I2C_DR, rx_binary_chars);
      000375 96               [ 1]  817 	ldw	x, sp
      000376 5C               [ 1]  818 	incw	x
      000377 51               [ 1]  819 	exgw	x, y
      000378 C6 52 16         [ 1]  820 	ld	a, 0x5216
      00037B 5F               [ 1]  821 	clrw	x
      00037C 90 89            [ 2]  822 	pushw	y
      00037E 97               [ 1]  823 	ld	xl, a
      00037F CDr01r4D         [ 4]  824 	call	_convert_int_to_binary
                                    825 ;	main.c: 246: uart_write("DR -> ");
      000382 AEr00r3D         [ 2]  826 	ldw	x, #(___str_7+0)
      000385 CDr00r37         [ 4]  827 	call	_uart_write
                                    828 ;	main.c: 247: uart_write(rx_binary_chars);
      000388 96               [ 1]  829 	ldw	x, sp
      000389 5C               [ 1]  830 	incw	x
      00038A CDr00r37         [ 4]  831 	call	_uart_write
                                    832 ;	main.c: 248: uart_write(" <-\n");
      00038D AEr00r18         [ 2]  833 	ldw	x, #(___str_2+0)
      000390 CDr00r37         [ 4]  834 	call	_uart_write
                                    835 ;	main.c: 249: uart_write("UART_REGS >.<\n");
      000393 AEr00r44         [ 2]  836 	ldw	x, #(___str_8+0)
      000396 CDr00r37         [ 4]  837 	call	_uart_write
                                    838 ;	main.c: 294: }
      000399 5B 09            [ 2]  839 	addw	sp, #9
      00039B 81               [ 4]  840 	ret
                                    841 ;	main.c: 296: void uart_init(void){
                                    842 ;	-----------------------------------------
                                    843 ;	 function uart_init
                                    844 ;	-----------------------------------------
      00039C                        845 _uart_init:
                                    846 ;	main.c: 297: CLK_CKDIVR = 0;
      00039C 35 00 50 C6      [ 1]  847 	mov	0x50c6+0, #0x00
                                    848 ;	main.c: 300: UART1_CR2 |= UART_CR2_TEN; // Transmitter enable
      0003A0 72 16 52 35      [ 1]  849 	bset	0x5235, #3
                                    850 ;	main.c: 301: UART1_CR2 |= UART_CR2_REN; // Receiver enable
      0003A4 72 14 52 35      [ 1]  851 	bset	0x5235, #2
                                    852 ;	main.c: 302: UART1_CR3 &= ~(UART_CR3_STOP1 | UART_CR3_STOP2); // 1 stop bit
      0003A8 C6 52 36         [ 1]  853 	ld	a, 0x5236
      0003AB A4 CF            [ 1]  854 	and	a, #0xcf
      0003AD C7 52 36         [ 1]  855 	ld	0x5236, a
                                    856 ;	main.c: 304: UART1_BRR2 = 0x03; UART1_BRR1 = 0x68; // 0x0683 coded funky way (see ref manual)
      0003B0 35 03 52 33      [ 1]  857 	mov	0x5233+0, #0x03
      0003B4 35 68 52 32      [ 1]  858 	mov	0x5232+0, #0x68
                                    859 ;	main.c: 305: }
      0003B8 81               [ 4]  860 	ret
                                    861 ;	main.c: 309: void i2c_init(void) {
                                    862 ;	-----------------------------------------
                                    863 ;	 function i2c_init
                                    864 ;	-----------------------------------------
      0003B9                        865 _i2c_init:
                                    866 ;	main.c: 315: I2C_CR1 = I2C_CR1 & ~0x01;      // PE=0, disable I2C before setup
      0003B9 72 11 52 10      [ 1]  867 	bres	0x5210, #0
                                    868 ;	main.c: 316: I2C_FREQR= 16;                  // peripheral frequence =16MHz
      0003BD 35 10 52 12      [ 1]  869 	mov	0x5212+0, #0x10
                                    870 ;	main.c: 317: I2C_CCRH = 0;                   // =0
      0003C1 35 00 52 1C      [ 1]  871 	mov	0x521c+0, #0x00
                                    872 ;	main.c: 318: I2C_CCRL = 80;                  // 100kHz for I2C
      0003C5 35 50 52 1B      [ 1]  873 	mov	0x521b+0, #0x50
                                    874 ;	main.c: 319: I2C_CCRH = I2C_CCRH & ~0x80;    // set standart mode(100кHz)
      0003C9 72 1F 52 1C      [ 1]  875 	bres	0x521c, #7
                                    876 ;	main.c: 320: I2C_OARH = I2C_OARH & ~0x80;    // 7-bit address mode
      0003CD 72 1F 52 14      [ 1]  877 	bres	0x5214, #7
                                    878 ;	main.c: 321: I2C_OARH = I2C_OARH | 0x40;     // see reference manual
      0003D1 72 1C 52 14      [ 1]  879 	bset	0x5214, #6
                                    880 ;	main.c: 322: I2C_CR1 = I2C_CR1 | 0x01;       // PE=1, enable I2C
      0003D5 72 10 52 10      [ 1]  881 	bset	0x5210, #0
                                    882 ;	main.c: 323: }
      0003D9 81               [ 4]  883 	ret
                                    884 ;	main.c: 332: void i2c_start(void) {
                                    885 ;	-----------------------------------------
                                    886 ;	 function i2c_start
                                    887 ;	-----------------------------------------
      0003DA                        888 _i2c_start:
                                    889 ;	main.c: 333: I2C_CR2 = I2C_CR2 | (1 << 0); // Отправляем стартовый сигнал
      0003DA 72 10 52 11      [ 1]  890 	bset	0x5211, #0
                                    891 ;	main.c: 334: while(!(I2C_SR1 & (1 << 0)));
      0003DE                        892 00101$:
      0003DE 72 01 52 17 FB   [ 2]  893 	btjf	0x5217, #0, 00101$
                                    894 ;	main.c: 336: }
      0003E3 81               [ 4]  895 	ret
                                    896 ;	main.c: 338: void i2c_send_address(uint8_t address) {
                                    897 ;	-----------------------------------------
                                    898 ;	 function i2c_send_address
                                    899 ;	-----------------------------------------
      0003E4                        900 _i2c_send_address:
                                    901 ;	main.c: 339: I2C_DR = address << 1; // Отправка адреса устройства с битом на запись
      0003E4 48               [ 1]  902 	sll	a
      0003E5 C7 52 16         [ 1]  903 	ld	0x5216, a
                                    904 ;	main.c: 340: reg_check();
      0003E8 CDr02rB5         [ 4]  905 	call	_reg_check
                                    906 ;	main.c: 341: while (!(I2C_SR1 & (1 << 1)) && !(I2C_SR2 & (1 << 2)));
      0003EB                        907 00102$:
      0003EB 72 03 52 17 01   [ 2]  908 	btjf	0x5217, #1, 00117$
      0003F0 81               [ 4]  909 	ret
      0003F1                        910 00117$:
      0003F1 72 05 52 18 F5   [ 2]  911 	btjf	0x5218, #2, 00102$
                                    912 ;	main.c: 343: }
      0003F6 81               [ 4]  913 	ret
                                    914 ;	main.c: 345: void i2c_stop(void) {
                                    915 ;	-----------------------------------------
                                    916 ;	 function i2c_stop
                                    917 ;	-----------------------------------------
      0003F7                        918 _i2c_stop:
                                    919 ;	main.c: 346: I2C_CR2 = I2C_CR2 | (1 << 1);// Отправка стопового сигнала
      0003F7 72 12 52 11      [ 1]  920 	bset	0x5211, #1
                                    921 ;	main.c: 348: }
      0003FB 81               [ 4]  922 	ret
                                    923 ;	main.c: 349: void i2c_write(void){
                                    924 ;	-----------------------------------------
                                    925 ;	 function i2c_write
                                    926 ;	-----------------------------------------
      0003FC                        927 _i2c_write:
      0003FC 52 02            [ 2]  928 	sub	sp, #2
                                    929 ;	main.c: 350: I2C_DR = 0;
      0003FE 35 00 52 16      [ 1]  930 	mov	0x5216+0, #0x00
                                    931 ;	main.c: 351: reg_check();
      000402 CDr02rB5         [ 4]  932 	call	_reg_check
                                    933 ;	main.c: 352: I2C_DR = d_addr;
      000405 55u02u03 52 16   [ 1]  934 	mov	0x5216+0, _d_addr+0
                                    935 ;	main.c: 353: reg_check();
      00040A CDr02rB5         [ 4]  936 	call	_reg_check
                                    937 ;	main.c: 354: while (!(I2C_SR1 & (1 << 7)) && (I2C_SR2 & (1 << 2)) && !(I2C_SR1 & (1 << 2))); // Отправка адреса регистра
      00040D                        938 00103$:
      00040D C6 52 17         [ 1]  939 	ld	a, 0x5217
      000410 2B 0A            [ 1]  940 	jrmi	00122$
      000412 72 05 52 18 05   [ 2]  941 	btjf	0x5218, #2, 00122$
      000417 72 05 52 17 F1   [ 2]  942 	btjf	0x5217, #2, 00103$
                                    943 ;	main.c: 355: for(int i = 0;i < d_size;i++)
      00041C                        944 00122$:
      00041C 5F               [ 1]  945 	clrw	x
      00041D                        946 00112$:
      00041D C6u02u05         [ 1]  947 	ld	a, _d_size+0
      000420 6B 02            [ 1]  948 	ld	(0x02, sp), a
      000422 0F 01            [ 1]  949 	clr	(0x01, sp)
      000424 13 01            [ 2]  950 	cpw	x, (0x01, sp)
      000426 2E 1B            [ 1]  951 	jrsge	00114$
                                    952 ;	main.c: 357: I2C_DR = data_buf[i];
      000428 90 93            [ 1]  953 	ldw	y, x
      00042A 90 D6u02u07      [ 1]  954 	ld	a, (_data_buf+0, y)
      00042E C7 52 16         [ 1]  955 	ld	0x5216, a
                                    956 ;	main.c: 358: reg_check();
      000431 89               [ 2]  957 	pushw	x
      000432 CDr02rB5         [ 4]  958 	call	_reg_check
      000435 85               [ 2]  959 	popw	x
                                    960 ;	main.c: 359: while (!(I2C_SR1 & (1 << 7)) && (I2C_SR2 & (1 << 2)));
      000436                        961 00107$:
      000436 C6 52 17         [ 1]  962 	ld	a, 0x5217
      000439 2B 05            [ 1]  963 	jrmi	00113$
      00043B 72 04 52 18 F6   [ 2]  964 	btjt	0x5218, #2, 00107$
      000440                        965 00113$:
                                    966 ;	main.c: 355: for(int i = 0;i < d_size;i++)
      000440 5C               [ 1]  967 	incw	x
      000441 20 DA            [ 2]  968 	jra	00112$
      000443                        969 00114$:
                                    970 ;	main.c: 361: }
      000443 5B 02            [ 2]  971 	addw	sp, #2
      000445 81               [ 4]  972 	ret
                                    973 ;	main.c: 363: void i2c_read(void){
                                    974 ;	-----------------------------------------
                                    975 ;	 function i2c_read
                                    976 ;	-----------------------------------------
      000446                        977 _i2c_read:
      000446 52 04            [ 2]  978 	sub	sp, #4
                                    979 ;	main.c: 364: I2C_DR = d_addr;
      000448 55u02u03 52 16   [ 1]  980 	mov	0x5216+0, _d_addr+0
                                    981 ;	main.c: 365: status_check();
      00044D CDr02rC5         [ 4]  982 	call	_status_check
                                    983 ;	main.c: 366: while (!(I2C_SR1 & (1 << 7)) && !(I2C_SR1 & (1 << 2))); // Отправка адреса регистра
      000450                        984 00102$:
      000450 C6 52 17         [ 1]  985 	ld	a, 0x5217
      000453 2B 05            [ 1]  986 	jrmi	00104$
      000455 72 05 52 17 F6   [ 2]  987 	btjf	0x5217, #2, 00102$
      00045A                        988 00104$:
                                    989 ;	main.c: 367: i2c_stop();
      00045A CDr03rF7         [ 4]  990 	call	_i2c_stop
                                    991 ;	main.c: 368: i2c_start();
      00045D CDr03rDA         [ 4]  992 	call	_i2c_start
                                    993 ;	main.c: 369: I2C_DR = (current_dev << 1) | (1 << 0);
      000460 C6u03u07         [ 1]  994 	ld	a, _current_dev+0
      000463 48               [ 1]  995 	sll	a
      000464 AA 01            [ 1]  996 	or	a, #0x01
      000466 C7 52 16         [ 1]  997 	ld	0x5216, a
                                    998 ;	main.c: 370: status_check();
      000469 CDr02rC5         [ 4]  999 	call	_status_check
                                   1000 ;	main.c: 371: while (!(I2C_SR1 & (1 << 1)) && !(I2C_SR1 & (1 << 2)));
      00046C                       1001 00106$:
      00046C 72 02 52 17 05   [ 2] 1002 	btjt	0x5217, #1, 00108$
      000471 72 05 52 17 F6   [ 2] 1003 	btjf	0x5217, #2, 00106$
      000476                       1004 00108$:
                                   1005 ;	main.c: 372: status_check();
      000476 CDr02rC5         [ 4] 1006 	call	_status_check
                                   1007 ;	main.c: 374: for(int i = 0;i < d_size;i++)
      000479 5F               [ 1] 1008 	clrw	x
      00047A 1F 03            [ 2] 1009 	ldw	(0x03, sp), x
      00047C                       1010 00114$:
      00047C C6u02u05         [ 1] 1011 	ld	a, _d_size+0
      00047F 6B 02            [ 1] 1012 	ld	(0x02, sp), a
      000481 0F 01            [ 1] 1013 	clr	(0x01, sp)
      000483 1E 03            [ 2] 1014 	ldw	x, (0x03, sp)
      000485 13 01            [ 2] 1015 	cpw	x, (0x01, sp)
      000487 2E 1D            [ 1] 1016 	jrsge	00116$
                                   1017 ;	main.c: 376: status_check();
      000489 CDr02rC5         [ 4] 1018 	call	_status_check
                                   1019 ;	main.c: 377: data_buf[i] = I2C_DR;
      00048C 1E 03            [ 2] 1020 	ldw	x, (0x03, sp)
      00048E C6 52 16         [ 1] 1021 	ld	a, 0x5216
      000491 D7u02u07         [ 1] 1022 	ld	((_data_buf+0), x), a
                                   1023 ;	main.c: 378: status_check();
      000494 CDr02rC5         [ 4] 1024 	call	_status_check
                                   1025 ;	main.c: 379: while (!(I2C_SR1 & (1 << 6)));
      000497                       1026 00109$:
      000497 72 0D 52 17 FB   [ 2] 1027 	btjf	0x5217, #6, 00109$
                                   1028 ;	main.c: 380: status_check();
      00049C CDr02rC5         [ 4] 1029 	call	_status_check
                                   1030 ;	main.c: 374: for(int i = 0;i < d_size;i++)
      00049F 1E 03            [ 2] 1031 	ldw	x, (0x03, sp)
      0004A1 5C               [ 1] 1032 	incw	x
      0004A2 1F 03            [ 2] 1033 	ldw	(0x03, sp), x
      0004A4 20 D6            [ 2] 1034 	jra	00114$
      0004A6                       1035 00116$:
                                   1036 ;	main.c: 382: }
      0004A6 5B 04            [ 2] 1037 	addw	sp, #4
      0004A8 81               [ 4] 1038 	ret
                                   1039 ;	main.c: 383: void i2c_scan(void) {
                                   1040 ;	-----------------------------------------
                                   1041 ;	 function i2c_scan
                                   1042 ;	-----------------------------------------
      0004A9                       1043 _i2c_scan:
      0004A9 52 02            [ 2] 1044 	sub	sp, #2
                                   1045 ;	main.c: 384: for (uint8_t addr = current_dev; addr < 127; addr++) {
      0004AB C6u03u07         [ 1] 1046 	ld	a, _current_dev+0
      0004AE 6B 01            [ 1] 1047 	ld	(0x01, sp), a
      0004B0 6B 02            [ 1] 1048 	ld	(0x02, sp), a
      0004B2                       1049 00105$:
      0004B2 7B 02            [ 1] 1050 	ld	a, (0x02, sp)
      0004B4 A1 7F            [ 1] 1051 	cp	a, #0x7f
      0004B6 24 26            [ 1] 1052 	jrnc	00107$
                                   1053 ;	main.c: 385: i2c_start();
      0004B8 CDr03rDA         [ 4] 1054 	call	_i2c_start
                                   1055 ;	main.c: 386: i2c_send_address(addr);
      0004BB 7B 02            [ 1] 1056 	ld	a, (0x02, sp)
      0004BD CDr03rE4         [ 4] 1057 	call	_i2c_send_address
                                   1058 ;	main.c: 387: if (!(I2C_SR2 & (1 << 2))) { // Проверка на ACK
      0004C0 72 04 52 18 0A   [ 2] 1059 	btjt	0x5218, #2, 00102$
                                   1060 ;	main.c: 389: current_dev = addr;
      0004C5 7B 01            [ 1] 1061 	ld	a, (0x01, sp)
      0004C7 C7u03u07         [ 1] 1062 	ld	_current_dev+0, a
                                   1063 ;	main.c: 390: i2c_stop();
      0004CA 5B 02            [ 2] 1064 	addw	sp, #2
                                   1065 ;	main.c: 391: break;
      0004CC CCr03rF7         [ 2] 1066 	jp	_i2c_stop
      0004CF                       1067 00102$:
                                   1068 ;	main.c: 393: i2c_stop();
      0004CF CDr03rF7         [ 4] 1069 	call	_i2c_stop
                                   1070 ;	main.c: 394: I2C_SR2 = I2C_SR2 & ~(1 << 2); // Очистка флага ошибки
      0004D2 72 15 52 18      [ 1] 1071 	bres	0x5218, #2
                                   1072 ;	main.c: 384: for (uint8_t addr = current_dev; addr < 127; addr++) {
      0004D6 0C 02            [ 1] 1073 	inc	(0x02, sp)
      0004D8 7B 02            [ 1] 1074 	ld	a, (0x02, sp)
      0004DA 6B 01            [ 1] 1075 	ld	(0x01, sp), a
      0004DC 20 D4            [ 2] 1076 	jra	00105$
      0004DE                       1077 00107$:
                                   1078 ;	main.c: 396: }
      0004DE 5B 02            [ 2] 1079 	addw	sp, #2
      0004E0 81               [ 4] 1080 	ret
                                   1081 ;	main.c: 406: void cm_SM(void)
                                   1082 ;	-----------------------------------------
                                   1083 ;	 function cm_SM
                                   1084 ;	-----------------------------------------
      0004E1                       1085 _cm_SM:
      0004E1 52 04            [ 2] 1086 	sub	sp, #4
                                   1087 ;	main.c: 408: char cur_dev[4]={0};
      0004E3 0F 01            [ 1] 1088 	clr	(0x01, sp)
      0004E5 0F 02            [ 1] 1089 	clr	(0x02, sp)
      0004E7 0F 03            [ 1] 1090 	clr	(0x03, sp)
      0004E9 0F 04            [ 1] 1091 	clr	(0x04, sp)
                                   1092 ;	main.c: 409: convert_int_to_chars(current_dev, cur_dev);
      0004EB 96               [ 1] 1093 	ldw	x, sp
      0004EC 5C               [ 1] 1094 	incw	x
      0004ED C6u03u07         [ 1] 1095 	ld	a, _current_dev+0
      0004F0 CDr00rA1         [ 4] 1096 	call	_convert_int_to_chars
                                   1097 ;	main.c: 410: uart_write("SM ");
      0004F3 AEr00r53         [ 2] 1098 	ldw	x, #(___str_9+0)
      0004F6 CDr00r37         [ 4] 1099 	call	_uart_write
                                   1100 ;	main.c: 411: uart_write(cur_dev);
      0004F9 96               [ 1] 1101 	ldw	x, sp
      0004FA 5C               [ 1] 1102 	incw	x
      0004FB CDr00r37         [ 4] 1103 	call	_uart_write
                                   1104 ;	main.c: 412: uart_write("\r\n");
      0004FE AEr00r57         [ 2] 1105 	ldw	x, #(___str_10+0)
      000501 CDr00r37         [ 4] 1106 	call	_uart_write
                                   1107 ;	main.c: 413: }
      000504 5B 04            [ 2] 1108 	addw	sp, #4
      000506 81               [ 4] 1109 	ret
                                   1110 ;	main.c: 414: void cm_SN(void)
                                   1111 ;	-----------------------------------------
                                   1112 ;	 function cm_SN
                                   1113 ;	-----------------------------------------
      000507                       1114 _cm_SN:
                                   1115 ;	main.c: 416: i2c_scan();
      000507 CDr04rA9         [ 4] 1116 	call	_i2c_scan
                                   1117 ;	main.c: 417: cm_SM();
                                   1118 ;	main.c: 418: }
      00050A CCr04rE1         [ 2] 1119 	jp	_cm_SM
                                   1120 ;	main.c: 419: void cm_RM(void)
                                   1121 ;	-----------------------------------------
                                   1122 ;	 function cm_RM
                                   1123 ;	-----------------------------------------
      00050D                       1124 _cm_RM:
                                   1125 ;	main.c: 421: current_dev = 0;
      00050D 72 5Fu03u07      [ 1] 1126 	clr	_current_dev+0
                                   1127 ;	main.c: 422: uart_write("RM\n");
      000511 AEr00r5A         [ 2] 1128 	ldw	x, #(___str_11+0)
                                   1129 ;	main.c: 423: }
      000514 CCr00r37         [ 2] 1130 	jp	_uart_write
                                   1131 ;	main.c: 425: void cm_DB(void)
                                   1132 ;	-----------------------------------------
                                   1133 ;	 function cm_DB
                                   1134 ;	-----------------------------------------
      000517                       1135 _cm_DB:
                                   1136 ;	main.c: 427: status_check();
                                   1137 ;	main.c: 428: }
      000517 CCr02rC5         [ 2] 1138 	jp	_status_check
                                   1139 ;	main.c: 430: void cm_ST(void)
                                   1140 ;	-----------------------------------------
                                   1141 ;	 function cm_ST
                                   1142 ;	-----------------------------------------
      00051A                       1143 _cm_ST:
                                   1144 ;	main.c: 432: get_addr_from_buff();
      00051A CDr01r85         [ 4] 1145 	call	_get_addr_from_buff
                                   1146 ;	main.c: 433: current_dev = d_addr;
      00051D 55u02u03u03u07   [ 1] 1147 	mov	_current_dev+0, _d_addr+0
                                   1148 ;	main.c: 434: uart_write("ST\n");
      000522 AEr00r5E         [ 2] 1149 	ldw	x, #(___str_12+0)
                                   1150 ;	main.c: 435: }
      000525 CCr00r37         [ 2] 1151 	jp	_uart_write
                                   1152 ;	main.c: 436: void cm_SR(void)
                                   1153 ;	-----------------------------------------
                                   1154 ;	 function cm_SR
                                   1155 ;	-----------------------------------------
      000528                       1156 _cm_SR:
      000528 52 04            [ 2] 1157 	sub	sp, #4
                                   1158 ;	main.c: 438: i2c_start();
      00052A CDr03rDA         [ 4] 1159 	call	_i2c_start
                                   1160 ;	main.c: 439: i2c_send_address(current_dev);
      00052D C6u03u07         [ 1] 1161 	ld	a, _current_dev+0
      000530 CDr03rE4         [ 4] 1162 	call	_i2c_send_address
                                   1163 ;	main.c: 440: i2c_read();
      000533 CDr04r46         [ 4] 1164 	call	_i2c_read
                                   1165 ;	main.c: 441: i2c_stop();
      000536 CDr03rF7         [ 4] 1166 	call	_i2c_stop
                                   1167 ;	main.c: 442: uart_write("SR ");
      000539 AEr00r62         [ 2] 1168 	ldw	x, #(___str_13+0)
      00053C CDr00r37         [ 4] 1169 	call	_uart_write
                                   1170 ;	main.c: 443: convert_int_to_chars(d_addr, a);
      00053F AEr02r00         [ 2] 1171 	ldw	x, #(_a+0)
      000542 C6u02u03         [ 1] 1172 	ld	a, _d_addr+0
      000545 CDr00rA1         [ 4] 1173 	call	_convert_int_to_chars
                                   1174 ;	main.c: 444: uart_write(a);
      000548 AEr02r00         [ 2] 1175 	ldw	x, #(_a+0)
      00054B CDr00r37         [ 4] 1176 	call	_uart_write
                                   1177 ;	main.c: 445: uart_write(" ");
      00054E AEr00r66         [ 2] 1178 	ldw	x, #(___str_14+0)
      000551 CDr00r37         [ 4] 1179 	call	_uart_write
                                   1180 ;	main.c: 446: convert_int_to_chars(d_size, a);
      000554 AEr02r00         [ 2] 1181 	ldw	x, #(_a+0)
      000557 C6u02u05         [ 1] 1182 	ld	a, _d_size+0
      00055A CDr00rA1         [ 4] 1183 	call	_convert_int_to_chars
                                   1184 ;	main.c: 447: uart_write(a);
      00055D AEr02r00         [ 2] 1185 	ldw	x, #(_a+0)
      000560 CDr00r37         [ 4] 1186 	call	_uart_write
                                   1187 ;	main.c: 448: for(int i = 0;i < d_size;i++)
      000563 5F               [ 1] 1188 	clrw	x
      000564 1F 03            [ 2] 1189 	ldw	(0x03, sp), x
      000566                       1190 00103$:
      000566 C6u02u05         [ 1] 1191 	ld	a, _d_size+0
      000569 6B 02            [ 1] 1192 	ld	(0x02, sp), a
      00056B 0F 01            [ 1] 1193 	clr	(0x01, sp)
      00056D 1E 03            [ 2] 1194 	ldw	x, (0x03, sp)
      00056F 13 01            [ 2] 1195 	cpw	x, (0x01, sp)
      000571 2E 1E            [ 1] 1196 	jrsge	00101$
                                   1197 ;	main.c: 450: uart_write(" ");
      000573 AEr00r66         [ 2] 1198 	ldw	x, #(___str_14+0)
      000576 CDr00r37         [ 4] 1199 	call	_uart_write
                                   1200 ;	main.c: 451: convert_int_to_chars(data_buf[i], a);
      000579 1E 03            [ 2] 1201 	ldw	x, (0x03, sp)
      00057B D6u02u07         [ 1] 1202 	ld	a, (_data_buf+0, x)
      00057E AEr02r00         [ 2] 1203 	ldw	x, #(_a+0)
      000581 CDr00rA1         [ 4] 1204 	call	_convert_int_to_chars
                                   1205 ;	main.c: 452: uart_write(a);
      000584 AEr02r00         [ 2] 1206 	ldw	x, #(_a+0)
      000587 CDr00r37         [ 4] 1207 	call	_uart_write
                                   1208 ;	main.c: 448: for(int i = 0;i < d_size;i++)
      00058A 1E 03            [ 2] 1209 	ldw	x, (0x03, sp)
      00058C 5C               [ 1] 1210 	incw	x
      00058D 1F 03            [ 2] 1211 	ldw	(0x03, sp), x
      00058F 20 D5            [ 2] 1212 	jra	00103$
      000591                       1213 00101$:
                                   1214 ;	main.c: 455: uart_write("\r\n");
      000591 AEr00r57         [ 2] 1215 	ldw	x, #(___str_10+0)
      000594 5B 04            [ 2] 1216 	addw	sp, #4
                                   1217 ;	main.c: 456: }
      000596 CCr00r37         [ 2] 1218 	jp	_uart_write
                                   1219 ;	main.c: 457: void cm_SW(void)
                                   1220 ;	-----------------------------------------
                                   1221 ;	 function cm_SW
                                   1222 ;	-----------------------------------------
      000599                       1223 _cm_SW:
      000599 52 04            [ 2] 1224 	sub	sp, #4
                                   1225 ;	main.c: 459: i2c_start();
      00059B CDr03rDA         [ 4] 1226 	call	_i2c_start
                                   1227 ;	main.c: 460: i2c_send_address(current_dev);
      00059E C6u03u07         [ 1] 1228 	ld	a, _current_dev+0
      0005A1 CDr03rE4         [ 4] 1229 	call	_i2c_send_address
                                   1230 ;	main.c: 461: i2c_write();
      0005A4 CDr03rFC         [ 4] 1231 	call	_i2c_write
                                   1232 ;	main.c: 462: i2c_stop();
      0005A7 CDr03rF7         [ 4] 1233 	call	_i2c_stop
                                   1234 ;	main.c: 463: uart_write("SW ");
      0005AA AEr00r68         [ 2] 1235 	ldw	x, #(___str_15+0)
      0005AD CDr00r37         [ 4] 1236 	call	_uart_write
                                   1237 ;	main.c: 464: convert_int_to_chars(d_addr, a);
      0005B0 AEr02r00         [ 2] 1238 	ldw	x, #(_a+0)
      0005B3 C6u02u03         [ 1] 1239 	ld	a, _d_addr+0
      0005B6 CDr00rA1         [ 4] 1240 	call	_convert_int_to_chars
                                   1241 ;	main.c: 465: uart_write(a);
      0005B9 AEr02r00         [ 2] 1242 	ldw	x, #(_a+0)
      0005BC CDr00r37         [ 4] 1243 	call	_uart_write
                                   1244 ;	main.c: 466: uart_write(" ");
      0005BF AEr00r66         [ 2] 1245 	ldw	x, #(___str_14+0)
      0005C2 CDr00r37         [ 4] 1246 	call	_uart_write
                                   1247 ;	main.c: 467: convert_int_to_chars(d_size, a);
      0005C5 AEr02r00         [ 2] 1248 	ldw	x, #(_a+0)
      0005C8 C6u02u05         [ 1] 1249 	ld	a, _d_size+0
      0005CB CDr00rA1         [ 4] 1250 	call	_convert_int_to_chars
                                   1251 ;	main.c: 468: uart_write(a);
      0005CE AEr02r00         [ 2] 1252 	ldw	x, #(_a+0)
      0005D1 CDr00r37         [ 4] 1253 	call	_uart_write
                                   1254 ;	main.c: 469: for(int i = 0;i < d_size;i++)
      0005D4 5F               [ 1] 1255 	clrw	x
      0005D5 1F 03            [ 2] 1256 	ldw	(0x03, sp), x
      0005D7                       1257 00103$:
      0005D7 C6u02u05         [ 1] 1258 	ld	a, _d_size+0
      0005DA 6B 02            [ 1] 1259 	ld	(0x02, sp), a
      0005DC 0F 01            [ 1] 1260 	clr	(0x01, sp)
      0005DE 1E 03            [ 2] 1261 	ldw	x, (0x03, sp)
      0005E0 13 01            [ 2] 1262 	cpw	x, (0x01, sp)
      0005E2 2E 1E            [ 1] 1263 	jrsge	00101$
                                   1264 ;	main.c: 471: uart_write(" ");
      0005E4 AEr00r66         [ 2] 1265 	ldw	x, #(___str_14+0)
      0005E7 CDr00r37         [ 4] 1266 	call	_uart_write
                                   1267 ;	main.c: 472: convert_int_to_chars(data_buf[i], a);
      0005EA 1E 03            [ 2] 1268 	ldw	x, (0x03, sp)
      0005EC D6u02u07         [ 1] 1269 	ld	a, (_data_buf+0, x)
      0005EF AEr02r00         [ 2] 1270 	ldw	x, #(_a+0)
      0005F2 CDr00rA1         [ 4] 1271 	call	_convert_int_to_chars
                                   1272 ;	main.c: 473: uart_write(a);
      0005F5 AEr02r00         [ 2] 1273 	ldw	x, #(_a+0)
      0005F8 CDr00r37         [ 4] 1274 	call	_uart_write
                                   1275 ;	main.c: 469: for(int i = 0;i < d_size;i++)
      0005FB 1E 03            [ 2] 1276 	ldw	x, (0x03, sp)
      0005FD 5C               [ 1] 1277 	incw	x
      0005FE 1F 03            [ 2] 1278 	ldw	(0x03, sp), x
      000600 20 D5            [ 2] 1279 	jra	00103$
      000602                       1280 00101$:
                                   1281 ;	main.c: 476: uart_write("\r\n");
      000602 AEr00r57         [ 2] 1282 	ldw	x, #(___str_10+0)
      000605 5B 04            [ 2] 1283 	addw	sp, #4
                                   1284 ;	main.c: 477: }
      000607 CCr00r37         [ 2] 1285 	jp	_uart_write
                                   1286 ;	main.c: 485: int data_handler(void)
                                   1287 ;	-----------------------------------------
                                   1288 ;	 function data_handler
                                   1289 ;	-----------------------------------------
      00060A                       1290 _data_handler:
                                   1291 ;	main.c: 487: p_size = 0;
      00060A 72 5Fu02u04      [ 1] 1292 	clr	_p_size+0
                                   1293 ;	main.c: 488: p_bytes = 0;
      00060E 72 5Fu02u06      [ 1] 1294 	clr	_p_bytes+0
                                   1295 ;	main.c: 489: d_addr = 0;
      000612 72 5Fu02u03      [ 1] 1296 	clr	_d_addr+0
                                   1297 ;	main.c: 490: d_size = 0;
      000616 72 5Fu02u05      [ 1] 1298 	clr	_d_size+0
                                   1299 ;	main.c: 491: memset(a, 0, sizeof(a));
      00061A 4B 03            [ 1] 1300 	push	#0x03
      00061C 4B 00            [ 1] 1301 	push	#0x00
      00061E 5F               [ 1] 1302 	clrw	x
      00061F 89               [ 2] 1303 	pushw	x
      000620 AEr02r00         [ 2] 1304 	ldw	x, #(_a+0)
      000623 CDr00r00         [ 4] 1305 	call	_memset
                                   1306 ;	main.c: 492: memset(data_buf, 0, sizeof(data_buf));
      000626 4B 00            [ 1] 1307 	push	#0x00
      000628 4B 01            [ 1] 1308 	push	#0x01
      00062A 5F               [ 1] 1309 	clrw	x
      00062B 89               [ 2] 1310 	pushw	x
      00062C AEr02r07         [ 2] 1311 	ldw	x, #(_data_buf+0)
      00062F CDr00r00         [ 4] 1312 	call	_memset
                                   1313 ;	main.c: 493: if(memcmp(&buffer[0],"SM",2) == 0)
      000632 4B 02            [ 1] 1314 	push	#0x02
      000634 4B 00            [ 1] 1315 	push	#0x00
      000636 4Br6C            [ 1] 1316 	push	#<(___str_16+0)
      000638 4Bs00            [ 1] 1317 	push	#((___str_16+0) >> 8)
      00063A AEr01r00         [ 2] 1318 	ldw	x, #(_buffer+0)
      00063D CDr00r00         [ 4] 1319 	call	_memcmp
                                   1320 ;	main.c: 494: return 1;
      000640 5D               [ 2] 1321 	tnzw	x
      000641 26 02            [ 1] 1322 	jrne	00102$
      000643 5C               [ 1] 1323 	incw	x
      000644 81               [ 4] 1324 	ret
      000645                       1325 00102$:
                                   1326 ;	main.c: 495: if(memcmp(&buffer[0],"SN",2) == 0)
      000645 4B 02            [ 1] 1327 	push	#0x02
      000647 4B 00            [ 1] 1328 	push	#0x00
      000649 4Br6F            [ 1] 1329 	push	#<(___str_17+0)
      00064B 4Bs00            [ 1] 1330 	push	#((___str_17+0) >> 8)
      00064D AEr01r00         [ 2] 1331 	ldw	x, #(_buffer+0)
      000650 CDr00r00         [ 4] 1332 	call	_memcmp
      000653 5D               [ 2] 1333 	tnzw	x
      000654 26 04            [ 1] 1334 	jrne	00104$
                                   1335 ;	main.c: 496: return 2;
      000656 AE 00 02         [ 2] 1336 	ldw	x, #0x0002
      000659 81               [ 4] 1337 	ret
      00065A                       1338 00104$:
                                   1339 ;	main.c: 497: if(memcmp(&buffer[0],"ST",2) == 0)
      00065A 4B 02            [ 1] 1340 	push	#0x02
      00065C 4B 00            [ 1] 1341 	push	#0x00
      00065E 4Br72            [ 1] 1342 	push	#<(___str_18+0)
      000660 4Bs00            [ 1] 1343 	push	#((___str_18+0) >> 8)
      000662 AEr01r00         [ 2] 1344 	ldw	x, #(_buffer+0)
      000665 CDr00r00         [ 4] 1345 	call	_memcmp
      000668 5D               [ 2] 1346 	tnzw	x
      000669 26 04            [ 1] 1347 	jrne	00106$
                                   1348 ;	main.c: 498: return 5;
      00066B AE 00 05         [ 2] 1349 	ldw	x, #0x0005
      00066E 81               [ 4] 1350 	ret
      00066F                       1351 00106$:
                                   1352 ;	main.c: 499: if(memcmp(&buffer[0],"RM",2) == 0)
      00066F 4B 02            [ 1] 1353 	push	#0x02
      000671 4B 00            [ 1] 1354 	push	#0x00
      000673 4Br75            [ 1] 1355 	push	#<(___str_19+0)
      000675 4Bs00            [ 1] 1356 	push	#((___str_19+0) >> 8)
      000677 AEr01r00         [ 2] 1357 	ldw	x, #(_buffer+0)
      00067A CDr00r00         [ 4] 1358 	call	_memcmp
      00067D 5D               [ 2] 1359 	tnzw	x
      00067E 26 04            [ 1] 1360 	jrne	00108$
                                   1361 ;	main.c: 500: return 6;
      000680 AE 00 06         [ 2] 1362 	ldw	x, #0x0006
      000683 81               [ 4] 1363 	ret
      000684                       1364 00108$:
                                   1365 ;	main.c: 501: if(memcmp(&buffer[0],"DB",2) == 0)
      000684 4B 02            [ 1] 1366 	push	#0x02
      000686 4B 00            [ 1] 1367 	push	#0x00
      000688 4Br78            [ 1] 1368 	push	#<(___str_20+0)
      00068A 4Bs00            [ 1] 1369 	push	#((___str_20+0) >> 8)
      00068C AEr01r00         [ 2] 1370 	ldw	x, #(_buffer+0)
      00068F CDr00r00         [ 4] 1371 	call	_memcmp
      000692 5D               [ 2] 1372 	tnzw	x
      000693 26 04            [ 1] 1373 	jrne	00110$
                                   1374 ;	main.c: 502: return 7;
      000695 AE 00 07         [ 2] 1375 	ldw	x, #0x0007
      000698 81               [ 4] 1376 	ret
      000699                       1377 00110$:
                                   1378 ;	main.c: 504: get_addr_from_buff();
      000699 CDr01r85         [ 4] 1379 	call	_get_addr_from_buff
                                   1380 ;	main.c: 505: get_size_from_buff();
      00069C CDr01rCA         [ 4] 1381 	call	_get_size_from_buff
                                   1382 ;	main.c: 507: if(memcmp(&buffer[0],"SR",2) == 0)
      00069F 4B 02            [ 1] 1383 	push	#0x02
      0006A1 4B 00            [ 1] 1384 	push	#0x00
      0006A3 4Br7B            [ 1] 1385 	push	#<(___str_21+0)
      0006A5 4Bs00            [ 1] 1386 	push	#((___str_21+0) >> 8)
      0006A7 AEr01r00         [ 2] 1387 	ldw	x, #(_buffer+0)
      0006AA CDr00r00         [ 4] 1388 	call	_memcmp
      0006AD 5D               [ 2] 1389 	tnzw	x
      0006AE 26 04            [ 1] 1390 	jrne	00112$
                                   1391 ;	main.c: 508: return 3;
      0006B0 AE 00 03         [ 2] 1392 	ldw	x, #0x0003
      0006B3 81               [ 4] 1393 	ret
      0006B4                       1394 00112$:
                                   1395 ;	main.c: 510: char_buffer_to_int();
      0006B4 CDr02r24         [ 4] 1396 	call	_char_buffer_to_int
                                   1397 ;	main.c: 512: if(memcmp(&buffer[0],"SW",2) == 0)
      0006B7 4B 02            [ 1] 1398 	push	#0x02
      0006B9 4B 00            [ 1] 1399 	push	#0x00
      0006BB 4Br7E            [ 1] 1400 	push	#<(___str_22+0)
      0006BD 4Bs00            [ 1] 1401 	push	#((___str_22+0) >> 8)
      0006BF AEr01r00         [ 2] 1402 	ldw	x, #(_buffer+0)
      0006C2 CDr00r00         [ 4] 1403 	call	_memcmp
      0006C5 5D               [ 2] 1404 	tnzw	x
      0006C6 26 04            [ 1] 1405 	jrne	00114$
                                   1406 ;	main.c: 513: return 4;
      0006C8 AE 00 04         [ 2] 1407 	ldw	x, #0x0004
      0006CB 81               [ 4] 1408 	ret
      0006CC                       1409 00114$:
                                   1410 ;	main.c: 514: return 0;
      0006CC 5F               [ 1] 1411 	clrw	x
                                   1412 ;	main.c: 516: }
      0006CD 81               [ 4] 1413 	ret
                                   1414 ;	main.c: 518: void command_switcher(void)
                                   1415 ;	-----------------------------------------
                                   1416 ;	 function command_switcher
                                   1417 ;	-----------------------------------------
      0006CE                       1418 _command_switcher:
      0006CE 52 04            [ 2] 1419 	sub	sp, #4
                                   1420 ;	main.c: 520: char ar[4]={0};
      0006D0 0F 01            [ 1] 1421 	clr	(0x01, sp)
      0006D2 0F 02            [ 1] 1422 	clr	(0x02, sp)
      0006D4 0F 03            [ 1] 1423 	clr	(0x03, sp)
      0006D6 0F 04            [ 1] 1424 	clr	(0x04, sp)
                                   1425 ;	main.c: 522: switch(data_handler())
      0006D8 CDr06r0A         [ 4] 1426 	call	_data_handler
      0006DB 5D               [ 2] 1427 	tnzw	x
      0006DC 2B 3B            [ 1] 1428 	jrmi	00109$
      0006DE A3 00 07         [ 2] 1429 	cpw	x, #0x0007
      0006E1 2C 36            [ 1] 1430 	jrsgt	00109$
      0006E3 58               [ 2] 1431 	sllw	x
      0006E4 DEu06uE8         [ 2] 1432 	ldw	x, (#00123$, x)
      0006E7 FC               [ 2] 1433 	jp	(x)
      0006E8                       1434 00123$:
      0006E8r07r19                 1435 	.dw	#00109$
      0006EAr06rF8                 1436 	.dw	#00101$
      0006ECr06rFD                 1437 	.dw	#00102$
      0006EEr07r02                 1438 	.dw	#00103$
      0006F0r07r07                 1439 	.dw	#00104$
      0006F2r07r0C                 1440 	.dw	#00105$
      0006F4r07r11                 1441 	.dw	#00106$
      0006F6r07r16                 1442 	.dw	#00107$
                                   1443 ;	main.c: 524: case 1:
      0006F8                       1444 00101$:
                                   1445 ;	main.c: 525: cm_SM();
      0006F8 CDr04rE1         [ 4] 1446 	call	_cm_SM
                                   1447 ;	main.c: 526: break;
      0006FB 20 1C            [ 2] 1448 	jra	00109$
                                   1449 ;	main.c: 527: case 2:
      0006FD                       1450 00102$:
                                   1451 ;	main.c: 528: cm_SN();
      0006FD CDr05r07         [ 4] 1452 	call	_cm_SN
                                   1453 ;	main.c: 529: break;
      000700 20 17            [ 2] 1454 	jra	00109$
                                   1455 ;	main.c: 530: case 3:
      000702                       1456 00103$:
                                   1457 ;	main.c: 531: cm_SR();
      000702 CDr05r28         [ 4] 1458 	call	_cm_SR
                                   1459 ;	main.c: 532: break;
      000705 20 12            [ 2] 1460 	jra	00109$
                                   1461 ;	main.c: 533: case 4:
      000707                       1462 00104$:
                                   1463 ;	main.c: 534: cm_SW();
      000707 CDr05r99         [ 4] 1464 	call	_cm_SW
                                   1465 ;	main.c: 535: break;
      00070A 20 0D            [ 2] 1466 	jra	00109$
                                   1467 ;	main.c: 536: case 5:
      00070C                       1468 00105$:
                                   1469 ;	main.c: 537: cm_ST();
      00070C CDr05r1A         [ 4] 1470 	call	_cm_ST
                                   1471 ;	main.c: 538: break;
      00070F 20 08            [ 2] 1472 	jra	00109$
                                   1473 ;	main.c: 539: case 6:
      000711                       1474 00106$:
                                   1475 ;	main.c: 540: cm_RM();
      000711 CDr05r0D         [ 4] 1476 	call	_cm_RM
                                   1477 ;	main.c: 541: break;
      000714 20 03            [ 2] 1478 	jra	00109$
                                   1479 ;	main.c: 542: case 7:
      000716                       1480 00107$:
                                   1481 ;	main.c: 543: cm_DB();
      000716 CDr05r17         [ 4] 1482 	call	_cm_DB
                                   1483 ;	main.c: 545: }
      000719                       1484 00109$:
                                   1485 ;	main.c: 546: }
      000719 5B 04            [ 2] 1486 	addw	sp, #4
      00071B 81               [ 4] 1487 	ret
                                   1488 ;	main.c: 549: void main(void)
                                   1489 ;	-----------------------------------------
                                   1490 ;	 function main
                                   1491 ;	-----------------------------------------
      00071C                       1492 _main:
                                   1493 ;	main.c: 551: uart_init();
      00071C CDr03r9C         [ 4] 1494 	call	_uart_init
                                   1495 ;	main.c: 552: i2c_init();
      00071F CDr03rB9         [ 4] 1496 	call	_i2c_init
                                   1497 ;	main.c: 553: uart_write("SS\n");
      000722 AEr00r81         [ 2] 1498 	ldw	x, #(___str_23+0)
      000725 CDr00r37         [ 4] 1499 	call	_uart_write
                                   1500 ;	main.c: 554: while(1)
      000728                       1501 00102$:
                                   1502 ;	main.c: 556: uart_read();
      000728 CDr00r6B         [ 4] 1503 	call	_uart_read
                                   1504 ;	main.c: 557: command_switcher();
      00072B CDr06rCE         [ 4] 1505 	call	_command_switcher
      00072E 20 F8            [ 2] 1506 	jra	00102$
                                   1507 ;	main.c: 559: }
      000730 81               [ 4] 1508 	ret
                                   1509 	.area CODE
                                   1510 	.area CONST
                                   1511 	.area CONST
      000000                       1512 ___str_0:
      000000 0A                    1513 	.db 0x0a
      000001 49 32 43 5F 52 45 47  1514 	.ascii "I2C_REGS >.<"
             53 20 3E 2E 3C
      00000D 0A                    1515 	.db 0x0a
      00000E 00                    1516 	.db 0x00
                                   1517 	.area CODE
                                   1518 	.area CONST
      00000F                       1519 ___str_1:
      00000F 0A                    1520 	.db 0x0a
      000010 53 52 31 20 2D 3E 20  1521 	.ascii "SR1 -> "
      000017 00                    1522 	.db 0x00
                                   1523 	.area CODE
                                   1524 	.area CONST
      000018                       1525 ___str_2:
      000018 20 3C 2D              1526 	.ascii " <-"
      00001B 0A                    1527 	.db 0x0a
      00001C 00                    1528 	.db 0x00
                                   1529 	.area CODE
                                   1530 	.area CONST
      00001D                       1531 ___str_3:
      00001D 53 52 32 20 2D 3E 20  1532 	.ascii "SR2 -> "
      000024 00                    1533 	.db 0x00
                                   1534 	.area CODE
                                   1535 	.area CONST
      000025                       1536 ___str_4:
      000025 53 52 33 20 2D 3E 20  1537 	.ascii "SR3 -> "
      00002C 00                    1538 	.db 0x00
                                   1539 	.area CODE
                                   1540 	.area CONST
      00002D                       1541 ___str_5:
      00002D 43 52 31 20 2D 3E 20  1542 	.ascii "CR1 -> "
      000034 00                    1543 	.db 0x00
                                   1544 	.area CODE
                                   1545 	.area CONST
      000035                       1546 ___str_6:
      000035 43 52 32 20 2D 3E 20  1547 	.ascii "CR2 -> "
      00003C 00                    1548 	.db 0x00
                                   1549 	.area CODE
                                   1550 	.area CONST
      00003D                       1551 ___str_7:
      00003D 44 52 20 2D 3E 20     1552 	.ascii "DR -> "
      000043 00                    1553 	.db 0x00
                                   1554 	.area CODE
                                   1555 	.area CONST
      000044                       1556 ___str_8:
      000044 55 41 52 54 5F 52 45  1557 	.ascii "UART_REGS >.<"
             47 53 20 3E 2E 3C
      000051 0A                    1558 	.db 0x0a
      000052 00                    1559 	.db 0x00
                                   1560 	.area CODE
                                   1561 	.area CONST
      000053                       1562 ___str_9:
      000053 53 4D 20              1563 	.ascii "SM "
      000056 00                    1564 	.db 0x00
                                   1565 	.area CODE
                                   1566 	.area CONST
      000057                       1567 ___str_10:
      000057 0D                    1568 	.db 0x0d
      000058 0A                    1569 	.db 0x0a
      000059 00                    1570 	.db 0x00
                                   1571 	.area CODE
                                   1572 	.area CONST
      00005A                       1573 ___str_11:
      00005A 52 4D                 1574 	.ascii "RM"
      00005C 0A                    1575 	.db 0x0a
      00005D 00                    1576 	.db 0x00
                                   1577 	.area CODE
                                   1578 	.area CONST
      00005E                       1579 ___str_12:
      00005E 53 54                 1580 	.ascii "ST"
      000060 0A                    1581 	.db 0x0a
      000061 00                    1582 	.db 0x00
                                   1583 	.area CODE
                                   1584 	.area CONST
      000062                       1585 ___str_13:
      000062 53 52 20              1586 	.ascii "SR "
      000065 00                    1587 	.db 0x00
                                   1588 	.area CODE
                                   1589 	.area CONST
      000066                       1590 ___str_14:
      000066 20                    1591 	.ascii " "
      000067 00                    1592 	.db 0x00
                                   1593 	.area CODE
                                   1594 	.area CONST
      000068                       1595 ___str_15:
      000068 53 57 20              1596 	.ascii "SW "
      00006B 00                    1597 	.db 0x00
                                   1598 	.area CODE
                                   1599 	.area CONST
      00006C                       1600 ___str_16:
      00006C 53 4D                 1601 	.ascii "SM"
      00006E 00                    1602 	.db 0x00
                                   1603 	.area CODE
                                   1604 	.area CONST
      00006F                       1605 ___str_17:
      00006F 53 4E                 1606 	.ascii "SN"
      000071 00                    1607 	.db 0x00
                                   1608 	.area CODE
                                   1609 	.area CONST
      000072                       1610 ___str_18:
      000072 53 54                 1611 	.ascii "ST"
      000074 00                    1612 	.db 0x00
                                   1613 	.area CODE
                                   1614 	.area CONST
      000075                       1615 ___str_19:
      000075 52 4D                 1616 	.ascii "RM"
      000077 00                    1617 	.db 0x00
                                   1618 	.area CODE
                                   1619 	.area CONST
      000078                       1620 ___str_20:
      000078 44 42                 1621 	.ascii "DB"
      00007A 00                    1622 	.db 0x00
                                   1623 	.area CODE
                                   1624 	.area CONST
      00007B                       1625 ___str_21:
      00007B 53 52                 1626 	.ascii "SR"
      00007D 00                    1627 	.db 0x00
                                   1628 	.area CODE
                                   1629 	.area CONST
      00007E                       1630 ___str_22:
      00007E 53 57                 1631 	.ascii "SW"
      000080 00                    1632 	.db 0x00
                                   1633 	.area CODE
                                   1634 	.area CONST
      000081                       1635 ___str_23:
      000081 53 53                 1636 	.ascii "SS"
      000083 0A                    1637 	.db 0x0a
      000084 00                    1638 	.db 0x00
                                   1639 	.area CODE
                                   1640 	.area INITIALIZER
      000000                       1641 __xinit__status_registers:
      000000 00                    1642 	.db #0x00	; 0
      000001 00                    1643 	.db 0x00
      000002 00                    1644 	.db 0x00
      000003 00                    1645 	.db 0x00
      000004 00                    1646 	.db 0x00
      000005 00                    1647 	.db 0x00
      000006 00                    1648 	.db 0x00
      000007 00                    1649 	.db 0x00
      000008 00                    1650 	.db 0x00
      000009 00                    1651 	.db 0x00
      00000A 00                    1652 	.db 0x00
      00000B 00                    1653 	.db 0x00
      00000C 00                    1654 	.db 0x00
      00000D 00                    1655 	.db 0x00
      00000E 00                    1656 	.db 0x00
      00000F 00                    1657 	.db 0x00
      000010 00                    1658 	.db 0x00
      000011 00                    1659 	.db 0x00
      000012 00                    1660 	.db 0x00
      000013 00                    1661 	.db 0x00
      000014 00                    1662 	.db 0x00
      000015 00                    1663 	.db 0x00
      000016 00                    1664 	.db 0x00
      000017 00                    1665 	.db 0x00
      000018 00                    1666 	.db 0x00
      000019 00                    1667 	.db 0x00
      00001A 00                    1668 	.db 0x00
      00001B 00                    1669 	.db 0x00
      00001C 00                    1670 	.db 0x00
      00001D 00                    1671 	.db 0x00
      00001E 00                    1672 	.db 0x00
      00001F 00                    1673 	.db 0x00
      000020 00                    1674 	.db 0x00
      000021 00                    1675 	.db 0x00
      000022 00                    1676 	.db 0x00
      000023 00                    1677 	.db 0x00
      000024 00                    1678 	.db 0x00
      000025 00                    1679 	.db 0x00
      000026 00                    1680 	.db 0x00
      000027 00                    1681 	.db 0x00
      000028 00                    1682 	.db 0x00
      000029 00                    1683 	.db 0x00
      00002A 00                    1684 	.db 0x00
      00002B 00                    1685 	.db 0x00
      00002C 00                    1686 	.db 0x00
      00002D 00                    1687 	.db 0x00
      00002E 00                    1688 	.db 0x00
      00002F 00                    1689 	.db 0x00
      000030 00                    1690 	.db 0x00
      000031 00                    1691 	.db 0x00
      000032 00                    1692 	.db 0x00
      000033 00                    1693 	.db 0x00
      000034 00                    1694 	.db 0x00
      000035 00                    1695 	.db 0x00
      000036 00                    1696 	.db 0x00
      000037 00                    1697 	.db 0x00
      000038 00                    1698 	.db 0x00
      000039 00                    1699 	.db 0x00
      00003A 00                    1700 	.db 0x00
      00003B 00                    1701 	.db 0x00
      00003C 00                    1702 	.db 0x00
      00003D 00                    1703 	.db 0x00
      00003E 00                    1704 	.db 0x00
      00003F 00                    1705 	.db 0x00
      000040 00                    1706 	.db 0x00
      000041 00                    1707 	.db 0x00
      000042 00                    1708 	.db 0x00
      000043 00                    1709 	.db 0x00
      000044 00                    1710 	.db 0x00
      000045 00                    1711 	.db 0x00
      000046 00                    1712 	.db 0x00
      000047 00                    1713 	.db 0x00
      000048 00                    1714 	.db 0x00
      000049 00                    1715 	.db 0x00
      00004A 00                    1716 	.db 0x00
      00004B 00                    1717 	.db 0x00
      00004C 00                    1718 	.db 0x00
      00004D 00                    1719 	.db 0x00
      00004E 00                    1720 	.db 0x00
      00004F 00                    1721 	.db 0x00
      000050 00                    1722 	.db 0x00
      000051 00                    1723 	.db 0x00
      000052 00                    1724 	.db 0x00
      000053 00                    1725 	.db 0x00
      000054 00                    1726 	.db 0x00
      000055 00                    1727 	.db 0x00
      000056 00                    1728 	.db 0x00
      000057 00                    1729 	.db 0x00
      000058 00                    1730 	.db 0x00
      000059 00                    1731 	.db 0x00
      00005A 00                    1732 	.db 0x00
      00005B 00                    1733 	.db 0x00
      00005C 00                    1734 	.db 0x00
      00005D 00                    1735 	.db 0x00
      00005E 00                    1736 	.db 0x00
      00005F 00                    1737 	.db 0x00
      000060 00                    1738 	.db 0x00
      000061 00                    1739 	.db 0x00
      000062 00                    1740 	.db 0x00
      000063 00                    1741 	.db 0x00
      000064 00                    1742 	.db 0x00
      000065 00                    1743 	.db 0x00
      000066 00                    1744 	.db 0x00
      000067 00                    1745 	.db 0x00
      000068 00                    1746 	.db 0x00
      000069 00                    1747 	.db 0x00
      00006A 00                    1748 	.db 0x00
      00006B 00                    1749 	.db 0x00
      00006C 00                    1750 	.db 0x00
      00006D 00                    1751 	.db 0x00
      00006E 00                    1752 	.db 0x00
      00006F 00                    1753 	.db 0x00
      000070 00                    1754 	.db 0x00
      000071 00                    1755 	.db 0x00
      000072 00                    1756 	.db 0x00
      000073 00                    1757 	.db 0x00
      000074 00                    1758 	.db 0x00
      000075 00                    1759 	.db 0x00
      000076 00                    1760 	.db 0x00
      000077 00                    1761 	.db 0x00
      000078 00                    1762 	.db 0x00
      000079 00                    1763 	.db 0x00
      00007A 00                    1764 	.db 0x00
      00007B 00                    1765 	.db 0x00
      00007C 00                    1766 	.db 0x00
      00007D 00                    1767 	.db 0x00
      00007E 00                    1768 	.db 0x00
      00007F 00                    1769 	.db 0x00
      000080 00                    1770 	.db 0x00
      000081 00                    1771 	.db 0x00
      000082 00                    1772 	.db 0x00
      000083 00                    1773 	.db 0x00
      000084 00                    1774 	.db 0x00
      000085 00                    1775 	.db 0x00
      000086 00                    1776 	.db 0x00
      000087 00                    1777 	.db 0x00
      000088 00                    1778 	.db 0x00
      000089 00                    1779 	.db 0x00
      00008A 00                    1780 	.db 0x00
      00008B 00                    1781 	.db 0x00
      00008C 00                    1782 	.db 0x00
      00008D 00                    1783 	.db 0x00
      00008E 00                    1784 	.db 0x00
      00008F 00                    1785 	.db 0x00
      000090 00                    1786 	.db 0x00
      000091 00                    1787 	.db 0x00
      000092 00                    1788 	.db 0x00
      000093 00                    1789 	.db 0x00
      000094 00                    1790 	.db 0x00
      000095 00                    1791 	.db 0x00
      000096 00                    1792 	.db 0x00
      000097 00                    1793 	.db 0x00
      000098 00                    1794 	.db 0x00
      000099 00                    1795 	.db 0x00
      00009A 00                    1796 	.db 0x00
      00009B 00                    1797 	.db 0x00
      00009C 00                    1798 	.db 0x00
      00009D 00                    1799 	.db 0x00
      00009E 00                    1800 	.db 0x00
      00009F 00                    1801 	.db 0x00
      0000A0 00                    1802 	.db 0x00
      0000A1 00                    1803 	.db 0x00
      0000A2 00                    1804 	.db 0x00
      0000A3 00                    1805 	.db 0x00
      0000A4 00                    1806 	.db 0x00
      0000A5 00                    1807 	.db 0x00
      0000A6 00                    1808 	.db 0x00
      0000A7 00                    1809 	.db 0x00
      0000A8 00                    1810 	.db 0x00
      0000A9 00                    1811 	.db 0x00
      0000AA 00                    1812 	.db 0x00
      0000AB 00                    1813 	.db 0x00
      0000AC 00                    1814 	.db 0x00
      0000AD 00                    1815 	.db 0x00
      0000AE 00                    1816 	.db 0x00
      0000AF 00                    1817 	.db 0x00
      0000B0 00                    1818 	.db 0x00
      0000B1 00                    1819 	.db 0x00
      0000B2 00                    1820 	.db 0x00
      0000B3 00                    1821 	.db 0x00
      0000B4 00                    1822 	.db 0x00
      0000B5 00                    1823 	.db 0x00
      0000B6 00                    1824 	.db 0x00
      0000B7 00                    1825 	.db 0x00
      0000B8 00                    1826 	.db 0x00
      0000B9 00                    1827 	.db 0x00
      0000BA 00                    1828 	.db 0x00
      0000BB 00                    1829 	.db 0x00
      0000BC 00                    1830 	.db 0x00
      0000BD 00                    1831 	.db 0x00
      0000BE 00                    1832 	.db 0x00
      0000BF 00                    1833 	.db 0x00
      0000C0 00                    1834 	.db 0x00
      0000C1 00                    1835 	.db 0x00
      0000C2 00                    1836 	.db 0x00
      0000C3 00                    1837 	.db 0x00
      0000C4 00                    1838 	.db 0x00
      0000C5 00                    1839 	.db 0x00
      0000C6 00                    1840 	.db 0x00
      0000C7 00                    1841 	.db 0x00
      0000C8 00                    1842 	.db 0x00
      0000C9 00                    1843 	.db 0x00
      0000CA 00                    1844 	.db 0x00
      0000CB 00                    1845 	.db 0x00
      0000CC 00                    1846 	.db 0x00
      0000CD 00                    1847 	.db 0x00
      0000CE 00                    1848 	.db 0x00
      0000CF 00                    1849 	.db 0x00
      0000D0 00                    1850 	.db 0x00
      0000D1 00                    1851 	.db 0x00
      0000D2 00                    1852 	.db 0x00
      0000D3 00                    1853 	.db 0x00
      0000D4 00                    1854 	.db 0x00
      0000D5 00                    1855 	.db 0x00
      0000D6 00                    1856 	.db 0x00
      0000D7 00                    1857 	.db 0x00
      0000D8 00                    1858 	.db 0x00
      0000D9 00                    1859 	.db 0x00
      0000DA 00                    1860 	.db 0x00
      0000DB 00                    1861 	.db 0x00
      0000DC 00                    1862 	.db 0x00
      0000DD 00                    1863 	.db 0x00
      0000DE 00                    1864 	.db 0x00
      0000DF 00                    1865 	.db 0x00
      0000E0 00                    1866 	.db 0x00
      0000E1 00                    1867 	.db 0x00
      0000E2 00                    1868 	.db 0x00
      0000E3 00                    1869 	.db 0x00
      0000E4 00                    1870 	.db 0x00
      0000E5 00                    1871 	.db 0x00
      0000E6 00                    1872 	.db 0x00
      0000E7 00                    1873 	.db 0x00
      0000E8 00                    1874 	.db 0x00
      0000E9 00                    1875 	.db 0x00
      0000EA 00                    1876 	.db 0x00
      0000EB 00                    1877 	.db 0x00
      0000EC 00                    1878 	.db 0x00
      0000ED 00                    1879 	.db 0x00
      0000EE 00                    1880 	.db 0x00
      0000EF 00                    1881 	.db 0x00
      0000F0 00                    1882 	.db 0x00
      0000F1 00                    1883 	.db 0x00
      0000F2 00                    1884 	.db 0x00
      0000F3 00                    1885 	.db 0x00
      0000F4 00                    1886 	.db 0x00
      0000F5 00                    1887 	.db 0x00
      0000F6 00                    1888 	.db 0x00
      0000F7 00                    1889 	.db 0x00
      0000F8 00                    1890 	.db 0x00
      0000F9 00                    1891 	.db 0x00
      0000FA 00                    1892 	.db 0x00
      0000FB 00                    1893 	.db 0x00
      0000FC 00                    1894 	.db 0x00
      0000FD 00                    1895 	.db 0x00
      0000FE 00                    1896 	.db 0x00
      0000FF 00                    1897 	.db 0x00
      000100                       1898 __xinit__buffer:
      000100 00                    1899 	.db #0x00	; 0
      000101 00                    1900 	.db 0x00
      000102 00                    1901 	.db 0x00
      000103 00                    1902 	.db 0x00
      000104 00                    1903 	.db 0x00
      000105 00                    1904 	.db 0x00
      000106 00                    1905 	.db 0x00
      000107 00                    1906 	.db 0x00
      000108 00                    1907 	.db 0x00
      000109 00                    1908 	.db 0x00
      00010A 00                    1909 	.db 0x00
      00010B 00                    1910 	.db 0x00
      00010C 00                    1911 	.db 0x00
      00010D 00                    1912 	.db 0x00
      00010E 00                    1913 	.db 0x00
      00010F 00                    1914 	.db 0x00
      000110 00                    1915 	.db 0x00
      000111 00                    1916 	.db 0x00
      000112 00                    1917 	.db 0x00
      000113 00                    1918 	.db 0x00
      000114 00                    1919 	.db 0x00
      000115 00                    1920 	.db 0x00
      000116 00                    1921 	.db 0x00
      000117 00                    1922 	.db 0x00
      000118 00                    1923 	.db 0x00
      000119 00                    1924 	.db 0x00
      00011A 00                    1925 	.db 0x00
      00011B 00                    1926 	.db 0x00
      00011C 00                    1927 	.db 0x00
      00011D 00                    1928 	.db 0x00
      00011E 00                    1929 	.db 0x00
      00011F 00                    1930 	.db 0x00
      000120 00                    1931 	.db 0x00
      000121 00                    1932 	.db 0x00
      000122 00                    1933 	.db 0x00
      000123 00                    1934 	.db 0x00
      000124 00                    1935 	.db 0x00
      000125 00                    1936 	.db 0x00
      000126 00                    1937 	.db 0x00
      000127 00                    1938 	.db 0x00
      000128 00                    1939 	.db 0x00
      000129 00                    1940 	.db 0x00
      00012A 00                    1941 	.db 0x00
      00012B 00                    1942 	.db 0x00
      00012C 00                    1943 	.db 0x00
      00012D 00                    1944 	.db 0x00
      00012E 00                    1945 	.db 0x00
      00012F 00                    1946 	.db 0x00
      000130 00                    1947 	.db 0x00
      000131 00                    1948 	.db 0x00
      000132 00                    1949 	.db 0x00
      000133 00                    1950 	.db 0x00
      000134 00                    1951 	.db 0x00
      000135 00                    1952 	.db 0x00
      000136 00                    1953 	.db 0x00
      000137 00                    1954 	.db 0x00
      000138 00                    1955 	.db 0x00
      000139 00                    1956 	.db 0x00
      00013A 00                    1957 	.db 0x00
      00013B 00                    1958 	.db 0x00
      00013C 00                    1959 	.db 0x00
      00013D 00                    1960 	.db 0x00
      00013E 00                    1961 	.db 0x00
      00013F 00                    1962 	.db 0x00
      000140 00                    1963 	.db 0x00
      000141 00                    1964 	.db 0x00
      000142 00                    1965 	.db 0x00
      000143 00                    1966 	.db 0x00
      000144 00                    1967 	.db 0x00
      000145 00                    1968 	.db 0x00
      000146 00                    1969 	.db 0x00
      000147 00                    1970 	.db 0x00
      000148 00                    1971 	.db 0x00
      000149 00                    1972 	.db 0x00
      00014A 00                    1973 	.db 0x00
      00014B 00                    1974 	.db 0x00
      00014C 00                    1975 	.db 0x00
      00014D 00                    1976 	.db 0x00
      00014E 00                    1977 	.db 0x00
      00014F 00                    1978 	.db 0x00
      000150 00                    1979 	.db 0x00
      000151 00                    1980 	.db 0x00
      000152 00                    1981 	.db 0x00
      000153 00                    1982 	.db 0x00
      000154 00                    1983 	.db 0x00
      000155 00                    1984 	.db 0x00
      000156 00                    1985 	.db 0x00
      000157 00                    1986 	.db 0x00
      000158 00                    1987 	.db 0x00
      000159 00                    1988 	.db 0x00
      00015A 00                    1989 	.db 0x00
      00015B 00                    1990 	.db 0x00
      00015C 00                    1991 	.db 0x00
      00015D 00                    1992 	.db 0x00
      00015E 00                    1993 	.db 0x00
      00015F 00                    1994 	.db 0x00
      000160 00                    1995 	.db 0x00
      000161 00                    1996 	.db 0x00
      000162 00                    1997 	.db 0x00
      000163 00                    1998 	.db 0x00
      000164 00                    1999 	.db 0x00
      000165 00                    2000 	.db 0x00
      000166 00                    2001 	.db 0x00
      000167 00                    2002 	.db 0x00
      000168 00                    2003 	.db 0x00
      000169 00                    2004 	.db 0x00
      00016A 00                    2005 	.db 0x00
      00016B 00                    2006 	.db 0x00
      00016C 00                    2007 	.db 0x00
      00016D 00                    2008 	.db 0x00
      00016E 00                    2009 	.db 0x00
      00016F 00                    2010 	.db 0x00
      000170 00                    2011 	.db 0x00
      000171 00                    2012 	.db 0x00
      000172 00                    2013 	.db 0x00
      000173 00                    2014 	.db 0x00
      000174 00                    2015 	.db 0x00
      000175 00                    2016 	.db 0x00
      000176 00                    2017 	.db 0x00
      000177 00                    2018 	.db 0x00
      000178 00                    2019 	.db 0x00
      000179 00                    2020 	.db 0x00
      00017A 00                    2021 	.db 0x00
      00017B 00                    2022 	.db 0x00
      00017C 00                    2023 	.db 0x00
      00017D 00                    2024 	.db 0x00
      00017E 00                    2025 	.db 0x00
      00017F 00                    2026 	.db 0x00
      000180 00                    2027 	.db 0x00
      000181 00                    2028 	.db 0x00
      000182 00                    2029 	.db 0x00
      000183 00                    2030 	.db 0x00
      000184 00                    2031 	.db 0x00
      000185 00                    2032 	.db 0x00
      000186 00                    2033 	.db 0x00
      000187 00                    2034 	.db 0x00
      000188 00                    2035 	.db 0x00
      000189 00                    2036 	.db 0x00
      00018A 00                    2037 	.db 0x00
      00018B 00                    2038 	.db 0x00
      00018C 00                    2039 	.db 0x00
      00018D 00                    2040 	.db 0x00
      00018E 00                    2041 	.db 0x00
      00018F 00                    2042 	.db 0x00
      000190 00                    2043 	.db 0x00
      000191 00                    2044 	.db 0x00
      000192 00                    2045 	.db 0x00
      000193 00                    2046 	.db 0x00
      000194 00                    2047 	.db 0x00
      000195 00                    2048 	.db 0x00
      000196 00                    2049 	.db 0x00
      000197 00                    2050 	.db 0x00
      000198 00                    2051 	.db 0x00
      000199 00                    2052 	.db 0x00
      00019A 00                    2053 	.db 0x00
      00019B 00                    2054 	.db 0x00
      00019C 00                    2055 	.db 0x00
      00019D 00                    2056 	.db 0x00
      00019E 00                    2057 	.db 0x00
      00019F 00                    2058 	.db 0x00
      0001A0 00                    2059 	.db 0x00
      0001A1 00                    2060 	.db 0x00
      0001A2 00                    2061 	.db 0x00
      0001A3 00                    2062 	.db 0x00
      0001A4 00                    2063 	.db 0x00
      0001A5 00                    2064 	.db 0x00
      0001A6 00                    2065 	.db 0x00
      0001A7 00                    2066 	.db 0x00
      0001A8 00                    2067 	.db 0x00
      0001A9 00                    2068 	.db 0x00
      0001AA 00                    2069 	.db 0x00
      0001AB 00                    2070 	.db 0x00
      0001AC 00                    2071 	.db 0x00
      0001AD 00                    2072 	.db 0x00
      0001AE 00                    2073 	.db 0x00
      0001AF 00                    2074 	.db 0x00
      0001B0 00                    2075 	.db 0x00
      0001B1 00                    2076 	.db 0x00
      0001B2 00                    2077 	.db 0x00
      0001B3 00                    2078 	.db 0x00
      0001B4 00                    2079 	.db 0x00
      0001B5 00                    2080 	.db 0x00
      0001B6 00                    2081 	.db 0x00
      0001B7 00                    2082 	.db 0x00
      0001B8 00                    2083 	.db 0x00
      0001B9 00                    2084 	.db 0x00
      0001BA 00                    2085 	.db 0x00
      0001BB 00                    2086 	.db 0x00
      0001BC 00                    2087 	.db 0x00
      0001BD 00                    2088 	.db 0x00
      0001BE 00                    2089 	.db 0x00
      0001BF 00                    2090 	.db 0x00
      0001C0 00                    2091 	.db 0x00
      0001C1 00                    2092 	.db 0x00
      0001C2 00                    2093 	.db 0x00
      0001C3 00                    2094 	.db 0x00
      0001C4 00                    2095 	.db 0x00
      0001C5 00                    2096 	.db 0x00
      0001C6 00                    2097 	.db 0x00
      0001C7 00                    2098 	.db 0x00
      0001C8 00                    2099 	.db 0x00
      0001C9 00                    2100 	.db 0x00
      0001CA 00                    2101 	.db 0x00
      0001CB 00                    2102 	.db 0x00
      0001CC 00                    2103 	.db 0x00
      0001CD 00                    2104 	.db 0x00
      0001CE 00                    2105 	.db 0x00
      0001CF 00                    2106 	.db 0x00
      0001D0 00                    2107 	.db 0x00
      0001D1 00                    2108 	.db 0x00
      0001D2 00                    2109 	.db 0x00
      0001D3 00                    2110 	.db 0x00
      0001D4 00                    2111 	.db 0x00
      0001D5 00                    2112 	.db 0x00
      0001D6 00                    2113 	.db 0x00
      0001D7 00                    2114 	.db 0x00
      0001D8 00                    2115 	.db 0x00
      0001D9 00                    2116 	.db 0x00
      0001DA 00                    2117 	.db 0x00
      0001DB 00                    2118 	.db 0x00
      0001DC 00                    2119 	.db 0x00
      0001DD 00                    2120 	.db 0x00
      0001DE 00                    2121 	.db 0x00
      0001DF 00                    2122 	.db 0x00
      0001E0 00                    2123 	.db 0x00
      0001E1 00                    2124 	.db 0x00
      0001E2 00                    2125 	.db 0x00
      0001E3 00                    2126 	.db 0x00
      0001E4 00                    2127 	.db 0x00
      0001E5 00                    2128 	.db 0x00
      0001E6 00                    2129 	.db 0x00
      0001E7 00                    2130 	.db 0x00
      0001E8 00                    2131 	.db 0x00
      0001E9 00                    2132 	.db 0x00
      0001EA 00                    2133 	.db 0x00
      0001EB 00                    2134 	.db 0x00
      0001EC 00                    2135 	.db 0x00
      0001ED 00                    2136 	.db 0x00
      0001EE 00                    2137 	.db 0x00
      0001EF 00                    2138 	.db 0x00
      0001F0 00                    2139 	.db 0x00
      0001F1 00                    2140 	.db 0x00
      0001F2 00                    2141 	.db 0x00
      0001F3 00                    2142 	.db 0x00
      0001F4 00                    2143 	.db 0x00
      0001F5 00                    2144 	.db 0x00
      0001F6 00                    2145 	.db 0x00
      0001F7 00                    2146 	.db 0x00
      0001F8 00                    2147 	.db 0x00
      0001F9 00                    2148 	.db 0x00
      0001FA 00                    2149 	.db 0x00
      0001FB 00                    2150 	.db 0x00
      0001FC 00                    2151 	.db 0x00
      0001FD 00                    2152 	.db 0x00
      0001FE 00                    2153 	.db 0x00
      0001FF 00                    2154 	.db 0x00
      000200                       2155 __xinit__a:
      000200 00                    2156 	.db #0x00	; 0
      000201 00                    2157 	.db 0x00
      000202 00                    2158 	.db 0x00
      000203                       2159 __xinit__d_addr:
      000203 00                    2160 	.db #0x00	; 0
      000204                       2161 __xinit__p_size:
      000204 00                    2162 	.db #0x00	; 0
      000205                       2163 __xinit__d_size:
      000205 00                    2164 	.db #0x00	; 0
      000206                       2165 __xinit__p_bytes:
      000206 00                    2166 	.db #0x00	; 0
      000207                       2167 __xinit__data_buf:
      000207 00                    2168 	.db #0x00	; 0
      000208 00                    2169 	.db 0x00
      000209 00                    2170 	.db 0x00
      00020A 00                    2171 	.db 0x00
      00020B 00                    2172 	.db 0x00
      00020C 00                    2173 	.db 0x00
      00020D 00                    2174 	.db 0x00
      00020E 00                    2175 	.db 0x00
      00020F 00                    2176 	.db 0x00
      000210 00                    2177 	.db 0x00
      000211 00                    2178 	.db 0x00
      000212 00                    2179 	.db 0x00
      000213 00                    2180 	.db 0x00
      000214 00                    2181 	.db 0x00
      000215 00                    2182 	.db 0x00
      000216 00                    2183 	.db 0x00
      000217 00                    2184 	.db 0x00
      000218 00                    2185 	.db 0x00
      000219 00                    2186 	.db 0x00
      00021A 00                    2187 	.db 0x00
      00021B 00                    2188 	.db 0x00
      00021C 00                    2189 	.db 0x00
      00021D 00                    2190 	.db 0x00
      00021E 00                    2191 	.db 0x00
      00021F 00                    2192 	.db 0x00
      000220 00                    2193 	.db 0x00
      000221 00                    2194 	.db 0x00
      000222 00                    2195 	.db 0x00
      000223 00                    2196 	.db 0x00
      000224 00                    2197 	.db 0x00
      000225 00                    2198 	.db 0x00
      000226 00                    2199 	.db 0x00
      000227 00                    2200 	.db 0x00
      000228 00                    2201 	.db 0x00
      000229 00                    2202 	.db 0x00
      00022A 00                    2203 	.db 0x00
      00022B 00                    2204 	.db 0x00
      00022C 00                    2205 	.db 0x00
      00022D 00                    2206 	.db 0x00
      00022E 00                    2207 	.db 0x00
      00022F 00                    2208 	.db 0x00
      000230 00                    2209 	.db 0x00
      000231 00                    2210 	.db 0x00
      000232 00                    2211 	.db 0x00
      000233 00                    2212 	.db 0x00
      000234 00                    2213 	.db 0x00
      000235 00                    2214 	.db 0x00
      000236 00                    2215 	.db 0x00
      000237 00                    2216 	.db 0x00
      000238 00                    2217 	.db 0x00
      000239 00                    2218 	.db 0x00
      00023A 00                    2219 	.db 0x00
      00023B 00                    2220 	.db 0x00
      00023C 00                    2221 	.db 0x00
      00023D 00                    2222 	.db 0x00
      00023E 00                    2223 	.db 0x00
      00023F 00                    2224 	.db 0x00
      000240 00                    2225 	.db 0x00
      000241 00                    2226 	.db 0x00
      000242 00                    2227 	.db 0x00
      000243 00                    2228 	.db 0x00
      000244 00                    2229 	.db 0x00
      000245 00                    2230 	.db 0x00
      000246 00                    2231 	.db 0x00
      000247 00                    2232 	.db 0x00
      000248 00                    2233 	.db 0x00
      000249 00                    2234 	.db 0x00
      00024A 00                    2235 	.db 0x00
      00024B 00                    2236 	.db 0x00
      00024C 00                    2237 	.db 0x00
      00024D 00                    2238 	.db 0x00
      00024E 00                    2239 	.db 0x00
      00024F 00                    2240 	.db 0x00
      000250 00                    2241 	.db 0x00
      000251 00                    2242 	.db 0x00
      000252 00                    2243 	.db 0x00
      000253 00                    2244 	.db 0x00
      000254 00                    2245 	.db 0x00
      000255 00                    2246 	.db 0x00
      000256 00                    2247 	.db 0x00
      000257 00                    2248 	.db 0x00
      000258 00                    2249 	.db 0x00
      000259 00                    2250 	.db 0x00
      00025A 00                    2251 	.db 0x00
      00025B 00                    2252 	.db 0x00
      00025C 00                    2253 	.db 0x00
      00025D 00                    2254 	.db 0x00
      00025E 00                    2255 	.db 0x00
      00025F 00                    2256 	.db 0x00
      000260 00                    2257 	.db 0x00
      000261 00                    2258 	.db 0x00
      000262 00                    2259 	.db 0x00
      000263 00                    2260 	.db 0x00
      000264 00                    2261 	.db 0x00
      000265 00                    2262 	.db 0x00
      000266 00                    2263 	.db 0x00
      000267 00                    2264 	.db 0x00
      000268 00                    2265 	.db 0x00
      000269 00                    2266 	.db 0x00
      00026A 00                    2267 	.db 0x00
      00026B 00                    2268 	.db 0x00
      00026C 00                    2269 	.db 0x00
      00026D 00                    2270 	.db 0x00
      00026E 00                    2271 	.db 0x00
      00026F 00                    2272 	.db 0x00
      000270 00                    2273 	.db 0x00
      000271 00                    2274 	.db 0x00
      000272 00                    2275 	.db 0x00
      000273 00                    2276 	.db 0x00
      000274 00                    2277 	.db 0x00
      000275 00                    2278 	.db 0x00
      000276 00                    2279 	.db 0x00
      000277 00                    2280 	.db 0x00
      000278 00                    2281 	.db 0x00
      000279 00                    2282 	.db 0x00
      00027A 00                    2283 	.db 0x00
      00027B 00                    2284 	.db 0x00
      00027C 00                    2285 	.db 0x00
      00027D 00                    2286 	.db 0x00
      00027E 00                    2287 	.db 0x00
      00027F 00                    2288 	.db 0x00
      000280 00                    2289 	.db 0x00
      000281 00                    2290 	.db 0x00
      000282 00                    2291 	.db 0x00
      000283 00                    2292 	.db 0x00
      000284 00                    2293 	.db 0x00
      000285 00                    2294 	.db 0x00
      000286 00                    2295 	.db 0x00
      000287 00                    2296 	.db 0x00
      000288 00                    2297 	.db 0x00
      000289 00                    2298 	.db 0x00
      00028A 00                    2299 	.db 0x00
      00028B 00                    2300 	.db 0x00
      00028C 00                    2301 	.db 0x00
      00028D 00                    2302 	.db 0x00
      00028E 00                    2303 	.db 0x00
      00028F 00                    2304 	.db 0x00
      000290 00                    2305 	.db 0x00
      000291 00                    2306 	.db 0x00
      000292 00                    2307 	.db 0x00
      000293 00                    2308 	.db 0x00
      000294 00                    2309 	.db 0x00
      000295 00                    2310 	.db 0x00
      000296 00                    2311 	.db 0x00
      000297 00                    2312 	.db 0x00
      000298 00                    2313 	.db 0x00
      000299 00                    2314 	.db 0x00
      00029A 00                    2315 	.db 0x00
      00029B 00                    2316 	.db 0x00
      00029C 00                    2317 	.db 0x00
      00029D 00                    2318 	.db 0x00
      00029E 00                    2319 	.db 0x00
      00029F 00                    2320 	.db 0x00
      0002A0 00                    2321 	.db 0x00
      0002A1 00                    2322 	.db 0x00
      0002A2 00                    2323 	.db 0x00
      0002A3 00                    2324 	.db 0x00
      0002A4 00                    2325 	.db 0x00
      0002A5 00                    2326 	.db 0x00
      0002A6 00                    2327 	.db 0x00
      0002A7 00                    2328 	.db 0x00
      0002A8 00                    2329 	.db 0x00
      0002A9 00                    2330 	.db 0x00
      0002AA 00                    2331 	.db 0x00
      0002AB 00                    2332 	.db 0x00
      0002AC 00                    2333 	.db 0x00
      0002AD 00                    2334 	.db 0x00
      0002AE 00                    2335 	.db 0x00
      0002AF 00                    2336 	.db 0x00
      0002B0 00                    2337 	.db 0x00
      0002B1 00                    2338 	.db 0x00
      0002B2 00                    2339 	.db 0x00
      0002B3 00                    2340 	.db 0x00
      0002B4 00                    2341 	.db 0x00
      0002B5 00                    2342 	.db 0x00
      0002B6 00                    2343 	.db 0x00
      0002B7 00                    2344 	.db 0x00
      0002B8 00                    2345 	.db 0x00
      0002B9 00                    2346 	.db 0x00
      0002BA 00                    2347 	.db 0x00
      0002BB 00                    2348 	.db 0x00
      0002BC 00                    2349 	.db 0x00
      0002BD 00                    2350 	.db 0x00
      0002BE 00                    2351 	.db 0x00
      0002BF 00                    2352 	.db 0x00
      0002C0 00                    2353 	.db 0x00
      0002C1 00                    2354 	.db 0x00
      0002C2 00                    2355 	.db 0x00
      0002C3 00                    2356 	.db 0x00
      0002C4 00                    2357 	.db 0x00
      0002C5 00                    2358 	.db 0x00
      0002C6 00                    2359 	.db 0x00
      0002C7 00                    2360 	.db 0x00
      0002C8 00                    2361 	.db 0x00
      0002C9 00                    2362 	.db 0x00
      0002CA 00                    2363 	.db 0x00
      0002CB 00                    2364 	.db 0x00
      0002CC 00                    2365 	.db 0x00
      0002CD 00                    2366 	.db 0x00
      0002CE 00                    2367 	.db 0x00
      0002CF 00                    2368 	.db 0x00
      0002D0 00                    2369 	.db 0x00
      0002D1 00                    2370 	.db 0x00
      0002D2 00                    2371 	.db 0x00
      0002D3 00                    2372 	.db 0x00
      0002D4 00                    2373 	.db 0x00
      0002D5 00                    2374 	.db 0x00
      0002D6 00                    2375 	.db 0x00
      0002D7 00                    2376 	.db 0x00
      0002D8 00                    2377 	.db 0x00
      0002D9 00                    2378 	.db 0x00
      0002DA 00                    2379 	.db 0x00
      0002DB 00                    2380 	.db 0x00
      0002DC 00                    2381 	.db 0x00
      0002DD 00                    2382 	.db 0x00
      0002DE 00                    2383 	.db 0x00
      0002DF 00                    2384 	.db 0x00
      0002E0 00                    2385 	.db 0x00
      0002E1 00                    2386 	.db 0x00
      0002E2 00                    2387 	.db 0x00
      0002E3 00                    2388 	.db 0x00
      0002E4 00                    2389 	.db 0x00
      0002E5 00                    2390 	.db 0x00
      0002E6 00                    2391 	.db 0x00
      0002E7 00                    2392 	.db 0x00
      0002E8 00                    2393 	.db 0x00
      0002E9 00                    2394 	.db 0x00
      0002EA 00                    2395 	.db 0x00
      0002EB 00                    2396 	.db 0x00
      0002EC 00                    2397 	.db 0x00
      0002ED 00                    2398 	.db 0x00
      0002EE 00                    2399 	.db 0x00
      0002EF 00                    2400 	.db 0x00
      0002F0 00                    2401 	.db 0x00
      0002F1 00                    2402 	.db 0x00
      0002F2 00                    2403 	.db 0x00
      0002F3 00                    2404 	.db 0x00
      0002F4 00                    2405 	.db 0x00
      0002F5 00                    2406 	.db 0x00
      0002F6 00                    2407 	.db 0x00
      0002F7 00                    2408 	.db 0x00
      0002F8 00                    2409 	.db 0x00
      0002F9 00                    2410 	.db 0x00
      0002FA 00                    2411 	.db 0x00
      0002FB 00                    2412 	.db 0x00
      0002FC 00                    2413 	.db 0x00
      0002FD 00                    2414 	.db 0x00
      0002FE 00                    2415 	.db 0x00
      0002FF 00                    2416 	.db 0x00
      000300 00                    2417 	.db 0x00
      000301 00                    2418 	.db 0x00
      000302 00                    2419 	.db 0x00
      000303 00                    2420 	.db 0x00
      000304 00                    2421 	.db 0x00
      000305 00                    2422 	.db 0x00
      000306 00                    2423 	.db 0x00
      000307                       2424 __xinit__current_dev:
      000307 00                    2425 	.db #0x00	; 0
                                   2426 	.area CABS (ABS)
