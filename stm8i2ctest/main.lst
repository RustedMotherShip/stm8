                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.3.0 #14184 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _command_switcher
                                     13 	.globl _data_handler
                                     14 	.globl _cm_SW
                                     15 	.globl _cm_SR
                                     16 	.globl _cm_ST
                                     17 	.globl _cm_DB
                                     18 	.globl _cm_RM
                                     19 	.globl _cm_SN
                                     20 	.globl _cm_SM
                                     21 	.globl _i2c_scan
                                     22 	.globl _i2c_read
                                     23 	.globl _i2c_write
                                     24 	.globl _i2c_stop
                                     25 	.globl _i2c_send_address
                                     26 	.globl _i2c_start
                                     27 	.globl _i2c_init
                                     28 	.globl _uart_init
                                     29 	.globl _status_check
                                     30 	.globl _char_buffer_to_int
                                     31 	.globl _get_size_from_buff
                                     32 	.globl _get_addr_from_buff
                                     33 	.globl _convert_int_to_binary
                                     34 	.globl _convert_chars_to_int
                                     35 	.globl _convert_int_to_chars
                                     36 	.globl _uart_read
                                     37 	.globl _uart_write
                                     38 	.globl _UART_RX
                                     39 	.globl _UART_TX
                                     40 	.globl _delay
                                     41 	.globl ___memcpy
                                     42 	.globl _strlen
                                     43 	.globl _memset
                                     44 	.globl _memcmp
                                     45 	.globl _current_dev
                                     46 	.globl _data_buf
                                     47 	.globl _p_bytes
                                     48 	.globl _d_size
                                     49 	.globl _p_size
                                     50 	.globl _d_addr
                                     51 	.globl _a
                                     52 	.globl _buffer
                                     53 ;--------------------------------------------------------
                                     54 ; ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area DATA
                                     57 ;--------------------------------------------------------
                                     58 ; ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area INITIALIZED
      000000                         61 _buffer::
      000000                         62 	.ds 255
      0000FF                         63 _a::
      0000FF                         64 	.ds 3
      000102                         65 _d_addr::
      000102                         66 	.ds 1
      000103                         67 _p_size::
      000103                         68 	.ds 1
      000104                         69 _d_size::
      000104                         70 	.ds 1
      000105                         71 _p_bytes::
      000105                         72 	.ds 1
      000106                         73 _data_buf::
      000106                         74 	.ds 255
      000205                         75 _current_dev::
      000205                         76 	.ds 1
                                     77 ;--------------------------------------------------------
                                     78 ; Stack segment in internal ram
                                     79 ;--------------------------------------------------------
                                     80 	.area SSEG
      000000                         81 __start__stack:
      000000                         82 	.ds	1
                                     83 
                                     84 ;--------------------------------------------------------
                                     85 ; absolute external ram data
                                     86 ;--------------------------------------------------------
                                     87 	.area DABS (ABS)
                                     88 
                                     89 ; default segment ordering for linker
                                     90 	.area HOME
                                     91 	.area GSINIT
                                     92 	.area GSFINAL
                                     93 	.area CONST
                                     94 	.area INITIALIZER
                                     95 	.area CODE
                                     96 
                                     97 ;--------------------------------------------------------
                                     98 ; interrupt vector
                                     99 ;--------------------------------------------------------
                                    100 	.area HOME
      000000                        101 __interrupt_vect:
      000000 82v00u00u00            102 	int s_GSINIT ; reset
                                    103 ;--------------------------------------------------------
                                    104 ; global & static initialisations
                                    105 ;--------------------------------------------------------
                                    106 	.area HOME
                                    107 	.area GSINIT
                                    108 	.area GSFINAL
                                    109 	.area GSINIT
      000000 CDr00r00         [ 4]  110 	call	___sdcc_external_startup
      000003 4D               [ 1]  111 	tnz	a
      000004 27 03            [ 1]  112 	jreq	__sdcc_init_data
      000006 CCr00r04         [ 2]  113 	jp	__sdcc_program_startup
      000009                        114 __sdcc_init_data:
                                    115 ; stm8_genXINIT() start
      000009 AEr00r00         [ 2]  116 	ldw x, #l_DATA
      00000C 27 07            [ 1]  117 	jreq	00002$
      00000E                        118 00001$:
      00000E 72 4FuFFuFF      [ 1]  119 	clr (s_DATA - 1, x)
      000012 5A               [ 2]  120 	decw x
      000013 26 F9            [ 1]  121 	jrne	00001$
      000015                        122 00002$:
      000015 AEr00r00         [ 2]  123 	ldw	x, #l_INITIALIZER
      000018 27 09            [ 1]  124 	jreq	00004$
      00001A                        125 00003$:
      00001A D6uFFuFF         [ 1]  126 	ld	a, (s_INITIALIZER - 1, x)
      00001D D7uFFuFF         [ 1]  127 	ld	(s_INITIALIZED - 1, x), a
      000020 5A               [ 2]  128 	decw	x
      000021 26 F7            [ 1]  129 	jrne	00003$
      000023                        130 00004$:
                                    131 ; stm8_genXINIT() end
                                    132 	.area GSFINAL
      000000 CCr00r04         [ 2]  133 	jp	__sdcc_program_startup
                                    134 ;--------------------------------------------------------
                                    135 ; Home
                                    136 ;--------------------------------------------------------
                                    137 	.area HOME
                                    138 	.area HOME
      000004                        139 __sdcc_program_startup:
      000004 CCr08r10         [ 2]  140 	jp	_main
                                    141 ;	return from main will return to caller
                                    142 ;--------------------------------------------------------
                                    143 ; code
                                    144 ;--------------------------------------------------------
                                    145 	.area CODE
                                    146 ;	main.c: 26: void delay(unsigned long count) {
                                    147 ;	-----------------------------------------
                                    148 ;	 function delay
                                    149 ;	-----------------------------------------
      000000                        150 _delay:
      000000 52 08            [ 2]  151 	sub	sp, #8
                                    152 ;	main.c: 27: while (count--)
      000002 16 0D            [ 2]  153 	ldw	y, (0x0d, sp)
      000004 17 07            [ 2]  154 	ldw	(0x07, sp), y
      000006 1E 0B            [ 2]  155 	ldw	x, (0x0b, sp)
      000008                        156 00101$:
      000008 1F 01            [ 2]  157 	ldw	(0x01, sp), x
      00000A 7B 07            [ 1]  158 	ld	a, (0x07, sp)
      00000C 6B 03            [ 1]  159 	ld	(0x03, sp), a
      00000E 7B 08            [ 1]  160 	ld	a, (0x08, sp)
      000010 16 07            [ 2]  161 	ldw	y, (0x07, sp)
      000012 72 A2 00 01      [ 2]  162 	subw	y, #0x0001
      000016 17 07            [ 2]  163 	ldw	(0x07, sp), y
      000018 24 01            [ 1]  164 	jrnc	00117$
      00001A 5A               [ 2]  165 	decw	x
      00001B                        166 00117$:
      00001B 4D               [ 1]  167 	tnz	a
      00001C 26 08            [ 1]  168 	jrne	00118$
      00001E 16 02            [ 2]  169 	ldw	y, (0x02, sp)
      000020 26 04            [ 1]  170 	jrne	00118$
      000022 0D 01            [ 1]  171 	tnz	(0x01, sp)
      000024 27 03            [ 1]  172 	jreq	00104$
      000026                        173 00118$:
                                    174 ;	main.c: 28: nop();
      000026 9D               [ 1]  175 	nop
      000027 20 DF            [ 2]  176 	jra	00101$
      000029                        177 00104$:
                                    178 ;	main.c: 29: }
      000029 1E 09            [ 2]  179 	ldw	x, (9, sp)
      00002B 5B 0E            [ 2]  180 	addw	sp, #14
      00002D FC               [ 2]  181 	jp	(x)
                                    182 ;	main.c: 37: void UART_TX(unsigned char value)
                                    183 ;	-----------------------------------------
                                    184 ;	 function UART_TX
                                    185 ;	-----------------------------------------
      00002E                        186 _UART_TX:
                                    187 ;	main.c: 39: UART1_DR = value;
      00002E C7 52 31         [ 1]  188 	ld	0x5231, a
                                    189 ;	main.c: 40: while(!(UART1_SR & UART_SR_TXE));
      000031                        190 00101$:
      000031 C6 52 30         [ 1]  191 	ld	a, 0x5230
      000034 2A FB            [ 1]  192 	jrpl	00101$
                                    193 ;	main.c: 41: }
      000036 81               [ 4]  194 	ret
                                    195 ;	main.c: 42: unsigned char UART_RX(void)
                                    196 ;	-----------------------------------------
                                    197 ;	 function UART_RX
                                    198 ;	-----------------------------------------
      000037                        199 _UART_RX:
                                    200 ;	main.c: 44: while(!(UART1_SR & UART_SR_TXE));
      000037                        201 00101$:
      000037 C6 52 30         [ 1]  202 	ld	a, 0x5230
      00003A 2A FB            [ 1]  203 	jrpl	00101$
                                    204 ;	main.c: 45: return UART1_DR;
      00003C C6 52 31         [ 1]  205 	ld	a, 0x5231
                                    206 ;	main.c: 46: }
      00003F 81               [ 4]  207 	ret
                                    208 ;	main.c: 47: int uart_write(const char *str) {
                                    209 ;	-----------------------------------------
                                    210 ;	 function uart_write
                                    211 ;	-----------------------------------------
      000040                        212 _uart_write:
      000040 52 05            [ 2]  213 	sub	sp, #5
      000042 1F 03            [ 2]  214 	ldw	(0x03, sp), x
                                    215 ;	main.c: 49: for(i = 0; i < strlen(str); i++) {
      000044 0F 05            [ 1]  216 	clr	(0x05, sp)
      000046                        217 00103$:
      000046 1E 03            [ 2]  218 	ldw	x, (0x03, sp)
      000048 CDr00r00         [ 4]  219 	call	_strlen
      00004B 1F 01            [ 2]  220 	ldw	(0x01, sp), x
      00004D 7B 05            [ 1]  221 	ld	a, (0x05, sp)
      00004F 5F               [ 1]  222 	clrw	x
      000050 97               [ 1]  223 	ld	xl, a
      000051 13 01            [ 2]  224 	cpw	x, (0x01, sp)
      000053 24 0F            [ 1]  225 	jrnc	00101$
                                    226 ;	main.c: 51: UART_TX(str[i]);
      000055 5F               [ 1]  227 	clrw	x
      000056 7B 05            [ 1]  228 	ld	a, (0x05, sp)
      000058 97               [ 1]  229 	ld	xl, a
      000059 72 FB 03         [ 2]  230 	addw	x, (0x03, sp)
      00005C F6               [ 1]  231 	ld	a, (x)
      00005D CDr00r2E         [ 4]  232 	call	_UART_TX
                                    233 ;	main.c: 49: for(i = 0; i < strlen(str); i++) {
      000060 0C 05            [ 1]  234 	inc	(0x05, sp)
      000062 20 E2            [ 2]  235 	jra	00103$
      000064                        236 00101$:
                                    237 ;	main.c: 53: return(i); // Bytes sent
      000064 7B 05            [ 1]  238 	ld	a, (0x05, sp)
      000066 5F               [ 1]  239 	clrw	x
      000067 97               [ 1]  240 	ld	xl, a
                                    241 ;	main.c: 54: }
      000068 5B 05            [ 2]  242 	addw	sp, #5
      00006A 81               [ 4]  243 	ret
                                    244 ;	main.c: 55: int uart_read(void)
                                    245 ;	-----------------------------------------
                                    246 ;	 function uart_read
                                    247 ;	-----------------------------------------
      00006B                        248 _uart_read:
                                    249 ;	main.c: 57: memset(buffer, 0, sizeof(buffer));
      00006B 4B FF            [ 1]  250 	push	#0xff
      00006D 4B 00            [ 1]  251 	push	#0x00
      00006F 5F               [ 1]  252 	clrw	x
      000070 89               [ 2]  253 	pushw	x
      000071 AEr00r00         [ 2]  254 	ldw	x, #(_buffer+0)
      000074 CDr00r00         [ 4]  255 	call	_memset
                                    256 ;	main.c: 59: while(i<256)
      000077 5F               [ 1]  257 	clrw	x
      000078                        258 00105$:
      000078 A3 01 00         [ 2]  259 	cpw	x, #0x0100
      00007B 2E 22            [ 1]  260 	jrsge	00107$
                                    261 ;	main.c: 61: if(UART1_SR & UART_SR_RXNE)
      00007D C6 52 30         [ 1]  262 	ld	a, 0x5230
      000080 A5 20            [ 1]  263 	bcp	a, #0x20
      000082 27 F4            [ 1]  264 	jreq	00105$
                                    265 ;	main.c: 63: buffer[i] = UART_RX();
      000084 90 93            [ 1]  266 	ldw	y, x
      000086 72 A9r00r00      [ 2]  267 	addw	y, #(_buffer+0)
      00008A 89               [ 2]  268 	pushw	x
      00008B 90 89            [ 2]  269 	pushw	y
      00008D CDr00r37         [ 4]  270 	call	_UART_RX
      000090 90 85            [ 2]  271 	popw	y
      000092 85               [ 2]  272 	popw	x
      000093 90 F7            [ 1]  273 	ld	(y), a
                                    274 ;	main.c: 64: if(buffer[i] == '\r\n' )
      000095 A1 0D            [ 1]  275 	cp	a, #0x0d
      000097 26 03            [ 1]  276 	jrne	00102$
                                    277 ;	main.c: 66: return 1;
      000099 5F               [ 1]  278 	clrw	x
      00009A 5C               [ 1]  279 	incw	x
      00009B 81               [ 4]  280 	ret
                                    281 ;	main.c: 67: break;
      00009C                        282 00102$:
                                    283 ;	main.c: 69: i++;
      00009C 5C               [ 1]  284 	incw	x
      00009D 20 D9            [ 2]  285 	jra	00105$
      00009F                        286 00107$:
                                    287 ;	main.c: 72: return 0;
      00009F 5F               [ 1]  288 	clrw	x
                                    289 ;	main.c: 73: }
      0000A0 81               [ 4]  290 	ret
                                    291 ;	main.c: 82: void convert_int_to_chars(uint8_t num, char* rx_int_chars) {
                                    292 ;	-----------------------------------------
                                    293 ;	 function convert_int_to_chars
                                    294 ;	-----------------------------------------
      0000A1                        295 _convert_int_to_chars:
      0000A1 52 0D            [ 2]  296 	sub	sp, #13
      0000A3 6B 0D            [ 1]  297 	ld	(0x0d, sp), a
      0000A5 1F 0B            [ 2]  298 	ldw	(0x0b, sp), x
                                    299 ;	main.c: 85: rx_int_chars[0] = num / 100 + '0';
      0000A7 7B 0D            [ 1]  300 	ld	a, (0x0d, sp)
      0000A9 6B 02            [ 1]  301 	ld	(0x02, sp), a
      0000AB 0F 01            [ 1]  302 	clr	(0x01, sp)
                                    303 ;	main.c: 86: rx_int_chars[1] = num / 10 % 10 + '0';
      0000AD 1E 0B            [ 2]  304 	ldw	x, (0x0b, sp)
      0000AF 5C               [ 1]  305 	incw	x
      0000B0 1F 03            [ 2]  306 	ldw	(0x03, sp), x
                                    307 ;	main.c: 87: rx_int_chars[2] = num % 10 + '0';
      0000B2 1E 0B            [ 2]  308 	ldw	x, (0x0b, sp)
      0000B4 5C               [ 1]  309 	incw	x
      0000B5 5C               [ 1]  310 	incw	x
      0000B6 1F 05            [ 2]  311 	ldw	(0x05, sp), x
                                    312 ;	main.c: 86: rx_int_chars[1] = num / 10 % 10 + '0';
      0000B8 4B 0A            [ 1]  313 	push	#0x0a
      0000BA 4B 00            [ 1]  314 	push	#0x00
      0000BC 1E 03            [ 2]  315 	ldw	x, (0x03, sp)
                                    316 ;	main.c: 87: rx_int_chars[2] = num % 10 + '0';
      0000BE CDr00r00         [ 4]  317 	call	__divsint
      0000C1 1F 07            [ 2]  318 	ldw	(0x07, sp), x
      0000C3 4B 0A            [ 1]  319 	push	#0x0a
      0000C5 4B 00            [ 1]  320 	push	#0x00
      0000C7 1E 03            [ 2]  321 	ldw	x, (0x03, sp)
      0000C9 CDr00r00         [ 4]  322 	call	__modsint
      0000CC 9F               [ 1]  323 	ld	a, xl
      0000CD AB 30            [ 1]  324 	add	a, #0x30
      0000CF 6B 09            [ 1]  325 	ld	(0x09, sp), a
                                    326 ;	main.c: 83: if (num > 99) {
      0000D1 7B 0D            [ 1]  327 	ld	a, (0x0d, sp)
      0000D3 A1 63            [ 1]  328 	cp	a, #0x63
      0000D5 23 29            [ 2]  329 	jrule	00105$
                                    330 ;	main.c: 85: rx_int_chars[0] = num / 100 + '0';
      0000D7 4B 64            [ 1]  331 	push	#0x64
      0000D9 4B 00            [ 1]  332 	push	#0x00
      0000DB 1E 03            [ 2]  333 	ldw	x, (0x03, sp)
      0000DD CDr00r00         [ 4]  334 	call	__divsint
      0000E0 9F               [ 1]  335 	ld	a, xl
      0000E1 AB 30            [ 1]  336 	add	a, #0x30
      0000E3 1E 0B            [ 2]  337 	ldw	x, (0x0b, sp)
      0000E5 F7               [ 1]  338 	ld	(x), a
                                    339 ;	main.c: 86: rx_int_chars[1] = num / 10 % 10 + '0';
      0000E6 4B 0A            [ 1]  340 	push	#0x0a
      0000E8 4B 00            [ 1]  341 	push	#0x00
      0000EA 1E 09            [ 2]  342 	ldw	x, (0x09, sp)
      0000EC CDr00r00         [ 4]  343 	call	__modsint
      0000EF 9F               [ 1]  344 	ld	a, xl
      0000F0 AB 30            [ 1]  345 	add	a, #0x30
      0000F2 1E 03            [ 2]  346 	ldw	x, (0x03, sp)
      0000F4 F7               [ 1]  347 	ld	(x), a
                                    348 ;	main.c: 87: rx_int_chars[2] = num % 10 + '0';
      0000F5 1E 05            [ 2]  349 	ldw	x, (0x05, sp)
      0000F7 7B 09            [ 1]  350 	ld	a, (0x09, sp)
      0000F9 F7               [ 1]  351 	ld	(x), a
                                    352 ;	main.c: 88: rx_int_chars[3] ='\0';
      0000FA 1E 0B            [ 2]  353 	ldw	x, (0x0b, sp)
      0000FC 6F 03            [ 1]  354 	clr	(0x0003, x)
      0000FE 20 23            [ 2]  355 	jra	00107$
      000100                        356 00105$:
                                    357 ;	main.c: 90: } else if (num > 9) {
      000100 7B 0D            [ 1]  358 	ld	a, (0x0d, sp)
      000102 A1 09            [ 1]  359 	cp	a, #0x09
      000104 23 13            [ 2]  360 	jrule	00102$
                                    361 ;	main.c: 92: rx_int_chars[0] = num / 10 + '0';
      000106 7B 08            [ 1]  362 	ld	a, (0x08, sp)
      000108 6B 0A            [ 1]  363 	ld	(0x0a, sp), a
      00010A AB 30            [ 1]  364 	add	a, #0x30
      00010C 1E 0B            [ 2]  365 	ldw	x, (0x0b, sp)
      00010E F7               [ 1]  366 	ld	(x), a
                                    367 ;	main.c: 93: rx_int_chars[1] = num % 10 + '0';
      00010F 1E 03            [ 2]  368 	ldw	x, (0x03, sp)
      000111 7B 09            [ 1]  369 	ld	a, (0x09, sp)
      000113 F7               [ 1]  370 	ld	(x), a
                                    371 ;	main.c: 94: rx_int_chars[2] ='\0'; // Заканчиваем строку символом конца строки
      000114 1E 05            [ 2]  372 	ldw	x, (0x05, sp)
      000116 7F               [ 1]  373 	clr	(x)
      000117 20 0A            [ 2]  374 	jra	00107$
      000119                        375 00102$:
                                    376 ;	main.c: 97: rx_int_chars[0] = num + '0';
      000119 7B 0D            [ 1]  377 	ld	a, (0x0d, sp)
      00011B AB 30            [ 1]  378 	add	a, #0x30
      00011D 1E 0B            [ 2]  379 	ldw	x, (0x0b, sp)
      00011F F7               [ 1]  380 	ld	(x), a
                                    381 ;	main.c: 98: rx_int_chars[1] ='\0';
      000120 1E 03            [ 2]  382 	ldw	x, (0x03, sp)
      000122 7F               [ 1]  383 	clr	(x)
      000123                        384 00107$:
                                    385 ;	main.c: 100: }
      000123 5B 0D            [ 2]  386 	addw	sp, #13
      000125 81               [ 4]  387 	ret
                                    388 ;	main.c: 102: uint8_t convert_chars_to_int(char* rx_chars_int, const int i) {
                                    389 ;	-----------------------------------------
                                    390 ;	 function convert_chars_to_int
                                    391 ;	-----------------------------------------
      000126                        392 _convert_chars_to_int:
      000126 52 09            [ 2]  393 	sub	sp, #9
      000128 1F 06            [ 2]  394 	ldw	(0x06, sp), x
                                    395 ;	main.c: 103: uint8_t result = 0;
      00012A 0F 05            [ 1]  396 	clr	(0x05, sp)
                                    397 ;	main.c: 104: uart_write("\nchar -> ");
      00012C AEr00r00         [ 2]  398 	ldw	x, #(___str_0+0)
      00012F CDr00r40         [ 4]  399 	call	_uart_write
                                    400 ;	main.c: 105: uart_write(rx_chars_int);
      000132 1E 06            [ 2]  401 	ldw	x, (0x06, sp)
      000134 CDr00r40         [ 4]  402 	call	_uart_write
                                    403 ;	main.c: 106: uart_write(" <-\n");
      000137 AEr00r0A         [ 2]  404 	ldw	x, #(___str_1+0)
      00013A CDr00r40         [ 4]  405 	call	_uart_write
                                    406 ;	main.c: 107: for (int o = 0; o < i; o++) {
      00013D 5F               [ 1]  407 	clrw	x
      00013E 1F 08            [ 2]  408 	ldw	(0x08, sp), x
      000140                        409 00103$:
      000140 1E 08            [ 2]  410 	ldw	x, (0x08, sp)
      000142 13 0C            [ 2]  411 	cpw	x, (0x0c, sp)
      000144 2E 3C            [ 1]  412 	jrsge	00101$
                                    413 ;	main.c: 109: result = (result * 10) + (rx_chars_int[o] - '0');
      000146 7B 05            [ 1]  414 	ld	a, (0x05, sp)
      000148 97               [ 1]  415 	ld	xl, a
      000149 A6 0A            [ 1]  416 	ld	a, #0x0a
      00014B 42               [ 4]  417 	mul	x, a
      00014C 16 06            [ 2]  418 	ldw	y, (0x06, sp)
      00014E 72 F9 08         [ 2]  419 	addw	y, (0x08, sp)
      000151 90 F6            [ 1]  420 	ld	a, (y)
      000153 A0 30            [ 1]  421 	sub	a, #0x30
      000155 89               [ 2]  422 	pushw	x
      000156 1B 02            [ 1]  423 	add	a, (2, sp)
      000158 85               [ 2]  424 	popw	x
      000159 6B 05            [ 1]  425 	ld	(0x05, sp), a
                                    426 ;	main.c: 110: char rx_binary_chars[4]={0};
      00015B 0F 01            [ 1]  427 	clr	(0x01, sp)
      00015D 0F 02            [ 1]  428 	clr	(0x02, sp)
      00015F 0F 03            [ 1]  429 	clr	(0x03, sp)
      000161 0F 04            [ 1]  430 	clr	(0x04, sp)
                                    431 ;	main.c: 111: convert_int_to_chars(result, rx_binary_chars);
      000163 96               [ 1]  432 	ldw	x, sp
      000164 5C               [ 1]  433 	incw	x
      000165 7B 05            [ 1]  434 	ld	a, (0x05, sp)
      000167 CDr00rA1         [ 4]  435 	call	_convert_int_to_chars
                                    436 ;	main.c: 112: uart_write("\nresult -> ");
      00016A AEr00r0F         [ 2]  437 	ldw	x, #(___str_2+0)
      00016D CDr00r40         [ 4]  438 	call	_uart_write
                                    439 ;	main.c: 113: uart_write(rx_binary_chars);
      000170 96               [ 1]  440 	ldw	x, sp
      000171 5C               [ 1]  441 	incw	x
      000172 CDr00r40         [ 4]  442 	call	_uart_write
                                    443 ;	main.c: 114: uart_write(" <-\n");
      000175 AEr00r0A         [ 2]  444 	ldw	x, #(___str_1+0)
      000178 CDr00r40         [ 4]  445 	call	_uart_write
                                    446 ;	main.c: 107: for (int o = 0; o < i; o++) {
      00017B 1E 08            [ 2]  447 	ldw	x, (0x08, sp)
      00017D 5C               [ 1]  448 	incw	x
      00017E 1F 08            [ 2]  449 	ldw	(0x08, sp), x
      000180 20 BE            [ 2]  450 	jra	00103$
      000182                        451 00101$:
                                    452 ;	main.c: 117: return result;
      000182 7B 05            [ 1]  453 	ld	a, (0x05, sp)
                                    454 ;	main.c: 118: }
      000184 1E 0A            [ 2]  455 	ldw	x, (10, sp)
      000186 5B 0D            [ 2]  456 	addw	sp, #13
      000188 FC               [ 2]  457 	jp	(x)
                                    458 ;	main.c: 121: void convert_int_to_binary(int num, char* rx_binary_chars) {
                                    459 ;	-----------------------------------------
                                    460 ;	 function convert_int_to_binary
                                    461 ;	-----------------------------------------
      000189                        462 _convert_int_to_binary:
      000189 52 04            [ 2]  463 	sub	sp, #4
      00018B 1F 01            [ 2]  464 	ldw	(0x01, sp), x
                                    465 ;	main.c: 123: for(int i = 7; i >= 0; i--) {
      00018D AE 00 07         [ 2]  466 	ldw	x, #0x0007
      000190 1F 03            [ 2]  467 	ldw	(0x03, sp), x
      000192                        468 00103$:
      000192 0D 03            [ 1]  469 	tnz	(0x03, sp)
      000194 2B 22            [ 1]  470 	jrmi	00101$
                                    471 ;	main.c: 125: rx_binary_chars[7 - i] = ((num >> i) & 1) + '0';
      000196 AE 00 07         [ 2]  472 	ldw	x, #0x0007
      000199 72 F0 03         [ 2]  473 	subw	x, (0x03, sp)
      00019C 72 FB 07         [ 2]  474 	addw	x, (0x07, sp)
      00019F 16 01            [ 2]  475 	ldw	y, (0x01, sp)
      0001A1 7B 04            [ 1]  476 	ld	a, (0x04, sp)
      0001A3 27 05            [ 1]  477 	jreq	00120$
      0001A5                        478 00119$:
      0001A5 90 57            [ 2]  479 	sraw	y
      0001A7 4A               [ 1]  480 	dec	a
      0001A8 26 FB            [ 1]  481 	jrne	00119$
      0001AA                        482 00120$:
      0001AA 90 9F            [ 1]  483 	ld	a, yl
      0001AC A4 01            [ 1]  484 	and	a, #0x01
      0001AE AB 30            [ 1]  485 	add	a, #0x30
      0001B0 F7               [ 1]  486 	ld	(x), a
                                    487 ;	main.c: 123: for(int i = 7; i >= 0; i--) {
      0001B1 1E 03            [ 2]  488 	ldw	x, (0x03, sp)
      0001B3 5A               [ 2]  489 	decw	x
      0001B4 1F 03            [ 2]  490 	ldw	(0x03, sp), x
      0001B6 20 DA            [ 2]  491 	jra	00103$
      0001B8                        492 00101$:
                                    493 ;	main.c: 127: rx_binary_chars[8] = '\0'; // Добавляем символ конца строки
      0001B8 1E 07            [ 2]  494 	ldw	x, (0x07, sp)
      0001BA 6F 08            [ 1]  495 	clr	(0x0008, x)
                                    496 ;	main.c: 128: }
      0001BC 1E 05            [ 2]  497 	ldw	x, (5, sp)
      0001BE 5B 08            [ 2]  498 	addw	sp, #8
      0001C0 FC               [ 2]  499 	jp	(x)
                                    500 ;	main.c: 137: void get_addr_from_buff(void)
                                    501 ;	-----------------------------------------
                                    502 ;	 function get_addr_from_buff
                                    503 ;	-----------------------------------------
      0001C1                        504 _get_addr_from_buff:
      0001C1 52 02            [ 2]  505 	sub	sp, #2
                                    506 ;	main.c: 141: while(1)
      0001C3 A6 03            [ 1]  507 	ld	a, #0x03
      0001C5 6B 01            [ 1]  508 	ld	(0x01, sp), a
      0001C7 0F 02            [ 1]  509 	clr	(0x02, sp)
      0001C9                        510 00105$:
                                    511 ;	main.c: 143: if(buffer[i] == ' ' || buffer[i] == '\r\n')
      0001C9 5F               [ 1]  512 	clrw	x
      0001CA 7B 01            [ 1]  513 	ld	a, (0x01, sp)
      0001CC 97               [ 1]  514 	ld	xl, a
      0001CD D6u00u00         [ 1]  515 	ld	a, (_buffer+0, x)
      0001D0 A1 20            [ 1]  516 	cp	a, #0x20
      0001D2 27 04            [ 1]  517 	jreq	00101$
      0001D4 A1 0D            [ 1]  518 	cp	a, #0x0d
      0001D6 26 08            [ 1]  519 	jrne	00102$
      0001D8                        520 00101$:
                                    521 ;	main.c: 145: p_size = i+1;
      0001D8 7B 01            [ 1]  522 	ld	a, (0x01, sp)
      0001DA 4C               [ 1]  523 	inc	a
      0001DB C7u01u03         [ 1]  524 	ld	_p_size+0, a
                                    525 ;	main.c: 146: break;
      0001DE 20 06            [ 2]  526 	jra	00106$
      0001E0                        527 00102$:
                                    528 ;	main.c: 148: i++;
      0001E0 0C 01            [ 1]  529 	inc	(0x01, sp)
                                    530 ;	main.c: 149: counter++;
      0001E2 0C 02            [ 1]  531 	inc	(0x02, sp)
      0001E4 20 E3            [ 2]  532 	jra	00105$
      0001E6                        533 00106$:
                                    534 ;	main.c: 151: memcpy(a, &buffer[3], counter);
      0001E6 5F               [ 1]  535 	clrw	x
      0001E7 7B 02            [ 1]  536 	ld	a, (0x02, sp)
      0001E9 97               [ 1]  537 	ld	xl, a
      0001EA 89               [ 2]  538 	pushw	x
      0001EB 4Br03            [ 1]  539 	push	#<(_buffer+3)
      0001ED 4Bs00            [ 1]  540 	push	#((_buffer+3) >> 8)
      0001EF AEr00rFF         [ 2]  541 	ldw	x, #(_a+0)
      0001F2 CDr00r00         [ 4]  542 	call	___memcpy
                                    543 ;	main.c: 152: d_addr = convert_chars_to_int(a, counter);
      0001F5 5F               [ 1]  544 	clrw	x
      0001F6 7B 02            [ 1]  545 	ld	a, (0x02, sp)
      0001F8 97               [ 1]  546 	ld	xl, a
      0001F9 89               [ 2]  547 	pushw	x
      0001FA AEr00rFF         [ 2]  548 	ldw	x, #(_a+0)
      0001FD CDr01r26         [ 4]  549 	call	_convert_chars_to_int
      000200 C7u01u02         [ 1]  550 	ld	_d_addr+0, a
                                    551 ;	main.c: 153: }
      000203 5B 02            [ 2]  552 	addw	sp, #2
      000205 81               [ 4]  553 	ret
                                    554 ;	main.c: 155: void get_size_from_buff(void)
                                    555 ;	-----------------------------------------
                                    556 ;	 function get_size_from_buff
                                    557 ;	-----------------------------------------
      000206                        558 _get_size_from_buff:
      000206 52 02            [ 2]  559 	sub	sp, #2
                                    560 ;	main.c: 157: memset(a, 0, sizeof(a));
      000208 4B 03            [ 1]  561 	push	#0x03
      00020A 4B 00            [ 1]  562 	push	#0x00
      00020C 5F               [ 1]  563 	clrw	x
      00020D 89               [ 2]  564 	pushw	x
      00020E AEr00rFF         [ 2]  565 	ldw	x, #(_a+0)
      000211 CDr00r00         [ 4]  566 	call	_memset
                                    567 ;	main.c: 159: uint8_t i = p_size;
      000214 C6u01u03         [ 1]  568 	ld	a, _p_size+0
      000217 6B 01            [ 1]  569 	ld	(0x01, sp), a
                                    570 ;	main.c: 160: while(1)
      000219 0F 02            [ 1]  571 	clr	(0x02, sp)
      00021B                        572 00105$:
                                    573 ;	main.c: 162: if(buffer[i] == ' ' || buffer[i] == '\r\n')
      00021B 5F               [ 1]  574 	clrw	x
      00021C 7B 01            [ 1]  575 	ld	a, (0x01, sp)
      00021E 97               [ 1]  576 	ld	xl, a
      00021F D6u00u00         [ 1]  577 	ld	a, (_buffer+0, x)
      000222 A1 20            [ 1]  578 	cp	a, #0x20
      000224 27 04            [ 1]  579 	jreq	00101$
      000226 A1 0D            [ 1]  580 	cp	a, #0x0d
      000228 26 08            [ 1]  581 	jrne	00102$
      00022A                        582 00101$:
                                    583 ;	main.c: 165: p_bytes = i+1;
      00022A 7B 01            [ 1]  584 	ld	a, (0x01, sp)
      00022C 4C               [ 1]  585 	inc	a
      00022D C7u01u05         [ 1]  586 	ld	_p_bytes+0, a
                                    587 ;	main.c: 166: break;
      000230 20 06            [ 2]  588 	jra	00106$
      000232                        589 00102$:
                                    590 ;	main.c: 168: i++;
      000232 0C 01            [ 1]  591 	inc	(0x01, sp)
                                    592 ;	main.c: 169: counter++;
      000234 0C 02            [ 1]  593 	inc	(0x02, sp)
      000236 20 E3            [ 2]  594 	jra	00105$
      000238                        595 00106$:
                                    596 ;	main.c: 172: memcpy(a, &buffer[p_size], counter);
      000238 90 5F            [ 1]  597 	clrw	y
      00023A 7B 02            [ 1]  598 	ld	a, (0x02, sp)
      00023C 90 97            [ 1]  599 	ld	yl, a
      00023E 5F               [ 1]  600 	clrw	x
      00023F C6u01u03         [ 1]  601 	ld	a, _p_size+0
      000242 97               [ 1]  602 	ld	xl, a
      000243 1Cr00r00         [ 2]  603 	addw	x, #(_buffer+0)
      000246 90 89            [ 2]  604 	pushw	y
      000248 89               [ 2]  605 	pushw	x
      000249 AEr00rFF         [ 2]  606 	ldw	x, #(_a+0)
      00024C CDr00r00         [ 4]  607 	call	___memcpy
                                    608 ;	main.c: 173: d_size = convert_chars_to_int(a, counter);
      00024F 5F               [ 1]  609 	clrw	x
      000250 7B 02            [ 1]  610 	ld	a, (0x02, sp)
      000252 97               [ 1]  611 	ld	xl, a
      000253 89               [ 2]  612 	pushw	x
      000254 AEr00rFF         [ 2]  613 	ldw	x, #(_a+0)
      000257 CDr01r26         [ 4]  614 	call	_convert_chars_to_int
      00025A C7u01u04         [ 1]  615 	ld	_d_size+0, a
                                    616 ;	main.c: 174: }
      00025D 5B 02            [ 2]  617 	addw	sp, #2
      00025F 81               [ 4]  618 	ret
                                    619 ;	main.c: 175: void char_buffer_to_int(void)
                                    620 ;	-----------------------------------------
                                    621 ;	 function char_buffer_to_int
                                    622 ;	-----------------------------------------
      000260                        623 _char_buffer_to_int:
      000260 52 0C            [ 2]  624 	sub	sp, #12
                                    625 ;	main.c: 177: memset(a, 0, sizeof(a));
      000262 4B 03            [ 1]  626 	push	#0x03
      000264 4B 00            [ 1]  627 	push	#0x00
      000266 5F               [ 1]  628 	clrw	x
      000267 89               [ 2]  629 	pushw	x
      000268 AEr00rFF         [ 2]  630 	ldw	x, #(_a+0)
      00026B CDr00r00         [ 4]  631 	call	_memset
                                    632 ;	main.c: 178: uint8_t counter = d_size;
      00026E C6u01u04         [ 1]  633 	ld	a, _d_size+0
      000271 6B 05            [ 1]  634 	ld	(0x05, sp), a
                                    635 ;	main.c: 179: uint8_t i = p_bytes;
      000273 C6u01u05         [ 1]  636 	ld	a, _p_bytes+0
      000276 6B 06            [ 1]  637 	ld	(0x06, sp), a
                                    638 ;	main.c: 182: for(int o = 0; o < counter;o++)
      000278 0F 08            [ 1]  639 	clr	(0x08, sp)
      00027A 5F               [ 1]  640 	clrw	x
      00027B 1F 09            [ 2]  641 	ldw	(0x09, sp), x
      00027D                        642 00112$:
      00027D 7B 05            [ 1]  643 	ld	a, (0x05, sp)
      00027F 6B 0C            [ 1]  644 	ld	(0x0c, sp), a
      000281 0F 0B            [ 1]  645 	clr	(0x0b, sp)
      000283 1E 09            [ 2]  646 	ldw	x, (0x09, sp)
      000285 13 0B            [ 2]  647 	cpw	x, (0x0b, sp)
      000287 2F 03            [ 1]  648 	jrslt	00142$
      000289 CCr03r32         [ 2]  649 	jp	00114$
      00028C                        650 00142$:
                                    651 ;	main.c: 184: uint8_t number_counter = 0;
      00028C 0F 07            [ 1]  652 	clr	(0x07, sp)
                                    653 ;	main.c: 185: while(1)
      00028E 7B 06            [ 1]  654 	ld	a, (0x06, sp)
      000290 6B 0B            [ 1]  655 	ld	(0x0b, sp), a
      000292 0F 0C            [ 1]  656 	clr	(0x0c, sp)
      000294                        657 00108$:
                                    658 ;	main.c: 187: char rx_binary_chars1[4]={0};
      000294 0F 01            [ 1]  659 	clr	(0x01, sp)
      000296 0F 02            [ 1]  660 	clr	(0x02, sp)
      000298 0F 03            [ 1]  661 	clr	(0x03, sp)
      00029A 0F 04            [ 1]  662 	clr	(0x04, sp)
                                    663 ;	main.c: 188: convert_int_to_chars(i, rx_binary_chars1);
      00029C 96               [ 1]  664 	ldw	x, sp
      00029D 5C               [ 1]  665 	incw	x
      00029E 7B 0B            [ 1]  666 	ld	a, (0x0b, sp)
      0002A0 CDr00rA1         [ 4]  667 	call	_convert_int_to_chars
                                    668 ;	main.c: 189: uart_write("\ni while-> -> ");
      0002A3 AEr00r1B         [ 2]  669 	ldw	x, #(___str_3+0)
      0002A6 CDr00r40         [ 4]  670 	call	_uart_write
                                    671 ;	main.c: 190: uart_write(rx_binary_chars1);
      0002A9 96               [ 1]  672 	ldw	x, sp
      0002AA 5C               [ 1]  673 	incw	x
      0002AB CDr00r40         [ 4]  674 	call	_uart_write
                                    675 ;	main.c: 191: uart_write(" <-\n");
      0002AE AEr00r0A         [ 2]  676 	ldw	x, #(___str_1+0)
      0002B1 CDr00r40         [ 4]  677 	call	_uart_write
                                    678 ;	main.c: 192: if(buffer[i] == ' ')
      0002B4 5F               [ 1]  679 	clrw	x
      0002B5 7B 0B            [ 1]  680 	ld	a, (0x0b, sp)
      0002B7 97               [ 1]  681 	ld	xl, a
      0002B8 D6u00u00         [ 1]  682 	ld	a, (_buffer+0, x)
      0002BB A1 20            [ 1]  683 	cp	a, #0x20
      0002BD 26 04            [ 1]  684 	jrne	00105$
                                    685 ;	main.c: 194: i = i+1;
      0002BF 0C 06            [ 1]  686 	inc	(0x06, sp)
                                    687 ;	main.c: 195: break;
      0002C1 20 12            [ 2]  688 	jra	00109$
      0002C3                        689 00105$:
                                    690 ;	main.c: 197: else if(buffer[i] == '\r\n')
      0002C3 A1 0D            [ 1]  691 	cp	a, #0x0d
      0002C5 27 0E            [ 1]  692 	jreq	00109$
                                    693 ;	main.c: 200: i++;
      0002C7 0C 0B            [ 1]  694 	inc	(0x0b, sp)
      0002C9 7B 0B            [ 1]  695 	ld	a, (0x0b, sp)
      0002CB 6B 06            [ 1]  696 	ld	(0x06, sp), a
                                    697 ;	main.c: 202: number_counter++;
      0002CD 0C 0C            [ 1]  698 	inc	(0x0c, sp)
      0002CF 7B 0C            [ 1]  699 	ld	a, (0x0c, sp)
      0002D1 6B 07            [ 1]  700 	ld	(0x07, sp), a
      0002D3 20 BF            [ 2]  701 	jra	00108$
      0002D5                        702 00109$:
                                    703 ;	main.c: 204: memcpy(a, &buffer[i - number_counter], number_counter);
      0002D5 90 5F            [ 1]  704 	clrw	y
      0002D7 7B 07            [ 1]  705 	ld	a, (0x07, sp)
      0002D9 90 97            [ 1]  706 	ld	yl, a
      0002DB 5F               [ 1]  707 	clrw	x
      0002DC 7B 06            [ 1]  708 	ld	a, (0x06, sp)
      0002DE 97               [ 1]  709 	ld	xl, a
      0002DF 7B 07            [ 1]  710 	ld	a, (0x07, sp)
      0002E1 6B 0C            [ 1]  711 	ld	(0x0c, sp), a
      0002E3 0F 0B            [ 1]  712 	clr	(0x0b, sp)
      0002E5 72 F0 0B         [ 2]  713 	subw	x, (0x0b, sp)
      0002E8 1Cr00r00         [ 2]  714 	addw	x, #(_buffer+0)
      0002EB 90 89            [ 2]  715 	pushw	y
      0002ED 89               [ 2]  716 	pushw	x
      0002EE AEr00rFF         [ 2]  717 	ldw	x, #(_a+0)
      0002F1 CDr00r00         [ 4]  718 	call	___memcpy
                                    719 ;	main.c: 205: data_buf[int_buf_i] = convert_chars_to_int(a, number_counter);
      0002F4 5F               [ 1]  720 	clrw	x
      0002F5 7B 08            [ 1]  721 	ld	a, (0x08, sp)
      0002F7 97               [ 1]  722 	ld	xl, a
      0002F8 1Cr01r06         [ 2]  723 	addw	x, #(_data_buf+0)
      0002FB 89               [ 2]  724 	pushw	x
      0002FC 16 0D            [ 2]  725 	ldw	y, (0x0d, sp)
      0002FE 90 89            [ 2]  726 	pushw	y
      000300 AEr00rFF         [ 2]  727 	ldw	x, #(_a+0)
      000303 CDr01r26         [ 4]  728 	call	_convert_chars_to_int
      000306 85               [ 2]  729 	popw	x
      000307 F7               [ 1]  730 	ld	(x), a
                                    731 ;	main.c: 207: char rx_binary_chars[4]={0};
      000308 0F 01            [ 1]  732 	clr	(0x01, sp)
      00030A 0F 02            [ 1]  733 	clr	(0x02, sp)
      00030C 0F 03            [ 1]  734 	clr	(0x03, sp)
      00030E 0F 04            [ 1]  735 	clr	(0x04, sp)
                                    736 ;	main.c: 208: convert_int_to_chars(i, rx_binary_chars);
      000310 96               [ 1]  737 	ldw	x, sp
      000311 5C               [ 1]  738 	incw	x
      000312 7B 06            [ 1]  739 	ld	a, (0x06, sp)
      000314 CDr00rA1         [ 4]  740 	call	_convert_int_to_chars
                                    741 ;	main.c: 209: uart_write("\ni -> -> ");
      000317 AEr00r2A         [ 2]  742 	ldw	x, #(___str_4+0)
      00031A CDr00r40         [ 4]  743 	call	_uart_write
                                    744 ;	main.c: 210: uart_write(rx_binary_chars);
      00031D 96               [ 1]  745 	ldw	x, sp
      00031E 5C               [ 1]  746 	incw	x
      00031F CDr00r40         [ 4]  747 	call	_uart_write
                                    748 ;	main.c: 211: uart_write(" <-\n");
      000322 AEr00r0A         [ 2]  749 	ldw	x, #(___str_1+0)
      000325 CDr00r40         [ 4]  750 	call	_uart_write
                                    751 ;	main.c: 212: int_buf_i++;
      000328 0C 08            [ 1]  752 	inc	(0x08, sp)
                                    753 ;	main.c: 182: for(int o = 0; o < counter;o++)
      00032A 1E 09            [ 2]  754 	ldw	x, (0x09, sp)
      00032C 5C               [ 1]  755 	incw	x
      00032D 1F 09            [ 2]  756 	ldw	(0x09, sp), x
      00032F CCr02r7D         [ 2]  757 	jp	00112$
      000332                        758 00114$:
                                    759 ;	main.c: 214: }
      000332 5B 0C            [ 2]  760 	addw	sp, #12
      000334 81               [ 4]  761 	ret
                                    762 ;	main.c: 222: void status_check(void){
                                    763 ;	-----------------------------------------
                                    764 ;	 function status_check
                                    765 ;	-----------------------------------------
      000335                        766 _status_check:
      000335 52 09            [ 2]  767 	sub	sp, #9
                                    768 ;	main.c: 223: char rx_binary_chars[9]={0};
      000337 0F 01            [ 1]  769 	clr	(0x01, sp)
      000339 0F 02            [ 1]  770 	clr	(0x02, sp)
      00033B 0F 03            [ 1]  771 	clr	(0x03, sp)
      00033D 0F 04            [ 1]  772 	clr	(0x04, sp)
      00033F 0F 05            [ 1]  773 	clr	(0x05, sp)
      000341 0F 06            [ 1]  774 	clr	(0x06, sp)
      000343 0F 07            [ 1]  775 	clr	(0x07, sp)
      000345 0F 08            [ 1]  776 	clr	(0x08, sp)
      000347 0F 09            [ 1]  777 	clr	(0x09, sp)
                                    778 ;	main.c: 224: uart_write("\nI2C_REGS >.<\n");
      000349 AEr00r34         [ 2]  779 	ldw	x, #(___str_5+0)
      00034C CDr00r40         [ 4]  780 	call	_uart_write
                                    781 ;	main.c: 225: convert_int_to_binary(I2C_SR1, rx_binary_chars);
      00034F 96               [ 1]  782 	ldw	x, sp
      000350 5C               [ 1]  783 	incw	x
      000351 51               [ 1]  784 	exgw	x, y
      000352 C6 52 17         [ 1]  785 	ld	a, 0x5217
      000355 5F               [ 1]  786 	clrw	x
      000356 90 89            [ 2]  787 	pushw	y
      000358 97               [ 1]  788 	ld	xl, a
      000359 CDr01r89         [ 4]  789 	call	_convert_int_to_binary
                                    790 ;	main.c: 226: uart_write("\nSR1 -> ");
      00035C AEr00r43         [ 2]  791 	ldw	x, #(___str_6+0)
      00035F CDr00r40         [ 4]  792 	call	_uart_write
                                    793 ;	main.c: 227: uart_write(rx_binary_chars);
      000362 96               [ 1]  794 	ldw	x, sp
      000363 5C               [ 1]  795 	incw	x
      000364 CDr00r40         [ 4]  796 	call	_uart_write
                                    797 ;	main.c: 228: uart_write(" <-\n");
      000367 AEr00r0A         [ 2]  798 	ldw	x, #(___str_1+0)
      00036A CDr00r40         [ 4]  799 	call	_uart_write
                                    800 ;	main.c: 229: convert_int_to_binary(I2C_SR2, rx_binary_chars);
      00036D 96               [ 1]  801 	ldw	x, sp
      00036E 5C               [ 1]  802 	incw	x
      00036F 51               [ 1]  803 	exgw	x, y
      000370 C6 52 18         [ 1]  804 	ld	a, 0x5218
      000373 5F               [ 1]  805 	clrw	x
      000374 90 89            [ 2]  806 	pushw	y
      000376 97               [ 1]  807 	ld	xl, a
      000377 CDr01r89         [ 4]  808 	call	_convert_int_to_binary
                                    809 ;	main.c: 230: uart_write("SR2 -> ");
      00037A AEr00r4C         [ 2]  810 	ldw	x, #(___str_7+0)
      00037D CDr00r40         [ 4]  811 	call	_uart_write
                                    812 ;	main.c: 231: uart_write(rx_binary_chars);
      000380 96               [ 1]  813 	ldw	x, sp
      000381 5C               [ 1]  814 	incw	x
      000382 CDr00r40         [ 4]  815 	call	_uart_write
                                    816 ;	main.c: 232: uart_write(" <-\n");
      000385 AEr00r0A         [ 2]  817 	ldw	x, #(___str_1+0)
      000388 CDr00r40         [ 4]  818 	call	_uart_write
                                    819 ;	main.c: 233: convert_int_to_binary(I2C_SR3, rx_binary_chars);
      00038B 96               [ 1]  820 	ldw	x, sp
      00038C 5C               [ 1]  821 	incw	x
      00038D 51               [ 1]  822 	exgw	x, y
      00038E C6 52 19         [ 1]  823 	ld	a, 0x5219
      000391 5F               [ 1]  824 	clrw	x
      000392 90 89            [ 2]  825 	pushw	y
      000394 97               [ 1]  826 	ld	xl, a
      000395 CDr01r89         [ 4]  827 	call	_convert_int_to_binary
                                    828 ;	main.c: 234: uart_write("SR3 -> ");
      000398 AEr00r54         [ 2]  829 	ldw	x, #(___str_8+0)
      00039B CDr00r40         [ 4]  830 	call	_uart_write
                                    831 ;	main.c: 235: uart_write(rx_binary_chars);
      00039E 96               [ 1]  832 	ldw	x, sp
      00039F 5C               [ 1]  833 	incw	x
      0003A0 CDr00r40         [ 4]  834 	call	_uart_write
                                    835 ;	main.c: 236: uart_write(" <-\n");
      0003A3 AEr00r0A         [ 2]  836 	ldw	x, #(___str_1+0)
      0003A6 CDr00r40         [ 4]  837 	call	_uart_write
                                    838 ;	main.c: 237: convert_int_to_binary(I2C_CR1, rx_binary_chars);
      0003A9 96               [ 1]  839 	ldw	x, sp
      0003AA 5C               [ 1]  840 	incw	x
      0003AB 51               [ 1]  841 	exgw	x, y
      0003AC C6 52 10         [ 1]  842 	ld	a, 0x5210
      0003AF 5F               [ 1]  843 	clrw	x
      0003B0 90 89            [ 2]  844 	pushw	y
      0003B2 97               [ 1]  845 	ld	xl, a
      0003B3 CDr01r89         [ 4]  846 	call	_convert_int_to_binary
                                    847 ;	main.c: 238: uart_write("CR1 -> ");
      0003B6 AEr00r5C         [ 2]  848 	ldw	x, #(___str_9+0)
      0003B9 CDr00r40         [ 4]  849 	call	_uart_write
                                    850 ;	main.c: 239: uart_write(rx_binary_chars);
      0003BC 96               [ 1]  851 	ldw	x, sp
      0003BD 5C               [ 1]  852 	incw	x
      0003BE CDr00r40         [ 4]  853 	call	_uart_write
                                    854 ;	main.c: 240: uart_write(" <-\n");
      0003C1 AEr00r0A         [ 2]  855 	ldw	x, #(___str_1+0)
      0003C4 CDr00r40         [ 4]  856 	call	_uart_write
                                    857 ;	main.c: 241: convert_int_to_binary(I2C_CR2, rx_binary_chars);
      0003C7 96               [ 1]  858 	ldw	x, sp
      0003C8 5C               [ 1]  859 	incw	x
      0003C9 51               [ 1]  860 	exgw	x, y
      0003CA C6 52 11         [ 1]  861 	ld	a, 0x5211
      0003CD 5F               [ 1]  862 	clrw	x
      0003CE 90 89            [ 2]  863 	pushw	y
      0003D0 97               [ 1]  864 	ld	xl, a
      0003D1 CDr01r89         [ 4]  865 	call	_convert_int_to_binary
                                    866 ;	main.c: 242: uart_write("CR2 -> ");
      0003D4 AEr00r64         [ 2]  867 	ldw	x, #(___str_10+0)
      0003D7 CDr00r40         [ 4]  868 	call	_uart_write
                                    869 ;	main.c: 243: uart_write(rx_binary_chars);
      0003DA 96               [ 1]  870 	ldw	x, sp
      0003DB 5C               [ 1]  871 	incw	x
      0003DC CDr00r40         [ 4]  872 	call	_uart_write
                                    873 ;	main.c: 244: uart_write(" <-\n");
      0003DF AEr00r0A         [ 2]  874 	ldw	x, #(___str_1+0)
      0003E2 CDr00r40         [ 4]  875 	call	_uart_write
                                    876 ;	main.c: 245: convert_int_to_binary(I2C_DR, rx_binary_chars);
      0003E5 96               [ 1]  877 	ldw	x, sp
      0003E6 5C               [ 1]  878 	incw	x
      0003E7 51               [ 1]  879 	exgw	x, y
      0003E8 C6 52 16         [ 1]  880 	ld	a, 0x5216
      0003EB 5F               [ 1]  881 	clrw	x
      0003EC 90 89            [ 2]  882 	pushw	y
      0003EE 97               [ 1]  883 	ld	xl, a
      0003EF CDr01r89         [ 4]  884 	call	_convert_int_to_binary
                                    885 ;	main.c: 246: uart_write("DR -> ");
      0003F2 AEr00r6C         [ 2]  886 	ldw	x, #(___str_11+0)
      0003F5 CDr00r40         [ 4]  887 	call	_uart_write
                                    888 ;	main.c: 247: uart_write(rx_binary_chars);
      0003F8 96               [ 1]  889 	ldw	x, sp
      0003F9 5C               [ 1]  890 	incw	x
      0003FA CDr00r40         [ 4]  891 	call	_uart_write
                                    892 ;	main.c: 248: uart_write(" <-\n");
      0003FD AEr00r0A         [ 2]  893 	ldw	x, #(___str_1+0)
      000400 CDr00r40         [ 4]  894 	call	_uart_write
                                    895 ;	main.c: 249: uart_write("UART_REGS >.<\n");
      000403 AEr00r73         [ 2]  896 	ldw	x, #(___str_12+0)
      000406 CDr00r40         [ 4]  897 	call	_uart_write
                                    898 ;	main.c: 250: convert_int_to_binary(UART1_SR, rx_binary_chars);
      000409 96               [ 1]  899 	ldw	x, sp
      00040A 5C               [ 1]  900 	incw	x
      00040B 51               [ 1]  901 	exgw	x, y
      00040C C6 52 30         [ 1]  902 	ld	a, 0x5230
      00040F 5F               [ 1]  903 	clrw	x
      000410 90 89            [ 2]  904 	pushw	y
      000412 97               [ 1]  905 	ld	xl, a
      000413 CDr01r89         [ 4]  906 	call	_convert_int_to_binary
                                    907 ;	main.c: 251: uart_write("\nSR -> ");
      000416 AEr00r82         [ 2]  908 	ldw	x, #(___str_13+0)
      000419 CDr00r40         [ 4]  909 	call	_uart_write
                                    910 ;	main.c: 252: uart_write(rx_binary_chars);
      00041C 96               [ 1]  911 	ldw	x, sp
      00041D 5C               [ 1]  912 	incw	x
      00041E CDr00r40         [ 4]  913 	call	_uart_write
                                    914 ;	main.c: 253: uart_write(" <-\n");
      000421 AEr00r0A         [ 2]  915 	ldw	x, #(___str_1+0)
      000424 CDr00r40         [ 4]  916 	call	_uart_write
                                    917 ;	main.c: 254: convert_int_to_binary(UART1_DR, rx_binary_chars);
      000427 96               [ 1]  918 	ldw	x, sp
      000428 5C               [ 1]  919 	incw	x
      000429 51               [ 1]  920 	exgw	x, y
      00042A C6 52 31         [ 1]  921 	ld	a, 0x5231
      00042D 5F               [ 1]  922 	clrw	x
      00042E 90 89            [ 2]  923 	pushw	y
      000430 97               [ 1]  924 	ld	xl, a
      000431 CDr01r89         [ 4]  925 	call	_convert_int_to_binary
                                    926 ;	main.c: 255: uart_write("DR -> ");
      000434 AEr00r6C         [ 2]  927 	ldw	x, #(___str_11+0)
      000437 CDr00r40         [ 4]  928 	call	_uart_write
                                    929 ;	main.c: 256: uart_write(rx_binary_chars);
      00043A 96               [ 1]  930 	ldw	x, sp
      00043B 5C               [ 1]  931 	incw	x
      00043C CDr00r40         [ 4]  932 	call	_uart_write
                                    933 ;	main.c: 257: uart_write(" <-\n");
      00043F AEr00r0A         [ 2]  934 	ldw	x, #(___str_1+0)
      000442 CDr00r40         [ 4]  935 	call	_uart_write
                                    936 ;	main.c: 258: convert_int_to_binary(UART1_BRR1, rx_binary_chars);
      000445 96               [ 1]  937 	ldw	x, sp
      000446 5C               [ 1]  938 	incw	x
      000447 51               [ 1]  939 	exgw	x, y
      000448 C6 52 32         [ 1]  940 	ld	a, 0x5232
      00044B 5F               [ 1]  941 	clrw	x
      00044C 90 89            [ 2]  942 	pushw	y
      00044E 97               [ 1]  943 	ld	xl, a
      00044F CDr01r89         [ 4]  944 	call	_convert_int_to_binary
                                    945 ;	main.c: 259: uart_write("BRR1 -> ");
      000452 AEr00r8A         [ 2]  946 	ldw	x, #(___str_14+0)
      000455 CDr00r40         [ 4]  947 	call	_uart_write
                                    948 ;	main.c: 260: uart_write(rx_binary_chars);
      000458 96               [ 1]  949 	ldw	x, sp
      000459 5C               [ 1]  950 	incw	x
      00045A CDr00r40         [ 4]  951 	call	_uart_write
                                    952 ;	main.c: 261: uart_write(" <-\n");
      00045D AEr00r0A         [ 2]  953 	ldw	x, #(___str_1+0)
      000460 CDr00r40         [ 4]  954 	call	_uart_write
                                    955 ;	main.c: 262: convert_int_to_binary(UART1_BRR2, rx_binary_chars);
      000463 96               [ 1]  956 	ldw	x, sp
      000464 5C               [ 1]  957 	incw	x
      000465 51               [ 1]  958 	exgw	x, y
      000466 C6 52 33         [ 1]  959 	ld	a, 0x5233
      000469 5F               [ 1]  960 	clrw	x
      00046A 90 89            [ 2]  961 	pushw	y
      00046C 97               [ 1]  962 	ld	xl, a
      00046D CDr01r89         [ 4]  963 	call	_convert_int_to_binary
                                    964 ;	main.c: 263: uart_write("BRR2 -> ");
      000470 AEr00r93         [ 2]  965 	ldw	x, #(___str_15+0)
      000473 CDr00r40         [ 4]  966 	call	_uart_write
                                    967 ;	main.c: 264: uart_write(rx_binary_chars);
      000476 96               [ 1]  968 	ldw	x, sp
      000477 5C               [ 1]  969 	incw	x
      000478 CDr00r40         [ 4]  970 	call	_uart_write
                                    971 ;	main.c: 265: uart_write(" <-\n");
      00047B AEr00r0A         [ 2]  972 	ldw	x, #(___str_1+0)
      00047E CDr00r40         [ 4]  973 	call	_uart_write
                                    974 ;	main.c: 266: convert_int_to_binary(UART1_CR1, rx_binary_chars);
      000481 96               [ 1]  975 	ldw	x, sp
      000482 5C               [ 1]  976 	incw	x
      000483 51               [ 1]  977 	exgw	x, y
      000484 C6 52 34         [ 1]  978 	ld	a, 0x5234
      000487 5F               [ 1]  979 	clrw	x
      000488 90 89            [ 2]  980 	pushw	y
      00048A 97               [ 1]  981 	ld	xl, a
      00048B CDr01r89         [ 4]  982 	call	_convert_int_to_binary
                                    983 ;	main.c: 267: uart_write("CR1 -> ");
      00048E AEr00r5C         [ 2]  984 	ldw	x, #(___str_9+0)
      000491 CDr00r40         [ 4]  985 	call	_uart_write
                                    986 ;	main.c: 268: uart_write(rx_binary_chars);
      000494 96               [ 1]  987 	ldw	x, sp
      000495 5C               [ 1]  988 	incw	x
      000496 CDr00r40         [ 4]  989 	call	_uart_write
                                    990 ;	main.c: 269: uart_write(" <-\n");
      000499 AEr00r0A         [ 2]  991 	ldw	x, #(___str_1+0)
      00049C CDr00r40         [ 4]  992 	call	_uart_write
                                    993 ;	main.c: 270: convert_int_to_binary(UART1_CR2, rx_binary_chars);
      00049F 96               [ 1]  994 	ldw	x, sp
      0004A0 5C               [ 1]  995 	incw	x
      0004A1 51               [ 1]  996 	exgw	x, y
      0004A2 C6 52 35         [ 1]  997 	ld	a, 0x5235
      0004A5 5F               [ 1]  998 	clrw	x
      0004A6 90 89            [ 2]  999 	pushw	y
      0004A8 97               [ 1] 1000 	ld	xl, a
      0004A9 CDr01r89         [ 4] 1001 	call	_convert_int_to_binary
                                   1002 ;	main.c: 271: uart_write("CR2 -> ");
      0004AC AEr00r64         [ 2] 1003 	ldw	x, #(___str_10+0)
      0004AF CDr00r40         [ 4] 1004 	call	_uart_write
                                   1005 ;	main.c: 272: uart_write(rx_binary_chars);
      0004B2 96               [ 1] 1006 	ldw	x, sp
      0004B3 5C               [ 1] 1007 	incw	x
      0004B4 CDr00r40         [ 4] 1008 	call	_uart_write
                                   1009 ;	main.c: 273: uart_write(" <-\n");
      0004B7 AEr00r0A         [ 2] 1010 	ldw	x, #(___str_1+0)
      0004BA CDr00r40         [ 4] 1011 	call	_uart_write
                                   1012 ;	main.c: 274: convert_int_to_binary(UART1_CR3, rx_binary_chars);
      0004BD 96               [ 1] 1013 	ldw	x, sp
      0004BE 5C               [ 1] 1014 	incw	x
      0004BF 51               [ 1] 1015 	exgw	x, y
      0004C0 C6 52 36         [ 1] 1016 	ld	a, 0x5236
      0004C3 5F               [ 1] 1017 	clrw	x
      0004C4 90 89            [ 2] 1018 	pushw	y
      0004C6 97               [ 1] 1019 	ld	xl, a
      0004C7 CDr01r89         [ 4] 1020 	call	_convert_int_to_binary
                                   1021 ;	main.c: 275: uart_write("CR3 -> ");
      0004CA AEr00r9C         [ 2] 1022 	ldw	x, #(___str_16+0)
      0004CD CDr00r40         [ 4] 1023 	call	_uart_write
                                   1024 ;	main.c: 276: uart_write(rx_binary_chars);
      0004D0 96               [ 1] 1025 	ldw	x, sp
      0004D1 5C               [ 1] 1026 	incw	x
      0004D2 CDr00r40         [ 4] 1027 	call	_uart_write
                                   1028 ;	main.c: 277: uart_write(" <-\n");
      0004D5 AEr00r0A         [ 2] 1029 	ldw	x, #(___str_1+0)
      0004D8 CDr00r40         [ 4] 1030 	call	_uart_write
                                   1031 ;	main.c: 278: convert_int_to_binary(UART1_CR4, rx_binary_chars);
      0004DB 96               [ 1] 1032 	ldw	x, sp
      0004DC 5C               [ 1] 1033 	incw	x
      0004DD 51               [ 1] 1034 	exgw	x, y
      0004DE C6 52 37         [ 1] 1035 	ld	a, 0x5237
      0004E1 5F               [ 1] 1036 	clrw	x
      0004E2 90 89            [ 2] 1037 	pushw	y
      0004E4 97               [ 1] 1038 	ld	xl, a
      0004E5 CDr01r89         [ 4] 1039 	call	_convert_int_to_binary
                                   1040 ;	main.c: 279: uart_write("CR4 -> ");
      0004E8 AEr00rA4         [ 2] 1041 	ldw	x, #(___str_17+0)
      0004EB CDr00r40         [ 4] 1042 	call	_uart_write
                                   1043 ;	main.c: 280: uart_write(rx_binary_chars);
      0004EE 96               [ 1] 1044 	ldw	x, sp
      0004EF 5C               [ 1] 1045 	incw	x
      0004F0 CDr00r40         [ 4] 1046 	call	_uart_write
                                   1047 ;	main.c: 281: uart_write(" <-\n");
      0004F3 AEr00r0A         [ 2] 1048 	ldw	x, #(___str_1+0)
      0004F6 CDr00r40         [ 4] 1049 	call	_uart_write
                                   1050 ;	main.c: 282: convert_int_to_binary(UART1_CR5, rx_binary_chars);
      0004F9 96               [ 1] 1051 	ldw	x, sp
      0004FA 5C               [ 1] 1052 	incw	x
      0004FB 51               [ 1] 1053 	exgw	x, y
      0004FC C6 52 38         [ 1] 1054 	ld	a, 0x5238
      0004FF 5F               [ 1] 1055 	clrw	x
      000500 90 89            [ 2] 1056 	pushw	y
      000502 97               [ 1] 1057 	ld	xl, a
      000503 CDr01r89         [ 4] 1058 	call	_convert_int_to_binary
                                   1059 ;	main.c: 283: uart_write("CR5 -> ");
      000506 AEr00rAC         [ 2] 1060 	ldw	x, #(___str_18+0)
      000509 CDr00r40         [ 4] 1061 	call	_uart_write
                                   1062 ;	main.c: 284: uart_write(rx_binary_chars);
      00050C 96               [ 1] 1063 	ldw	x, sp
      00050D 5C               [ 1] 1064 	incw	x
      00050E CDr00r40         [ 4] 1065 	call	_uart_write
                                   1066 ;	main.c: 285: uart_write(" <-\n");
      000511 AEr00r0A         [ 2] 1067 	ldw	x, #(___str_1+0)
      000514 CDr00r40         [ 4] 1068 	call	_uart_write
                                   1069 ;	main.c: 286: convert_int_to_binary(UART1_GTR, rx_binary_chars);
      000517 96               [ 1] 1070 	ldw	x, sp
      000518 5C               [ 1] 1071 	incw	x
      000519 51               [ 1] 1072 	exgw	x, y
      00051A C6 52 39         [ 1] 1073 	ld	a, 0x5239
      00051D 5F               [ 1] 1074 	clrw	x
      00051E 90 89            [ 2] 1075 	pushw	y
      000520 97               [ 1] 1076 	ld	xl, a
      000521 CDr01r89         [ 4] 1077 	call	_convert_int_to_binary
                                   1078 ;	main.c: 287: uart_write("GTR -> ");
      000524 AEr00rB4         [ 2] 1079 	ldw	x, #(___str_19+0)
      000527 CDr00r40         [ 4] 1080 	call	_uart_write
                                   1081 ;	main.c: 288: uart_write(rx_binary_chars);
      00052A 96               [ 1] 1082 	ldw	x, sp
      00052B 5C               [ 1] 1083 	incw	x
      00052C CDr00r40         [ 4] 1084 	call	_uart_write
                                   1085 ;	main.c: 289: uart_write(" <-\n");
      00052F AEr00r0A         [ 2] 1086 	ldw	x, #(___str_1+0)
      000532 CDr00r40         [ 4] 1087 	call	_uart_write
                                   1088 ;	main.c: 290: convert_int_to_binary(UART1_PSCR, rx_binary_chars);
      000535 96               [ 1] 1089 	ldw	x, sp
      000536 5C               [ 1] 1090 	incw	x
      000537 51               [ 1] 1091 	exgw	x, y
      000538 C6 52 3A         [ 1] 1092 	ld	a, 0x523a
      00053B 5F               [ 1] 1093 	clrw	x
      00053C 90 89            [ 2] 1094 	pushw	y
      00053E 97               [ 1] 1095 	ld	xl, a
      00053F CDr01r89         [ 4] 1096 	call	_convert_int_to_binary
                                   1097 ;	main.c: 291: uart_write("PSCR -> ");
      000542 AEr00rBC         [ 2] 1098 	ldw	x, #(___str_20+0)
      000545 CDr00r40         [ 4] 1099 	call	_uart_write
                                   1100 ;	main.c: 292: uart_write(rx_binary_chars);
      000548 96               [ 1] 1101 	ldw	x, sp
      000549 5C               [ 1] 1102 	incw	x
      00054A CDr00r40         [ 4] 1103 	call	_uart_write
                                   1104 ;	main.c: 293: uart_write(" <-\n");
      00054D AEr00r0A         [ 2] 1105 	ldw	x, #(___str_1+0)
      000550 CDr00r40         [ 4] 1106 	call	_uart_write
                                   1107 ;	main.c: 294: }
      000553 5B 09            [ 2] 1108 	addw	sp, #9
      000555 81               [ 4] 1109 	ret
                                   1110 ;	main.c: 296: void uart_init(void){
                                   1111 ;	-----------------------------------------
                                   1112 ;	 function uart_init
                                   1113 ;	-----------------------------------------
      000556                       1114 _uart_init:
                                   1115 ;	main.c: 297: CLK_CKDIVR = 0;
      000556 35 00 50 C6      [ 1] 1116 	mov	0x50c6+0, #0x00
                                   1117 ;	main.c: 300: UART1_CR2 |= UART_CR2_TEN; // Transmitter enable
      00055A 72 16 52 35      [ 1] 1118 	bset	0x5235, #3
                                   1119 ;	main.c: 301: UART1_CR2 |= UART_CR2_REN; // Receiver enable
      00055E 72 14 52 35      [ 1] 1120 	bset	0x5235, #2
                                   1121 ;	main.c: 302: UART1_CR3 &= ~(UART_CR3_STOP1 | UART_CR3_STOP2); // 1 stop bit
      000562 C6 52 36         [ 1] 1122 	ld	a, 0x5236
      000565 A4 CF            [ 1] 1123 	and	a, #0xcf
      000567 C7 52 36         [ 1] 1124 	ld	0x5236, a
                                   1125 ;	main.c: 304: UART1_BRR2 = 0x03; UART1_BRR1 = 0x68; // 0x0683 coded funky way (see ref manual)
      00056A 35 03 52 33      [ 1] 1126 	mov	0x5233+0, #0x03
      00056E 35 68 52 32      [ 1] 1127 	mov	0x5232+0, #0x68
                                   1128 ;	main.c: 305: }
      000572 81               [ 4] 1129 	ret
                                   1130 ;	main.c: 309: void i2c_init(void) {
                                   1131 ;	-----------------------------------------
                                   1132 ;	 function i2c_init
                                   1133 ;	-----------------------------------------
      000573                       1134 _i2c_init:
                                   1135 ;	main.c: 315: I2C_CR1 = I2C_CR1 & ~0x01;      // PE=0, disable I2C before setup
      000573 72 11 52 10      [ 1] 1136 	bres	0x5210, #0
                                   1137 ;	main.c: 316: I2C_FREQR= 16;                  // peripheral frequence =16MHz
      000577 35 10 52 12      [ 1] 1138 	mov	0x5212+0, #0x10
                                   1139 ;	main.c: 317: I2C_CCRH = 0;                   // =0
      00057B 35 00 52 1C      [ 1] 1140 	mov	0x521c+0, #0x00
                                   1141 ;	main.c: 318: I2C_CCRL = 80;                  // 100kHz for I2C
      00057F 35 50 52 1B      [ 1] 1142 	mov	0x521b+0, #0x50
                                   1143 ;	main.c: 319: I2C_CCRH = I2C_CCRH & ~0x80;    // set standart mode(100кHz)
      000583 72 1F 52 1C      [ 1] 1144 	bres	0x521c, #7
                                   1145 ;	main.c: 320: I2C_OARH = I2C_OARH & ~0x80;    // 7-bit address mode
      000587 72 1F 52 14      [ 1] 1146 	bres	0x5214, #7
                                   1147 ;	main.c: 321: I2C_OARH = I2C_OARH | 0x40;     // see reference manual
      00058B 72 1C 52 14      [ 1] 1148 	bset	0x5214, #6
                                   1149 ;	main.c: 322: I2C_CR1 = I2C_CR1 | 0x01;       // PE=1, enable I2C
      00058F 72 10 52 10      [ 1] 1150 	bset	0x5210, #0
                                   1151 ;	main.c: 323: }
      000593 81               [ 4] 1152 	ret
                                   1153 ;	main.c: 332: void i2c_start(void) {
                                   1154 ;	-----------------------------------------
                                   1155 ;	 function i2c_start
                                   1156 ;	-----------------------------------------
      000594                       1157 _i2c_start:
                                   1158 ;	main.c: 333: I2C_CR2 = I2C_CR2 | (1 << 0); // Отправляем стартовый сигнал
      000594 72 10 52 11      [ 1] 1159 	bset	0x5211, #0
                                   1160 ;	main.c: 334: while(!(I2C_SR1 & (1 << 0)));
      000598                       1161 00101$:
      000598 72 01 52 17 FB   [ 2] 1162 	btjf	0x5217, #0, 00101$
                                   1163 ;	main.c: 336: }
      00059D 81               [ 4] 1164 	ret
                                   1165 ;	main.c: 338: void i2c_send_address(uint8_t address) {
                                   1166 ;	-----------------------------------------
                                   1167 ;	 function i2c_send_address
                                   1168 ;	-----------------------------------------
      00059E                       1169 _i2c_send_address:
                                   1170 ;	main.c: 339: I2C_DR = address << 1; // Отправка адреса устройства с битом на запись
      00059E 48               [ 1] 1171 	sll	a
      00059F C7 52 16         [ 1] 1172 	ld	0x5216, a
                                   1173 ;	main.c: 340: while (!(I2C_SR1 & (1 << 1)) && !(I2C_SR2 & (1 << 2)));
      0005A2                       1174 00102$:
      0005A2 72 03 52 17 01   [ 2] 1175 	btjf	0x5217, #1, 00117$
      0005A7 81               [ 4] 1176 	ret
      0005A8                       1177 00117$:
      0005A8 72 05 52 18 F5   [ 2] 1178 	btjf	0x5218, #2, 00102$
                                   1179 ;	main.c: 341: }
      0005AD 81               [ 4] 1180 	ret
                                   1181 ;	main.c: 343: void i2c_stop(void) {
                                   1182 ;	-----------------------------------------
                                   1183 ;	 function i2c_stop
                                   1184 ;	-----------------------------------------
      0005AE                       1185 _i2c_stop:
                                   1186 ;	main.c: 344: I2C_CR2 = I2C_CR2 | (1 << 1); // Отправка стопового сигнала
      0005AE 72 12 52 11      [ 1] 1187 	bset	0x5211, #1
                                   1188 ;	main.c: 346: }
      0005B2 81               [ 4] 1189 	ret
                                   1190 ;	main.c: 347: void i2c_write(void){
                                   1191 ;	-----------------------------------------
                                   1192 ;	 function i2c_write
                                   1193 ;	-----------------------------------------
      0005B3                       1194 _i2c_write:
      0005B3 52 02            [ 2] 1195 	sub	sp, #2
                                   1196 ;	main.c: 348: I2C_DR = d_addr; // Отправка адреса регистра
      0005B5 55u01u02 52 16   [ 1] 1197 	mov	0x5216+0, _d_addr+0
                                   1198 ;	main.c: 349: for(int i = 0;i < d_size;i++)
      0005BA 5F               [ 1] 1199 	clrw	x
      0005BB                       1200 00107$:
      0005BB C6u01u04         [ 1] 1201 	ld	a, _d_size+0
      0005BE 6B 02            [ 1] 1202 	ld	(0x02, sp), a
      0005C0 0F 01            [ 1] 1203 	clr	(0x01, sp)
      0005C2 13 01            [ 2] 1204 	cpw	x, (0x01, sp)
      0005C4 2E 16            [ 1] 1205 	jrsge	00109$
                                   1206 ;	main.c: 351: I2C_DR = data_buf[i];
      0005C6 90 93            [ 1] 1207 	ldw	y, x
      0005C8 90 D6u01u06      [ 1] 1208 	ld	a, (_data_buf+0, y)
      0005CC C7 52 16         [ 1] 1209 	ld	0x5216, a
                                   1210 ;	main.c: 352: while (!(I2C_SR1 & (1 << 1)) && !(I2C_SR2 & (1 << 2)));
      0005CF                       1211 00102$:
      0005CF 72 02 52 17 05   [ 2] 1212 	btjt	0x5217, #1, 00108$
      0005D4 72 05 52 18 F6   [ 2] 1213 	btjf	0x5218, #2, 00102$
      0005D9                       1214 00108$:
                                   1215 ;	main.c: 349: for(int i = 0;i < d_size;i++)
      0005D9 5C               [ 1] 1216 	incw	x
      0005DA 20 DF            [ 2] 1217 	jra	00107$
      0005DC                       1218 00109$:
                                   1219 ;	main.c: 354: }
      0005DC 5B 02            [ 2] 1220 	addw	sp, #2
      0005DE 81               [ 4] 1221 	ret
                                   1222 ;	main.c: 356: void i2c_read(void){
                                   1223 ;	-----------------------------------------
                                   1224 ;	 function i2c_read
                                   1225 ;	-----------------------------------------
      0005DF                       1226 _i2c_read:
      0005DF 52 02            [ 2] 1227 	sub	sp, #2
                                   1228 ;	main.c: 357: I2C_DR = (current_dev << 1) & (1 << 0);
      0005E1 C6u02u05         [ 1] 1229 	ld	a, _current_dev+0
      0005E4 48               [ 1] 1230 	sll	a
      0005E5 A4 01            [ 1] 1231 	and	a, #0x01
      0005E7 C7 52 16         [ 1] 1232 	ld	0x5216, a
                                   1233 ;	main.c: 358: while (!(I2C_SR1 & (1 << 1)) && !(I2C_SR2 & (1 << 2)));
      0005EA                       1234 00102$:
      0005EA 72 02 52 17 05   [ 2] 1235 	btjt	0x5217, #1, 00104$
      0005EF 72 05 52 18 F6   [ 2] 1236 	btjf	0x5218, #2, 00102$
      0005F4                       1237 00104$:
                                   1238 ;	main.c: 360: I2C_DR = d_addr;
      0005F4 55u01u02 52 16   [ 1] 1239 	mov	0x5216+0, _d_addr+0
                                   1240 ;	main.c: 361: while (!(I2C_SR1 & (1 << 1)) && !(I2C_SR2 & (1 << 2)));
      0005F9                       1241 00106$:
      0005F9 72 02 52 17 05   [ 2] 1242 	btjt	0x5217, #1, 00108$
      0005FE 72 05 52 18 F6   [ 2] 1243 	btjf	0x5218, #2, 00106$
      000603                       1244 00108$:
                                   1245 ;	main.c: 362: i2c_stop();
      000603 CDr05rAE         [ 4] 1246 	call	_i2c_stop
                                   1247 ;	main.c: 363: for(int i = 0;i < d_size;i++)
      000606 5F               [ 1] 1248 	clrw	x
      000607                       1249 00115$:
      000607 C6u01u04         [ 1] 1250 	ld	a, _d_size+0
      00060A 6B 02            [ 1] 1251 	ld	(0x02, sp), a
      00060C 0F 01            [ 1] 1252 	clr	(0x01, sp)
      00060E 13 01            [ 2] 1253 	cpw	x, (0x01, sp)
      000610 2E 13            [ 1] 1254 	jrsge	00117$
                                   1255 ;	main.c: 365: data_buf[i] = I2C_DR;
      000612 C6 52 16         [ 1] 1256 	ld	a, 0x5216
      000615 D7u01u06         [ 1] 1257 	ld	((_data_buf+0), x), a
                                   1258 ;	main.c: 366: while (!(I2C_SR1 & (1 << 1)) && !(I2C_SR2 & (1 << 2)));
      000618                       1259 00110$:
      000618 72 02 52 17 05   [ 2] 1260 	btjt	0x5217, #1, 00116$
      00061D 72 05 52 18 F6   [ 2] 1261 	btjf	0x5218, #2, 00110$
      000622                       1262 00116$:
                                   1263 ;	main.c: 363: for(int i = 0;i < d_size;i++)
      000622 5C               [ 1] 1264 	incw	x
      000623 20 E2            [ 2] 1265 	jra	00115$
      000625                       1266 00117$:
                                   1267 ;	main.c: 369: }
      000625 5B 02            [ 2] 1268 	addw	sp, #2
      000627 81               [ 4] 1269 	ret
                                   1270 ;	main.c: 370: void i2c_scan(void) {
                                   1271 ;	-----------------------------------------
                                   1272 ;	 function i2c_scan
                                   1273 ;	-----------------------------------------
      000628                       1274 _i2c_scan:
      000628 52 02            [ 2] 1275 	sub	sp, #2
                                   1276 ;	main.c: 371: for (uint8_t addr = current_dev; addr < 127; addr++) {
      00062A C6u02u05         [ 1] 1277 	ld	a, _current_dev+0
      00062D 6B 01            [ 1] 1278 	ld	(0x01, sp), a
      00062F 6B 02            [ 1] 1279 	ld	(0x02, sp), a
      000631                       1280 00105$:
      000631 7B 02            [ 1] 1281 	ld	a, (0x02, sp)
      000633 A1 7F            [ 1] 1282 	cp	a, #0x7f
      000635 24 26            [ 1] 1283 	jrnc	00107$
                                   1284 ;	main.c: 372: i2c_start();
      000637 CDr05r94         [ 4] 1285 	call	_i2c_start
                                   1286 ;	main.c: 373: i2c_send_address(addr);
      00063A 7B 02            [ 1] 1287 	ld	a, (0x02, sp)
      00063C CDr05r9E         [ 4] 1288 	call	_i2c_send_address
                                   1289 ;	main.c: 374: if (!(I2C_SR2 & (1 << 2))) { // Проверка на ACK
      00063F 72 04 52 18 0A   [ 2] 1290 	btjt	0x5218, #2, 00102$
                                   1291 ;	main.c: 376: current_dev = addr;
      000644 7B 01            [ 1] 1292 	ld	a, (0x01, sp)
      000646 C7u02u05         [ 1] 1293 	ld	_current_dev+0, a
                                   1294 ;	main.c: 377: i2c_stop();
      000649 5B 02            [ 2] 1295 	addw	sp, #2
                                   1296 ;	main.c: 378: break;
      00064B CCr05rAE         [ 2] 1297 	jp	_i2c_stop
      00064E                       1298 00102$:
                                   1299 ;	main.c: 380: i2c_stop();
      00064E CDr05rAE         [ 4] 1300 	call	_i2c_stop
                                   1301 ;	main.c: 381: I2C_SR2 = I2C_SR2 & ~(1 << 2); // Очистка флага ошибки
      000651 72 15 52 18      [ 1] 1302 	bres	0x5218, #2
                                   1303 ;	main.c: 371: for (uint8_t addr = current_dev; addr < 127; addr++) {
      000655 0C 02            [ 1] 1304 	inc	(0x02, sp)
      000657 7B 02            [ 1] 1305 	ld	a, (0x02, sp)
      000659 6B 01            [ 1] 1306 	ld	(0x01, sp), a
      00065B 20 D4            [ 2] 1307 	jra	00105$
      00065D                       1308 00107$:
                                   1309 ;	main.c: 383: }
      00065D 5B 02            [ 2] 1310 	addw	sp, #2
      00065F 81               [ 4] 1311 	ret
                                   1312 ;	main.c: 393: void cm_SM(void)
                                   1313 ;	-----------------------------------------
                                   1314 ;	 function cm_SM
                                   1315 ;	-----------------------------------------
      000660                       1316 _cm_SM:
      000660 52 04            [ 2] 1317 	sub	sp, #4
                                   1318 ;	main.c: 395: char cur_dev[4]={0};
      000662 0F 01            [ 1] 1319 	clr	(0x01, sp)
      000664 0F 02            [ 1] 1320 	clr	(0x02, sp)
      000666 0F 03            [ 1] 1321 	clr	(0x03, sp)
      000668 0F 04            [ 1] 1322 	clr	(0x04, sp)
                                   1323 ;	main.c: 396: convert_int_to_chars(current_dev, cur_dev);
      00066A 96               [ 1] 1324 	ldw	x, sp
      00066B 5C               [ 1] 1325 	incw	x
      00066C C6u02u05         [ 1] 1326 	ld	a, _current_dev+0
      00066F CDr00rA1         [ 4] 1327 	call	_convert_int_to_chars
                                   1328 ;	main.c: 397: uart_write("SM ");
      000672 AEr00rC5         [ 2] 1329 	ldw	x, #(___str_21+0)
      000675 CDr00r40         [ 4] 1330 	call	_uart_write
                                   1331 ;	main.c: 398: uart_write(cur_dev);
      000678 96               [ 1] 1332 	ldw	x, sp
      000679 5C               [ 1] 1333 	incw	x
      00067A CDr00r40         [ 4] 1334 	call	_uart_write
                                   1335 ;	main.c: 399: uart_write("\r\n");
      00067D AEr00rC9         [ 2] 1336 	ldw	x, #(___str_22+0)
      000680 CDr00r40         [ 4] 1337 	call	_uart_write
                                   1338 ;	main.c: 400: }
      000683 5B 04            [ 2] 1339 	addw	sp, #4
      000685 81               [ 4] 1340 	ret
                                   1341 ;	main.c: 401: void cm_SN(void)
                                   1342 ;	-----------------------------------------
                                   1343 ;	 function cm_SN
                                   1344 ;	-----------------------------------------
      000686                       1345 _cm_SN:
                                   1346 ;	main.c: 403: i2c_scan();
      000686 CDr06r28         [ 4] 1347 	call	_i2c_scan
                                   1348 ;	main.c: 404: cm_SM();
                                   1349 ;	main.c: 405: }
      000689 CCr06r60         [ 2] 1350 	jp	_cm_SM
                                   1351 ;	main.c: 406: void cm_RM(void)
                                   1352 ;	-----------------------------------------
                                   1353 ;	 function cm_RM
                                   1354 ;	-----------------------------------------
      00068C                       1355 _cm_RM:
                                   1356 ;	main.c: 408: current_dev = 0;
      00068C 72 5Fu02u05      [ 1] 1357 	clr	_current_dev+0
                                   1358 ;	main.c: 409: uart_write("RM\n");
      000690 AEr00rCC         [ 2] 1359 	ldw	x, #(___str_23+0)
                                   1360 ;	main.c: 410: }
      000693 CCr00r40         [ 2] 1361 	jp	_uart_write
                                   1362 ;	main.c: 412: void cm_DB(void)
                                   1363 ;	-----------------------------------------
                                   1364 ;	 function cm_DB
                                   1365 ;	-----------------------------------------
      000696                       1366 _cm_DB:
                                   1367 ;	main.c: 414: status_check();
                                   1368 ;	main.c: 415: }
      000696 CCr03r35         [ 2] 1369 	jp	_status_check
                                   1370 ;	main.c: 417: void cm_ST(void)
                                   1371 ;	-----------------------------------------
                                   1372 ;	 function cm_ST
                                   1373 ;	-----------------------------------------
      000699                       1374 _cm_ST:
                                   1375 ;	main.c: 419: get_addr_from_buff();
      000699 CDr01rC1         [ 4] 1376 	call	_get_addr_from_buff
                                   1377 ;	main.c: 420: current_dev = d_addr;
      00069C 55u01u02u02u05   [ 1] 1378 	mov	_current_dev+0, _d_addr+0
                                   1379 ;	main.c: 421: uart_write("ST\n");
      0006A1 AEr00rD0         [ 2] 1380 	ldw	x, #(___str_24+0)
                                   1381 ;	main.c: 422: }
      0006A4 CCr00r40         [ 2] 1382 	jp	_uart_write
                                   1383 ;	main.c: 423: void cm_SR(void)
                                   1384 ;	-----------------------------------------
                                   1385 ;	 function cm_SR
                                   1386 ;	-----------------------------------------
      0006A7                       1387 _cm_SR:
                                   1388 ;	main.c: 425: i2c_start();
      0006A7 CDr05r94         [ 4] 1389 	call	_i2c_start
                                   1390 ;	main.c: 426: i2c_send_address(current_dev);
      0006AA C6u02u05         [ 1] 1391 	ld	a, _current_dev+0
      0006AD CDr05r9E         [ 4] 1392 	call	_i2c_send_address
                                   1393 ;	main.c: 427: i2c_read();
      0006B0 CDr05rDF         [ 4] 1394 	call	_i2c_read
                                   1395 ;	main.c: 428: i2c_stop();
                                   1396 ;	main.c: 429: }
      0006B3 CCr05rAE         [ 2] 1397 	jp	_i2c_stop
                                   1398 ;	main.c: 430: void cm_SW(void)
                                   1399 ;	-----------------------------------------
                                   1400 ;	 function cm_SW
                                   1401 ;	-----------------------------------------
      0006B6                       1402 _cm_SW:
      0006B6 52 04            [ 2] 1403 	sub	sp, #4
                                   1404 ;	main.c: 432: char ar[4]={0};
      0006B8 0F 01            [ 1] 1405 	clr	(0x01, sp)
      0006BA 0F 02            [ 1] 1406 	clr	(0x02, sp)
      0006BC 0F 03            [ 1] 1407 	clr	(0x03, sp)
      0006BE 0F 04            [ 1] 1408 	clr	(0x04, sp)
                                   1409 ;	main.c: 433: i2c_start();
      0006C0 CDr05r94         [ 4] 1410 	call	_i2c_start
                                   1411 ;	main.c: 434: i2c_send_address(current_dev);
      0006C3 C6u02u05         [ 1] 1412 	ld	a, _current_dev+0
      0006C6 CDr05r9E         [ 4] 1413 	call	_i2c_send_address
                                   1414 ;	main.c: 435: i2c_write();
      0006C9 CDr05rB3         [ 4] 1415 	call	_i2c_write
                                   1416 ;	main.c: 436: i2c_stop();
      0006CC CDr05rAE         [ 4] 1417 	call	_i2c_stop
                                   1418 ;	main.c: 437: uart_write("SW ");
      0006CF AEr00rD4         [ 2] 1419 	ldw	x, #(___str_25+0)
      0006D2 CDr00r40         [ 4] 1420 	call	_uart_write
                                   1421 ;	main.c: 438: convert_int_to_chars(d_addr, ar);
      0006D5 96               [ 1] 1422 	ldw	x, sp
      0006D6 5C               [ 1] 1423 	incw	x
      0006D7 C6u01u02         [ 1] 1424 	ld	a, _d_addr+0
      0006DA CDr00rA1         [ 4] 1425 	call	_convert_int_to_chars
                                   1426 ;	main.c: 439: uart_write(ar);
      0006DD 96               [ 1] 1427 	ldw	x, sp
      0006DE 5C               [ 1] 1428 	incw	x
      0006DF CDr00r40         [ 4] 1429 	call	_uart_write
                                   1430 ;	main.c: 440: uart_write(" ");
      0006E2 AEr00rD8         [ 2] 1431 	ldw	x, #(___str_26+0)
      0006E5 CDr00r40         [ 4] 1432 	call	_uart_write
                                   1433 ;	main.c: 441: convert_int_to_chars(d_size, ar);
      0006E8 96               [ 1] 1434 	ldw	x, sp
      0006E9 5C               [ 1] 1435 	incw	x
      0006EA C6u01u04         [ 1] 1436 	ld	a, _d_size+0
      0006ED CDr00rA1         [ 4] 1437 	call	_convert_int_to_chars
                                   1438 ;	main.c: 442: uart_write(ar);
      0006F0 96               [ 1] 1439 	ldw	x, sp
      0006F1 5C               [ 1] 1440 	incw	x
      0006F2 CDr00r40         [ 4] 1441 	call	_uart_write
                                   1442 ;	main.c: 443: uart_write("\r\n");
      0006F5 AEr00rC9         [ 2] 1443 	ldw	x, #(___str_22+0)
      0006F8 CDr00r40         [ 4] 1444 	call	_uart_write
                                   1445 ;	main.c: 444: }
      0006FB 5B 04            [ 2] 1446 	addw	sp, #4
      0006FD 81               [ 4] 1447 	ret
                                   1448 ;	main.c: 452: int data_handler(void)
                                   1449 ;	-----------------------------------------
                                   1450 ;	 function data_handler
                                   1451 ;	-----------------------------------------
      0006FE                       1452 _data_handler:
                                   1453 ;	main.c: 454: p_size = 0;
      0006FE 72 5Fu01u03      [ 1] 1454 	clr	_p_size+0
                                   1455 ;	main.c: 455: p_bytes = 0;
      000702 72 5Fu01u05      [ 1] 1456 	clr	_p_bytes+0
                                   1457 ;	main.c: 456: d_addr = 0;
      000706 72 5Fu01u02      [ 1] 1458 	clr	_d_addr+0
                                   1459 ;	main.c: 457: d_size = 0;
      00070A 72 5Fu01u04      [ 1] 1460 	clr	_d_size+0
                                   1461 ;	main.c: 458: memset(a, 0, sizeof(a));
      00070E 4B 03            [ 1] 1462 	push	#0x03
      000710 4B 00            [ 1] 1463 	push	#0x00
      000712 5F               [ 1] 1464 	clrw	x
      000713 89               [ 2] 1465 	pushw	x
      000714 AEr00rFF         [ 2] 1466 	ldw	x, #(_a+0)
      000717 CDr00r00         [ 4] 1467 	call	_memset
                                   1468 ;	main.c: 459: memset(data_buf, 0, sizeof(data_buf));
      00071A 4B FF            [ 1] 1469 	push	#0xff
      00071C 4B 00            [ 1] 1470 	push	#0x00
      00071E 5F               [ 1] 1471 	clrw	x
      00071F 89               [ 2] 1472 	pushw	x
      000720 AEr01r06         [ 2] 1473 	ldw	x, #(_data_buf+0)
      000723 CDr00r00         [ 4] 1474 	call	_memset
                                   1475 ;	main.c: 460: if(memcmp(&buffer[0],"SM",2) == 0)
      000726 4B 02            [ 1] 1476 	push	#0x02
      000728 4B 00            [ 1] 1477 	push	#0x00
      00072A 4BrDA            [ 1] 1478 	push	#<(___str_27+0)
      00072C 4Bs00            [ 1] 1479 	push	#((___str_27+0) >> 8)
      00072E AEr00r00         [ 2] 1480 	ldw	x, #(_buffer+0)
      000731 CDr00r00         [ 4] 1481 	call	_memcmp
                                   1482 ;	main.c: 461: return 1;
      000734 5D               [ 2] 1483 	tnzw	x
      000735 26 02            [ 1] 1484 	jrne	00102$
      000737 5C               [ 1] 1485 	incw	x
      000738 81               [ 4] 1486 	ret
      000739                       1487 00102$:
                                   1488 ;	main.c: 462: if(memcmp(&buffer[0],"SN",2) == 0)
      000739 4B 02            [ 1] 1489 	push	#0x02
      00073B 4B 00            [ 1] 1490 	push	#0x00
      00073D 4BrDD            [ 1] 1491 	push	#<(___str_28+0)
      00073F 4Bs00            [ 1] 1492 	push	#((___str_28+0) >> 8)
      000741 AEr00r00         [ 2] 1493 	ldw	x, #(_buffer+0)
      000744 CDr00r00         [ 4] 1494 	call	_memcmp
      000747 5D               [ 2] 1495 	tnzw	x
      000748 26 04            [ 1] 1496 	jrne	00104$
                                   1497 ;	main.c: 463: return 2;
      00074A AE 00 02         [ 2] 1498 	ldw	x, #0x0002
      00074D 81               [ 4] 1499 	ret
      00074E                       1500 00104$:
                                   1501 ;	main.c: 464: if(memcmp(&buffer[0],"ST",2) == 0)
      00074E 4B 02            [ 1] 1502 	push	#0x02
      000750 4B 00            [ 1] 1503 	push	#0x00
      000752 4BrE0            [ 1] 1504 	push	#<(___str_29+0)
      000754 4Bs00            [ 1] 1505 	push	#((___str_29+0) >> 8)
      000756 AEr00r00         [ 2] 1506 	ldw	x, #(_buffer+0)
      000759 CDr00r00         [ 4] 1507 	call	_memcmp
      00075C 5D               [ 2] 1508 	tnzw	x
      00075D 26 04            [ 1] 1509 	jrne	00106$
                                   1510 ;	main.c: 465: return 5;
      00075F AE 00 05         [ 2] 1511 	ldw	x, #0x0005
      000762 81               [ 4] 1512 	ret
      000763                       1513 00106$:
                                   1514 ;	main.c: 466: if(memcmp(&buffer[0],"RM",2) == 0)
      000763 4B 02            [ 1] 1515 	push	#0x02
      000765 4B 00            [ 1] 1516 	push	#0x00
      000767 4BrE3            [ 1] 1517 	push	#<(___str_30+0)
      000769 4Bs00            [ 1] 1518 	push	#((___str_30+0) >> 8)
      00076B AEr00r00         [ 2] 1519 	ldw	x, #(_buffer+0)
      00076E CDr00r00         [ 4] 1520 	call	_memcmp
      000771 5D               [ 2] 1521 	tnzw	x
      000772 26 04            [ 1] 1522 	jrne	00108$
                                   1523 ;	main.c: 467: return 6;
      000774 AE 00 06         [ 2] 1524 	ldw	x, #0x0006
      000777 81               [ 4] 1525 	ret
      000778                       1526 00108$:
                                   1527 ;	main.c: 468: if(memcmp(&buffer[0],"DB",2) == 0)
      000778 4B 02            [ 1] 1528 	push	#0x02
      00077A 4B 00            [ 1] 1529 	push	#0x00
      00077C 4BrE6            [ 1] 1530 	push	#<(___str_31+0)
      00077E 4Bs00            [ 1] 1531 	push	#((___str_31+0) >> 8)
      000780 AEr00r00         [ 2] 1532 	ldw	x, #(_buffer+0)
      000783 CDr00r00         [ 4] 1533 	call	_memcmp
      000786 5D               [ 2] 1534 	tnzw	x
      000787 26 04            [ 1] 1535 	jrne	00110$
                                   1536 ;	main.c: 469: return 7;
      000789 AE 00 07         [ 2] 1537 	ldw	x, #0x0007
      00078C 81               [ 4] 1538 	ret
      00078D                       1539 00110$:
                                   1540 ;	main.c: 471: get_addr_from_buff();
      00078D CDr01rC1         [ 4] 1541 	call	_get_addr_from_buff
                                   1542 ;	main.c: 472: get_size_from_buff();
      000790 CDr02r06         [ 4] 1543 	call	_get_size_from_buff
                                   1544 ;	main.c: 474: if(memcmp(&buffer[0],"SR",2) == 0)
      000793 4B 02            [ 1] 1545 	push	#0x02
      000795 4B 00            [ 1] 1546 	push	#0x00
      000797 4BrE9            [ 1] 1547 	push	#<(___str_32+0)
      000799 4Bs00            [ 1] 1548 	push	#((___str_32+0) >> 8)
      00079B AEr00r00         [ 2] 1549 	ldw	x, #(_buffer+0)
      00079E CDr00r00         [ 4] 1550 	call	_memcmp
      0007A1 5D               [ 2] 1551 	tnzw	x
      0007A2 26 04            [ 1] 1552 	jrne	00112$
                                   1553 ;	main.c: 475: return 3;
      0007A4 AE 00 03         [ 2] 1554 	ldw	x, #0x0003
      0007A7 81               [ 4] 1555 	ret
      0007A8                       1556 00112$:
                                   1557 ;	main.c: 477: char_buffer_to_int();
      0007A8 CDr02r60         [ 4] 1558 	call	_char_buffer_to_int
                                   1559 ;	main.c: 479: if(memcmp(&buffer[0],"SW",2) == 0)
      0007AB 4B 02            [ 1] 1560 	push	#0x02
      0007AD 4B 00            [ 1] 1561 	push	#0x00
      0007AF 4BrEC            [ 1] 1562 	push	#<(___str_33+0)
      0007B1 4Bs00            [ 1] 1563 	push	#((___str_33+0) >> 8)
      0007B3 AEr00r00         [ 2] 1564 	ldw	x, #(_buffer+0)
      0007B6 CDr00r00         [ 4] 1565 	call	_memcmp
      0007B9 5D               [ 2] 1566 	tnzw	x
      0007BA 26 04            [ 1] 1567 	jrne	00114$
                                   1568 ;	main.c: 480: return 4;
      0007BC AE 00 04         [ 2] 1569 	ldw	x, #0x0004
      0007BF 81               [ 4] 1570 	ret
      0007C0                       1571 00114$:
                                   1572 ;	main.c: 481: return 0;
      0007C0 5F               [ 1] 1573 	clrw	x
                                   1574 ;	main.c: 483: }
      0007C1 81               [ 4] 1575 	ret
                                   1576 ;	main.c: 485: void command_switcher(void)
                                   1577 ;	-----------------------------------------
                                   1578 ;	 function command_switcher
                                   1579 ;	-----------------------------------------
      0007C2                       1580 _command_switcher:
      0007C2 52 04            [ 2] 1581 	sub	sp, #4
                                   1582 ;	main.c: 487: char ar[4]={0};
      0007C4 0F 01            [ 1] 1583 	clr	(0x01, sp)
      0007C6 0F 02            [ 1] 1584 	clr	(0x02, sp)
      0007C8 0F 03            [ 1] 1585 	clr	(0x03, sp)
      0007CA 0F 04            [ 1] 1586 	clr	(0x04, sp)
                                   1587 ;	main.c: 489: switch(data_handler())
      0007CC CDr06rFE         [ 4] 1588 	call	_data_handler
      0007CF 5D               [ 2] 1589 	tnzw	x
      0007D0 2B 3B            [ 1] 1590 	jrmi	00109$
      0007D2 A3 00 07         [ 2] 1591 	cpw	x, #0x0007
      0007D5 2C 36            [ 1] 1592 	jrsgt	00109$
      0007D7 58               [ 2] 1593 	sllw	x
      0007D8 DEu07uDC         [ 2] 1594 	ldw	x, (#00123$, x)
      0007DB FC               [ 2] 1595 	jp	(x)
      0007DC                       1596 00123$:
      0007DCr08r0D                 1597 	.dw	#00109$
      0007DEr07rEC                 1598 	.dw	#00101$
      0007E0r07rF1                 1599 	.dw	#00102$
      0007E2r07rF6                 1600 	.dw	#00103$
      0007E4r07rFB                 1601 	.dw	#00104$
      0007E6r08r00                 1602 	.dw	#00105$
      0007E8r08r05                 1603 	.dw	#00106$
      0007EAr08r0A                 1604 	.dw	#00107$
                                   1605 ;	main.c: 491: case 1:
      0007EC                       1606 00101$:
                                   1607 ;	main.c: 492: cm_SM();
      0007EC CDr06r60         [ 4] 1608 	call	_cm_SM
                                   1609 ;	main.c: 493: break;
      0007EF 20 1C            [ 2] 1610 	jra	00109$
                                   1611 ;	main.c: 494: case 2:
      0007F1                       1612 00102$:
                                   1613 ;	main.c: 495: cm_SN();
      0007F1 CDr06r86         [ 4] 1614 	call	_cm_SN
                                   1615 ;	main.c: 496: break;
      0007F4 20 17            [ 2] 1616 	jra	00109$
                                   1617 ;	main.c: 497: case 3:
      0007F6                       1618 00103$:
                                   1619 ;	main.c: 498: cm_SR();
      0007F6 CDr06rA7         [ 4] 1620 	call	_cm_SR
                                   1621 ;	main.c: 499: break;
      0007F9 20 12            [ 2] 1622 	jra	00109$
                                   1623 ;	main.c: 500: case 4:
      0007FB                       1624 00104$:
                                   1625 ;	main.c: 501: cm_SW();
      0007FB CDr06rB6         [ 4] 1626 	call	_cm_SW
                                   1627 ;	main.c: 502: break;
      0007FE 20 0D            [ 2] 1628 	jra	00109$
                                   1629 ;	main.c: 503: case 5:
      000800                       1630 00105$:
                                   1631 ;	main.c: 504: cm_ST();
      000800 CDr06r99         [ 4] 1632 	call	_cm_ST
                                   1633 ;	main.c: 505: break;
      000803 20 08            [ 2] 1634 	jra	00109$
                                   1635 ;	main.c: 506: case 6:
      000805                       1636 00106$:
                                   1637 ;	main.c: 507: cm_RM();
      000805 CDr06r8C         [ 4] 1638 	call	_cm_RM
                                   1639 ;	main.c: 508: break;
      000808 20 03            [ 2] 1640 	jra	00109$
                                   1641 ;	main.c: 509: case 7:
      00080A                       1642 00107$:
                                   1643 ;	main.c: 510: cm_DB();
      00080A CDr06r96         [ 4] 1644 	call	_cm_DB
                                   1645 ;	main.c: 512: }
      00080D                       1646 00109$:
                                   1647 ;	main.c: 513: }
      00080D 5B 04            [ 2] 1648 	addw	sp, #4
      00080F 81               [ 4] 1649 	ret
                                   1650 ;	main.c: 516: void main(void)
                                   1651 ;	-----------------------------------------
                                   1652 ;	 function main
                                   1653 ;	-----------------------------------------
      000810                       1654 _main:
                                   1655 ;	main.c: 518: uart_init();
      000810 CDr05r56         [ 4] 1656 	call	_uart_init
                                   1657 ;	main.c: 519: i2c_init();
      000813 CDr05r73         [ 4] 1658 	call	_i2c_init
                                   1659 ;	main.c: 520: uart_write("SS\n");
      000816 AEr00rEF         [ 2] 1660 	ldw	x, #(___str_34+0)
      000819 CDr00r40         [ 4] 1661 	call	_uart_write
                                   1662 ;	main.c: 521: while(1)
      00081C                       1663 00102$:
                                   1664 ;	main.c: 523: uart_read();
      00081C CDr00r6B         [ 4] 1665 	call	_uart_read
                                   1666 ;	main.c: 524: command_switcher();
      00081F CDr07rC2         [ 4] 1667 	call	_command_switcher
      000822 20 F8            [ 2] 1668 	jra	00102$
                                   1669 ;	main.c: 526: }
      000824 81               [ 4] 1670 	ret
                                   1671 	.area CODE
                                   1672 	.area CONST
                                   1673 	.area CONST
      000000                       1674 ___str_0:
      000000 0A                    1675 	.db 0x0a
      000001 63 68 61 72 20 2D 3E  1676 	.ascii "char -> "
             20
      000009 00                    1677 	.db 0x00
                                   1678 	.area CODE
                                   1679 	.area CONST
      00000A                       1680 ___str_1:
      00000A 20 3C 2D              1681 	.ascii " <-"
      00000D 0A                    1682 	.db 0x0a
      00000E 00                    1683 	.db 0x00
                                   1684 	.area CODE
                                   1685 	.area CONST
      00000F                       1686 ___str_2:
      00000F 0A                    1687 	.db 0x0a
      000010 72 65 73 75 6C 74 20  1688 	.ascii "result -> "
             2D 3E 20
      00001A 00                    1689 	.db 0x00
                                   1690 	.area CODE
                                   1691 	.area CONST
      00001B                       1692 ___str_3:
      00001B 0A                    1693 	.db 0x0a
      00001C 69 20 77 68 69 6C 65  1694 	.ascii "i while-> -> "
             2D 3E 20 2D 3E 20
      000029 00                    1695 	.db 0x00
                                   1696 	.area CODE
                                   1697 	.area CONST
      00002A                       1698 ___str_4:
      00002A 0A                    1699 	.db 0x0a
      00002B 69 20 2D 3E 20 2D 3E  1700 	.ascii "i -> -> "
             20
      000033 00                    1701 	.db 0x00
                                   1702 	.area CODE
                                   1703 	.area CONST
      000034                       1704 ___str_5:
      000034 0A                    1705 	.db 0x0a
      000035 49 32 43 5F 52 45 47  1706 	.ascii "I2C_REGS >.<"
             53 20 3E 2E 3C
      000041 0A                    1707 	.db 0x0a
      000042 00                    1708 	.db 0x00
                                   1709 	.area CODE
                                   1710 	.area CONST
      000043                       1711 ___str_6:
      000043 0A                    1712 	.db 0x0a
      000044 53 52 31 20 2D 3E 20  1713 	.ascii "SR1 -> "
      00004B 00                    1714 	.db 0x00
                                   1715 	.area CODE
                                   1716 	.area CONST
      00004C                       1717 ___str_7:
      00004C 53 52 32 20 2D 3E 20  1718 	.ascii "SR2 -> "
      000053 00                    1719 	.db 0x00
                                   1720 	.area CODE
                                   1721 	.area CONST
      000054                       1722 ___str_8:
      000054 53 52 33 20 2D 3E 20  1723 	.ascii "SR3 -> "
      00005B 00                    1724 	.db 0x00
                                   1725 	.area CODE
                                   1726 	.area CONST
      00005C                       1727 ___str_9:
      00005C 43 52 31 20 2D 3E 20  1728 	.ascii "CR1 -> "
      000063 00                    1729 	.db 0x00
                                   1730 	.area CODE
                                   1731 	.area CONST
      000064                       1732 ___str_10:
      000064 43 52 32 20 2D 3E 20  1733 	.ascii "CR2 -> "
      00006B 00                    1734 	.db 0x00
                                   1735 	.area CODE
                                   1736 	.area CONST
      00006C                       1737 ___str_11:
      00006C 44 52 20 2D 3E 20     1738 	.ascii "DR -> "
      000072 00                    1739 	.db 0x00
                                   1740 	.area CODE
                                   1741 	.area CONST
      000073                       1742 ___str_12:
      000073 55 41 52 54 5F 52 45  1743 	.ascii "UART_REGS >.<"
             47 53 20 3E 2E 3C
      000080 0A                    1744 	.db 0x0a
      000081 00                    1745 	.db 0x00
                                   1746 	.area CODE
                                   1747 	.area CONST
      000082                       1748 ___str_13:
      000082 0A                    1749 	.db 0x0a
      000083 53 52 20 2D 3E 20     1750 	.ascii "SR -> "
      000089 00                    1751 	.db 0x00
                                   1752 	.area CODE
                                   1753 	.area CONST
      00008A                       1754 ___str_14:
      00008A 42 52 52 31 20 2D 3E  1755 	.ascii "BRR1 -> "
             20
      000092 00                    1756 	.db 0x00
                                   1757 	.area CODE
                                   1758 	.area CONST
      000093                       1759 ___str_15:
      000093 42 52 52 32 20 2D 3E  1760 	.ascii "BRR2 -> "
             20
      00009B 00                    1761 	.db 0x00
                                   1762 	.area CODE
                                   1763 	.area CONST
      00009C                       1764 ___str_16:
      00009C 43 52 33 20 2D 3E 20  1765 	.ascii "CR3 -> "
      0000A3 00                    1766 	.db 0x00
                                   1767 	.area CODE
                                   1768 	.area CONST
      0000A4                       1769 ___str_17:
      0000A4 43 52 34 20 2D 3E 20  1770 	.ascii "CR4 -> "
      0000AB 00                    1771 	.db 0x00
                                   1772 	.area CODE
                                   1773 	.area CONST
      0000AC                       1774 ___str_18:
      0000AC 43 52 35 20 2D 3E 20  1775 	.ascii "CR5 -> "
      0000B3 00                    1776 	.db 0x00
                                   1777 	.area CODE
                                   1778 	.area CONST
      0000B4                       1779 ___str_19:
      0000B4 47 54 52 20 2D 3E 20  1780 	.ascii "GTR -> "
      0000BB 00                    1781 	.db 0x00
                                   1782 	.area CODE
                                   1783 	.area CONST
      0000BC                       1784 ___str_20:
      0000BC 50 53 43 52 20 2D 3E  1785 	.ascii "PSCR -> "
             20
      0000C4 00                    1786 	.db 0x00
                                   1787 	.area CODE
                                   1788 	.area CONST
      0000C5                       1789 ___str_21:
      0000C5 53 4D 20              1790 	.ascii "SM "
      0000C8 00                    1791 	.db 0x00
                                   1792 	.area CODE
                                   1793 	.area CONST
      0000C9                       1794 ___str_22:
      0000C9 0D                    1795 	.db 0x0d
      0000CA 0A                    1796 	.db 0x0a
      0000CB 00                    1797 	.db 0x00
                                   1798 	.area CODE
                                   1799 	.area CONST
      0000CC                       1800 ___str_23:
      0000CC 52 4D                 1801 	.ascii "RM"
      0000CE 0A                    1802 	.db 0x0a
      0000CF 00                    1803 	.db 0x00
                                   1804 	.area CODE
                                   1805 	.area CONST
      0000D0                       1806 ___str_24:
      0000D0 53 54                 1807 	.ascii "ST"
      0000D2 0A                    1808 	.db 0x0a
      0000D3 00                    1809 	.db 0x00
                                   1810 	.area CODE
                                   1811 	.area CONST
      0000D4                       1812 ___str_25:
      0000D4 53 57 20              1813 	.ascii "SW "
      0000D7 00                    1814 	.db 0x00
                                   1815 	.area CODE
                                   1816 	.area CONST
      0000D8                       1817 ___str_26:
      0000D8 20                    1818 	.ascii " "
      0000D9 00                    1819 	.db 0x00
                                   1820 	.area CODE
                                   1821 	.area CONST
      0000DA                       1822 ___str_27:
      0000DA 53 4D                 1823 	.ascii "SM"
      0000DC 00                    1824 	.db 0x00
                                   1825 	.area CODE
                                   1826 	.area CONST
      0000DD                       1827 ___str_28:
      0000DD 53 4E                 1828 	.ascii "SN"
      0000DF 00                    1829 	.db 0x00
                                   1830 	.area CODE
                                   1831 	.area CONST
      0000E0                       1832 ___str_29:
      0000E0 53 54                 1833 	.ascii "ST"
      0000E2 00                    1834 	.db 0x00
                                   1835 	.area CODE
                                   1836 	.area CONST
      0000E3                       1837 ___str_30:
      0000E3 52 4D                 1838 	.ascii "RM"
      0000E5 00                    1839 	.db 0x00
                                   1840 	.area CODE
                                   1841 	.area CONST
      0000E6                       1842 ___str_31:
      0000E6 44 42                 1843 	.ascii "DB"
      0000E8 00                    1844 	.db 0x00
                                   1845 	.area CODE
                                   1846 	.area CONST
      0000E9                       1847 ___str_32:
      0000E9 53 52                 1848 	.ascii "SR"
      0000EB 00                    1849 	.db 0x00
                                   1850 	.area CODE
                                   1851 	.area CONST
      0000EC                       1852 ___str_33:
      0000EC 53 57                 1853 	.ascii "SW"
      0000EE 00                    1854 	.db 0x00
                                   1855 	.area CODE
                                   1856 	.area CONST
      0000EF                       1857 ___str_34:
      0000EF 53 53                 1858 	.ascii "SS"
      0000F1 0A                    1859 	.db 0x0a
      0000F2 00                    1860 	.db 0x00
                                   1861 	.area CODE
                                   1862 	.area INITIALIZER
      000000                       1863 __xinit__buffer:
      000000 00                    1864 	.db #0x00	; 0
      000001 00                    1865 	.db 0x00
      000002 00                    1866 	.db 0x00
      000003 00                    1867 	.db 0x00
      000004 00                    1868 	.db 0x00
      000005 00                    1869 	.db 0x00
      000006 00                    1870 	.db 0x00
      000007 00                    1871 	.db 0x00
      000008 00                    1872 	.db 0x00
      000009 00                    1873 	.db 0x00
      00000A 00                    1874 	.db 0x00
      00000B 00                    1875 	.db 0x00
      00000C 00                    1876 	.db 0x00
      00000D 00                    1877 	.db 0x00
      00000E 00                    1878 	.db 0x00
      00000F 00                    1879 	.db 0x00
      000010 00                    1880 	.db 0x00
      000011 00                    1881 	.db 0x00
      000012 00                    1882 	.db 0x00
      000013 00                    1883 	.db 0x00
      000014 00                    1884 	.db 0x00
      000015 00                    1885 	.db 0x00
      000016 00                    1886 	.db 0x00
      000017 00                    1887 	.db 0x00
      000018 00                    1888 	.db 0x00
      000019 00                    1889 	.db 0x00
      00001A 00                    1890 	.db 0x00
      00001B 00                    1891 	.db 0x00
      00001C 00                    1892 	.db 0x00
      00001D 00                    1893 	.db 0x00
      00001E 00                    1894 	.db 0x00
      00001F 00                    1895 	.db 0x00
      000020 00                    1896 	.db 0x00
      000021 00                    1897 	.db 0x00
      000022 00                    1898 	.db 0x00
      000023 00                    1899 	.db 0x00
      000024 00                    1900 	.db 0x00
      000025 00                    1901 	.db 0x00
      000026 00                    1902 	.db 0x00
      000027 00                    1903 	.db 0x00
      000028 00                    1904 	.db 0x00
      000029 00                    1905 	.db 0x00
      00002A 00                    1906 	.db 0x00
      00002B 00                    1907 	.db 0x00
      00002C 00                    1908 	.db 0x00
      00002D 00                    1909 	.db 0x00
      00002E 00                    1910 	.db 0x00
      00002F 00                    1911 	.db 0x00
      000030 00                    1912 	.db 0x00
      000031 00                    1913 	.db 0x00
      000032 00                    1914 	.db 0x00
      000033 00                    1915 	.db 0x00
      000034 00                    1916 	.db 0x00
      000035 00                    1917 	.db 0x00
      000036 00                    1918 	.db 0x00
      000037 00                    1919 	.db 0x00
      000038 00                    1920 	.db 0x00
      000039 00                    1921 	.db 0x00
      00003A 00                    1922 	.db 0x00
      00003B 00                    1923 	.db 0x00
      00003C 00                    1924 	.db 0x00
      00003D 00                    1925 	.db 0x00
      00003E 00                    1926 	.db 0x00
      00003F 00                    1927 	.db 0x00
      000040 00                    1928 	.db 0x00
      000041 00                    1929 	.db 0x00
      000042 00                    1930 	.db 0x00
      000043 00                    1931 	.db 0x00
      000044 00                    1932 	.db 0x00
      000045 00                    1933 	.db 0x00
      000046 00                    1934 	.db 0x00
      000047 00                    1935 	.db 0x00
      000048 00                    1936 	.db 0x00
      000049 00                    1937 	.db 0x00
      00004A 00                    1938 	.db 0x00
      00004B 00                    1939 	.db 0x00
      00004C 00                    1940 	.db 0x00
      00004D 00                    1941 	.db 0x00
      00004E 00                    1942 	.db 0x00
      00004F 00                    1943 	.db 0x00
      000050 00                    1944 	.db 0x00
      000051 00                    1945 	.db 0x00
      000052 00                    1946 	.db 0x00
      000053 00                    1947 	.db 0x00
      000054 00                    1948 	.db 0x00
      000055 00                    1949 	.db 0x00
      000056 00                    1950 	.db 0x00
      000057 00                    1951 	.db 0x00
      000058 00                    1952 	.db 0x00
      000059 00                    1953 	.db 0x00
      00005A 00                    1954 	.db 0x00
      00005B 00                    1955 	.db 0x00
      00005C 00                    1956 	.db 0x00
      00005D 00                    1957 	.db 0x00
      00005E 00                    1958 	.db 0x00
      00005F 00                    1959 	.db 0x00
      000060 00                    1960 	.db 0x00
      000061 00                    1961 	.db 0x00
      000062 00                    1962 	.db 0x00
      000063 00                    1963 	.db 0x00
      000064 00                    1964 	.db 0x00
      000065 00                    1965 	.db 0x00
      000066 00                    1966 	.db 0x00
      000067 00                    1967 	.db 0x00
      000068 00                    1968 	.db 0x00
      000069 00                    1969 	.db 0x00
      00006A 00                    1970 	.db 0x00
      00006B 00                    1971 	.db 0x00
      00006C 00                    1972 	.db 0x00
      00006D 00                    1973 	.db 0x00
      00006E 00                    1974 	.db 0x00
      00006F 00                    1975 	.db 0x00
      000070 00                    1976 	.db 0x00
      000071 00                    1977 	.db 0x00
      000072 00                    1978 	.db 0x00
      000073 00                    1979 	.db 0x00
      000074 00                    1980 	.db 0x00
      000075 00                    1981 	.db 0x00
      000076 00                    1982 	.db 0x00
      000077 00                    1983 	.db 0x00
      000078 00                    1984 	.db 0x00
      000079 00                    1985 	.db 0x00
      00007A 00                    1986 	.db 0x00
      00007B 00                    1987 	.db 0x00
      00007C 00                    1988 	.db 0x00
      00007D 00                    1989 	.db 0x00
      00007E 00                    1990 	.db 0x00
      00007F 00                    1991 	.db 0x00
      000080 00                    1992 	.db 0x00
      000081 00                    1993 	.db 0x00
      000082 00                    1994 	.db 0x00
      000083 00                    1995 	.db 0x00
      000084 00                    1996 	.db 0x00
      000085 00                    1997 	.db 0x00
      000086 00                    1998 	.db 0x00
      000087 00                    1999 	.db 0x00
      000088 00                    2000 	.db 0x00
      000089 00                    2001 	.db 0x00
      00008A 00                    2002 	.db 0x00
      00008B 00                    2003 	.db 0x00
      00008C 00                    2004 	.db 0x00
      00008D 00                    2005 	.db 0x00
      00008E 00                    2006 	.db 0x00
      00008F 00                    2007 	.db 0x00
      000090 00                    2008 	.db 0x00
      000091 00                    2009 	.db 0x00
      000092 00                    2010 	.db 0x00
      000093 00                    2011 	.db 0x00
      000094 00                    2012 	.db 0x00
      000095 00                    2013 	.db 0x00
      000096 00                    2014 	.db 0x00
      000097 00                    2015 	.db 0x00
      000098 00                    2016 	.db 0x00
      000099 00                    2017 	.db 0x00
      00009A 00                    2018 	.db 0x00
      00009B 00                    2019 	.db 0x00
      00009C 00                    2020 	.db 0x00
      00009D 00                    2021 	.db 0x00
      00009E 00                    2022 	.db 0x00
      00009F 00                    2023 	.db 0x00
      0000A0 00                    2024 	.db 0x00
      0000A1 00                    2025 	.db 0x00
      0000A2 00                    2026 	.db 0x00
      0000A3 00                    2027 	.db 0x00
      0000A4 00                    2028 	.db 0x00
      0000A5 00                    2029 	.db 0x00
      0000A6 00                    2030 	.db 0x00
      0000A7 00                    2031 	.db 0x00
      0000A8 00                    2032 	.db 0x00
      0000A9 00                    2033 	.db 0x00
      0000AA 00                    2034 	.db 0x00
      0000AB 00                    2035 	.db 0x00
      0000AC 00                    2036 	.db 0x00
      0000AD 00                    2037 	.db 0x00
      0000AE 00                    2038 	.db 0x00
      0000AF 00                    2039 	.db 0x00
      0000B0 00                    2040 	.db 0x00
      0000B1 00                    2041 	.db 0x00
      0000B2 00                    2042 	.db 0x00
      0000B3 00                    2043 	.db 0x00
      0000B4 00                    2044 	.db 0x00
      0000B5 00                    2045 	.db 0x00
      0000B6 00                    2046 	.db 0x00
      0000B7 00                    2047 	.db 0x00
      0000B8 00                    2048 	.db 0x00
      0000B9 00                    2049 	.db 0x00
      0000BA 00                    2050 	.db 0x00
      0000BB 00                    2051 	.db 0x00
      0000BC 00                    2052 	.db 0x00
      0000BD 00                    2053 	.db 0x00
      0000BE 00                    2054 	.db 0x00
      0000BF 00                    2055 	.db 0x00
      0000C0 00                    2056 	.db 0x00
      0000C1 00                    2057 	.db 0x00
      0000C2 00                    2058 	.db 0x00
      0000C3 00                    2059 	.db 0x00
      0000C4 00                    2060 	.db 0x00
      0000C5 00                    2061 	.db 0x00
      0000C6 00                    2062 	.db 0x00
      0000C7 00                    2063 	.db 0x00
      0000C8 00                    2064 	.db 0x00
      0000C9 00                    2065 	.db 0x00
      0000CA 00                    2066 	.db 0x00
      0000CB 00                    2067 	.db 0x00
      0000CC 00                    2068 	.db 0x00
      0000CD 00                    2069 	.db 0x00
      0000CE 00                    2070 	.db 0x00
      0000CF 00                    2071 	.db 0x00
      0000D0 00                    2072 	.db 0x00
      0000D1 00                    2073 	.db 0x00
      0000D2 00                    2074 	.db 0x00
      0000D3 00                    2075 	.db 0x00
      0000D4 00                    2076 	.db 0x00
      0000D5 00                    2077 	.db 0x00
      0000D6 00                    2078 	.db 0x00
      0000D7 00                    2079 	.db 0x00
      0000D8 00                    2080 	.db 0x00
      0000D9 00                    2081 	.db 0x00
      0000DA 00                    2082 	.db 0x00
      0000DB 00                    2083 	.db 0x00
      0000DC 00                    2084 	.db 0x00
      0000DD 00                    2085 	.db 0x00
      0000DE 00                    2086 	.db 0x00
      0000DF 00                    2087 	.db 0x00
      0000E0 00                    2088 	.db 0x00
      0000E1 00                    2089 	.db 0x00
      0000E2 00                    2090 	.db 0x00
      0000E3 00                    2091 	.db 0x00
      0000E4 00                    2092 	.db 0x00
      0000E5 00                    2093 	.db 0x00
      0000E6 00                    2094 	.db 0x00
      0000E7 00                    2095 	.db 0x00
      0000E8 00                    2096 	.db 0x00
      0000E9 00                    2097 	.db 0x00
      0000EA 00                    2098 	.db 0x00
      0000EB 00                    2099 	.db 0x00
      0000EC 00                    2100 	.db 0x00
      0000ED 00                    2101 	.db 0x00
      0000EE 00                    2102 	.db 0x00
      0000EF 00                    2103 	.db 0x00
      0000F0 00                    2104 	.db 0x00
      0000F1 00                    2105 	.db 0x00
      0000F2 00                    2106 	.db 0x00
      0000F3 00                    2107 	.db 0x00
      0000F4 00                    2108 	.db 0x00
      0000F5 00                    2109 	.db 0x00
      0000F6 00                    2110 	.db 0x00
      0000F7 00                    2111 	.db 0x00
      0000F8 00                    2112 	.db 0x00
      0000F9 00                    2113 	.db 0x00
      0000FA 00                    2114 	.db 0x00
      0000FB 00                    2115 	.db 0x00
      0000FC 00                    2116 	.db 0x00
      0000FD 00                    2117 	.db 0x00
      0000FE 00                    2118 	.db 0x00
      0000FF                       2119 __xinit__a:
      0000FF 00                    2120 	.db #0x00	; 0
      000100 00                    2121 	.db 0x00
      000101 00                    2122 	.db 0x00
      000102                       2123 __xinit__d_addr:
      000102 00                    2124 	.db #0x00	; 0
      000103                       2125 __xinit__p_size:
      000103 00                    2126 	.db #0x00	; 0
      000104                       2127 __xinit__d_size:
      000104 00                    2128 	.db #0x00	; 0
      000105                       2129 __xinit__p_bytes:
      000105 00                    2130 	.db #0x00	; 0
      000106                       2131 __xinit__data_buf:
      000106 00                    2132 	.db #0x00	; 0
      000107 00                    2133 	.db 0x00
      000108 00                    2134 	.db 0x00
      000109 00                    2135 	.db 0x00
      00010A 00                    2136 	.db 0x00
      00010B 00                    2137 	.db 0x00
      00010C 00                    2138 	.db 0x00
      00010D 00                    2139 	.db 0x00
      00010E 00                    2140 	.db 0x00
      00010F 00                    2141 	.db 0x00
      000110 00                    2142 	.db 0x00
      000111 00                    2143 	.db 0x00
      000112 00                    2144 	.db 0x00
      000113 00                    2145 	.db 0x00
      000114 00                    2146 	.db 0x00
      000115 00                    2147 	.db 0x00
      000116 00                    2148 	.db 0x00
      000117 00                    2149 	.db 0x00
      000118 00                    2150 	.db 0x00
      000119 00                    2151 	.db 0x00
      00011A 00                    2152 	.db 0x00
      00011B 00                    2153 	.db 0x00
      00011C 00                    2154 	.db 0x00
      00011D 00                    2155 	.db 0x00
      00011E 00                    2156 	.db 0x00
      00011F 00                    2157 	.db 0x00
      000120 00                    2158 	.db 0x00
      000121 00                    2159 	.db 0x00
      000122 00                    2160 	.db 0x00
      000123 00                    2161 	.db 0x00
      000124 00                    2162 	.db 0x00
      000125 00                    2163 	.db 0x00
      000126 00                    2164 	.db 0x00
      000127 00                    2165 	.db 0x00
      000128 00                    2166 	.db 0x00
      000129 00                    2167 	.db 0x00
      00012A 00                    2168 	.db 0x00
      00012B 00                    2169 	.db 0x00
      00012C 00                    2170 	.db 0x00
      00012D 00                    2171 	.db 0x00
      00012E 00                    2172 	.db 0x00
      00012F 00                    2173 	.db 0x00
      000130 00                    2174 	.db 0x00
      000131 00                    2175 	.db 0x00
      000132 00                    2176 	.db 0x00
      000133 00                    2177 	.db 0x00
      000134 00                    2178 	.db 0x00
      000135 00                    2179 	.db 0x00
      000136 00                    2180 	.db 0x00
      000137 00                    2181 	.db 0x00
      000138 00                    2182 	.db 0x00
      000139 00                    2183 	.db 0x00
      00013A 00                    2184 	.db 0x00
      00013B 00                    2185 	.db 0x00
      00013C 00                    2186 	.db 0x00
      00013D 00                    2187 	.db 0x00
      00013E 00                    2188 	.db 0x00
      00013F 00                    2189 	.db 0x00
      000140 00                    2190 	.db 0x00
      000141 00                    2191 	.db 0x00
      000142 00                    2192 	.db 0x00
      000143 00                    2193 	.db 0x00
      000144 00                    2194 	.db 0x00
      000145 00                    2195 	.db 0x00
      000146 00                    2196 	.db 0x00
      000147 00                    2197 	.db 0x00
      000148 00                    2198 	.db 0x00
      000149 00                    2199 	.db 0x00
      00014A 00                    2200 	.db 0x00
      00014B 00                    2201 	.db 0x00
      00014C 00                    2202 	.db 0x00
      00014D 00                    2203 	.db 0x00
      00014E 00                    2204 	.db 0x00
      00014F 00                    2205 	.db 0x00
      000150 00                    2206 	.db 0x00
      000151 00                    2207 	.db 0x00
      000152 00                    2208 	.db 0x00
      000153 00                    2209 	.db 0x00
      000154 00                    2210 	.db 0x00
      000155 00                    2211 	.db 0x00
      000156 00                    2212 	.db 0x00
      000157 00                    2213 	.db 0x00
      000158 00                    2214 	.db 0x00
      000159 00                    2215 	.db 0x00
      00015A 00                    2216 	.db 0x00
      00015B 00                    2217 	.db 0x00
      00015C 00                    2218 	.db 0x00
      00015D 00                    2219 	.db 0x00
      00015E 00                    2220 	.db 0x00
      00015F 00                    2221 	.db 0x00
      000160 00                    2222 	.db 0x00
      000161 00                    2223 	.db 0x00
      000162 00                    2224 	.db 0x00
      000163 00                    2225 	.db 0x00
      000164 00                    2226 	.db 0x00
      000165 00                    2227 	.db 0x00
      000166 00                    2228 	.db 0x00
      000167 00                    2229 	.db 0x00
      000168 00                    2230 	.db 0x00
      000169 00                    2231 	.db 0x00
      00016A 00                    2232 	.db 0x00
      00016B 00                    2233 	.db 0x00
      00016C 00                    2234 	.db 0x00
      00016D 00                    2235 	.db 0x00
      00016E 00                    2236 	.db 0x00
      00016F 00                    2237 	.db 0x00
      000170 00                    2238 	.db 0x00
      000171 00                    2239 	.db 0x00
      000172 00                    2240 	.db 0x00
      000173 00                    2241 	.db 0x00
      000174 00                    2242 	.db 0x00
      000175 00                    2243 	.db 0x00
      000176 00                    2244 	.db 0x00
      000177 00                    2245 	.db 0x00
      000178 00                    2246 	.db 0x00
      000179 00                    2247 	.db 0x00
      00017A 00                    2248 	.db 0x00
      00017B 00                    2249 	.db 0x00
      00017C 00                    2250 	.db 0x00
      00017D 00                    2251 	.db 0x00
      00017E 00                    2252 	.db 0x00
      00017F 00                    2253 	.db 0x00
      000180 00                    2254 	.db 0x00
      000181 00                    2255 	.db 0x00
      000182 00                    2256 	.db 0x00
      000183 00                    2257 	.db 0x00
      000184 00                    2258 	.db 0x00
      000185 00                    2259 	.db 0x00
      000186 00                    2260 	.db 0x00
      000187 00                    2261 	.db 0x00
      000188 00                    2262 	.db 0x00
      000189 00                    2263 	.db 0x00
      00018A 00                    2264 	.db 0x00
      00018B 00                    2265 	.db 0x00
      00018C 00                    2266 	.db 0x00
      00018D 00                    2267 	.db 0x00
      00018E 00                    2268 	.db 0x00
      00018F 00                    2269 	.db 0x00
      000190 00                    2270 	.db 0x00
      000191 00                    2271 	.db 0x00
      000192 00                    2272 	.db 0x00
      000193 00                    2273 	.db 0x00
      000194 00                    2274 	.db 0x00
      000195 00                    2275 	.db 0x00
      000196 00                    2276 	.db 0x00
      000197 00                    2277 	.db 0x00
      000198 00                    2278 	.db 0x00
      000199 00                    2279 	.db 0x00
      00019A 00                    2280 	.db 0x00
      00019B 00                    2281 	.db 0x00
      00019C 00                    2282 	.db 0x00
      00019D 00                    2283 	.db 0x00
      00019E 00                    2284 	.db 0x00
      00019F 00                    2285 	.db 0x00
      0001A0 00                    2286 	.db 0x00
      0001A1 00                    2287 	.db 0x00
      0001A2 00                    2288 	.db 0x00
      0001A3 00                    2289 	.db 0x00
      0001A4 00                    2290 	.db 0x00
      0001A5 00                    2291 	.db 0x00
      0001A6 00                    2292 	.db 0x00
      0001A7 00                    2293 	.db 0x00
      0001A8 00                    2294 	.db 0x00
      0001A9 00                    2295 	.db 0x00
      0001AA 00                    2296 	.db 0x00
      0001AB 00                    2297 	.db 0x00
      0001AC 00                    2298 	.db 0x00
      0001AD 00                    2299 	.db 0x00
      0001AE 00                    2300 	.db 0x00
      0001AF 00                    2301 	.db 0x00
      0001B0 00                    2302 	.db 0x00
      0001B1 00                    2303 	.db 0x00
      0001B2 00                    2304 	.db 0x00
      0001B3 00                    2305 	.db 0x00
      0001B4 00                    2306 	.db 0x00
      0001B5 00                    2307 	.db 0x00
      0001B6 00                    2308 	.db 0x00
      0001B7 00                    2309 	.db 0x00
      0001B8 00                    2310 	.db 0x00
      0001B9 00                    2311 	.db 0x00
      0001BA 00                    2312 	.db 0x00
      0001BB 00                    2313 	.db 0x00
      0001BC 00                    2314 	.db 0x00
      0001BD 00                    2315 	.db 0x00
      0001BE 00                    2316 	.db 0x00
      0001BF 00                    2317 	.db 0x00
      0001C0 00                    2318 	.db 0x00
      0001C1 00                    2319 	.db 0x00
      0001C2 00                    2320 	.db 0x00
      0001C3 00                    2321 	.db 0x00
      0001C4 00                    2322 	.db 0x00
      0001C5 00                    2323 	.db 0x00
      0001C6 00                    2324 	.db 0x00
      0001C7 00                    2325 	.db 0x00
      0001C8 00                    2326 	.db 0x00
      0001C9 00                    2327 	.db 0x00
      0001CA 00                    2328 	.db 0x00
      0001CB 00                    2329 	.db 0x00
      0001CC 00                    2330 	.db 0x00
      0001CD 00                    2331 	.db 0x00
      0001CE 00                    2332 	.db 0x00
      0001CF 00                    2333 	.db 0x00
      0001D0 00                    2334 	.db 0x00
      0001D1 00                    2335 	.db 0x00
      0001D2 00                    2336 	.db 0x00
      0001D3 00                    2337 	.db 0x00
      0001D4 00                    2338 	.db 0x00
      0001D5 00                    2339 	.db 0x00
      0001D6 00                    2340 	.db 0x00
      0001D7 00                    2341 	.db 0x00
      0001D8 00                    2342 	.db 0x00
      0001D9 00                    2343 	.db 0x00
      0001DA 00                    2344 	.db 0x00
      0001DB 00                    2345 	.db 0x00
      0001DC 00                    2346 	.db 0x00
      0001DD 00                    2347 	.db 0x00
      0001DE 00                    2348 	.db 0x00
      0001DF 00                    2349 	.db 0x00
      0001E0 00                    2350 	.db 0x00
      0001E1 00                    2351 	.db 0x00
      0001E2 00                    2352 	.db 0x00
      0001E3 00                    2353 	.db 0x00
      0001E4 00                    2354 	.db 0x00
      0001E5 00                    2355 	.db 0x00
      0001E6 00                    2356 	.db 0x00
      0001E7 00                    2357 	.db 0x00
      0001E8 00                    2358 	.db 0x00
      0001E9 00                    2359 	.db 0x00
      0001EA 00                    2360 	.db 0x00
      0001EB 00                    2361 	.db 0x00
      0001EC 00                    2362 	.db 0x00
      0001ED 00                    2363 	.db 0x00
      0001EE 00                    2364 	.db 0x00
      0001EF 00                    2365 	.db 0x00
      0001F0 00                    2366 	.db 0x00
      0001F1 00                    2367 	.db 0x00
      0001F2 00                    2368 	.db 0x00
      0001F3 00                    2369 	.db 0x00
      0001F4 00                    2370 	.db 0x00
      0001F5 00                    2371 	.db 0x00
      0001F6 00                    2372 	.db 0x00
      0001F7 00                    2373 	.db 0x00
      0001F8 00                    2374 	.db 0x00
      0001F9 00                    2375 	.db 0x00
      0001FA 00                    2376 	.db 0x00
      0001FB 00                    2377 	.db 0x00
      0001FC 00                    2378 	.db 0x00
      0001FD 00                    2379 	.db 0x00
      0001FE 00                    2380 	.db 0x00
      0001FF 00                    2381 	.db 0x00
      000200 00                    2382 	.db 0x00
      000201 00                    2383 	.db 0x00
      000202 00                    2384 	.db 0x00
      000203 00                    2385 	.db 0x00
      000204 00                    2386 	.db 0x00
      000205                       2387 __xinit__current_dev:
      000205 77                    2388 	.db #0x77	; 119	'w'
                                   2389 	.area CABS (ABS)
