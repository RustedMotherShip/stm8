                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _command_switcher
                                     13 	.globl _data_handler
                                     14 	.globl _cm_SW
                                     15 	.globl _cm_SR
                                     16 	.globl _cm_ST
                                     17 	.globl _cm_DB
                                     18 	.globl _cm_RM
                                     19 	.globl _cm_SN
                                     20 	.globl _cm_SM
                                     21 	.globl _i2c_scan
                                     22 	.globl _i2c_read
                                     23 	.globl _i2c_write
                                     24 	.globl _i2c_stop
                                     25 	.globl _i2c_send_address
                                     26 	.globl _i2c_start
                                     27 	.globl _i2c_init
                                     28 	.globl _uart_init
                                     29 	.globl _status_check
                                     30 	.globl _reg_check
                                     31 	.globl _char_buffer_to_int
                                     32 	.globl _get_size_from_buff
                                     33 	.globl _get_addr_from_buff
                                     34 	.globl _convert_int_to_binary
                                     35 	.globl _convert_chars_to_int
                                     36 	.globl _convert_int_to_chars
                                     37 	.globl _uart_read
                                     38 	.globl _UART_RX
                                     39 	.globl _uart_write
                                     40 	.globl _UART_TX
                                     41 	.globl _delay
                                     42 	.globl ___memcpy
                                     43 	.globl _strlen
                                     44 	.globl _memset
                                     45 	.globl _memcmp
                                     46 	.globl _current_dev
                                     47 	.globl _data_buf
                                     48 	.globl _p_bytes
                                     49 	.globl _d_size
                                     50 	.globl _p_size
                                     51 	.globl _d_addr
                                     52 	.globl _a
                                     53 	.globl _buffer
                                     54 	.globl _status_registers
                                     55 ;--------------------------------------------------------
                                     56 ; ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area DATA
                                     59 ;--------------------------------------------------------
                                     60 ; ram data
                                     61 ;--------------------------------------------------------
                                     62 	.area INITIALIZED
      000000                         63 _status_registers::
      000000                         64 	.ds 256
      000100                         65 _buffer::
      000100                         66 	.ds 256
      000200                         67 _a::
      000200                         68 	.ds 3
      000203                         69 _d_addr::
      000203                         70 	.ds 1
      000204                         71 _p_size::
      000204                         72 	.ds 1
      000205                         73 _d_size::
      000205                         74 	.ds 1
      000206                         75 _p_bytes::
      000206                         76 	.ds 1
      000207                         77 _data_buf::
      000207                         78 	.ds 256
      000307                         79 _current_dev::
      000307                         80 	.ds 1
                                     81 ;--------------------------------------------------------
                                     82 ; Stack segment in internal ram
                                     83 ;--------------------------------------------------------
                                     84 	.area SSEG
      000000                         85 __start__stack:
      000000                         86 	.ds	1
                                     87 
                                     88 ;--------------------------------------------------------
                                     89 ; absolute external ram data
                                     90 ;--------------------------------------------------------
                                     91 	.area DABS (ABS)
                                     92 
                                     93 ; default segment ordering for linker
                                     94 	.area HOME
                                     95 	.area GSINIT
                                     96 	.area GSFINAL
                                     97 	.area CONST
                                     98 	.area INITIALIZER
                                     99 	.area CODE
                                    100 
                                    101 ;--------------------------------------------------------
                                    102 ; interrupt vector
                                    103 ;--------------------------------------------------------
                                    104 	.area HOME
      000000                        105 __interrupt_vect:
      000000 82v00u00u00            106 	int s_GSINIT ; reset
                                    107 ;--------------------------------------------------------
                                    108 ; global & static initialisations
                                    109 ;--------------------------------------------------------
                                    110 	.area HOME
                                    111 	.area GSINIT
                                    112 	.area GSFINAL
                                    113 	.area GSINIT
      000000 CDr00r00         [ 4]  114 	call	___sdcc_external_startup
      000003 4D               [ 1]  115 	tnz	a
      000004 27 03            [ 1]  116 	jreq	__sdcc_init_data
      000006 CCr00r04         [ 2]  117 	jp	__sdcc_program_startup
      000009                        118 __sdcc_init_data:
                                    119 ; stm8_genXINIT() start
      000009 AEr00r00         [ 2]  120 	ldw x, #l_DATA
      00000C 27 07            [ 1]  121 	jreq	00002$
      00000E                        122 00001$:
      00000E 72 4FuFFuFF      [ 1]  123 	clr (s_DATA - 1, x)
      000012 5A               [ 2]  124 	decw x
      000013 26 F9            [ 1]  125 	jrne	00001$
      000015                        126 00002$:
      000015 AEr00r00         [ 2]  127 	ldw	x, #l_INITIALIZER
      000018 27 09            [ 1]  128 	jreq	00004$
      00001A                        129 00003$:
      00001A D6uFFuFF         [ 1]  130 	ld	a, (s_INITIALIZER - 1, x)
      00001D D7uFFuFF         [ 1]  131 	ld	(s_INITIALIZED - 1, x), a
      000020 5A               [ 2]  132 	decw	x
      000021 26 F7            [ 1]  133 	jrne	00003$
      000023                        134 00004$:
                                    135 ; stm8_genXINIT() end
                                    136 	.area GSFINAL
      000000 CCr00r04         [ 2]  137 	jp	__sdcc_program_startup
                                    138 ;--------------------------------------------------------
                                    139 ; Home
                                    140 ;--------------------------------------------------------
                                    141 	.area HOME
                                    142 	.area HOME
      000004                        143 __sdcc_program_startup:
      000004 CCr07r61         [ 2]  144 	jp	_main
                                    145 ;	return from main will return to caller
                                    146 ;--------------------------------------------------------
                                    147 ; code
                                    148 ;--------------------------------------------------------
                                    149 	.area CODE
                                    150 ;	main.c: 27: void delay(unsigned long count) {
                                    151 ;	-----------------------------------------
                                    152 ;	 function delay
                                    153 ;	-----------------------------------------
      000000                        154 _delay:
      000000 52 08            [ 2]  155 	sub	sp, #8
                                    156 ;	main.c: 28: while (count--)
      000002 16 0D            [ 2]  157 	ldw	y, (0x0d, sp)
      000004 17 07            [ 2]  158 	ldw	(0x07, sp), y
      000006 1E 0B            [ 2]  159 	ldw	x, (0x0b, sp)
      000008                        160 00101$:
      000008 1F 01            [ 2]  161 	ldw	(0x01, sp), x
      00000A 7B 07            [ 1]  162 	ld	a, (0x07, sp)
      00000C 6B 03            [ 1]  163 	ld	(0x03, sp), a
      00000E 7B 08            [ 1]  164 	ld	a, (0x08, sp)
      000010 16 07            [ 2]  165 	ldw	y, (0x07, sp)
      000012 72 A2 00 01      [ 2]  166 	subw	y, #0x0001
      000016 17 07            [ 2]  167 	ldw	(0x07, sp), y
      000018 24 01            [ 1]  168 	jrnc	00121$
      00001A 5A               [ 2]  169 	decw	x
      00001B                        170 00121$:
      00001B 4D               [ 1]  171 	tnz	a
      00001C 26 08            [ 1]  172 	jrne	00122$
      00001E 16 02            [ 2]  173 	ldw	y, (0x02, sp)
      000020 26 04            [ 1]  174 	jrne	00122$
      000022 0D 01            [ 1]  175 	tnz	(0x01, sp)
      000024 27 03            [ 1]  176 	jreq	00104$
      000026                        177 00122$:
                                    178 ;	main.c: 29: nop();
      000026 9D               [ 1]  179 	nop
      000027 20 DF            [ 2]  180 	jra	00101$
      000029                        181 00104$:
                                    182 ;	main.c: 30: }
      000029 1E 09            [ 2]  183 	ldw	x, (9, sp)
      00002B 5B 0E            [ 2]  184 	addw	sp, #14
      00002D FC               [ 2]  185 	jp	(x)
                                    186 ;	main.c: 38: void UART_TX(unsigned char value)
                                    187 ;	-----------------------------------------
                                    188 ;	 function UART_TX
                                    189 ;	-----------------------------------------
      00002E                        190 _UART_TX:
                                    191 ;	main.c: 40: UART1_DR = value;
      00002E C7 52 31         [ 1]  192 	ld	0x5231, a
                                    193 ;	main.c: 41: while(!(UART1_SR & UART_SR_TXE));
      000031                        194 00101$:
      000031 C6 52 30         [ 1]  195 	ld	a, 0x5230
      000034 2A FB            [ 1]  196 	jrpl	00101$
                                    197 ;	main.c: 42: }
      000036 81               [ 4]  198 	ret
                                    199 ;	main.c: 44: int uart_write(const char *str) {
                                    200 ;	-----------------------------------------
                                    201 ;	 function uart_write
                                    202 ;	-----------------------------------------
      000037                        203 _uart_write:
      000037 52 05            [ 2]  204 	sub	sp, #5
      000039 1F 03            [ 2]  205 	ldw	(0x03, sp), x
                                    206 ;	main.c: 46: for(i = 0; i < strlen(str); i++) {
      00003B 0F 05            [ 1]  207 	clr	(0x05, sp)
      00003D                        208 00103$:
      00003D 1E 03            [ 2]  209 	ldw	x, (0x03, sp)
      00003F CDr00r00         [ 4]  210 	call	_strlen
      000042 1F 01            [ 2]  211 	ldw	(0x01, sp), x
      000044 7B 05            [ 1]  212 	ld	a, (0x05, sp)
      000046 5F               [ 1]  213 	clrw	x
      000047 97               [ 1]  214 	ld	xl, a
      000048 13 01            [ 2]  215 	cpw	x, (0x01, sp)
      00004A 24 0F            [ 1]  216 	jrnc	00101$
                                    217 ;	main.c: 48: UART_TX(str[i]);
      00004C 5F               [ 1]  218 	clrw	x
      00004D 7B 05            [ 1]  219 	ld	a, (0x05, sp)
      00004F 97               [ 1]  220 	ld	xl, a
      000050 72 FB 03         [ 2]  221 	addw	x, (0x03, sp)
      000053 F6               [ 1]  222 	ld	a, (x)
      000054 CDr00r2E         [ 4]  223 	call	_UART_TX
                                    224 ;	main.c: 46: for(i = 0; i < strlen(str); i++) {
      000057 0C 05            [ 1]  225 	inc	(0x05, sp)
      000059 20 E2            [ 2]  226 	jra	00103$
      00005B                        227 00101$:
                                    228 ;	main.c: 51: return(i); // Bytes sent
      00005B 7B 05            [ 1]  229 	ld	a, (0x05, sp)
      00005D 5F               [ 1]  230 	clrw	x
      00005E 97               [ 1]  231 	ld	xl, a
                                    232 ;	main.c: 52: }
      00005F 5B 05            [ 2]  233 	addw	sp, #5
      000061 81               [ 4]  234 	ret
                                    235 ;	main.c: 53: unsigned char UART_RX(void)
                                    236 ;	-----------------------------------------
                                    237 ;	 function UART_RX
                                    238 ;	-----------------------------------------
      000062                        239 _UART_RX:
                                    240 ;	main.c: 56: while(!(UART1_SR & UART_SR_TXE));
      000062                        241 00101$:
      000062 C6 52 30         [ 1]  242 	ld	a, 0x5230
      000065 2A FB            [ 1]  243 	jrpl	00101$
                                    244 ;	main.c: 58: return UART1_DR;
      000067 C6 52 31         [ 1]  245 	ld	a, 0x5231
                                    246 ;	main.c: 59: }
      00006A 81               [ 4]  247 	ret
                                    248 ;	main.c: 60: int uart_read(void)
                                    249 ;	-----------------------------------------
                                    250 ;	 function uart_read
                                    251 ;	-----------------------------------------
      00006B                        252 _uart_read:
                                    253 ;	main.c: 63: memset(buffer, 0, sizeof(buffer));
      00006B 4B 00            [ 1]  254 	push	#0x00
      00006D 4B 01            [ 1]  255 	push	#0x01
      00006F 5F               [ 1]  256 	clrw	x
      000070 89               [ 2]  257 	pushw	x
      000071 AEr01r00         [ 2]  258 	ldw	x, #(_buffer+0)
      000074 CDr00r00         [ 4]  259 	call	_memset
                                    260 ;	main.c: 66: while(i<256)
      000077 90 5F            [ 1]  261 	clrw	y
      000079                        262 00109$:
      000079 90 A3 01 00      [ 2]  263 	cpw	y, #0x0100
      00007D 2E 29            [ 1]  264 	jrsge	00111$
                                    265 ;	main.c: 69: if(UART1_SR & UART_SR_RXNE)
      00007F C6 52 30         [ 1]  266 	ld	a, 0x5230
      000082 A5 20            [ 1]  267 	bcp	a, #0x20
      000084 27 F3            [ 1]  268 	jreq	00109$
                                    269 ;	main.c: 72: buffer[i] = UART_RX();
      000086 93               [ 1]  270 	ldw	x, y
      000087 1Cr01r00         [ 2]  271 	addw	x, #(_buffer+0)
      00008A 89               [ 2]  272 	pushw	x
      00008B 90 89            [ 2]  273 	pushw	y
      00008D CDr00r62         [ 4]  274 	call	_UART_RX
      000090 90 85            [ 2]  275 	popw	y
      000092 85               [ 2]  276 	popw	x
      000093 F7               [ 1]  277 	ld	(x), a
                                    278 ;	main.c: 73: if(buffer[i] == '\r')
      000094 A1 0D            [ 1]  279 	cp	a, #0x0d
      000096 26 03            [ 1]  280 	jrne	00102$
                                    281 ;	main.c: 75: return 1;
      000098 5F               [ 1]  282 	clrw	x
      000099 5C               [ 1]  283 	incw	x
      00009A 81               [ 4]  284 	ret
                                    285 ;	main.c: 76: break;
      00009B                        286 00102$:
                                    287 ;	main.c: 78: if(buffer[i] < 32 || buffer[i] > 126);
      00009B F6               [ 1]  288 	ld	a, (x)
      00009C A1 20            [ 1]  289 	cp	a, #0x20
      00009E 25 D9            [ 1]  290 	jrc	00109$
      0000A0 A1 7E            [ 1]  291 	cp	a, #0x7e
      0000A2 22 D5            [ 1]  292 	jrugt	00109$
                                    293 ;	main.c: 80: i++;
      0000A4 90 5C            [ 1]  294 	incw	y
      0000A6 20 D1            [ 2]  295 	jra	00109$
      0000A8                        296 00111$:
                                    297 ;	main.c: 84: return 0;
      0000A8 5F               [ 1]  298 	clrw	x
                                    299 ;	main.c: 85: }
      0000A9 81               [ 4]  300 	ret
                                    301 ;	main.c: 94: void convert_int_to_chars(uint8_t num, char* rx_int_chars) {
                                    302 ;	-----------------------------------------
                                    303 ;	 function convert_int_to_chars
                                    304 ;	-----------------------------------------
      0000AA                        305 _convert_int_to_chars:
      0000AA 52 0D            [ 2]  306 	sub	sp, #13
      0000AC 6B 0D            [ 1]  307 	ld	(0x0d, sp), a
      0000AE 1F 0B            [ 2]  308 	ldw	(0x0b, sp), x
                                    309 ;	main.c: 97: rx_int_chars[0] = num / 100 + '0';
      0000B0 7B 0D            [ 1]  310 	ld	a, (0x0d, sp)
      0000B2 6B 02            [ 1]  311 	ld	(0x02, sp), a
      0000B4 0F 01            [ 1]  312 	clr	(0x01, sp)
                                    313 ;	main.c: 98: rx_int_chars[1] = num / 10 % 10 + '0';
      0000B6 1E 0B            [ 2]  314 	ldw	x, (0x0b, sp)
      0000B8 5C               [ 1]  315 	incw	x
      0000B9 1F 03            [ 2]  316 	ldw	(0x03, sp), x
                                    317 ;	main.c: 99: rx_int_chars[2] = num % 10 + '0';
      0000BB 1E 0B            [ 2]  318 	ldw	x, (0x0b, sp)
      0000BD 5C               [ 1]  319 	incw	x
      0000BE 5C               [ 1]  320 	incw	x
      0000BF 1F 05            [ 2]  321 	ldw	(0x05, sp), x
                                    322 ;	main.c: 98: rx_int_chars[1] = num / 10 % 10 + '0';
      0000C1 4B 0A            [ 1]  323 	push	#0x0a
      0000C3 4B 00            [ 1]  324 	push	#0x00
      0000C5 1E 03            [ 2]  325 	ldw	x, (0x03, sp)
                                    326 ;	main.c: 99: rx_int_chars[2] = num % 10 + '0';
      0000C7 CDr00r00         [ 4]  327 	call	__divsint
      0000CA 1F 07            [ 2]  328 	ldw	(0x07, sp), x
      0000CC 4B 0A            [ 1]  329 	push	#0x0a
      0000CE 4B 00            [ 1]  330 	push	#0x00
      0000D0 1E 03            [ 2]  331 	ldw	x, (0x03, sp)
      0000D2 CDr00r00         [ 4]  332 	call	__modsint
      0000D5 9F               [ 1]  333 	ld	a, xl
      0000D6 AB 30            [ 1]  334 	add	a, #0x30
      0000D8 6B 09            [ 1]  335 	ld	(0x09, sp), a
                                    336 ;	main.c: 95: if (num > 99) {
      0000DA 7B 0D            [ 1]  337 	ld	a, (0x0d, sp)
      0000DC A1 63            [ 1]  338 	cp	a, #0x63
      0000DE 23 29            [ 2]  339 	jrule	00105$
                                    340 ;	main.c: 97: rx_int_chars[0] = num / 100 + '0';
      0000E0 4B 64            [ 1]  341 	push	#0x64
      0000E2 4B 00            [ 1]  342 	push	#0x00
      0000E4 1E 03            [ 2]  343 	ldw	x, (0x03, sp)
      0000E6 CDr00r00         [ 4]  344 	call	__divsint
      0000E9 9F               [ 1]  345 	ld	a, xl
      0000EA AB 30            [ 1]  346 	add	a, #0x30
      0000EC 1E 0B            [ 2]  347 	ldw	x, (0x0b, sp)
      0000EE F7               [ 1]  348 	ld	(x), a
                                    349 ;	main.c: 98: rx_int_chars[1] = num / 10 % 10 + '0';
      0000EF 4B 0A            [ 1]  350 	push	#0x0a
      0000F1 4B 00            [ 1]  351 	push	#0x00
      0000F3 1E 09            [ 2]  352 	ldw	x, (0x09, sp)
      0000F5 CDr00r00         [ 4]  353 	call	__modsint
      0000F8 9F               [ 1]  354 	ld	a, xl
      0000F9 AB 30            [ 1]  355 	add	a, #0x30
      0000FB 1E 03            [ 2]  356 	ldw	x, (0x03, sp)
      0000FD F7               [ 1]  357 	ld	(x), a
                                    358 ;	main.c: 99: rx_int_chars[2] = num % 10 + '0';
      0000FE 1E 05            [ 2]  359 	ldw	x, (0x05, sp)
      000100 7B 09            [ 1]  360 	ld	a, (0x09, sp)
      000102 F7               [ 1]  361 	ld	(x), a
                                    362 ;	main.c: 100: rx_int_chars[3] ='\0';
      000103 1E 0B            [ 2]  363 	ldw	x, (0x0b, sp)
      000105 6F 03            [ 1]  364 	clr	(0x0003, x)
      000107 20 23            [ 2]  365 	jra	00107$
      000109                        366 00105$:
                                    367 ;	main.c: 102: } else if (num > 9) {
      000109 7B 0D            [ 1]  368 	ld	a, (0x0d, sp)
      00010B A1 09            [ 1]  369 	cp	a, #0x09
      00010D 23 13            [ 2]  370 	jrule	00102$
                                    371 ;	main.c: 104: rx_int_chars[0] = num / 10 + '0';
      00010F 7B 08            [ 1]  372 	ld	a, (0x08, sp)
      000111 6B 0A            [ 1]  373 	ld	(0x0a, sp), a
      000113 AB 30            [ 1]  374 	add	a, #0x30
      000115 1E 0B            [ 2]  375 	ldw	x, (0x0b, sp)
      000117 F7               [ 1]  376 	ld	(x), a
                                    377 ;	main.c: 105: rx_int_chars[1] = num % 10 + '0';
      000118 1E 03            [ 2]  378 	ldw	x, (0x03, sp)
      00011A 7B 09            [ 1]  379 	ld	a, (0x09, sp)
      00011C F7               [ 1]  380 	ld	(x), a
                                    381 ;	main.c: 106: rx_int_chars[2] ='\0'; // Заканчиваем строку символом конца строки
      00011D 1E 05            [ 2]  382 	ldw	x, (0x05, sp)
      00011F 7F               [ 1]  383 	clr	(x)
      000120 20 0A            [ 2]  384 	jra	00107$
      000122                        385 00102$:
                                    386 ;	main.c: 109: rx_int_chars[0] = num + '0';
      000122 7B 0D            [ 1]  387 	ld	a, (0x0d, sp)
      000124 AB 30            [ 1]  388 	add	a, #0x30
      000126 1E 0B            [ 2]  389 	ldw	x, (0x0b, sp)
      000128 F7               [ 1]  390 	ld	(x), a
                                    391 ;	main.c: 110: rx_int_chars[1] ='\0';
      000129 1E 03            [ 2]  392 	ldw	x, (0x03, sp)
      00012B 7F               [ 1]  393 	clr	(x)
      00012C                        394 00107$:
                                    395 ;	main.c: 112: }
      00012C 5B 0D            [ 2]  396 	addw	sp, #13
      00012E 81               [ 4]  397 	ret
                                    398 ;	main.c: 114: uint8_t convert_chars_to_int(char* rx_chars_int, const int i) {
                                    399 ;	-----------------------------------------
                                    400 ;	 function convert_chars_to_int
                                    401 ;	-----------------------------------------
      00012F                        402 _convert_chars_to_int:
      00012F 52 03            [ 2]  403 	sub	sp, #3
      000131 1F 02            [ 2]  404 	ldw	(0x02, sp), x
                                    405 ;	main.c: 115: uint8_t result = 0;
      000133 4F               [ 1]  406 	clr	a
                                    407 ;	main.c: 117: for (int o = 0; o < i; o++) {
      000134 5F               [ 1]  408 	clrw	x
      000135                        409 00103$:
      000135 13 06            [ 2]  410 	cpw	x, (0x06, sp)
      000137 2E 18            [ 1]  411 	jrsge	00101$
                                    412 ;	main.c: 119: result = (result * 10) + (rx_chars_int[o] - '0');
      000139 90 97            [ 1]  413 	ld	yl, a
      00013B A6 0A            [ 1]  414 	ld	a, #0x0a
      00013D 90 42            [ 4]  415 	mul	y, a
      00013F 61               [ 1]  416 	exg	a, yl
      000140 6B 01            [ 1]  417 	ld	(0x01, sp), a
      000142 61               [ 1]  418 	exg	a, yl
      000143 90 93            [ 1]  419 	ldw	y, x
      000145 72 F9 02         [ 2]  420 	addw	y, (0x02, sp)
      000148 90 F6            [ 1]  421 	ld	a, (y)
      00014A A0 30            [ 1]  422 	sub	a, #0x30
      00014C 1B 01            [ 1]  423 	add	a, (0x01, sp)
                                    424 ;	main.c: 117: for (int o = 0; o < i; o++) {
      00014E 5C               [ 1]  425 	incw	x
      00014F 20 E4            [ 2]  426 	jra	00103$
      000151                        427 00101$:
                                    428 ;	main.c: 122: return result;
                                    429 ;	main.c: 123: }
      000151 1E 04            [ 2]  430 	ldw	x, (4, sp)
      000153 5B 07            [ 2]  431 	addw	sp, #7
      000155 FC               [ 2]  432 	jp	(x)
                                    433 ;	main.c: 126: void convert_int_to_binary(int num, char* rx_binary_chars) {
                                    434 ;	-----------------------------------------
                                    435 ;	 function convert_int_to_binary
                                    436 ;	-----------------------------------------
      000156                        437 _convert_int_to_binary:
      000156 52 04            [ 2]  438 	sub	sp, #4
      000158 1F 01            [ 2]  439 	ldw	(0x01, sp), x
                                    440 ;	main.c: 128: for(int i = 7; i >= 0; i--) {
      00015A AE 00 07         [ 2]  441 	ldw	x, #0x0007
      00015D 1F 03            [ 2]  442 	ldw	(0x03, sp), x
      00015F                        443 00103$:
      00015F 0D 03            [ 1]  444 	tnz	(0x03, sp)
      000161 2B 22            [ 1]  445 	jrmi	00101$
                                    446 ;	main.c: 130: rx_binary_chars[7 - i] = ((num >> i) & 1) + '0';
      000163 AE 00 07         [ 2]  447 	ldw	x, #0x0007
      000166 72 F0 03         [ 2]  448 	subw	x, (0x03, sp)
      000169 72 FB 07         [ 2]  449 	addw	x, (0x07, sp)
      00016C 16 01            [ 2]  450 	ldw	y, (0x01, sp)
      00016E 7B 04            [ 1]  451 	ld	a, (0x04, sp)
      000170 27 05            [ 1]  452 	jreq	00124$
      000172                        453 00123$:
      000172 90 57            [ 2]  454 	sraw	y
      000174 4A               [ 1]  455 	dec	a
      000175 26 FB            [ 1]  456 	jrne	00123$
      000177                        457 00124$:
      000177 90 9F            [ 1]  458 	ld	a, yl
      000179 A4 01            [ 1]  459 	and	a, #0x01
      00017B AB 30            [ 1]  460 	add	a, #0x30
      00017D F7               [ 1]  461 	ld	(x), a
                                    462 ;	main.c: 128: for(int i = 7; i >= 0; i--) {
      00017E 1E 03            [ 2]  463 	ldw	x, (0x03, sp)
      000180 5A               [ 2]  464 	decw	x
      000181 1F 03            [ 2]  465 	ldw	(0x03, sp), x
      000183 20 DA            [ 2]  466 	jra	00103$
      000185                        467 00101$:
                                    468 ;	main.c: 132: rx_binary_chars[8] = '\0'; // Добавляем символ конца строки
      000185 1E 07            [ 2]  469 	ldw	x, (0x07, sp)
      000187 6F 08            [ 1]  470 	clr	(0x0008, x)
                                    471 ;	main.c: 133: }
      000189 1E 05            [ 2]  472 	ldw	x, (5, sp)
      00018B 5B 08            [ 2]  473 	addw	sp, #8
      00018D FC               [ 2]  474 	jp	(x)
                                    475 ;	main.c: 142: void get_addr_from_buff(void)
                                    476 ;	-----------------------------------------
                                    477 ;	 function get_addr_from_buff
                                    478 ;	-----------------------------------------
      00018E                        479 _get_addr_from_buff:
      00018E 52 02            [ 2]  480 	sub	sp, #2
                                    481 ;	main.c: 146: while(1)
      000190 A6 03            [ 1]  482 	ld	a, #0x03
      000192 6B 01            [ 1]  483 	ld	(0x01, sp), a
      000194 0F 02            [ 1]  484 	clr	(0x02, sp)
      000196                        485 00105$:
                                    486 ;	main.c: 148: if(buffer[i] == ' ' || buffer[i] == '\r\n')
      000196 5F               [ 1]  487 	clrw	x
      000197 7B 01            [ 1]  488 	ld	a, (0x01, sp)
      000199 97               [ 1]  489 	ld	xl, a
      00019A D6u01u00         [ 1]  490 	ld	a, (_buffer+0, x)
      00019D A1 20            [ 1]  491 	cp	a, #0x20
      00019F 27 04            [ 1]  492 	jreq	00101$
      0001A1 A1 0D            [ 1]  493 	cp	a, #0x0d
      0001A3 26 08            [ 1]  494 	jrne	00102$
      0001A5                        495 00101$:
                                    496 ;	main.c: 150: p_size = i+1;
      0001A5 7B 01            [ 1]  497 	ld	a, (0x01, sp)
      0001A7 4C               [ 1]  498 	inc	a
      0001A8 C7u02u04         [ 1]  499 	ld	_p_size+0, a
                                    500 ;	main.c: 151: break;
      0001AB 20 06            [ 2]  501 	jra	00106$
      0001AD                        502 00102$:
                                    503 ;	main.c: 153: i++;
      0001AD 0C 01            [ 1]  504 	inc	(0x01, sp)
                                    505 ;	main.c: 154: counter++;
      0001AF 0C 02            [ 1]  506 	inc	(0x02, sp)
      0001B1 20 E3            [ 2]  507 	jra	00105$
      0001B3                        508 00106$:
                                    509 ;	main.c: 156: memcpy(a, &buffer[3], counter);
      0001B3 5F               [ 1]  510 	clrw	x
      0001B4 7B 02            [ 1]  511 	ld	a, (0x02, sp)
      0001B6 97               [ 1]  512 	ld	xl, a
      0001B7 89               [ 2]  513 	pushw	x
      0001B8 4Br03            [ 1]  514 	push	#<(_buffer+3)
      0001BA 4Bs01            [ 1]  515 	push	#((_buffer+3) >> 8)
      0001BC AEr02r00         [ 2]  516 	ldw	x, #(_a+0)
      0001BF CDr00r00         [ 4]  517 	call	___memcpy
                                    518 ;	main.c: 157: d_addr = convert_chars_to_int(a, counter);
      0001C2 5F               [ 1]  519 	clrw	x
      0001C3 7B 02            [ 1]  520 	ld	a, (0x02, sp)
      0001C5 97               [ 1]  521 	ld	xl, a
      0001C6 89               [ 2]  522 	pushw	x
      0001C7 AEr02r00         [ 2]  523 	ldw	x, #(_a+0)
      0001CA CDr01r2F         [ 4]  524 	call	_convert_chars_to_int
      0001CD C7u02u03         [ 1]  525 	ld	_d_addr+0, a
                                    526 ;	main.c: 158: }
      0001D0 5B 02            [ 2]  527 	addw	sp, #2
      0001D2 81               [ 4]  528 	ret
                                    529 ;	main.c: 160: void get_size_from_buff(void)
                                    530 ;	-----------------------------------------
                                    531 ;	 function get_size_from_buff
                                    532 ;	-----------------------------------------
      0001D3                        533 _get_size_from_buff:
      0001D3 52 02            [ 2]  534 	sub	sp, #2
                                    535 ;	main.c: 162: memset(a, 0, sizeof(a));
      0001D5 4B 03            [ 1]  536 	push	#0x03
      0001D7 4B 00            [ 1]  537 	push	#0x00
      0001D9 5F               [ 1]  538 	clrw	x
      0001DA 89               [ 2]  539 	pushw	x
      0001DB AEr02r00         [ 2]  540 	ldw	x, #(_a+0)
      0001DE CDr00r00         [ 4]  541 	call	_memset
                                    542 ;	main.c: 164: uint8_t i = p_size;
      0001E1 C6u02u04         [ 1]  543 	ld	a, _p_size+0
      0001E4 6B 01            [ 1]  544 	ld	(0x01, sp), a
                                    545 ;	main.c: 165: while(1)
      0001E6 0F 02            [ 1]  546 	clr	(0x02, sp)
      0001E8                        547 00105$:
                                    548 ;	main.c: 167: if(buffer[i] == ' ' || buffer[i] == '\r\n')
      0001E8 5F               [ 1]  549 	clrw	x
      0001E9 7B 01            [ 1]  550 	ld	a, (0x01, sp)
      0001EB 97               [ 1]  551 	ld	xl, a
      0001EC D6u01u00         [ 1]  552 	ld	a, (_buffer+0, x)
      0001EF A1 20            [ 1]  553 	cp	a, #0x20
      0001F1 27 04            [ 1]  554 	jreq	00101$
      0001F3 A1 0D            [ 1]  555 	cp	a, #0x0d
      0001F5 26 08            [ 1]  556 	jrne	00102$
      0001F7                        557 00101$:
                                    558 ;	main.c: 170: p_bytes = i+1;
      0001F7 7B 01            [ 1]  559 	ld	a, (0x01, sp)
      0001F9 4C               [ 1]  560 	inc	a
      0001FA C7u02u06         [ 1]  561 	ld	_p_bytes+0, a
                                    562 ;	main.c: 171: break;
      0001FD 20 06            [ 2]  563 	jra	00106$
      0001FF                        564 00102$:
                                    565 ;	main.c: 173: i++;
      0001FF 0C 01            [ 1]  566 	inc	(0x01, sp)
                                    567 ;	main.c: 174: counter++;
      000201 0C 02            [ 1]  568 	inc	(0x02, sp)
      000203 20 E3            [ 2]  569 	jra	00105$
      000205                        570 00106$:
                                    571 ;	main.c: 177: memcpy(a, &buffer[p_size], counter);
      000205 90 5F            [ 1]  572 	clrw	y
      000207 7B 02            [ 1]  573 	ld	a, (0x02, sp)
      000209 90 97            [ 1]  574 	ld	yl, a
      00020B 5F               [ 1]  575 	clrw	x
      00020C C6u02u04         [ 1]  576 	ld	a, _p_size+0
      00020F 97               [ 1]  577 	ld	xl, a
      000210 1Cr01r00         [ 2]  578 	addw	x, #(_buffer+0)
      000213 90 89            [ 2]  579 	pushw	y
      000215 89               [ 2]  580 	pushw	x
      000216 AEr02r00         [ 2]  581 	ldw	x, #(_a+0)
      000219 CDr00r00         [ 4]  582 	call	___memcpy
                                    583 ;	main.c: 178: d_size = convert_chars_to_int(a, counter);
      00021C 5F               [ 1]  584 	clrw	x
      00021D 7B 02            [ 1]  585 	ld	a, (0x02, sp)
      00021F 97               [ 1]  586 	ld	xl, a
      000220 89               [ 2]  587 	pushw	x
      000221 AEr02r00         [ 2]  588 	ldw	x, #(_a+0)
      000224 CDr01r2F         [ 4]  589 	call	_convert_chars_to_int
      000227 C7u02u05         [ 1]  590 	ld	_d_size+0, a
                                    591 ;	main.c: 179: }
      00022A 5B 02            [ 2]  592 	addw	sp, #2
      00022C 81               [ 4]  593 	ret
                                    594 ;	main.c: 180: void char_buffer_to_int(void)
                                    595 ;	-----------------------------------------
                                    596 ;	 function char_buffer_to_int
                                    597 ;	-----------------------------------------
      00022D                        598 _char_buffer_to_int:
      00022D 52 08            [ 2]  599 	sub	sp, #8
                                    600 ;	main.c: 182: memset(a, 0, sizeof(a));
      00022F 4B 03            [ 1]  601 	push	#0x03
      000231 4B 00            [ 1]  602 	push	#0x00
      000233 5F               [ 1]  603 	clrw	x
      000234 89               [ 2]  604 	pushw	x
      000235 AEr02r00         [ 2]  605 	ldw	x, #(_a+0)
      000238 CDr00r00         [ 4]  606 	call	_memset
                                    607 ;	main.c: 183: uint8_t counter = d_size;
      00023B C6u02u05         [ 1]  608 	ld	a, _d_size+0
      00023E 6B 01            [ 1]  609 	ld	(0x01, sp), a
                                    610 ;	main.c: 184: uint8_t i = p_bytes;
      000240 C6u02u06         [ 1]  611 	ld	a, _p_bytes+0
      000243 6B 03            [ 1]  612 	ld	(0x03, sp), a
                                    613 ;	main.c: 187: for(int o = 0; o < counter;o++)
      000245 0F 04            [ 1]  614 	clr	(0x04, sp)
      000247 5F               [ 1]  615 	clrw	x
      000248 1F 05            [ 2]  616 	ldw	(0x05, sp), x
      00024A                        617 00112$:
      00024A 7B 01            [ 1]  618 	ld	a, (0x01, sp)
      00024C 6B 08            [ 1]  619 	ld	(0x08, sp), a
      00024E 0F 07            [ 1]  620 	clr	(0x07, sp)
      000250 1E 05            [ 2]  621 	ldw	x, (0x05, sp)
      000252 13 07            [ 2]  622 	cpw	x, (0x07, sp)
      000254 2E 65            [ 1]  623 	jrsge	00114$
                                    624 ;	main.c: 189: uint8_t number_counter = 0;
      000256 0F 02            [ 1]  625 	clr	(0x02, sp)
                                    626 ;	main.c: 190: while(1)
      000258 7B 03            [ 1]  627 	ld	a, (0x03, sp)
      00025A 6B 07            [ 1]  628 	ld	(0x07, sp), a
      00025C 0F 08            [ 1]  629 	clr	(0x08, sp)
      00025E                        630 00108$:
                                    631 ;	main.c: 192: if(buffer[i] == ' ')
      00025E 5F               [ 1]  632 	clrw	x
      00025F 7B 07            [ 1]  633 	ld	a, (0x07, sp)
      000261 97               [ 1]  634 	ld	xl, a
      000262 D6u01u00         [ 1]  635 	ld	a, (_buffer+0, x)
      000265 A1 20            [ 1]  636 	cp	a, #0x20
      000267 26 04            [ 1]  637 	jrne	00105$
                                    638 ;	main.c: 194: i++;
      000269 0C 03            [ 1]  639 	inc	(0x03, sp)
                                    640 ;	main.c: 195: break;
      00026B 20 12            [ 2]  641 	jra	00109$
      00026D                        642 00105$:
                                    643 ;	main.c: 197: else if(buffer[i] == '\r\n')
      00026D A1 0D            [ 1]  644 	cp	a, #0x0d
      00026F 27 0E            [ 1]  645 	jreq	00109$
                                    646 ;	main.c: 200: i++;
      000271 0C 07            [ 1]  647 	inc	(0x07, sp)
      000273 7B 07            [ 1]  648 	ld	a, (0x07, sp)
      000275 6B 03            [ 1]  649 	ld	(0x03, sp), a
                                    650 ;	main.c: 202: number_counter++;
      000277 0C 08            [ 1]  651 	inc	(0x08, sp)
      000279 7B 08            [ 1]  652 	ld	a, (0x08, sp)
      00027B 6B 02            [ 1]  653 	ld	(0x02, sp), a
      00027D 20 DF            [ 2]  654 	jra	00108$
      00027F                        655 00109$:
                                    656 ;	main.c: 204: memcpy(a, &buffer[i - number_counter], number_counter);
      00027F 90 5F            [ 1]  657 	clrw	y
      000281 7B 02            [ 1]  658 	ld	a, (0x02, sp)
      000283 90 97            [ 1]  659 	ld	yl, a
      000285 5F               [ 1]  660 	clrw	x
      000286 7B 03            [ 1]  661 	ld	a, (0x03, sp)
      000288 97               [ 1]  662 	ld	xl, a
      000289 7B 02            [ 1]  663 	ld	a, (0x02, sp)
      00028B 6B 08            [ 1]  664 	ld	(0x08, sp), a
      00028D 0F 07            [ 1]  665 	clr	(0x07, sp)
      00028F 72 F0 07         [ 2]  666 	subw	x, (0x07, sp)
      000292 1Cr01r00         [ 2]  667 	addw	x, #(_buffer+0)
      000295 90 89            [ 2]  668 	pushw	y
      000297 89               [ 2]  669 	pushw	x
      000298 AEr02r00         [ 2]  670 	ldw	x, #(_a+0)
      00029B CDr00r00         [ 4]  671 	call	___memcpy
                                    672 ;	main.c: 205: data_buf[int_buf_i] = convert_chars_to_int(a, number_counter);
      00029E 5F               [ 1]  673 	clrw	x
      00029F 7B 04            [ 1]  674 	ld	a, (0x04, sp)
      0002A1 97               [ 1]  675 	ld	xl, a
      0002A2 1Cr02r07         [ 2]  676 	addw	x, #(_data_buf+0)
      0002A5 89               [ 2]  677 	pushw	x
      0002A6 16 09            [ 2]  678 	ldw	y, (0x09, sp)
      0002A8 90 89            [ 2]  679 	pushw	y
      0002AA AEr02r00         [ 2]  680 	ldw	x, #(_a+0)
      0002AD CDr01r2F         [ 4]  681 	call	_convert_chars_to_int
      0002B0 85               [ 2]  682 	popw	x
      0002B1 F7               [ 1]  683 	ld	(x), a
                                    684 ;	main.c: 206: int_buf_i++;
      0002B2 0C 04            [ 1]  685 	inc	(0x04, sp)
                                    686 ;	main.c: 187: for(int o = 0; o < counter;o++)
      0002B4 1E 05            [ 2]  687 	ldw	x, (0x05, sp)
      0002B6 5C               [ 1]  688 	incw	x
      0002B7 1F 05            [ 2]  689 	ldw	(0x05, sp), x
      0002B9 20 8F            [ 2]  690 	jra	00112$
      0002BB                        691 00114$:
                                    692 ;	main.c: 208: }
      0002BB 5B 08            [ 2]  693 	addw	sp, #8
      0002BD 81               [ 4]  694 	ret
                                    695 ;	main.c: 216: void reg_check(void)
                                    696 ;	-----------------------------------------
                                    697 ;	 function reg_check
                                    698 ;	-----------------------------------------
      0002BE                        699 _reg_check:
      0002BE 52 09            [ 2]  700 	sub	sp, #9
                                    701 ;	main.c: 218: char rx_binary_chars[9]={0};
      0002C0 0F 01            [ 1]  702 	clr	(0x01, sp)
      0002C2 0F 02            [ 1]  703 	clr	(0x02, sp)
      0002C4 0F 03            [ 1]  704 	clr	(0x03, sp)
      0002C6 0F 04            [ 1]  705 	clr	(0x04, sp)
      0002C8 0F 05            [ 1]  706 	clr	(0x05, sp)
      0002CA 0F 06            [ 1]  707 	clr	(0x06, sp)
      0002CC 0F 07            [ 1]  708 	clr	(0x07, sp)
      0002CE 0F 08            [ 1]  709 	clr	(0x08, sp)
      0002D0 0F 09            [ 1]  710 	clr	(0x09, sp)
                                    711 ;	main.c: 223: convert_int_to_binary(I2C_SR3, rx_binary_chars);
      0002D2 96               [ 1]  712 	ldw	x, sp
      0002D3 5C               [ 1]  713 	incw	x
      0002D4 51               [ 1]  714 	exgw	x, y
      0002D5 C6 52 19         [ 1]  715 	ld	a, 0x5219
      0002D8 5F               [ 1]  716 	clrw	x
      0002D9 90 89            [ 2]  717 	pushw	y
      0002DB 97               [ 1]  718 	ld	xl, a
      0002DC CDr01r56         [ 4]  719 	call	_convert_int_to_binary
                                    720 ;	main.c: 224: status_registers[2] = I2C_SR3;
      0002DF 55 52 19u00u02   [ 1]  721 	mov	_status_registers+2, 0x5219
                                    722 ;	main.c: 229: convert_int_to_binary(I2C_DR, rx_binary_chars);
      0002E4 96               [ 1]  723 	ldw	x, sp
      0002E5 5C               [ 1]  724 	incw	x
      0002E6 51               [ 1]  725 	exgw	x, y
      0002E7 C6 52 16         [ 1]  726 	ld	a, 0x5216
      0002EA 5F               [ 1]  727 	clrw	x
      0002EB 90 89            [ 2]  728 	pushw	y
      0002ED 97               [ 1]  729 	ld	xl, a
      0002EE CDr01r56         [ 4]  730 	call	_convert_int_to_binary
                                    731 ;	main.c: 230: status_registers[5] = I2C_DR;
      0002F1 55 52 16u00u05   [ 1]  732 	mov	_status_registers+5, 0x5216
                                    733 ;	main.c: 231: }
      0002F6 5B 09            [ 2]  734 	addw	sp, #9
      0002F8 81               [ 4]  735 	ret
                                    736 ;	main.c: 234: void status_check(void){
                                    737 ;	-----------------------------------------
                                    738 ;	 function status_check
                                    739 ;	-----------------------------------------
      0002F9                        740 _status_check:
      0002F9 52 09            [ 2]  741 	sub	sp, #9
                                    742 ;	main.c: 235: char rx_binary_chars[9]={0};
      0002FB 0F 01            [ 1]  743 	clr	(0x01, sp)
      0002FD 0F 02            [ 1]  744 	clr	(0x02, sp)
      0002FF 0F 03            [ 1]  745 	clr	(0x03, sp)
      000301 0F 04            [ 1]  746 	clr	(0x04, sp)
      000303 0F 05            [ 1]  747 	clr	(0x05, sp)
      000305 0F 06            [ 1]  748 	clr	(0x06, sp)
      000307 0F 07            [ 1]  749 	clr	(0x07, sp)
      000309 0F 08            [ 1]  750 	clr	(0x08, sp)
      00030B 0F 09            [ 1]  751 	clr	(0x09, sp)
                                    752 ;	main.c: 236: uart_write("\nI2C_REGS >.<\n");
      00030D AEr00r00         [ 2]  753 	ldw	x, #(___str_0+0)
      000310 CDr00r37         [ 4]  754 	call	_uart_write
                                    755 ;	main.c: 237: convert_int_to_binary(I2C_SR1, rx_binary_chars);
      000313 96               [ 1]  756 	ldw	x, sp
      000314 5C               [ 1]  757 	incw	x
      000315 51               [ 1]  758 	exgw	x, y
      000316 C6 52 17         [ 1]  759 	ld	a, 0x5217
      000319 5F               [ 1]  760 	clrw	x
      00031A 90 89            [ 2]  761 	pushw	y
      00031C 97               [ 1]  762 	ld	xl, a
      00031D CDr01r56         [ 4]  763 	call	_convert_int_to_binary
                                    764 ;	main.c: 238: uart_write("\nSR1 -> ");
      000320 AEr00r0F         [ 2]  765 	ldw	x, #(___str_1+0)
      000323 CDr00r37         [ 4]  766 	call	_uart_write
                                    767 ;	main.c: 239: uart_write(rx_binary_chars);
      000326 96               [ 1]  768 	ldw	x, sp
      000327 5C               [ 1]  769 	incw	x
      000328 CDr00r37         [ 4]  770 	call	_uart_write
                                    771 ;	main.c: 240: uart_write(" <-\n");
      00032B AEr00r18         [ 2]  772 	ldw	x, #(___str_2+0)
      00032E CDr00r37         [ 4]  773 	call	_uart_write
                                    774 ;	main.c: 241: convert_int_to_binary(I2C_SR2, rx_binary_chars);
      000331 96               [ 1]  775 	ldw	x, sp
      000332 5C               [ 1]  776 	incw	x
      000333 51               [ 1]  777 	exgw	x, y
      000334 C6 52 18         [ 1]  778 	ld	a, 0x5218
      000337 5F               [ 1]  779 	clrw	x
      000338 90 89            [ 2]  780 	pushw	y
      00033A 97               [ 1]  781 	ld	xl, a
      00033B CDr01r56         [ 4]  782 	call	_convert_int_to_binary
                                    783 ;	main.c: 242: uart_write("SR2 -> ");
      00033E AEr00r1D         [ 2]  784 	ldw	x, #(___str_3+0)
      000341 CDr00r37         [ 4]  785 	call	_uart_write
                                    786 ;	main.c: 243: uart_write(rx_binary_chars);
      000344 96               [ 1]  787 	ldw	x, sp
      000345 5C               [ 1]  788 	incw	x
      000346 CDr00r37         [ 4]  789 	call	_uart_write
                                    790 ;	main.c: 244: uart_write(" <-\n");
      000349 AEr00r18         [ 2]  791 	ldw	x, #(___str_2+0)
      00034C CDr00r37         [ 4]  792 	call	_uart_write
                                    793 ;	main.c: 245: convert_int_to_binary(I2C_SR3, rx_binary_chars);
      00034F 96               [ 1]  794 	ldw	x, sp
      000350 5C               [ 1]  795 	incw	x
      000351 51               [ 1]  796 	exgw	x, y
      000352 C6 52 19         [ 1]  797 	ld	a, 0x5219
      000355 5F               [ 1]  798 	clrw	x
      000356 90 89            [ 2]  799 	pushw	y
      000358 97               [ 1]  800 	ld	xl, a
      000359 CDr01r56         [ 4]  801 	call	_convert_int_to_binary
                                    802 ;	main.c: 246: uart_write("SR3 -> ");
      00035C AEr00r25         [ 2]  803 	ldw	x, #(___str_4+0)
      00035F CDr00r37         [ 4]  804 	call	_uart_write
                                    805 ;	main.c: 247: uart_write(rx_binary_chars);
      000362 96               [ 1]  806 	ldw	x, sp
      000363 5C               [ 1]  807 	incw	x
      000364 CDr00r37         [ 4]  808 	call	_uart_write
                                    809 ;	main.c: 248: uart_write(" <-\n");
      000367 AEr00r18         [ 2]  810 	ldw	x, #(___str_2+0)
      00036A CDr00r37         [ 4]  811 	call	_uart_write
                                    812 ;	main.c: 249: convert_int_to_binary(I2C_CR1, rx_binary_chars);
      00036D 96               [ 1]  813 	ldw	x, sp
      00036E 5C               [ 1]  814 	incw	x
      00036F 51               [ 1]  815 	exgw	x, y
      000370 C6 52 10         [ 1]  816 	ld	a, 0x5210
      000373 5F               [ 1]  817 	clrw	x
      000374 90 89            [ 2]  818 	pushw	y
      000376 97               [ 1]  819 	ld	xl, a
      000377 CDr01r56         [ 4]  820 	call	_convert_int_to_binary
                                    821 ;	main.c: 250: uart_write("CR1 -> ");
      00037A AEr00r2D         [ 2]  822 	ldw	x, #(___str_5+0)
      00037D CDr00r37         [ 4]  823 	call	_uart_write
                                    824 ;	main.c: 251: uart_write(rx_binary_chars);
      000380 96               [ 1]  825 	ldw	x, sp
      000381 5C               [ 1]  826 	incw	x
      000382 CDr00r37         [ 4]  827 	call	_uart_write
                                    828 ;	main.c: 252: uart_write(" <-\n");
      000385 AEr00r18         [ 2]  829 	ldw	x, #(___str_2+0)
      000388 CDr00r37         [ 4]  830 	call	_uart_write
                                    831 ;	main.c: 253: convert_int_to_binary(I2C_CR2, rx_binary_chars);
      00038B 96               [ 1]  832 	ldw	x, sp
      00038C 5C               [ 1]  833 	incw	x
      00038D 51               [ 1]  834 	exgw	x, y
      00038E C6 52 11         [ 1]  835 	ld	a, 0x5211
      000391 5F               [ 1]  836 	clrw	x
      000392 90 89            [ 2]  837 	pushw	y
      000394 97               [ 1]  838 	ld	xl, a
      000395 CDr01r56         [ 4]  839 	call	_convert_int_to_binary
                                    840 ;	main.c: 254: uart_write("CR2 -> ");
      000398 AEr00r35         [ 2]  841 	ldw	x, #(___str_6+0)
      00039B CDr00r37         [ 4]  842 	call	_uart_write
                                    843 ;	main.c: 255: uart_write(rx_binary_chars);
      00039E 96               [ 1]  844 	ldw	x, sp
      00039F 5C               [ 1]  845 	incw	x
      0003A0 CDr00r37         [ 4]  846 	call	_uart_write
                                    847 ;	main.c: 256: uart_write(" <-\n");
      0003A3 AEr00r18         [ 2]  848 	ldw	x, #(___str_2+0)
      0003A6 CDr00r37         [ 4]  849 	call	_uart_write
                                    850 ;	main.c: 257: convert_int_to_binary(I2C_DR, rx_binary_chars);
      0003A9 96               [ 1]  851 	ldw	x, sp
      0003AA 5C               [ 1]  852 	incw	x
      0003AB 51               [ 1]  853 	exgw	x, y
      0003AC C6 52 16         [ 1]  854 	ld	a, 0x5216
      0003AF 5F               [ 1]  855 	clrw	x
      0003B0 90 89            [ 2]  856 	pushw	y
      0003B2 97               [ 1]  857 	ld	xl, a
      0003B3 CDr01r56         [ 4]  858 	call	_convert_int_to_binary
                                    859 ;	main.c: 258: uart_write("DR -> ");
      0003B6 AEr00r3D         [ 2]  860 	ldw	x, #(___str_7+0)
      0003B9 CDr00r37         [ 4]  861 	call	_uart_write
                                    862 ;	main.c: 259: uart_write(rx_binary_chars);
      0003BC 96               [ 1]  863 	ldw	x, sp
      0003BD 5C               [ 1]  864 	incw	x
      0003BE CDr00r37         [ 4]  865 	call	_uart_write
                                    866 ;	main.c: 260: uart_write(" <-\n");
      0003C1 AEr00r18         [ 2]  867 	ldw	x, #(___str_2+0)
      0003C4 CDr00r37         [ 4]  868 	call	_uart_write
                                    869 ;	main.c: 306: }
      0003C7 5B 09            [ 2]  870 	addw	sp, #9
      0003C9 81               [ 4]  871 	ret
                                    872 ;	main.c: 308: void uart_init(void){
                                    873 ;	-----------------------------------------
                                    874 ;	 function uart_init
                                    875 ;	-----------------------------------------
      0003CA                        876 _uart_init:
                                    877 ;	main.c: 309: CLK_CKDIVR = 0;
      0003CA 35 00 50 C6      [ 1]  878 	mov	0x50c6+0, #0x00
                                    879 ;	main.c: 312: UART1_CR2 |= UART_CR2_TEN; // Transmitter enable
      0003CE 72 16 52 35      [ 1]  880 	bset	0x5235, #3
                                    881 ;	main.c: 313: UART1_CR2 |= UART_CR2_REN; // Receiver enable
      0003D2 72 14 52 35      [ 1]  882 	bset	0x5235, #2
                                    883 ;	main.c: 314: UART1_CR3 &= ~(UART_CR3_STOP1 | UART_CR3_STOP2); // 1 stop bit
      0003D6 C6 52 36         [ 1]  884 	ld	a, 0x5236
      0003D9 A4 CF            [ 1]  885 	and	a, #0xcf
      0003DB C7 52 36         [ 1]  886 	ld	0x5236, a
                                    887 ;	main.c: 316: UART1_BRR2 = 0x03; UART1_BRR1 = 0x68; // 0x0683 coded funky way (see ref manual)
      0003DE 35 03 52 33      [ 1]  888 	mov	0x5233+0, #0x03
      0003E2 35 68 52 32      [ 1]  889 	mov	0x5232+0, #0x68
                                    890 ;	main.c: 317: }
      0003E6 81               [ 4]  891 	ret
                                    892 ;	main.c: 321: void i2c_init(void) {
                                    893 ;	-----------------------------------------
                                    894 ;	 function i2c_init
                                    895 ;	-----------------------------------------
      0003E7                        896 _i2c_init:
                                    897 ;	main.c: 327: I2C_CR1 = I2C_CR1 & ~0x01;      // PE=0, disable I2C before setup
      0003E7 72 11 52 10      [ 1]  898 	bres	0x5210, #0
                                    899 ;	main.c: 328: I2C_FREQR= 16;                  // peripheral frequence =16MHz
      0003EB 35 10 52 12      [ 1]  900 	mov	0x5212+0, #0x10
                                    901 ;	main.c: 329: I2C_CCRH = 0;                   // =0
      0003EF 35 00 52 1C      [ 1]  902 	mov	0x521c+0, #0x00
                                    903 ;	main.c: 330: I2C_CCRL = 80;                  // 100kHz for I2C
      0003F3 35 50 52 1B      [ 1]  904 	mov	0x521b+0, #0x50
                                    905 ;	main.c: 331: I2C_CCRH = I2C_CCRH & ~0x80;    // set standart mode(100кHz)
      0003F7 72 1F 52 1C      [ 1]  906 	bres	0x521c, #7
                                    907 ;	main.c: 332: I2C_OARH = I2C_OARH & ~0x80;    // 7-bit address mode
      0003FB 72 1F 52 14      [ 1]  908 	bres	0x5214, #7
                                    909 ;	main.c: 333: I2C_OARH = I2C_OARH | 0x40;     // see reference manual
      0003FF 72 1C 52 14      [ 1]  910 	bset	0x5214, #6
                                    911 ;	main.c: 334: I2C_CR1 = I2C_CR1 | 0x01;       // PE=1, enable I2C
      000403 72 10 52 10      [ 1]  912 	bset	0x5210, #0
                                    913 ;	main.c: 335: }
      000407 81               [ 4]  914 	ret
                                    915 ;	main.c: 344: void i2c_start(void) {
                                    916 ;	-----------------------------------------
                                    917 ;	 function i2c_start
                                    918 ;	-----------------------------------------
      000408                        919 _i2c_start:
                                    920 ;	main.c: 345: I2C_CR2 = I2C_CR2 | (1 << 0); // Отправляем стартовый сигнал
      000408 72 10 52 11      [ 1]  921 	bset	0x5211, #0
                                    922 ;	main.c: 346: while(!(I2C_SR1 & (1 << 0)));
      00040C                        923 00101$:
      00040C 72 01 52 17 FB   [ 2]  924 	btjf	0x5217, #0, 00101$
                                    925 ;	main.c: 348: }
      000411 81               [ 4]  926 	ret
                                    927 ;	main.c: 350: void i2c_send_address(uint8_t address) {
                                    928 ;	-----------------------------------------
                                    929 ;	 function i2c_send_address
                                    930 ;	-----------------------------------------
      000412                        931 _i2c_send_address:
                                    932 ;	main.c: 351: I2C_DR = address << 1; // Отправка адреса устройства с битом на запись
      000412 48               [ 1]  933 	sll	a
      000413 C7 52 16         [ 1]  934 	ld	0x5216, a
                                    935 ;	main.c: 352: reg_check();
      000416 CDr02rBE         [ 4]  936 	call	_reg_check
                                    937 ;	main.c: 353: while (!(I2C_SR1 & (1 << 1)) && !(I2C_SR2 & (1 << 2)));
      000419                        938 00102$:
      000419 72 03 52 17 01   [ 2]  939 	btjf	0x5217, #1, 00121$
      00041E 81               [ 4]  940 	ret
      00041F                        941 00121$:
      00041F 72 05 52 18 F5   [ 2]  942 	btjf	0x5218, #2, 00102$
                                    943 ;	main.c: 355: }
      000424 81               [ 4]  944 	ret
                                    945 ;	main.c: 357: void i2c_stop(void) {
                                    946 ;	-----------------------------------------
                                    947 ;	 function i2c_stop
                                    948 ;	-----------------------------------------
      000425                        949 _i2c_stop:
                                    950 ;	main.c: 358: I2C_CR2 = I2C_CR2 | (1 << 1);// Отправка стопового сигнала
      000425 72 12 52 11      [ 1]  951 	bset	0x5211, #1
                                    952 ;	main.c: 360: }
      000429 81               [ 4]  953 	ret
                                    954 ;	main.c: 361: void i2c_write(void){
                                    955 ;	-----------------------------------------
                                    956 ;	 function i2c_write
                                    957 ;	-----------------------------------------
      00042A                        958 _i2c_write:
      00042A 52 02            [ 2]  959 	sub	sp, #2
                                    960 ;	main.c: 363: reg_check();
      00042C CDr02rBE         [ 4]  961 	call	_reg_check
                                    962 ;	main.c: 364: I2C_DR = d_addr;
      00042F 55u02u03 52 16   [ 1]  963 	mov	0x5216+0, _d_addr+0
                                    964 ;	main.c: 365: reg_check();
      000434 CDr02rBE         [ 4]  965 	call	_reg_check
                                    966 ;	main.c: 366: while (!(I2C_SR1 & (1 << 7)) && (I2C_SR2 & (1 << 2)) && !(I2C_SR1 & (1 << 2))); // Отправка адреса регистра
      000437                        967 00103$:
      000437 C6 52 17         [ 1]  968 	ld	a, 0x5217
      00043A 2B 0A            [ 1]  969 	jrmi	00124$
      00043C 72 05 52 18 05   [ 2]  970 	btjf	0x5218, #2, 00124$
      000441 72 05 52 17 F1   [ 2]  971 	btjf	0x5217, #2, 00103$
                                    972 ;	main.c: 367: for(int i = 0;i < d_size;i++)
      000446                        973 00124$:
      000446 5F               [ 1]  974 	clrw	x
      000447                        975 00113$:
      000447 C6u02u05         [ 1]  976 	ld	a, _d_size+0
      00044A 6B 02            [ 1]  977 	ld	(0x02, sp), a
      00044C 0F 01            [ 1]  978 	clr	(0x01, sp)
      00044E 13 01            [ 2]  979 	cpw	x, (0x01, sp)
      000450 2E 25            [ 1]  980 	jrsge	00115$
                                    981 ;	main.c: 369: I2C_DR = data_buf[i];
      000452 90 93            [ 1]  982 	ldw	y, x
      000454 90 D6u02u07      [ 1]  983 	ld	a, (_data_buf+0, y)
      000458 C7 52 16         [ 1]  984 	ld	0x5216, a
                                    985 ;	main.c: 370: reg_check();
      00045B 89               [ 2]  986 	pushw	x
      00045C CDr02rBE         [ 4]  987 	call	_reg_check
      00045F 85               [ 2]  988 	popw	x
                                    989 ;	main.c: 371: while (!(I2C_SR1 & (1 << 7)) && (I2C_SR2 & (1 << 2)) && !(I2C_SR1 & (1 << 2)));
      000460                        990 00108$:
      000460 C6 52 17         [ 1]  991 	ld	a, 0x5217
      000463 2B 0A            [ 1]  992 	jrmi	00110$
      000465 72 05 52 18 05   [ 2]  993 	btjf	0x5218, #2, 00110$
      00046A 72 05 52 17 F1   [ 2]  994 	btjf	0x5217, #2, 00108$
      00046F                        995 00110$:
                                    996 ;	main.c: 372: reg_check();
      00046F 89               [ 2]  997 	pushw	x
      000470 CDr02rBE         [ 4]  998 	call	_reg_check
      000473 85               [ 2]  999 	popw	x
                                   1000 ;	main.c: 367: for(int i = 0;i < d_size;i++)
      000474 5C               [ 1] 1001 	incw	x
      000475 20 D0            [ 2] 1002 	jra	00113$
      000477                       1003 00115$:
                                   1004 ;	main.c: 374: }
      000477 5B 02            [ 2] 1005 	addw	sp, #2
      000479 81               [ 4] 1006 	ret
                                   1007 ;	main.c: 376: void i2c_read(void){
                                   1008 ;	-----------------------------------------
                                   1009 ;	 function i2c_read
                                   1010 ;	-----------------------------------------
      00047A                       1011 _i2c_read:
      00047A 52 02            [ 2] 1012 	sub	sp, #2
                                   1013 ;	main.c: 377: I2C_CR2 = I2C_CR2 | (1 << 2);
      00047C 72 14 52 11      [ 1] 1014 	bset	0x5211, #2
                                   1015 ;	main.c: 378: I2C_DR = 0;
      000480 35 00 52 16      [ 1] 1016 	mov	0x5216+0, #0x00
                                   1017 ;	main.c: 379: reg_check();
      000484 CDr02rBE         [ 4] 1018 	call	_reg_check
                                   1019 ;	main.c: 380: I2C_DR = d_addr;
      000487 55u02u03 52 16   [ 1] 1020 	mov	0x5216+0, _d_addr+0
                                   1021 ;	main.c: 381: reg_check();
      00048C CDr02rBE         [ 4] 1022 	call	_reg_check
                                   1023 ;	main.c: 382: while (!(I2C_SR1 & (1 << 7)) && (I2C_SR2 & (1 << 2)) && !(I2C_SR1 & (1 << 2))); // Отправка адреса регистра
      00048F                       1024 00103$:
      00048F C6 52 17         [ 1] 1025 	ld	a, 0x5217
      000492 2B 0A            [ 1] 1026 	jrmi	00105$
      000494 72 05 52 18 05   [ 2] 1027 	btjf	0x5218, #2, 00105$
      000499 72 05 52 17 F1   [ 2] 1028 	btjf	0x5217, #2, 00103$
      00049E                       1029 00105$:
                                   1030 ;	main.c: 385: i2c_start();
      00049E CDr04r08         [ 4] 1031 	call	_i2c_start
                                   1032 ;	main.c: 386: I2C_DR = (current_dev << 1) | (1 << 0);
      0004A1 C6u03u07         [ 1] 1033 	ld	a, _current_dev+0
      0004A4 48               [ 1] 1034 	sll	a
      0004A5 AA 01            [ 1] 1035 	or	a, #0x01
      0004A7 C7 52 16         [ 1] 1036 	ld	0x5216, a
                                   1037 ;	main.c: 387: reg_check();
      0004AA CDr02rBE         [ 4] 1038 	call	_reg_check
                                   1039 ;	main.c: 388: while (!(I2C_SR1 & (1 << 1)) && !(I2C_SR1 & (1 << 2)) && !(I2C_SR1 & (1 << 6)));
      0004AD                       1040 00108$:
      0004AD 72 02 52 17 0A   [ 2] 1041 	btjt	0x5217, #1, 00110$
      0004B2 72 04 52 17 05   [ 2] 1042 	btjt	0x5217, #2, 00110$
      0004B7 72 0D 52 17 F1   [ 2] 1043 	btjf	0x5217, #6, 00108$
      0004BC                       1044 00110$:
                                   1045 ;	main.c: 389: reg_check();
      0004BC CDr02rBE         [ 4] 1046 	call	_reg_check
                                   1047 ;	main.c: 390: for(int i = 0;i < d_size;i++)
      0004BF 5F               [ 1] 1048 	clrw	x
      0004C0                       1049 00116$:
      0004C0 C6u02u05         [ 1] 1050 	ld	a, _d_size+0
      0004C3 6B 02            [ 1] 1051 	ld	(0x02, sp), a
      0004C5 0F 01            [ 1] 1052 	clr	(0x01, sp)
      0004C7 13 01            [ 2] 1053 	cpw	x, (0x01, sp)
      0004C9 2E 13            [ 1] 1054 	jrsge	00114$
                                   1055 ;	main.c: 392: data_buf[i] = I2C_DR;
      0004CB 90 93            [ 1] 1056 	ldw	y, x
      0004CD 72 A9r02r07      [ 2] 1057 	addw	y, #(_data_buf+0)
      0004D1 C6 52 16         [ 1] 1058 	ld	a, 0x5216
      0004D4 90 F7            [ 1] 1059 	ld	(y), a
                                   1060 ;	main.c: 393: while (!(I2C_SR1 & (1 << 6)));
      0004D6                       1061 00111$:
      0004D6 72 0D 52 17 FB   [ 2] 1062 	btjf	0x5217, #6, 00111$
                                   1063 ;	main.c: 390: for(int i = 0;i < d_size;i++)
      0004DB 5C               [ 1] 1064 	incw	x
      0004DC 20 E2            [ 2] 1065 	jra	00116$
      0004DE                       1066 00114$:
                                   1067 ;	main.c: 395: reg_check();
      0004DE CDr02rBE         [ 4] 1068 	call	_reg_check
                                   1069 ;	main.c: 396: I2C_CR2 = I2C_CR2 & ~(1 << 2);
      0004E1 C6 52 11         [ 1] 1070 	ld	a, 0x5211
      0004E4 A4 FB            [ 1] 1071 	and	a, #0xfb
      0004E6 C7 52 11         [ 1] 1072 	ld	0x5211, a
                                   1073 ;	main.c: 397: reg_check();
      0004E9 5B 02            [ 2] 1074 	addw	sp, #2
                                   1075 ;	main.c: 398: }
      0004EB CCr02rBE         [ 2] 1076 	jp	_reg_check
                                   1077 ;	main.c: 399: void i2c_scan(void) {
                                   1078 ;	-----------------------------------------
                                   1079 ;	 function i2c_scan
                                   1080 ;	-----------------------------------------
      0004EE                       1081 _i2c_scan:
      0004EE 52 02            [ 2] 1082 	sub	sp, #2
                                   1083 ;	main.c: 400: for (uint8_t addr = current_dev; addr < 127; addr++) {
      0004F0 C6u03u07         [ 1] 1084 	ld	a, _current_dev+0
      0004F3 6B 01            [ 1] 1085 	ld	(0x01, sp), a
      0004F5 6B 02            [ 1] 1086 	ld	(0x02, sp), a
      0004F7                       1087 00105$:
      0004F7 7B 02            [ 1] 1088 	ld	a, (0x02, sp)
      0004F9 A1 7F            [ 1] 1089 	cp	a, #0x7f
      0004FB 24 26            [ 1] 1090 	jrnc	00107$
                                   1091 ;	main.c: 401: i2c_start();
      0004FD CDr04r08         [ 4] 1092 	call	_i2c_start
                                   1093 ;	main.c: 402: i2c_send_address(addr);
      000500 7B 02            [ 1] 1094 	ld	a, (0x02, sp)
      000502 CDr04r12         [ 4] 1095 	call	_i2c_send_address
                                   1096 ;	main.c: 403: if (!(I2C_SR2 & (1 << 2))) { // Проверка на ACK
      000505 72 04 52 18 0A   [ 2] 1097 	btjt	0x5218, #2, 00102$
                                   1098 ;	main.c: 405: current_dev = addr;
      00050A 7B 01            [ 1] 1099 	ld	a, (0x01, sp)
      00050C C7u03u07         [ 1] 1100 	ld	_current_dev+0, a
                                   1101 ;	main.c: 406: i2c_stop();
      00050F 5B 02            [ 2] 1102 	addw	sp, #2
                                   1103 ;	main.c: 407: break;
      000511 CCr04r25         [ 2] 1104 	jp	_i2c_stop
      000514                       1105 00102$:
                                   1106 ;	main.c: 409: i2c_stop();
      000514 CDr04r25         [ 4] 1107 	call	_i2c_stop
                                   1108 ;	main.c: 410: I2C_SR2 = I2C_SR2 & ~(1 << 2); // Очистка флага ошибки
      000517 72 15 52 18      [ 1] 1109 	bres	0x5218, #2
                                   1110 ;	main.c: 400: for (uint8_t addr = current_dev; addr < 127; addr++) {
      00051B 0C 02            [ 1] 1111 	inc	(0x02, sp)
      00051D 7B 02            [ 1] 1112 	ld	a, (0x02, sp)
      00051F 6B 01            [ 1] 1113 	ld	(0x01, sp), a
      000521 20 D4            [ 2] 1114 	jra	00105$
      000523                       1115 00107$:
                                   1116 ;	main.c: 412: }
      000523 5B 02            [ 2] 1117 	addw	sp, #2
      000525 81               [ 4] 1118 	ret
                                   1119 ;	main.c: 422: void cm_SM(void)
                                   1120 ;	-----------------------------------------
                                   1121 ;	 function cm_SM
                                   1122 ;	-----------------------------------------
      000526                       1123 _cm_SM:
      000526 52 04            [ 2] 1124 	sub	sp, #4
                                   1125 ;	main.c: 424: char cur_dev[4]={0};
      000528 0F 01            [ 1] 1126 	clr	(0x01, sp)
      00052A 0F 02            [ 1] 1127 	clr	(0x02, sp)
      00052C 0F 03            [ 1] 1128 	clr	(0x03, sp)
      00052E 0F 04            [ 1] 1129 	clr	(0x04, sp)
                                   1130 ;	main.c: 425: convert_int_to_chars(current_dev, cur_dev);
      000530 96               [ 1] 1131 	ldw	x, sp
      000531 5C               [ 1] 1132 	incw	x
      000532 C6u03u07         [ 1] 1133 	ld	a, _current_dev+0
      000535 CDr00rAA         [ 4] 1134 	call	_convert_int_to_chars
                                   1135 ;	main.c: 426: uart_write("SM ");
      000538 AEr00r44         [ 2] 1136 	ldw	x, #(___str_8+0)
      00053B CDr00r37         [ 4] 1137 	call	_uart_write
                                   1138 ;	main.c: 427: uart_write(cur_dev);
      00053E 96               [ 1] 1139 	ldw	x, sp
      00053F 5C               [ 1] 1140 	incw	x
      000540 CDr00r37         [ 4] 1141 	call	_uart_write
                                   1142 ;	main.c: 428: uart_write("\r\n");
      000543 AEr00r48         [ 2] 1143 	ldw	x, #(___str_9+0)
      000546 CDr00r37         [ 4] 1144 	call	_uart_write
                                   1145 ;	main.c: 429: }
      000549 5B 04            [ 2] 1146 	addw	sp, #4
      00054B 81               [ 4] 1147 	ret
                                   1148 ;	main.c: 430: void cm_SN(void)
                                   1149 ;	-----------------------------------------
                                   1150 ;	 function cm_SN
                                   1151 ;	-----------------------------------------
      00054C                       1152 _cm_SN:
                                   1153 ;	main.c: 432: i2c_scan();
      00054C CDr04rEE         [ 4] 1154 	call	_i2c_scan
                                   1155 ;	main.c: 433: cm_SM();
                                   1156 ;	main.c: 434: }
      00054F CCr05r26         [ 2] 1157 	jp	_cm_SM
                                   1158 ;	main.c: 435: void cm_RM(void)
                                   1159 ;	-----------------------------------------
                                   1160 ;	 function cm_RM
                                   1161 ;	-----------------------------------------
      000552                       1162 _cm_RM:
                                   1163 ;	main.c: 437: current_dev = 0;
      000552 72 5Fu03u07      [ 1] 1164 	clr	_current_dev+0
                                   1165 ;	main.c: 438: uart_write("RM\n");
      000556 AEr00r4B         [ 2] 1166 	ldw	x, #(___str_10+0)
                                   1167 ;	main.c: 439: }
      000559 CCr00r37         [ 2] 1168 	jp	_uart_write
                                   1169 ;	main.c: 441: void cm_DB(void)
                                   1170 ;	-----------------------------------------
                                   1171 ;	 function cm_DB
                                   1172 ;	-----------------------------------------
      00055C                       1173 _cm_DB:
                                   1174 ;	main.c: 443: status_check();
                                   1175 ;	main.c: 444: }
      00055C CCr02rF9         [ 2] 1176 	jp	_status_check
                                   1177 ;	main.c: 446: void cm_ST(void)
                                   1178 ;	-----------------------------------------
                                   1179 ;	 function cm_ST
                                   1180 ;	-----------------------------------------
      00055F                       1181 _cm_ST:
                                   1182 ;	main.c: 448: get_addr_from_buff();
      00055F CDr01r8E         [ 4] 1183 	call	_get_addr_from_buff
                                   1184 ;	main.c: 449: current_dev = d_addr;
      000562 55u02u03u03u07   [ 1] 1185 	mov	_current_dev+0, _d_addr+0
                                   1186 ;	main.c: 450: uart_write("ST\n");
      000567 AEr00r4F         [ 2] 1187 	ldw	x, #(___str_11+0)
                                   1188 ;	main.c: 451: }
      00056A CCr00r37         [ 2] 1189 	jp	_uart_write
                                   1190 ;	main.c: 452: void cm_SR(void)
                                   1191 ;	-----------------------------------------
                                   1192 ;	 function cm_SR
                                   1193 ;	-----------------------------------------
      00056D                       1194 _cm_SR:
      00056D 52 04            [ 2] 1195 	sub	sp, #4
                                   1196 ;	main.c: 454: i2c_start();
      00056F CDr04r08         [ 4] 1197 	call	_i2c_start
                                   1198 ;	main.c: 455: i2c_send_address(current_dev);
      000572 C6u03u07         [ 1] 1199 	ld	a, _current_dev+0
      000575 CDr04r12         [ 4] 1200 	call	_i2c_send_address
                                   1201 ;	main.c: 456: i2c_read();
      000578 CDr04r7A         [ 4] 1202 	call	_i2c_read
                                   1203 ;	main.c: 457: i2c_stop();
      00057B CDr04r25         [ 4] 1204 	call	_i2c_stop
                                   1205 ;	main.c: 458: uart_write("SR ");
      00057E AEr00r53         [ 2] 1206 	ldw	x, #(___str_12+0)
      000581 CDr00r37         [ 4] 1207 	call	_uart_write
                                   1208 ;	main.c: 459: convert_int_to_chars(d_addr, a);
      000584 AEr02r00         [ 2] 1209 	ldw	x, #(_a+0)
      000587 C6u02u03         [ 1] 1210 	ld	a, _d_addr+0
      00058A CDr00rAA         [ 4] 1211 	call	_convert_int_to_chars
                                   1212 ;	main.c: 460: uart_write(a);
      00058D AEr02r00         [ 2] 1213 	ldw	x, #(_a+0)
      000590 CDr00r37         [ 4] 1214 	call	_uart_write
                                   1215 ;	main.c: 461: uart_write(" ");
      000593 AEr00r57         [ 2] 1216 	ldw	x, #(___str_13+0)
      000596 CDr00r37         [ 4] 1217 	call	_uart_write
                                   1218 ;	main.c: 462: convert_int_to_chars(d_size, a);
      000599 AEr02r00         [ 2] 1219 	ldw	x, #(_a+0)
      00059C C6u02u05         [ 1] 1220 	ld	a, _d_size+0
      00059F CDr00rAA         [ 4] 1221 	call	_convert_int_to_chars
                                   1222 ;	main.c: 463: uart_write(a);
      0005A2 AEr02r00         [ 2] 1223 	ldw	x, #(_a+0)
      0005A5 CDr00r37         [ 4] 1224 	call	_uart_write
                                   1225 ;	main.c: 464: for(int i = 0;i < d_size;i++)
      0005A8 5F               [ 1] 1226 	clrw	x
      0005A9 1F 03            [ 2] 1227 	ldw	(0x03, sp), x
      0005AB                       1228 00103$:
      0005AB C6u02u05         [ 1] 1229 	ld	a, _d_size+0
      0005AE 6B 02            [ 1] 1230 	ld	(0x02, sp), a
      0005B0 0F 01            [ 1] 1231 	clr	(0x01, sp)
      0005B2 1E 03            [ 2] 1232 	ldw	x, (0x03, sp)
      0005B4 13 01            [ 2] 1233 	cpw	x, (0x01, sp)
      0005B6 2E 1E            [ 1] 1234 	jrsge	00101$
                                   1235 ;	main.c: 466: uart_write(" ");
      0005B8 AEr00r57         [ 2] 1236 	ldw	x, #(___str_13+0)
      0005BB CDr00r37         [ 4] 1237 	call	_uart_write
                                   1238 ;	main.c: 467: convert_int_to_chars(data_buf[i], a);
      0005BE 1E 03            [ 2] 1239 	ldw	x, (0x03, sp)
      0005C0 D6u02u07         [ 1] 1240 	ld	a, (_data_buf+0, x)
      0005C3 AEr02r00         [ 2] 1241 	ldw	x, #(_a+0)
      0005C6 CDr00rAA         [ 4] 1242 	call	_convert_int_to_chars
                                   1243 ;	main.c: 468: uart_write(a);
      0005C9 AEr02r00         [ 2] 1244 	ldw	x, #(_a+0)
      0005CC CDr00r37         [ 4] 1245 	call	_uart_write
                                   1246 ;	main.c: 464: for(int i = 0;i < d_size;i++)
      0005CF 1E 03            [ 2] 1247 	ldw	x, (0x03, sp)
      0005D1 5C               [ 1] 1248 	incw	x
      0005D2 1F 03            [ 2] 1249 	ldw	(0x03, sp), x
      0005D4 20 D5            [ 2] 1250 	jra	00103$
      0005D6                       1251 00101$:
                                   1252 ;	main.c: 471: uart_write("\r\n");
      0005D6 AEr00r48         [ 2] 1253 	ldw	x, #(___str_9+0)
      0005D9 5B 04            [ 2] 1254 	addw	sp, #4
                                   1255 ;	main.c: 472: }
      0005DB CCr00r37         [ 2] 1256 	jp	_uart_write
                                   1257 ;	main.c: 473: void cm_SW(void)
                                   1258 ;	-----------------------------------------
                                   1259 ;	 function cm_SW
                                   1260 ;	-----------------------------------------
      0005DE                       1261 _cm_SW:
      0005DE 52 04            [ 2] 1262 	sub	sp, #4
                                   1263 ;	main.c: 475: i2c_start();
      0005E0 CDr04r08         [ 4] 1264 	call	_i2c_start
                                   1265 ;	main.c: 476: i2c_send_address(current_dev);
      0005E3 C6u03u07         [ 1] 1266 	ld	a, _current_dev+0
      0005E6 CDr04r12         [ 4] 1267 	call	_i2c_send_address
                                   1268 ;	main.c: 477: i2c_write();
      0005E9 CDr04r2A         [ 4] 1269 	call	_i2c_write
                                   1270 ;	main.c: 478: i2c_stop();
      0005EC CDr04r25         [ 4] 1271 	call	_i2c_stop
                                   1272 ;	main.c: 479: uart_write("SW ");
      0005EF AEr00r59         [ 2] 1273 	ldw	x, #(___str_14+0)
      0005F2 CDr00r37         [ 4] 1274 	call	_uart_write
                                   1275 ;	main.c: 480: convert_int_to_chars(d_addr, a);
      0005F5 AEr02r00         [ 2] 1276 	ldw	x, #(_a+0)
      0005F8 C6u02u03         [ 1] 1277 	ld	a, _d_addr+0
      0005FB CDr00rAA         [ 4] 1278 	call	_convert_int_to_chars
                                   1279 ;	main.c: 481: uart_write(a);
      0005FE AEr02r00         [ 2] 1280 	ldw	x, #(_a+0)
      000601 CDr00r37         [ 4] 1281 	call	_uart_write
                                   1282 ;	main.c: 482: uart_write(" ");
      000604 AEr00r57         [ 2] 1283 	ldw	x, #(___str_13+0)
      000607 CDr00r37         [ 4] 1284 	call	_uart_write
                                   1285 ;	main.c: 483: convert_int_to_chars(d_size, a);
      00060A AEr02r00         [ 2] 1286 	ldw	x, #(_a+0)
      00060D C6u02u05         [ 1] 1287 	ld	a, _d_size+0
      000610 CDr00rAA         [ 4] 1288 	call	_convert_int_to_chars
                                   1289 ;	main.c: 484: uart_write(a);
      000613 AEr02r00         [ 2] 1290 	ldw	x, #(_a+0)
      000616 CDr00r37         [ 4] 1291 	call	_uart_write
                                   1292 ;	main.c: 485: for(int i = 0;i < d_size;i++)
      000619 5F               [ 1] 1293 	clrw	x
      00061A 1F 03            [ 2] 1294 	ldw	(0x03, sp), x
      00061C                       1295 00103$:
      00061C C6u02u05         [ 1] 1296 	ld	a, _d_size+0
      00061F 6B 02            [ 1] 1297 	ld	(0x02, sp), a
      000621 0F 01            [ 1] 1298 	clr	(0x01, sp)
      000623 1E 03            [ 2] 1299 	ldw	x, (0x03, sp)
      000625 13 01            [ 2] 1300 	cpw	x, (0x01, sp)
      000627 2E 1E            [ 1] 1301 	jrsge	00101$
                                   1302 ;	main.c: 487: uart_write(" ");
      000629 AEr00r57         [ 2] 1303 	ldw	x, #(___str_13+0)
      00062C CDr00r37         [ 4] 1304 	call	_uart_write
                                   1305 ;	main.c: 488: convert_int_to_chars(data_buf[i], a);
      00062F 1E 03            [ 2] 1306 	ldw	x, (0x03, sp)
      000631 D6u02u07         [ 1] 1307 	ld	a, (_data_buf+0, x)
      000634 AEr02r00         [ 2] 1308 	ldw	x, #(_a+0)
      000637 CDr00rAA         [ 4] 1309 	call	_convert_int_to_chars
                                   1310 ;	main.c: 489: uart_write(a);
      00063A AEr02r00         [ 2] 1311 	ldw	x, #(_a+0)
      00063D CDr00r37         [ 4] 1312 	call	_uart_write
                                   1313 ;	main.c: 485: for(int i = 0;i < d_size;i++)
      000640 1E 03            [ 2] 1314 	ldw	x, (0x03, sp)
      000642 5C               [ 1] 1315 	incw	x
      000643 1F 03            [ 2] 1316 	ldw	(0x03, sp), x
      000645 20 D5            [ 2] 1317 	jra	00103$
      000647                       1318 00101$:
                                   1319 ;	main.c: 492: uart_write("\r\n");
      000647 AEr00r48         [ 2] 1320 	ldw	x, #(___str_9+0)
      00064A 5B 04            [ 2] 1321 	addw	sp, #4
                                   1322 ;	main.c: 493: }
      00064C CCr00r37         [ 2] 1323 	jp	_uart_write
                                   1324 ;	main.c: 501: int data_handler(void)
                                   1325 ;	-----------------------------------------
                                   1326 ;	 function data_handler
                                   1327 ;	-----------------------------------------
      00064F                       1328 _data_handler:
                                   1329 ;	main.c: 503: p_size = 0;
      00064F 72 5Fu02u04      [ 1] 1330 	clr	_p_size+0
                                   1331 ;	main.c: 504: p_bytes = 0;
      000653 72 5Fu02u06      [ 1] 1332 	clr	_p_bytes+0
                                   1333 ;	main.c: 505: d_addr = 0;
      000657 72 5Fu02u03      [ 1] 1334 	clr	_d_addr+0
                                   1335 ;	main.c: 506: d_size = 0;
      00065B 72 5Fu02u05      [ 1] 1336 	clr	_d_size+0
                                   1337 ;	main.c: 507: memset(a, 0, sizeof(a));
      00065F 4B 03            [ 1] 1338 	push	#0x03
      000661 4B 00            [ 1] 1339 	push	#0x00
      000663 5F               [ 1] 1340 	clrw	x
      000664 89               [ 2] 1341 	pushw	x
      000665 AEr02r00         [ 2] 1342 	ldw	x, #(_a+0)
      000668 CDr00r00         [ 4] 1343 	call	_memset
                                   1344 ;	main.c: 508: memset(data_buf, 0, sizeof(data_buf));
      00066B 4B 00            [ 1] 1345 	push	#0x00
      00066D 4B 01            [ 1] 1346 	push	#0x01
      00066F 5F               [ 1] 1347 	clrw	x
      000670 89               [ 2] 1348 	pushw	x
      000671 AEr02r07         [ 2] 1349 	ldw	x, #(_data_buf+0)
      000674 CDr00r00         [ 4] 1350 	call	_memset
                                   1351 ;	main.c: 509: if(memcmp(&buffer[0],"SM",2) == 0)
      000677 4B 02            [ 1] 1352 	push	#0x02
      000679 4B 00            [ 1] 1353 	push	#0x00
      00067B 4Br5D            [ 1] 1354 	push	#<(___str_15+0)
      00067D 4Bs00            [ 1] 1355 	push	#((___str_15+0) >> 8)
      00067F AEr01r00         [ 2] 1356 	ldw	x, #(_buffer+0)
      000682 CDr00r00         [ 4] 1357 	call	_memcmp
                                   1358 ;	main.c: 510: return 1;
      000685 5D               [ 2] 1359 	tnzw	x
      000686 26 02            [ 1] 1360 	jrne	00102$
      000688 5C               [ 1] 1361 	incw	x
      000689 81               [ 4] 1362 	ret
      00068A                       1363 00102$:
                                   1364 ;	main.c: 511: if(memcmp(&buffer[0],"SN",2) == 0)
      00068A 4B 02            [ 1] 1365 	push	#0x02
      00068C 4B 00            [ 1] 1366 	push	#0x00
      00068E 4Br60            [ 1] 1367 	push	#<(___str_16+0)
      000690 4Bs00            [ 1] 1368 	push	#((___str_16+0) >> 8)
      000692 AEr01r00         [ 2] 1369 	ldw	x, #(_buffer+0)
      000695 CDr00r00         [ 4] 1370 	call	_memcmp
      000698 5D               [ 2] 1371 	tnzw	x
      000699 26 04            [ 1] 1372 	jrne	00104$
                                   1373 ;	main.c: 512: return 2;
      00069B AE 00 02         [ 2] 1374 	ldw	x, #0x0002
      00069E 81               [ 4] 1375 	ret
      00069F                       1376 00104$:
                                   1377 ;	main.c: 513: if(memcmp(&buffer[0],"ST",2) == 0)
      00069F 4B 02            [ 1] 1378 	push	#0x02
      0006A1 4B 00            [ 1] 1379 	push	#0x00
      0006A3 4Br63            [ 1] 1380 	push	#<(___str_17+0)
      0006A5 4Bs00            [ 1] 1381 	push	#((___str_17+0) >> 8)
      0006A7 AEr01r00         [ 2] 1382 	ldw	x, #(_buffer+0)
      0006AA CDr00r00         [ 4] 1383 	call	_memcmp
      0006AD 5D               [ 2] 1384 	tnzw	x
      0006AE 26 04            [ 1] 1385 	jrne	00106$
                                   1386 ;	main.c: 514: return 5;
      0006B0 AE 00 05         [ 2] 1387 	ldw	x, #0x0005
      0006B3 81               [ 4] 1388 	ret
      0006B4                       1389 00106$:
                                   1390 ;	main.c: 515: if(memcmp(&buffer[0],"RM",2) == 0)
      0006B4 4B 02            [ 1] 1391 	push	#0x02
      0006B6 4B 00            [ 1] 1392 	push	#0x00
      0006B8 4Br66            [ 1] 1393 	push	#<(___str_18+0)
      0006BA 4Bs00            [ 1] 1394 	push	#((___str_18+0) >> 8)
      0006BC AEr01r00         [ 2] 1395 	ldw	x, #(_buffer+0)
      0006BF CDr00r00         [ 4] 1396 	call	_memcmp
      0006C2 5D               [ 2] 1397 	tnzw	x
      0006C3 26 04            [ 1] 1398 	jrne	00108$
                                   1399 ;	main.c: 516: return 6;
      0006C5 AE 00 06         [ 2] 1400 	ldw	x, #0x0006
      0006C8 81               [ 4] 1401 	ret
      0006C9                       1402 00108$:
                                   1403 ;	main.c: 517: if(memcmp(&buffer[0],"DB",2) == 0)
      0006C9 4B 02            [ 1] 1404 	push	#0x02
      0006CB 4B 00            [ 1] 1405 	push	#0x00
      0006CD 4Br69            [ 1] 1406 	push	#<(___str_19+0)
      0006CF 4Bs00            [ 1] 1407 	push	#((___str_19+0) >> 8)
      0006D1 AEr01r00         [ 2] 1408 	ldw	x, #(_buffer+0)
      0006D4 CDr00r00         [ 4] 1409 	call	_memcmp
      0006D7 5D               [ 2] 1410 	tnzw	x
      0006D8 26 04            [ 1] 1411 	jrne	00110$
                                   1412 ;	main.c: 518: return 7;
      0006DA AE 00 07         [ 2] 1413 	ldw	x, #0x0007
      0006DD 81               [ 4] 1414 	ret
      0006DE                       1415 00110$:
                                   1416 ;	main.c: 520: get_addr_from_buff();
      0006DE CDr01r8E         [ 4] 1417 	call	_get_addr_from_buff
                                   1418 ;	main.c: 521: get_size_from_buff();
      0006E1 CDr01rD3         [ 4] 1419 	call	_get_size_from_buff
                                   1420 ;	main.c: 523: if(memcmp(&buffer[0],"SR",2) == 0)
      0006E4 4B 02            [ 1] 1421 	push	#0x02
      0006E6 4B 00            [ 1] 1422 	push	#0x00
      0006E8 4Br6C            [ 1] 1423 	push	#<(___str_20+0)
      0006EA 4Bs00            [ 1] 1424 	push	#((___str_20+0) >> 8)
      0006EC AEr01r00         [ 2] 1425 	ldw	x, #(_buffer+0)
      0006EF CDr00r00         [ 4] 1426 	call	_memcmp
      0006F2 5D               [ 2] 1427 	tnzw	x
      0006F3 26 04            [ 1] 1428 	jrne	00112$
                                   1429 ;	main.c: 524: return 3;
      0006F5 AE 00 03         [ 2] 1430 	ldw	x, #0x0003
      0006F8 81               [ 4] 1431 	ret
      0006F9                       1432 00112$:
                                   1433 ;	main.c: 526: char_buffer_to_int();
      0006F9 CDr02r2D         [ 4] 1434 	call	_char_buffer_to_int
                                   1435 ;	main.c: 528: if(memcmp(&buffer[0],"SW",2) == 0)
      0006FC 4B 02            [ 1] 1436 	push	#0x02
      0006FE 4B 00            [ 1] 1437 	push	#0x00
      000700 4Br6F            [ 1] 1438 	push	#<(___str_21+0)
      000702 4Bs00            [ 1] 1439 	push	#((___str_21+0) >> 8)
      000704 AEr01r00         [ 2] 1440 	ldw	x, #(_buffer+0)
      000707 CDr00r00         [ 4] 1441 	call	_memcmp
      00070A 5D               [ 2] 1442 	tnzw	x
      00070B 26 04            [ 1] 1443 	jrne	00114$
                                   1444 ;	main.c: 529: return 4;
      00070D AE 00 04         [ 2] 1445 	ldw	x, #0x0004
      000710 81               [ 4] 1446 	ret
      000711                       1447 00114$:
                                   1448 ;	main.c: 530: return 0;
      000711 5F               [ 1] 1449 	clrw	x
                                   1450 ;	main.c: 532: }
      000712 81               [ 4] 1451 	ret
                                   1452 ;	main.c: 534: void command_switcher(void)
                                   1453 ;	-----------------------------------------
                                   1454 ;	 function command_switcher
                                   1455 ;	-----------------------------------------
      000713                       1456 _command_switcher:
      000713 52 04            [ 2] 1457 	sub	sp, #4
                                   1458 ;	main.c: 536: char ar[4]={0};
      000715 0F 01            [ 1] 1459 	clr	(0x01, sp)
      000717 0F 02            [ 1] 1460 	clr	(0x02, sp)
      000719 0F 03            [ 1] 1461 	clr	(0x03, sp)
      00071B 0F 04            [ 1] 1462 	clr	(0x04, sp)
                                   1463 ;	main.c: 538: switch(data_handler())
      00071D CDr06r4F         [ 4] 1464 	call	_data_handler
      000720 5D               [ 2] 1465 	tnzw	x
      000721 2B 3B            [ 1] 1466 	jrmi	00109$
      000723 A3 00 07         [ 2] 1467 	cpw	x, #0x0007
      000726 2C 36            [ 1] 1468 	jrsgt	00109$
      000728 58               [ 2] 1469 	sllw	x
      000729 DEu07u2D         [ 2] 1470 	ldw	x, (#00127$, x)
      00072C FC               [ 2] 1471 	jp	(x)
      00072D                       1472 00127$:
      00072Dr07r5E                 1473 	.dw	#00109$
      00072Fr07r3D                 1474 	.dw	#00101$
      000731r07r42                 1475 	.dw	#00102$
      000733r07r47                 1476 	.dw	#00103$
      000735r07r4C                 1477 	.dw	#00104$
      000737r07r51                 1478 	.dw	#00105$
      000739r07r56                 1479 	.dw	#00106$
      00073Br07r5B                 1480 	.dw	#00107$
                                   1481 ;	main.c: 540: case 1:
      00073D                       1482 00101$:
                                   1483 ;	main.c: 541: cm_SM();
      00073D CDr05r26         [ 4] 1484 	call	_cm_SM
                                   1485 ;	main.c: 542: break;
      000740 20 1C            [ 2] 1486 	jra	00109$
                                   1487 ;	main.c: 543: case 2:
      000742                       1488 00102$:
                                   1489 ;	main.c: 544: cm_SN();
      000742 CDr05r4C         [ 4] 1490 	call	_cm_SN
                                   1491 ;	main.c: 545: break;
      000745 20 17            [ 2] 1492 	jra	00109$
                                   1493 ;	main.c: 546: case 3:
      000747                       1494 00103$:
                                   1495 ;	main.c: 547: cm_SR();
      000747 CDr05r6D         [ 4] 1496 	call	_cm_SR
                                   1497 ;	main.c: 548: break;
      00074A 20 12            [ 2] 1498 	jra	00109$
                                   1499 ;	main.c: 549: case 4:
      00074C                       1500 00104$:
                                   1501 ;	main.c: 550: cm_SW();
      00074C CDr05rDE         [ 4] 1502 	call	_cm_SW
                                   1503 ;	main.c: 551: break;
      00074F 20 0D            [ 2] 1504 	jra	00109$
                                   1505 ;	main.c: 552: case 5:
      000751                       1506 00105$:
                                   1507 ;	main.c: 553: cm_ST();
      000751 CDr05r5F         [ 4] 1508 	call	_cm_ST
                                   1509 ;	main.c: 554: break;
      000754 20 08            [ 2] 1510 	jra	00109$
                                   1511 ;	main.c: 555: case 6:
      000756                       1512 00106$:
                                   1513 ;	main.c: 556: cm_RM();
      000756 CDr05r52         [ 4] 1514 	call	_cm_RM
                                   1515 ;	main.c: 557: break;
      000759 20 03            [ 2] 1516 	jra	00109$
                                   1517 ;	main.c: 558: case 7:
      00075B                       1518 00107$:
                                   1519 ;	main.c: 559: cm_DB();
      00075B CDr05r5C         [ 4] 1520 	call	_cm_DB
                                   1521 ;	main.c: 561: }
      00075E                       1522 00109$:
                                   1523 ;	main.c: 562: }
      00075E 5B 04            [ 2] 1524 	addw	sp, #4
      000760 81               [ 4] 1525 	ret
                                   1526 ;	main.c: 565: void main(void)
                                   1527 ;	-----------------------------------------
                                   1528 ;	 function main
                                   1529 ;	-----------------------------------------
      000761                       1530 _main:
                                   1531 ;	main.c: 567: uart_init();
      000761 CDr03rCA         [ 4] 1532 	call	_uart_init
                                   1533 ;	main.c: 568: i2c_init();
      000764 CDr03rE7         [ 4] 1534 	call	_i2c_init
                                   1535 ;	main.c: 569: uart_write("SS\n");
      000767 AEr00r72         [ 2] 1536 	ldw	x, #(___str_22+0)
      00076A CDr00r37         [ 4] 1537 	call	_uart_write
                                   1538 ;	main.c: 570: current_dev = 0x3C;
      00076D 35 3Cu03u07      [ 1] 1539 	mov	_current_dev+0, #0x3c
                                   1540 ;	main.c: 571: d_addr = 0x55;
      000771 35 55u02u03      [ 1] 1541 	mov	_d_addr+0, #0x55
                                   1542 ;	main.c: 572: d_size = 3;
      000775 35 03u02u05      [ 1] 1543 	mov	_d_size+0, #0x03
                                   1544 ;	main.c: 573: data_buf[0] = 1;
      000779 35 01u02u07      [ 1] 1545 	mov	_data_buf+0, #0x01
                                   1546 ;	main.c: 574: data_buf[1] = 2;
      00077D 35 02u02u08      [ 1] 1547 	mov	_data_buf+1, #0x02
                                   1548 ;	main.c: 575: data_buf[2] = 3;
      000781 35 03u02u09      [ 1] 1549 	mov	_data_buf+2, #0x03
                                   1550 ;	main.c: 576: cm_SW();
      000785 CDr05rDE         [ 4] 1551 	call	_cm_SW
                                   1552 ;	main.c: 577: cm_SW();
      000788 CDr05rDE         [ 4] 1553 	call	_cm_SW
                                   1554 ;	main.c: 578: cm_SW();
      00078B CDr05rDE         [ 4] 1555 	call	_cm_SW
                                   1556 ;	main.c: 580: while(1)
      00078E                       1557 00102$:
                                   1558 ;	main.c: 582: uart_read();
      00078E CDr00r6B         [ 4] 1559 	call	_uart_read
                                   1560 ;	main.c: 583: command_switcher();
      000791 CDr07r13         [ 4] 1561 	call	_command_switcher
      000794 20 F8            [ 2] 1562 	jra	00102$
                                   1563 ;	main.c: 585: }
      000796 81               [ 4] 1564 	ret
                                   1565 	.area CODE
                                   1566 	.area CONST
                                   1567 	.area CONST
      000000                       1568 ___str_0:
      000000 0A                    1569 	.db 0x0a
      000001 49 32 43 5F 52 45 47  1570 	.ascii "I2C_REGS >.<"
             53 20 3E 2E 3C
      00000D 0A                    1571 	.db 0x0a
      00000E 00                    1572 	.db 0x00
                                   1573 	.area CODE
                                   1574 	.area CONST
      00000F                       1575 ___str_1:
      00000F 0A                    1576 	.db 0x0a
      000010 53 52 31 20 2D 3E 20  1577 	.ascii "SR1 -> "
      000017 00                    1578 	.db 0x00
                                   1579 	.area CODE
                                   1580 	.area CONST
      000018                       1581 ___str_2:
      000018 20 3C 2D              1582 	.ascii " <-"
      00001B 0A                    1583 	.db 0x0a
      00001C 00                    1584 	.db 0x00
                                   1585 	.area CODE
                                   1586 	.area CONST
      00001D                       1587 ___str_3:
      00001D 53 52 32 20 2D 3E 20  1588 	.ascii "SR2 -> "
      000024 00                    1589 	.db 0x00
                                   1590 	.area CODE
                                   1591 	.area CONST
      000025                       1592 ___str_4:
      000025 53 52 33 20 2D 3E 20  1593 	.ascii "SR3 -> "
      00002C 00                    1594 	.db 0x00
                                   1595 	.area CODE
                                   1596 	.area CONST
      00002D                       1597 ___str_5:
      00002D 43 52 31 20 2D 3E 20  1598 	.ascii "CR1 -> "
      000034 00                    1599 	.db 0x00
                                   1600 	.area CODE
                                   1601 	.area CONST
      000035                       1602 ___str_6:
      000035 43 52 32 20 2D 3E 20  1603 	.ascii "CR2 -> "
      00003C 00                    1604 	.db 0x00
                                   1605 	.area CODE
                                   1606 	.area CONST
      00003D                       1607 ___str_7:
      00003D 44 52 20 2D 3E 20     1608 	.ascii "DR -> "
      000043 00                    1609 	.db 0x00
                                   1610 	.area CODE
                                   1611 	.area CONST
      000044                       1612 ___str_8:
      000044 53 4D 20              1613 	.ascii "SM "
      000047 00                    1614 	.db 0x00
                                   1615 	.area CODE
                                   1616 	.area CONST
      000048                       1617 ___str_9:
      000048 0D                    1618 	.db 0x0d
      000049 0A                    1619 	.db 0x0a
      00004A 00                    1620 	.db 0x00
                                   1621 	.area CODE
                                   1622 	.area CONST
      00004B                       1623 ___str_10:
      00004B 52 4D                 1624 	.ascii "RM"
      00004D 0A                    1625 	.db 0x0a
      00004E 00                    1626 	.db 0x00
                                   1627 	.area CODE
                                   1628 	.area CONST
      00004F                       1629 ___str_11:
      00004F 53 54                 1630 	.ascii "ST"
      000051 0A                    1631 	.db 0x0a
      000052 00                    1632 	.db 0x00
                                   1633 	.area CODE
                                   1634 	.area CONST
      000053                       1635 ___str_12:
      000053 53 52 20              1636 	.ascii "SR "
      000056 00                    1637 	.db 0x00
                                   1638 	.area CODE
                                   1639 	.area CONST
      000057                       1640 ___str_13:
      000057 20                    1641 	.ascii " "
      000058 00                    1642 	.db 0x00
                                   1643 	.area CODE
                                   1644 	.area CONST
      000059                       1645 ___str_14:
      000059 53 57 20              1646 	.ascii "SW "
      00005C 00                    1647 	.db 0x00
                                   1648 	.area CODE
                                   1649 	.area CONST
      00005D                       1650 ___str_15:
      00005D 53 4D                 1651 	.ascii "SM"
      00005F 00                    1652 	.db 0x00
                                   1653 	.area CODE
                                   1654 	.area CONST
      000060                       1655 ___str_16:
      000060 53 4E                 1656 	.ascii "SN"
      000062 00                    1657 	.db 0x00
                                   1658 	.area CODE
                                   1659 	.area CONST
      000063                       1660 ___str_17:
      000063 53 54                 1661 	.ascii "ST"
      000065 00                    1662 	.db 0x00
                                   1663 	.area CODE
                                   1664 	.area CONST
      000066                       1665 ___str_18:
      000066 52 4D                 1666 	.ascii "RM"
      000068 00                    1667 	.db 0x00
                                   1668 	.area CODE
                                   1669 	.area CONST
      000069                       1670 ___str_19:
      000069 44 42                 1671 	.ascii "DB"
      00006B 00                    1672 	.db 0x00
                                   1673 	.area CODE
                                   1674 	.area CONST
      00006C                       1675 ___str_20:
      00006C 53 52                 1676 	.ascii "SR"
      00006E 00                    1677 	.db 0x00
                                   1678 	.area CODE
                                   1679 	.area CONST
      00006F                       1680 ___str_21:
      00006F 53 57                 1681 	.ascii "SW"
      000071 00                    1682 	.db 0x00
                                   1683 	.area CODE
                                   1684 	.area CONST
      000072                       1685 ___str_22:
      000072 53 53                 1686 	.ascii "SS"
      000074 0A                    1687 	.db 0x0a
      000075 00                    1688 	.db 0x00
                                   1689 	.area CODE
                                   1690 	.area INITIALIZER
      000000                       1691 __xinit__status_registers:
      000000 00                    1692 	.db #0x00	; 0
      000001 00                    1693 	.db 0x00
      000002 00                    1694 	.db 0x00
      000003 00                    1695 	.db 0x00
      000004 00                    1696 	.db 0x00
      000005 00                    1697 	.db 0x00
      000006 00                    1698 	.db 0x00
      000007 00                    1699 	.db 0x00
      000008 00                    1700 	.db 0x00
      000009 00                    1701 	.db 0x00
      00000A 00                    1702 	.db 0x00
      00000B 00                    1703 	.db 0x00
      00000C 00                    1704 	.db 0x00
      00000D 00                    1705 	.db 0x00
      00000E 00                    1706 	.db 0x00
      00000F 00                    1707 	.db 0x00
      000010 00                    1708 	.db 0x00
      000011 00                    1709 	.db 0x00
      000012 00                    1710 	.db 0x00
      000013 00                    1711 	.db 0x00
      000014 00                    1712 	.db 0x00
      000015 00                    1713 	.db 0x00
      000016 00                    1714 	.db 0x00
      000017 00                    1715 	.db 0x00
      000018 00                    1716 	.db 0x00
      000019 00                    1717 	.db 0x00
      00001A 00                    1718 	.db 0x00
      00001B 00                    1719 	.db 0x00
      00001C 00                    1720 	.db 0x00
      00001D 00                    1721 	.db 0x00
      00001E 00                    1722 	.db 0x00
      00001F 00                    1723 	.db 0x00
      000020 00                    1724 	.db 0x00
      000021 00                    1725 	.db 0x00
      000022 00                    1726 	.db 0x00
      000023 00                    1727 	.db 0x00
      000024 00                    1728 	.db 0x00
      000025 00                    1729 	.db 0x00
      000026 00                    1730 	.db 0x00
      000027 00                    1731 	.db 0x00
      000028 00                    1732 	.db 0x00
      000029 00                    1733 	.db 0x00
      00002A 00                    1734 	.db 0x00
      00002B 00                    1735 	.db 0x00
      00002C 00                    1736 	.db 0x00
      00002D 00                    1737 	.db 0x00
      00002E 00                    1738 	.db 0x00
      00002F 00                    1739 	.db 0x00
      000030 00                    1740 	.db 0x00
      000031 00                    1741 	.db 0x00
      000032 00                    1742 	.db 0x00
      000033 00                    1743 	.db 0x00
      000034 00                    1744 	.db 0x00
      000035 00                    1745 	.db 0x00
      000036 00                    1746 	.db 0x00
      000037 00                    1747 	.db 0x00
      000038 00                    1748 	.db 0x00
      000039 00                    1749 	.db 0x00
      00003A 00                    1750 	.db 0x00
      00003B 00                    1751 	.db 0x00
      00003C 00                    1752 	.db 0x00
      00003D 00                    1753 	.db 0x00
      00003E 00                    1754 	.db 0x00
      00003F 00                    1755 	.db 0x00
      000040 00                    1756 	.db 0x00
      000041 00                    1757 	.db 0x00
      000042 00                    1758 	.db 0x00
      000043 00                    1759 	.db 0x00
      000044 00                    1760 	.db 0x00
      000045 00                    1761 	.db 0x00
      000046 00                    1762 	.db 0x00
      000047 00                    1763 	.db 0x00
      000048 00                    1764 	.db 0x00
      000049 00                    1765 	.db 0x00
      00004A 00                    1766 	.db 0x00
      00004B 00                    1767 	.db 0x00
      00004C 00                    1768 	.db 0x00
      00004D 00                    1769 	.db 0x00
      00004E 00                    1770 	.db 0x00
      00004F 00                    1771 	.db 0x00
      000050 00                    1772 	.db 0x00
      000051 00                    1773 	.db 0x00
      000052 00                    1774 	.db 0x00
      000053 00                    1775 	.db 0x00
      000054 00                    1776 	.db 0x00
      000055 00                    1777 	.db 0x00
      000056 00                    1778 	.db 0x00
      000057 00                    1779 	.db 0x00
      000058 00                    1780 	.db 0x00
      000059 00                    1781 	.db 0x00
      00005A 00                    1782 	.db 0x00
      00005B 00                    1783 	.db 0x00
      00005C 00                    1784 	.db 0x00
      00005D 00                    1785 	.db 0x00
      00005E 00                    1786 	.db 0x00
      00005F 00                    1787 	.db 0x00
      000060 00                    1788 	.db 0x00
      000061 00                    1789 	.db 0x00
      000062 00                    1790 	.db 0x00
      000063 00                    1791 	.db 0x00
      000064 00                    1792 	.db 0x00
      000065 00                    1793 	.db 0x00
      000066 00                    1794 	.db 0x00
      000067 00                    1795 	.db 0x00
      000068 00                    1796 	.db 0x00
      000069 00                    1797 	.db 0x00
      00006A 00                    1798 	.db 0x00
      00006B 00                    1799 	.db 0x00
      00006C 00                    1800 	.db 0x00
      00006D 00                    1801 	.db 0x00
      00006E 00                    1802 	.db 0x00
      00006F 00                    1803 	.db 0x00
      000070 00                    1804 	.db 0x00
      000071 00                    1805 	.db 0x00
      000072 00                    1806 	.db 0x00
      000073 00                    1807 	.db 0x00
      000074 00                    1808 	.db 0x00
      000075 00                    1809 	.db 0x00
      000076 00                    1810 	.db 0x00
      000077 00                    1811 	.db 0x00
      000078 00                    1812 	.db 0x00
      000079 00                    1813 	.db 0x00
      00007A 00                    1814 	.db 0x00
      00007B 00                    1815 	.db 0x00
      00007C 00                    1816 	.db 0x00
      00007D 00                    1817 	.db 0x00
      00007E 00                    1818 	.db 0x00
      00007F 00                    1819 	.db 0x00
      000080 00                    1820 	.db 0x00
      000081 00                    1821 	.db 0x00
      000082 00                    1822 	.db 0x00
      000083 00                    1823 	.db 0x00
      000084 00                    1824 	.db 0x00
      000085 00                    1825 	.db 0x00
      000086 00                    1826 	.db 0x00
      000087 00                    1827 	.db 0x00
      000088 00                    1828 	.db 0x00
      000089 00                    1829 	.db 0x00
      00008A 00                    1830 	.db 0x00
      00008B 00                    1831 	.db 0x00
      00008C 00                    1832 	.db 0x00
      00008D 00                    1833 	.db 0x00
      00008E 00                    1834 	.db 0x00
      00008F 00                    1835 	.db 0x00
      000090 00                    1836 	.db 0x00
      000091 00                    1837 	.db 0x00
      000092 00                    1838 	.db 0x00
      000093 00                    1839 	.db 0x00
      000094 00                    1840 	.db 0x00
      000095 00                    1841 	.db 0x00
      000096 00                    1842 	.db 0x00
      000097 00                    1843 	.db 0x00
      000098 00                    1844 	.db 0x00
      000099 00                    1845 	.db 0x00
      00009A 00                    1846 	.db 0x00
      00009B 00                    1847 	.db 0x00
      00009C 00                    1848 	.db 0x00
      00009D 00                    1849 	.db 0x00
      00009E 00                    1850 	.db 0x00
      00009F 00                    1851 	.db 0x00
      0000A0 00                    1852 	.db 0x00
      0000A1 00                    1853 	.db 0x00
      0000A2 00                    1854 	.db 0x00
      0000A3 00                    1855 	.db 0x00
      0000A4 00                    1856 	.db 0x00
      0000A5 00                    1857 	.db 0x00
      0000A6 00                    1858 	.db 0x00
      0000A7 00                    1859 	.db 0x00
      0000A8 00                    1860 	.db 0x00
      0000A9 00                    1861 	.db 0x00
      0000AA 00                    1862 	.db 0x00
      0000AB 00                    1863 	.db 0x00
      0000AC 00                    1864 	.db 0x00
      0000AD 00                    1865 	.db 0x00
      0000AE 00                    1866 	.db 0x00
      0000AF 00                    1867 	.db 0x00
      0000B0 00                    1868 	.db 0x00
      0000B1 00                    1869 	.db 0x00
      0000B2 00                    1870 	.db 0x00
      0000B3 00                    1871 	.db 0x00
      0000B4 00                    1872 	.db 0x00
      0000B5 00                    1873 	.db 0x00
      0000B6 00                    1874 	.db 0x00
      0000B7 00                    1875 	.db 0x00
      0000B8 00                    1876 	.db 0x00
      0000B9 00                    1877 	.db 0x00
      0000BA 00                    1878 	.db 0x00
      0000BB 00                    1879 	.db 0x00
      0000BC 00                    1880 	.db 0x00
      0000BD 00                    1881 	.db 0x00
      0000BE 00                    1882 	.db 0x00
      0000BF 00                    1883 	.db 0x00
      0000C0 00                    1884 	.db 0x00
      0000C1 00                    1885 	.db 0x00
      0000C2 00                    1886 	.db 0x00
      0000C3 00                    1887 	.db 0x00
      0000C4 00                    1888 	.db 0x00
      0000C5 00                    1889 	.db 0x00
      0000C6 00                    1890 	.db 0x00
      0000C7 00                    1891 	.db 0x00
      0000C8 00                    1892 	.db 0x00
      0000C9 00                    1893 	.db 0x00
      0000CA 00                    1894 	.db 0x00
      0000CB 00                    1895 	.db 0x00
      0000CC 00                    1896 	.db 0x00
      0000CD 00                    1897 	.db 0x00
      0000CE 00                    1898 	.db 0x00
      0000CF 00                    1899 	.db 0x00
      0000D0 00                    1900 	.db 0x00
      0000D1 00                    1901 	.db 0x00
      0000D2 00                    1902 	.db 0x00
      0000D3 00                    1903 	.db 0x00
      0000D4 00                    1904 	.db 0x00
      0000D5 00                    1905 	.db 0x00
      0000D6 00                    1906 	.db 0x00
      0000D7 00                    1907 	.db 0x00
      0000D8 00                    1908 	.db 0x00
      0000D9 00                    1909 	.db 0x00
      0000DA 00                    1910 	.db 0x00
      0000DB 00                    1911 	.db 0x00
      0000DC 00                    1912 	.db 0x00
      0000DD 00                    1913 	.db 0x00
      0000DE 00                    1914 	.db 0x00
      0000DF 00                    1915 	.db 0x00
      0000E0 00                    1916 	.db 0x00
      0000E1 00                    1917 	.db 0x00
      0000E2 00                    1918 	.db 0x00
      0000E3 00                    1919 	.db 0x00
      0000E4 00                    1920 	.db 0x00
      0000E5 00                    1921 	.db 0x00
      0000E6 00                    1922 	.db 0x00
      0000E7 00                    1923 	.db 0x00
      0000E8 00                    1924 	.db 0x00
      0000E9 00                    1925 	.db 0x00
      0000EA 00                    1926 	.db 0x00
      0000EB 00                    1927 	.db 0x00
      0000EC 00                    1928 	.db 0x00
      0000ED 00                    1929 	.db 0x00
      0000EE 00                    1930 	.db 0x00
      0000EF 00                    1931 	.db 0x00
      0000F0 00                    1932 	.db 0x00
      0000F1 00                    1933 	.db 0x00
      0000F2 00                    1934 	.db 0x00
      0000F3 00                    1935 	.db 0x00
      0000F4 00                    1936 	.db 0x00
      0000F5 00                    1937 	.db 0x00
      0000F6 00                    1938 	.db 0x00
      0000F7 00                    1939 	.db 0x00
      0000F8 00                    1940 	.db 0x00
      0000F9 00                    1941 	.db 0x00
      0000FA 00                    1942 	.db 0x00
      0000FB 00                    1943 	.db 0x00
      0000FC 00                    1944 	.db 0x00
      0000FD 00                    1945 	.db 0x00
      0000FE 00                    1946 	.db 0x00
      0000FF 00                    1947 	.db 0x00
      000100                       1948 __xinit__buffer:
      000100 00                    1949 	.db #0x00	; 0
      000101 00                    1950 	.db 0x00
      000102 00                    1951 	.db 0x00
      000103 00                    1952 	.db 0x00
      000104 00                    1953 	.db 0x00
      000105 00                    1954 	.db 0x00
      000106 00                    1955 	.db 0x00
      000107 00                    1956 	.db 0x00
      000108 00                    1957 	.db 0x00
      000109 00                    1958 	.db 0x00
      00010A 00                    1959 	.db 0x00
      00010B 00                    1960 	.db 0x00
      00010C 00                    1961 	.db 0x00
      00010D 00                    1962 	.db 0x00
      00010E 00                    1963 	.db 0x00
      00010F 00                    1964 	.db 0x00
      000110 00                    1965 	.db 0x00
      000111 00                    1966 	.db 0x00
      000112 00                    1967 	.db 0x00
      000113 00                    1968 	.db 0x00
      000114 00                    1969 	.db 0x00
      000115 00                    1970 	.db 0x00
      000116 00                    1971 	.db 0x00
      000117 00                    1972 	.db 0x00
      000118 00                    1973 	.db 0x00
      000119 00                    1974 	.db 0x00
      00011A 00                    1975 	.db 0x00
      00011B 00                    1976 	.db 0x00
      00011C 00                    1977 	.db 0x00
      00011D 00                    1978 	.db 0x00
      00011E 00                    1979 	.db 0x00
      00011F 00                    1980 	.db 0x00
      000120 00                    1981 	.db 0x00
      000121 00                    1982 	.db 0x00
      000122 00                    1983 	.db 0x00
      000123 00                    1984 	.db 0x00
      000124 00                    1985 	.db 0x00
      000125 00                    1986 	.db 0x00
      000126 00                    1987 	.db 0x00
      000127 00                    1988 	.db 0x00
      000128 00                    1989 	.db 0x00
      000129 00                    1990 	.db 0x00
      00012A 00                    1991 	.db 0x00
      00012B 00                    1992 	.db 0x00
      00012C 00                    1993 	.db 0x00
      00012D 00                    1994 	.db 0x00
      00012E 00                    1995 	.db 0x00
      00012F 00                    1996 	.db 0x00
      000130 00                    1997 	.db 0x00
      000131 00                    1998 	.db 0x00
      000132 00                    1999 	.db 0x00
      000133 00                    2000 	.db 0x00
      000134 00                    2001 	.db 0x00
      000135 00                    2002 	.db 0x00
      000136 00                    2003 	.db 0x00
      000137 00                    2004 	.db 0x00
      000138 00                    2005 	.db 0x00
      000139 00                    2006 	.db 0x00
      00013A 00                    2007 	.db 0x00
      00013B 00                    2008 	.db 0x00
      00013C 00                    2009 	.db 0x00
      00013D 00                    2010 	.db 0x00
      00013E 00                    2011 	.db 0x00
      00013F 00                    2012 	.db 0x00
      000140 00                    2013 	.db 0x00
      000141 00                    2014 	.db 0x00
      000142 00                    2015 	.db 0x00
      000143 00                    2016 	.db 0x00
      000144 00                    2017 	.db 0x00
      000145 00                    2018 	.db 0x00
      000146 00                    2019 	.db 0x00
      000147 00                    2020 	.db 0x00
      000148 00                    2021 	.db 0x00
      000149 00                    2022 	.db 0x00
      00014A 00                    2023 	.db 0x00
      00014B 00                    2024 	.db 0x00
      00014C 00                    2025 	.db 0x00
      00014D 00                    2026 	.db 0x00
      00014E 00                    2027 	.db 0x00
      00014F 00                    2028 	.db 0x00
      000150 00                    2029 	.db 0x00
      000151 00                    2030 	.db 0x00
      000152 00                    2031 	.db 0x00
      000153 00                    2032 	.db 0x00
      000154 00                    2033 	.db 0x00
      000155 00                    2034 	.db 0x00
      000156 00                    2035 	.db 0x00
      000157 00                    2036 	.db 0x00
      000158 00                    2037 	.db 0x00
      000159 00                    2038 	.db 0x00
      00015A 00                    2039 	.db 0x00
      00015B 00                    2040 	.db 0x00
      00015C 00                    2041 	.db 0x00
      00015D 00                    2042 	.db 0x00
      00015E 00                    2043 	.db 0x00
      00015F 00                    2044 	.db 0x00
      000160 00                    2045 	.db 0x00
      000161 00                    2046 	.db 0x00
      000162 00                    2047 	.db 0x00
      000163 00                    2048 	.db 0x00
      000164 00                    2049 	.db 0x00
      000165 00                    2050 	.db 0x00
      000166 00                    2051 	.db 0x00
      000167 00                    2052 	.db 0x00
      000168 00                    2053 	.db 0x00
      000169 00                    2054 	.db 0x00
      00016A 00                    2055 	.db 0x00
      00016B 00                    2056 	.db 0x00
      00016C 00                    2057 	.db 0x00
      00016D 00                    2058 	.db 0x00
      00016E 00                    2059 	.db 0x00
      00016F 00                    2060 	.db 0x00
      000170 00                    2061 	.db 0x00
      000171 00                    2062 	.db 0x00
      000172 00                    2063 	.db 0x00
      000173 00                    2064 	.db 0x00
      000174 00                    2065 	.db 0x00
      000175 00                    2066 	.db 0x00
      000176 00                    2067 	.db 0x00
      000177 00                    2068 	.db 0x00
      000178 00                    2069 	.db 0x00
      000179 00                    2070 	.db 0x00
      00017A 00                    2071 	.db 0x00
      00017B 00                    2072 	.db 0x00
      00017C 00                    2073 	.db 0x00
      00017D 00                    2074 	.db 0x00
      00017E 00                    2075 	.db 0x00
      00017F 00                    2076 	.db 0x00
      000180 00                    2077 	.db 0x00
      000181 00                    2078 	.db 0x00
      000182 00                    2079 	.db 0x00
      000183 00                    2080 	.db 0x00
      000184 00                    2081 	.db 0x00
      000185 00                    2082 	.db 0x00
      000186 00                    2083 	.db 0x00
      000187 00                    2084 	.db 0x00
      000188 00                    2085 	.db 0x00
      000189 00                    2086 	.db 0x00
      00018A 00                    2087 	.db 0x00
      00018B 00                    2088 	.db 0x00
      00018C 00                    2089 	.db 0x00
      00018D 00                    2090 	.db 0x00
      00018E 00                    2091 	.db 0x00
      00018F 00                    2092 	.db 0x00
      000190 00                    2093 	.db 0x00
      000191 00                    2094 	.db 0x00
      000192 00                    2095 	.db 0x00
      000193 00                    2096 	.db 0x00
      000194 00                    2097 	.db 0x00
      000195 00                    2098 	.db 0x00
      000196 00                    2099 	.db 0x00
      000197 00                    2100 	.db 0x00
      000198 00                    2101 	.db 0x00
      000199 00                    2102 	.db 0x00
      00019A 00                    2103 	.db 0x00
      00019B 00                    2104 	.db 0x00
      00019C 00                    2105 	.db 0x00
      00019D 00                    2106 	.db 0x00
      00019E 00                    2107 	.db 0x00
      00019F 00                    2108 	.db 0x00
      0001A0 00                    2109 	.db 0x00
      0001A1 00                    2110 	.db 0x00
      0001A2 00                    2111 	.db 0x00
      0001A3 00                    2112 	.db 0x00
      0001A4 00                    2113 	.db 0x00
      0001A5 00                    2114 	.db 0x00
      0001A6 00                    2115 	.db 0x00
      0001A7 00                    2116 	.db 0x00
      0001A8 00                    2117 	.db 0x00
      0001A9 00                    2118 	.db 0x00
      0001AA 00                    2119 	.db 0x00
      0001AB 00                    2120 	.db 0x00
      0001AC 00                    2121 	.db 0x00
      0001AD 00                    2122 	.db 0x00
      0001AE 00                    2123 	.db 0x00
      0001AF 00                    2124 	.db 0x00
      0001B0 00                    2125 	.db 0x00
      0001B1 00                    2126 	.db 0x00
      0001B2 00                    2127 	.db 0x00
      0001B3 00                    2128 	.db 0x00
      0001B4 00                    2129 	.db 0x00
      0001B5 00                    2130 	.db 0x00
      0001B6 00                    2131 	.db 0x00
      0001B7 00                    2132 	.db 0x00
      0001B8 00                    2133 	.db 0x00
      0001B9 00                    2134 	.db 0x00
      0001BA 00                    2135 	.db 0x00
      0001BB 00                    2136 	.db 0x00
      0001BC 00                    2137 	.db 0x00
      0001BD 00                    2138 	.db 0x00
      0001BE 00                    2139 	.db 0x00
      0001BF 00                    2140 	.db 0x00
      0001C0 00                    2141 	.db 0x00
      0001C1 00                    2142 	.db 0x00
      0001C2 00                    2143 	.db 0x00
      0001C3 00                    2144 	.db 0x00
      0001C4 00                    2145 	.db 0x00
      0001C5 00                    2146 	.db 0x00
      0001C6 00                    2147 	.db 0x00
      0001C7 00                    2148 	.db 0x00
      0001C8 00                    2149 	.db 0x00
      0001C9 00                    2150 	.db 0x00
      0001CA 00                    2151 	.db 0x00
      0001CB 00                    2152 	.db 0x00
      0001CC 00                    2153 	.db 0x00
      0001CD 00                    2154 	.db 0x00
      0001CE 00                    2155 	.db 0x00
      0001CF 00                    2156 	.db 0x00
      0001D0 00                    2157 	.db 0x00
      0001D1 00                    2158 	.db 0x00
      0001D2 00                    2159 	.db 0x00
      0001D3 00                    2160 	.db 0x00
      0001D4 00                    2161 	.db 0x00
      0001D5 00                    2162 	.db 0x00
      0001D6 00                    2163 	.db 0x00
      0001D7 00                    2164 	.db 0x00
      0001D8 00                    2165 	.db 0x00
      0001D9 00                    2166 	.db 0x00
      0001DA 00                    2167 	.db 0x00
      0001DB 00                    2168 	.db 0x00
      0001DC 00                    2169 	.db 0x00
      0001DD 00                    2170 	.db 0x00
      0001DE 00                    2171 	.db 0x00
      0001DF 00                    2172 	.db 0x00
      0001E0 00                    2173 	.db 0x00
      0001E1 00                    2174 	.db 0x00
      0001E2 00                    2175 	.db 0x00
      0001E3 00                    2176 	.db 0x00
      0001E4 00                    2177 	.db 0x00
      0001E5 00                    2178 	.db 0x00
      0001E6 00                    2179 	.db 0x00
      0001E7 00                    2180 	.db 0x00
      0001E8 00                    2181 	.db 0x00
      0001E9 00                    2182 	.db 0x00
      0001EA 00                    2183 	.db 0x00
      0001EB 00                    2184 	.db 0x00
      0001EC 00                    2185 	.db 0x00
      0001ED 00                    2186 	.db 0x00
      0001EE 00                    2187 	.db 0x00
      0001EF 00                    2188 	.db 0x00
      0001F0 00                    2189 	.db 0x00
      0001F1 00                    2190 	.db 0x00
      0001F2 00                    2191 	.db 0x00
      0001F3 00                    2192 	.db 0x00
      0001F4 00                    2193 	.db 0x00
      0001F5 00                    2194 	.db 0x00
      0001F6 00                    2195 	.db 0x00
      0001F7 00                    2196 	.db 0x00
      0001F8 00                    2197 	.db 0x00
      0001F9 00                    2198 	.db 0x00
      0001FA 00                    2199 	.db 0x00
      0001FB 00                    2200 	.db 0x00
      0001FC 00                    2201 	.db 0x00
      0001FD 00                    2202 	.db 0x00
      0001FE 00                    2203 	.db 0x00
      0001FF 00                    2204 	.db 0x00
      000200                       2205 __xinit__a:
      000200 00                    2206 	.db #0x00	; 0
      000201 00                    2207 	.db 0x00
      000202 00                    2208 	.db 0x00
      000203                       2209 __xinit__d_addr:
      000203 00                    2210 	.db #0x00	; 0
      000204                       2211 __xinit__p_size:
      000204 00                    2212 	.db #0x00	; 0
      000205                       2213 __xinit__d_size:
      000205 00                    2214 	.db #0x00	; 0
      000206                       2215 __xinit__p_bytes:
      000206 00                    2216 	.db #0x00	; 0
      000207                       2217 __xinit__data_buf:
      000207 00                    2218 	.db #0x00	; 0
      000208 00                    2219 	.db 0x00
      000209 00                    2220 	.db 0x00
      00020A 00                    2221 	.db 0x00
      00020B 00                    2222 	.db 0x00
      00020C 00                    2223 	.db 0x00
      00020D 00                    2224 	.db 0x00
      00020E 00                    2225 	.db 0x00
      00020F 00                    2226 	.db 0x00
      000210 00                    2227 	.db 0x00
      000211 00                    2228 	.db 0x00
      000212 00                    2229 	.db 0x00
      000213 00                    2230 	.db 0x00
      000214 00                    2231 	.db 0x00
      000215 00                    2232 	.db 0x00
      000216 00                    2233 	.db 0x00
      000217 00                    2234 	.db 0x00
      000218 00                    2235 	.db 0x00
      000219 00                    2236 	.db 0x00
      00021A 00                    2237 	.db 0x00
      00021B 00                    2238 	.db 0x00
      00021C 00                    2239 	.db 0x00
      00021D 00                    2240 	.db 0x00
      00021E 00                    2241 	.db 0x00
      00021F 00                    2242 	.db 0x00
      000220 00                    2243 	.db 0x00
      000221 00                    2244 	.db 0x00
      000222 00                    2245 	.db 0x00
      000223 00                    2246 	.db 0x00
      000224 00                    2247 	.db 0x00
      000225 00                    2248 	.db 0x00
      000226 00                    2249 	.db 0x00
      000227 00                    2250 	.db 0x00
      000228 00                    2251 	.db 0x00
      000229 00                    2252 	.db 0x00
      00022A 00                    2253 	.db 0x00
      00022B 00                    2254 	.db 0x00
      00022C 00                    2255 	.db 0x00
      00022D 00                    2256 	.db 0x00
      00022E 00                    2257 	.db 0x00
      00022F 00                    2258 	.db 0x00
      000230 00                    2259 	.db 0x00
      000231 00                    2260 	.db 0x00
      000232 00                    2261 	.db 0x00
      000233 00                    2262 	.db 0x00
      000234 00                    2263 	.db 0x00
      000235 00                    2264 	.db 0x00
      000236 00                    2265 	.db 0x00
      000237 00                    2266 	.db 0x00
      000238 00                    2267 	.db 0x00
      000239 00                    2268 	.db 0x00
      00023A 00                    2269 	.db 0x00
      00023B 00                    2270 	.db 0x00
      00023C 00                    2271 	.db 0x00
      00023D 00                    2272 	.db 0x00
      00023E 00                    2273 	.db 0x00
      00023F 00                    2274 	.db 0x00
      000240 00                    2275 	.db 0x00
      000241 00                    2276 	.db 0x00
      000242 00                    2277 	.db 0x00
      000243 00                    2278 	.db 0x00
      000244 00                    2279 	.db 0x00
      000245 00                    2280 	.db 0x00
      000246 00                    2281 	.db 0x00
      000247 00                    2282 	.db 0x00
      000248 00                    2283 	.db 0x00
      000249 00                    2284 	.db 0x00
      00024A 00                    2285 	.db 0x00
      00024B 00                    2286 	.db 0x00
      00024C 00                    2287 	.db 0x00
      00024D 00                    2288 	.db 0x00
      00024E 00                    2289 	.db 0x00
      00024F 00                    2290 	.db 0x00
      000250 00                    2291 	.db 0x00
      000251 00                    2292 	.db 0x00
      000252 00                    2293 	.db 0x00
      000253 00                    2294 	.db 0x00
      000254 00                    2295 	.db 0x00
      000255 00                    2296 	.db 0x00
      000256 00                    2297 	.db 0x00
      000257 00                    2298 	.db 0x00
      000258 00                    2299 	.db 0x00
      000259 00                    2300 	.db 0x00
      00025A 00                    2301 	.db 0x00
      00025B 00                    2302 	.db 0x00
      00025C 00                    2303 	.db 0x00
      00025D 00                    2304 	.db 0x00
      00025E 00                    2305 	.db 0x00
      00025F 00                    2306 	.db 0x00
      000260 00                    2307 	.db 0x00
      000261 00                    2308 	.db 0x00
      000262 00                    2309 	.db 0x00
      000263 00                    2310 	.db 0x00
      000264 00                    2311 	.db 0x00
      000265 00                    2312 	.db 0x00
      000266 00                    2313 	.db 0x00
      000267 00                    2314 	.db 0x00
      000268 00                    2315 	.db 0x00
      000269 00                    2316 	.db 0x00
      00026A 00                    2317 	.db 0x00
      00026B 00                    2318 	.db 0x00
      00026C 00                    2319 	.db 0x00
      00026D 00                    2320 	.db 0x00
      00026E 00                    2321 	.db 0x00
      00026F 00                    2322 	.db 0x00
      000270 00                    2323 	.db 0x00
      000271 00                    2324 	.db 0x00
      000272 00                    2325 	.db 0x00
      000273 00                    2326 	.db 0x00
      000274 00                    2327 	.db 0x00
      000275 00                    2328 	.db 0x00
      000276 00                    2329 	.db 0x00
      000277 00                    2330 	.db 0x00
      000278 00                    2331 	.db 0x00
      000279 00                    2332 	.db 0x00
      00027A 00                    2333 	.db 0x00
      00027B 00                    2334 	.db 0x00
      00027C 00                    2335 	.db 0x00
      00027D 00                    2336 	.db 0x00
      00027E 00                    2337 	.db 0x00
      00027F 00                    2338 	.db 0x00
      000280 00                    2339 	.db 0x00
      000281 00                    2340 	.db 0x00
      000282 00                    2341 	.db 0x00
      000283 00                    2342 	.db 0x00
      000284 00                    2343 	.db 0x00
      000285 00                    2344 	.db 0x00
      000286 00                    2345 	.db 0x00
      000287 00                    2346 	.db 0x00
      000288 00                    2347 	.db 0x00
      000289 00                    2348 	.db 0x00
      00028A 00                    2349 	.db 0x00
      00028B 00                    2350 	.db 0x00
      00028C 00                    2351 	.db 0x00
      00028D 00                    2352 	.db 0x00
      00028E 00                    2353 	.db 0x00
      00028F 00                    2354 	.db 0x00
      000290 00                    2355 	.db 0x00
      000291 00                    2356 	.db 0x00
      000292 00                    2357 	.db 0x00
      000293 00                    2358 	.db 0x00
      000294 00                    2359 	.db 0x00
      000295 00                    2360 	.db 0x00
      000296 00                    2361 	.db 0x00
      000297 00                    2362 	.db 0x00
      000298 00                    2363 	.db 0x00
      000299 00                    2364 	.db 0x00
      00029A 00                    2365 	.db 0x00
      00029B 00                    2366 	.db 0x00
      00029C 00                    2367 	.db 0x00
      00029D 00                    2368 	.db 0x00
      00029E 00                    2369 	.db 0x00
      00029F 00                    2370 	.db 0x00
      0002A0 00                    2371 	.db 0x00
      0002A1 00                    2372 	.db 0x00
      0002A2 00                    2373 	.db 0x00
      0002A3 00                    2374 	.db 0x00
      0002A4 00                    2375 	.db 0x00
      0002A5 00                    2376 	.db 0x00
      0002A6 00                    2377 	.db 0x00
      0002A7 00                    2378 	.db 0x00
      0002A8 00                    2379 	.db 0x00
      0002A9 00                    2380 	.db 0x00
      0002AA 00                    2381 	.db 0x00
      0002AB 00                    2382 	.db 0x00
      0002AC 00                    2383 	.db 0x00
      0002AD 00                    2384 	.db 0x00
      0002AE 00                    2385 	.db 0x00
      0002AF 00                    2386 	.db 0x00
      0002B0 00                    2387 	.db 0x00
      0002B1 00                    2388 	.db 0x00
      0002B2 00                    2389 	.db 0x00
      0002B3 00                    2390 	.db 0x00
      0002B4 00                    2391 	.db 0x00
      0002B5 00                    2392 	.db 0x00
      0002B6 00                    2393 	.db 0x00
      0002B7 00                    2394 	.db 0x00
      0002B8 00                    2395 	.db 0x00
      0002B9 00                    2396 	.db 0x00
      0002BA 00                    2397 	.db 0x00
      0002BB 00                    2398 	.db 0x00
      0002BC 00                    2399 	.db 0x00
      0002BD 00                    2400 	.db 0x00
      0002BE 00                    2401 	.db 0x00
      0002BF 00                    2402 	.db 0x00
      0002C0 00                    2403 	.db 0x00
      0002C1 00                    2404 	.db 0x00
      0002C2 00                    2405 	.db 0x00
      0002C3 00                    2406 	.db 0x00
      0002C4 00                    2407 	.db 0x00
      0002C5 00                    2408 	.db 0x00
      0002C6 00                    2409 	.db 0x00
      0002C7 00                    2410 	.db 0x00
      0002C8 00                    2411 	.db 0x00
      0002C9 00                    2412 	.db 0x00
      0002CA 00                    2413 	.db 0x00
      0002CB 00                    2414 	.db 0x00
      0002CC 00                    2415 	.db 0x00
      0002CD 00                    2416 	.db 0x00
      0002CE 00                    2417 	.db 0x00
      0002CF 00                    2418 	.db 0x00
      0002D0 00                    2419 	.db 0x00
      0002D1 00                    2420 	.db 0x00
      0002D2 00                    2421 	.db 0x00
      0002D3 00                    2422 	.db 0x00
      0002D4 00                    2423 	.db 0x00
      0002D5 00                    2424 	.db 0x00
      0002D6 00                    2425 	.db 0x00
      0002D7 00                    2426 	.db 0x00
      0002D8 00                    2427 	.db 0x00
      0002D9 00                    2428 	.db 0x00
      0002DA 00                    2429 	.db 0x00
      0002DB 00                    2430 	.db 0x00
      0002DC 00                    2431 	.db 0x00
      0002DD 00                    2432 	.db 0x00
      0002DE 00                    2433 	.db 0x00
      0002DF 00                    2434 	.db 0x00
      0002E0 00                    2435 	.db 0x00
      0002E1 00                    2436 	.db 0x00
      0002E2 00                    2437 	.db 0x00
      0002E3 00                    2438 	.db 0x00
      0002E4 00                    2439 	.db 0x00
      0002E5 00                    2440 	.db 0x00
      0002E6 00                    2441 	.db 0x00
      0002E7 00                    2442 	.db 0x00
      0002E8 00                    2443 	.db 0x00
      0002E9 00                    2444 	.db 0x00
      0002EA 00                    2445 	.db 0x00
      0002EB 00                    2446 	.db 0x00
      0002EC 00                    2447 	.db 0x00
      0002ED 00                    2448 	.db 0x00
      0002EE 00                    2449 	.db 0x00
      0002EF 00                    2450 	.db 0x00
      0002F0 00                    2451 	.db 0x00
      0002F1 00                    2452 	.db 0x00
      0002F2 00                    2453 	.db 0x00
      0002F3 00                    2454 	.db 0x00
      0002F4 00                    2455 	.db 0x00
      0002F5 00                    2456 	.db 0x00
      0002F6 00                    2457 	.db 0x00
      0002F7 00                    2458 	.db 0x00
      0002F8 00                    2459 	.db 0x00
      0002F9 00                    2460 	.db 0x00
      0002FA 00                    2461 	.db 0x00
      0002FB 00                    2462 	.db 0x00
      0002FC 00                    2463 	.db 0x00
      0002FD 00                    2464 	.db 0x00
      0002FE 00                    2465 	.db 0x00
      0002FF 00                    2466 	.db 0x00
      000300 00                    2467 	.db 0x00
      000301 00                    2468 	.db 0x00
      000302 00                    2469 	.db 0x00
      000303 00                    2470 	.db 0x00
      000304 00                    2471 	.db 0x00
      000305 00                    2472 	.db 0x00
      000306 00                    2473 	.db 0x00
      000307                       2474 __xinit__current_dev:
      000307 00                    2475 	.db #0x00	; 0
                                   2476 	.area CABS (ABS)
