                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.3.0 #14184 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _command_switcher
                                     13 	.globl _data_handler
                                     14 	.globl _cm_SW
                                     15 	.globl _cm_SR
                                     16 	.globl _cm_ST
                                     17 	.globl _cm_DB
                                     18 	.globl _cm_RM
                                     19 	.globl _cm_SN
                                     20 	.globl _cm_SM
                                     21 	.globl _i2c_scan
                                     22 	.globl _i2c_read
                                     23 	.globl _i2c_write
                                     24 	.globl _i2c_stop
                                     25 	.globl _i2c_send_address
                                     26 	.globl _i2c_start
                                     27 	.globl _i2c_init
                                     28 	.globl _uart_init
                                     29 	.globl _status_check
                                     30 	.globl _reg_check
                                     31 	.globl _char_buffer_to_int
                                     32 	.globl _get_size_from_buff
                                     33 	.globl _get_addr_from_buff
                                     34 	.globl _convert_int_to_binary
                                     35 	.globl _convert_chars_to_int
                                     36 	.globl _convert_int_to_chars
                                     37 	.globl _uart_read
                                     38 	.globl _UART_RX
                                     39 	.globl _uart_write
                                     40 	.globl _UART_TX
                                     41 	.globl _delay
                                     42 	.globl ___memcpy
                                     43 	.globl _strlen
                                     44 	.globl _memset
                                     45 	.globl _memcmp
                                     46 	.globl _current_dev
                                     47 	.globl _data_buf
                                     48 	.globl _p_bytes
                                     49 	.globl _d_size
                                     50 	.globl _p_size
                                     51 	.globl _d_addr
                                     52 	.globl _a
                                     53 	.globl _buffer
                                     54 	.globl _status_registers
                                     55 ;--------------------------------------------------------
                                     56 ; ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area DATA
                                     59 ;--------------------------------------------------------
                                     60 ; ram data
                                     61 ;--------------------------------------------------------
                                     62 	.area INITIALIZED
      000000                         63 _status_registers::
      000000                         64 	.ds 256
      000100                         65 _buffer::
      000100                         66 	.ds 256
      000200                         67 _a::
      000200                         68 	.ds 3
      000203                         69 _d_addr::
      000203                         70 	.ds 1
      000204                         71 _p_size::
      000204                         72 	.ds 1
      000205                         73 _d_size::
      000205                         74 	.ds 1
      000206                         75 _p_bytes::
      000206                         76 	.ds 1
      000207                         77 _data_buf::
      000207                         78 	.ds 256
      000307                         79 _current_dev::
      000307                         80 	.ds 1
                                     81 ;--------------------------------------------------------
                                     82 ; Stack segment in internal ram
                                     83 ;--------------------------------------------------------
                                     84 	.area SSEG
      000000                         85 __start__stack:
      000000                         86 	.ds	1
                                     87 
                                     88 ;--------------------------------------------------------
                                     89 ; absolute external ram data
                                     90 ;--------------------------------------------------------
                                     91 	.area DABS (ABS)
                                     92 
                                     93 ; default segment ordering for linker
                                     94 	.area HOME
                                     95 	.area GSINIT
                                     96 	.area GSFINAL
                                     97 	.area CONST
                                     98 	.area INITIALIZER
                                     99 	.area CODE
                                    100 
                                    101 ;--------------------------------------------------------
                                    102 ; interrupt vector
                                    103 ;--------------------------------------------------------
                                    104 	.area HOME
      000000                        105 __interrupt_vect:
      000000 82v00u00u00            106 	int s_GSINIT ; reset
                                    107 ;--------------------------------------------------------
                                    108 ; global & static initialisations
                                    109 ;--------------------------------------------------------
                                    110 	.area HOME
                                    111 	.area GSINIT
                                    112 	.area GSFINAL
                                    113 	.area GSINIT
      000000 CDr00r00         [ 4]  114 	call	___sdcc_external_startup
      000003 4D               [ 1]  115 	tnz	a
      000004 27 03            [ 1]  116 	jreq	__sdcc_init_data
      000006 CCr00r04         [ 2]  117 	jp	__sdcc_program_startup
      000009                        118 __sdcc_init_data:
                                    119 ; stm8_genXINIT() start
      000009 AEr00r00         [ 2]  120 	ldw x, #l_DATA
      00000C 27 07            [ 1]  121 	jreq	00002$
      00000E                        122 00001$:
      00000E 72 4FuFFuFF      [ 1]  123 	clr (s_DATA - 1, x)
      000012 5A               [ 2]  124 	decw x
      000013 26 F9            [ 1]  125 	jrne	00001$
      000015                        126 00002$:
      000015 AEr00r00         [ 2]  127 	ldw	x, #l_INITIALIZER
      000018 27 09            [ 1]  128 	jreq	00004$
      00001A                        129 00003$:
      00001A D6uFFuFF         [ 1]  130 	ld	a, (s_INITIALIZER - 1, x)
      00001D D7uFFuFF         [ 1]  131 	ld	(s_INITIALIZED - 1, x), a
      000020 5A               [ 2]  132 	decw	x
      000021 26 F7            [ 1]  133 	jrne	00003$
      000023                        134 00004$:
                                    135 ; stm8_genXINIT() end
                                    136 	.area GSFINAL
      000000 CCr00r04         [ 2]  137 	jp	__sdcc_program_startup
                                    138 ;--------------------------------------------------------
                                    139 ; Home
                                    140 ;--------------------------------------------------------
                                    141 	.area HOME
                                    142 	.area HOME
      000004                        143 __sdcc_program_startup:
      000004 CCr07rA4         [ 2]  144 	jp	_main
                                    145 ;	return from main will return to caller
                                    146 ;--------------------------------------------------------
                                    147 ; code
                                    148 ;--------------------------------------------------------
                                    149 	.area CODE
                                    150 ;	main.c: 27: void delay(unsigned long count) {
                                    151 ;	-----------------------------------------
                                    152 ;	 function delay
                                    153 ;	-----------------------------------------
      000000                        154 _delay:
      000000 52 08            [ 2]  155 	sub	sp, #8
                                    156 ;	main.c: 28: while (count--)
      000002 16 0D            [ 2]  157 	ldw	y, (0x0d, sp)
      000004 17 07            [ 2]  158 	ldw	(0x07, sp), y
      000006 1E 0B            [ 2]  159 	ldw	x, (0x0b, sp)
      000008                        160 00101$:
      000008 1F 01            [ 2]  161 	ldw	(0x01, sp), x
      00000A 7B 07            [ 1]  162 	ld	a, (0x07, sp)
      00000C 6B 03            [ 1]  163 	ld	(0x03, sp), a
      00000E 7B 08            [ 1]  164 	ld	a, (0x08, sp)
      000010 16 07            [ 2]  165 	ldw	y, (0x07, sp)
      000012 72 A2 00 01      [ 2]  166 	subw	y, #0x0001
      000016 17 07            [ 2]  167 	ldw	(0x07, sp), y
      000018 24 01            [ 1]  168 	jrnc	00117$
      00001A 5A               [ 2]  169 	decw	x
      00001B                        170 00117$:
      00001B 4D               [ 1]  171 	tnz	a
      00001C 26 08            [ 1]  172 	jrne	00118$
      00001E 16 02            [ 2]  173 	ldw	y, (0x02, sp)
      000020 26 04            [ 1]  174 	jrne	00118$
      000022 0D 01            [ 1]  175 	tnz	(0x01, sp)
      000024 27 03            [ 1]  176 	jreq	00104$
      000026                        177 00118$:
                                    178 ;	main.c: 29: nop();
      000026 9D               [ 1]  179 	nop
      000027 20 DF            [ 2]  180 	jra	00101$
      000029                        181 00104$:
                                    182 ;	main.c: 30: }
      000029 1E 09            [ 2]  183 	ldw	x, (9, sp)
      00002B 5B 0E            [ 2]  184 	addw	sp, #14
      00002D FC               [ 2]  185 	jp	(x)
                                    186 ;	main.c: 38: void UART_TX(unsigned char value)
                                    187 ;	-----------------------------------------
                                    188 ;	 function UART_TX
                                    189 ;	-----------------------------------------
      00002E                        190 _UART_TX:
                                    191 ;	main.c: 40: UART1_DR = value;
      00002E C7 52 31         [ 1]  192 	ld	0x5231, a
                                    193 ;	main.c: 41: while(!(UART1_SR & UART_SR_TXE));
      000031                        194 00101$:
      000031 C6 52 30         [ 1]  195 	ld	a, 0x5230
      000034 2A FB            [ 1]  196 	jrpl	00101$
                                    197 ;	main.c: 42: }
      000036 81               [ 4]  198 	ret
                                    199 ;	main.c: 44: int uart_write(const char *str) {
                                    200 ;	-----------------------------------------
                                    201 ;	 function uart_write
                                    202 ;	-----------------------------------------
      000037                        203 _uart_write:
      000037 52 05            [ 2]  204 	sub	sp, #5
      000039 1F 03            [ 2]  205 	ldw	(0x03, sp), x
                                    206 ;	main.c: 46: for(i = 0; i < strlen(str); i++) {
      00003B 0F 05            [ 1]  207 	clr	(0x05, sp)
      00003D                        208 00103$:
      00003D 1E 03            [ 2]  209 	ldw	x, (0x03, sp)
      00003F CDr00r00         [ 4]  210 	call	_strlen
      000042 1F 01            [ 2]  211 	ldw	(0x01, sp), x
      000044 7B 05            [ 1]  212 	ld	a, (0x05, sp)
      000046 5F               [ 1]  213 	clrw	x
      000047 97               [ 1]  214 	ld	xl, a
      000048 13 01            [ 2]  215 	cpw	x, (0x01, sp)
      00004A 24 0F            [ 1]  216 	jrnc	00101$
                                    217 ;	main.c: 48: UART_TX(str[i]);
      00004C 5F               [ 1]  218 	clrw	x
      00004D 7B 05            [ 1]  219 	ld	a, (0x05, sp)
      00004F 97               [ 1]  220 	ld	xl, a
      000050 72 FB 03         [ 2]  221 	addw	x, (0x03, sp)
      000053 F6               [ 1]  222 	ld	a, (x)
      000054 CDr00r2E         [ 4]  223 	call	_UART_TX
                                    224 ;	main.c: 46: for(i = 0; i < strlen(str); i++) {
      000057 0C 05            [ 1]  225 	inc	(0x05, sp)
      000059 20 E2            [ 2]  226 	jra	00103$
      00005B                        227 00101$:
                                    228 ;	main.c: 51: return(i); // Bytes sent
      00005B 7B 05            [ 1]  229 	ld	a, (0x05, sp)
      00005D 5F               [ 1]  230 	clrw	x
      00005E 97               [ 1]  231 	ld	xl, a
                                    232 ;	main.c: 52: }
      00005F 5B 05            [ 2]  233 	addw	sp, #5
      000061 81               [ 4]  234 	ret
                                    235 ;	main.c: 53: unsigned char UART_RX(void)
                                    236 ;	-----------------------------------------
                                    237 ;	 function UART_RX
                                    238 ;	-----------------------------------------
      000062                        239 _UART_RX:
                                    240 ;	main.c: 56: while(!(UART1_SR & UART_SR_TXE));
      000062                        241 00101$:
      000062 C6 52 30         [ 1]  242 	ld	a, 0x5230
      000065 2A FB            [ 1]  243 	jrpl	00101$
                                    244 ;	main.c: 58: return UART1_DR;
      000067 C6 52 31         [ 1]  245 	ld	a, 0x5231
                                    246 ;	main.c: 59: }
      00006A 81               [ 4]  247 	ret
                                    248 ;	main.c: 60: int uart_read(void)
                                    249 ;	-----------------------------------------
                                    250 ;	 function uart_read
                                    251 ;	-----------------------------------------
      00006B                        252 _uart_read:
                                    253 ;	main.c: 63: memset(buffer, 0, sizeof(buffer));
      00006B 4B 00            [ 1]  254 	push	#0x00
      00006D 4B 01            [ 1]  255 	push	#0x01
      00006F 5F               [ 1]  256 	clrw	x
      000070 89               [ 2]  257 	pushw	x
      000071 AEr01r00         [ 2]  258 	ldw	x, #(_buffer+0)
      000074 CDr00r00         [ 4]  259 	call	_memset
                                    260 ;	main.c: 66: while(i<256)
      000077 5F               [ 1]  261 	clrw	x
      000078                        262 00105$:
      000078 A3 01 00         [ 2]  263 	cpw	x, #0x0100
      00007B 2E 22            [ 1]  264 	jrsge	00107$
                                    265 ;	main.c: 69: if(UART1_SR & UART_SR_RXNE)
      00007D C6 52 30         [ 1]  266 	ld	a, 0x5230
      000080 A5 20            [ 1]  267 	bcp	a, #0x20
      000082 27 F4            [ 1]  268 	jreq	00105$
                                    269 ;	main.c: 72: buffer[i] = UART_RX();
      000084 90 93            [ 1]  270 	ldw	y, x
      000086 72 A9r01r00      [ 2]  271 	addw	y, #(_buffer+0)
      00008A 89               [ 2]  272 	pushw	x
      00008B 90 89            [ 2]  273 	pushw	y
      00008D CDr00r62         [ 4]  274 	call	_UART_RX
      000090 90 85            [ 2]  275 	popw	y
      000092 85               [ 2]  276 	popw	x
      000093 90 F7            [ 1]  277 	ld	(y), a
                                    278 ;	main.c: 73: if(buffer[i] == '\r\n' )
      000095 A1 0D            [ 1]  279 	cp	a, #0x0d
      000097 26 03            [ 1]  280 	jrne	00102$
                                    281 ;	main.c: 75: return 1;
      000099 5F               [ 1]  282 	clrw	x
      00009A 5C               [ 1]  283 	incw	x
      00009B 81               [ 4]  284 	ret
                                    285 ;	main.c: 76: break;
      00009C                        286 00102$:
                                    287 ;	main.c: 78: i++;
      00009C 5C               [ 1]  288 	incw	x
      00009D 20 D9            [ 2]  289 	jra	00105$
      00009F                        290 00107$:
                                    291 ;	main.c: 82: return 0;
      00009F 5F               [ 1]  292 	clrw	x
                                    293 ;	main.c: 83: }
      0000A0 81               [ 4]  294 	ret
                                    295 ;	main.c: 92: void convert_int_to_chars(uint8_t num, char* rx_int_chars) {
                                    296 ;	-----------------------------------------
                                    297 ;	 function convert_int_to_chars
                                    298 ;	-----------------------------------------
      0000A1                        299 _convert_int_to_chars:
      0000A1 52 0D            [ 2]  300 	sub	sp, #13
      0000A3 6B 0D            [ 1]  301 	ld	(0x0d, sp), a
      0000A5 1F 0B            [ 2]  302 	ldw	(0x0b, sp), x
                                    303 ;	main.c: 95: rx_int_chars[0] = num / 100 + '0';
      0000A7 7B 0D            [ 1]  304 	ld	a, (0x0d, sp)
      0000A9 6B 02            [ 1]  305 	ld	(0x02, sp), a
      0000AB 0F 01            [ 1]  306 	clr	(0x01, sp)
                                    307 ;	main.c: 96: rx_int_chars[1] = num / 10 % 10 + '0';
      0000AD 1E 0B            [ 2]  308 	ldw	x, (0x0b, sp)
      0000AF 5C               [ 1]  309 	incw	x
      0000B0 1F 03            [ 2]  310 	ldw	(0x03, sp), x
                                    311 ;	main.c: 97: rx_int_chars[2] = num % 10 + '0';
      0000B2 1E 0B            [ 2]  312 	ldw	x, (0x0b, sp)
      0000B4 5C               [ 1]  313 	incw	x
      0000B5 5C               [ 1]  314 	incw	x
      0000B6 1F 05            [ 2]  315 	ldw	(0x05, sp), x
                                    316 ;	main.c: 96: rx_int_chars[1] = num / 10 % 10 + '0';
      0000B8 4B 0A            [ 1]  317 	push	#0x0a
      0000BA 4B 00            [ 1]  318 	push	#0x00
      0000BC 1E 03            [ 2]  319 	ldw	x, (0x03, sp)
                                    320 ;	main.c: 97: rx_int_chars[2] = num % 10 + '0';
      0000BE CDr00r00         [ 4]  321 	call	__divsint
      0000C1 1F 07            [ 2]  322 	ldw	(0x07, sp), x
      0000C3 4B 0A            [ 1]  323 	push	#0x0a
      0000C5 4B 00            [ 1]  324 	push	#0x00
      0000C7 1E 03            [ 2]  325 	ldw	x, (0x03, sp)
      0000C9 CDr00r00         [ 4]  326 	call	__modsint
      0000CC 9F               [ 1]  327 	ld	a, xl
      0000CD AB 30            [ 1]  328 	add	a, #0x30
      0000CF 6B 09            [ 1]  329 	ld	(0x09, sp), a
                                    330 ;	main.c: 93: if (num > 99) {
      0000D1 7B 0D            [ 1]  331 	ld	a, (0x0d, sp)
      0000D3 A1 63            [ 1]  332 	cp	a, #0x63
      0000D5 23 29            [ 2]  333 	jrule	00105$
                                    334 ;	main.c: 95: rx_int_chars[0] = num / 100 + '0';
      0000D7 4B 64            [ 1]  335 	push	#0x64
      0000D9 4B 00            [ 1]  336 	push	#0x00
      0000DB 1E 03            [ 2]  337 	ldw	x, (0x03, sp)
      0000DD CDr00r00         [ 4]  338 	call	__divsint
      0000E0 9F               [ 1]  339 	ld	a, xl
      0000E1 AB 30            [ 1]  340 	add	a, #0x30
      0000E3 1E 0B            [ 2]  341 	ldw	x, (0x0b, sp)
      0000E5 F7               [ 1]  342 	ld	(x), a
                                    343 ;	main.c: 96: rx_int_chars[1] = num / 10 % 10 + '0';
      0000E6 4B 0A            [ 1]  344 	push	#0x0a
      0000E8 4B 00            [ 1]  345 	push	#0x00
      0000EA 1E 09            [ 2]  346 	ldw	x, (0x09, sp)
      0000EC CDr00r00         [ 4]  347 	call	__modsint
      0000EF 9F               [ 1]  348 	ld	a, xl
      0000F0 AB 30            [ 1]  349 	add	a, #0x30
      0000F2 1E 03            [ 2]  350 	ldw	x, (0x03, sp)
      0000F4 F7               [ 1]  351 	ld	(x), a
                                    352 ;	main.c: 97: rx_int_chars[2] = num % 10 + '0';
      0000F5 1E 05            [ 2]  353 	ldw	x, (0x05, sp)
      0000F7 7B 09            [ 1]  354 	ld	a, (0x09, sp)
      0000F9 F7               [ 1]  355 	ld	(x), a
                                    356 ;	main.c: 98: rx_int_chars[3] ='\0';
      0000FA 1E 0B            [ 2]  357 	ldw	x, (0x0b, sp)
      0000FC 6F 03            [ 1]  358 	clr	(0x0003, x)
      0000FE 20 23            [ 2]  359 	jra	00107$
      000100                        360 00105$:
                                    361 ;	main.c: 100: } else if (num > 9) {
      000100 7B 0D            [ 1]  362 	ld	a, (0x0d, sp)
      000102 A1 09            [ 1]  363 	cp	a, #0x09
      000104 23 13            [ 2]  364 	jrule	00102$
                                    365 ;	main.c: 102: rx_int_chars[0] = num / 10 + '0';
      000106 7B 08            [ 1]  366 	ld	a, (0x08, sp)
      000108 6B 0A            [ 1]  367 	ld	(0x0a, sp), a
      00010A AB 30            [ 1]  368 	add	a, #0x30
      00010C 1E 0B            [ 2]  369 	ldw	x, (0x0b, sp)
      00010E F7               [ 1]  370 	ld	(x), a
                                    371 ;	main.c: 103: rx_int_chars[1] = num % 10 + '0';
      00010F 1E 03            [ 2]  372 	ldw	x, (0x03, sp)
      000111 7B 09            [ 1]  373 	ld	a, (0x09, sp)
      000113 F7               [ 1]  374 	ld	(x), a
                                    375 ;	main.c: 104: rx_int_chars[2] ='\0'; // Заканчиваем строку символом конца строки
      000114 1E 05            [ 2]  376 	ldw	x, (0x05, sp)
      000116 7F               [ 1]  377 	clr	(x)
      000117 20 0A            [ 2]  378 	jra	00107$
      000119                        379 00102$:
                                    380 ;	main.c: 107: rx_int_chars[0] = num + '0';
      000119 7B 0D            [ 1]  381 	ld	a, (0x0d, sp)
      00011B AB 30            [ 1]  382 	add	a, #0x30
      00011D 1E 0B            [ 2]  383 	ldw	x, (0x0b, sp)
      00011F F7               [ 1]  384 	ld	(x), a
                                    385 ;	main.c: 108: rx_int_chars[1] ='\0';
      000120 1E 03            [ 2]  386 	ldw	x, (0x03, sp)
      000122 7F               [ 1]  387 	clr	(x)
      000123                        388 00107$:
                                    389 ;	main.c: 110: }
      000123 5B 0D            [ 2]  390 	addw	sp, #13
      000125 81               [ 4]  391 	ret
                                    392 ;	main.c: 112: uint8_t convert_chars_to_int(char* rx_chars_int, const int i) {
                                    393 ;	-----------------------------------------
                                    394 ;	 function convert_chars_to_int
                                    395 ;	-----------------------------------------
      000126                        396 _convert_chars_to_int:
      000126 52 03            [ 2]  397 	sub	sp, #3
      000128 1F 02            [ 2]  398 	ldw	(0x02, sp), x
                                    399 ;	main.c: 113: uint8_t result = 0;
      00012A 4F               [ 1]  400 	clr	a
                                    401 ;	main.c: 115: for (int o = 0; o < i; o++) {
      00012B 5F               [ 1]  402 	clrw	x
      00012C                        403 00103$:
      00012C 13 06            [ 2]  404 	cpw	x, (0x06, sp)
      00012E 2E 18            [ 1]  405 	jrsge	00101$
                                    406 ;	main.c: 117: result = (result * 10) + (rx_chars_int[o] - '0');
      000130 90 97            [ 1]  407 	ld	yl, a
      000132 A6 0A            [ 1]  408 	ld	a, #0x0a
      000134 90 42            [ 4]  409 	mul	y, a
      000136 61               [ 1]  410 	exg	a, yl
      000137 6B 01            [ 1]  411 	ld	(0x01, sp), a
      000139 61               [ 1]  412 	exg	a, yl
      00013A 90 93            [ 1]  413 	ldw	y, x
      00013C 72 F9 02         [ 2]  414 	addw	y, (0x02, sp)
      00013F 90 F6            [ 1]  415 	ld	a, (y)
      000141 A0 30            [ 1]  416 	sub	a, #0x30
      000143 1B 01            [ 1]  417 	add	a, (0x01, sp)
                                    418 ;	main.c: 115: for (int o = 0; o < i; o++) {
      000145 5C               [ 1]  419 	incw	x
      000146 20 E4            [ 2]  420 	jra	00103$
      000148                        421 00101$:
                                    422 ;	main.c: 120: return result;
                                    423 ;	main.c: 121: }
      000148 1E 04            [ 2]  424 	ldw	x, (4, sp)
      00014A 5B 07            [ 2]  425 	addw	sp, #7
      00014C FC               [ 2]  426 	jp	(x)
                                    427 ;	main.c: 124: void convert_int_to_binary(int num, char* rx_binary_chars) {
                                    428 ;	-----------------------------------------
                                    429 ;	 function convert_int_to_binary
                                    430 ;	-----------------------------------------
      00014D                        431 _convert_int_to_binary:
      00014D 52 04            [ 2]  432 	sub	sp, #4
      00014F 1F 01            [ 2]  433 	ldw	(0x01, sp), x
                                    434 ;	main.c: 126: for(int i = 7; i >= 0; i--) {
      000151 AE 00 07         [ 2]  435 	ldw	x, #0x0007
      000154 1F 03            [ 2]  436 	ldw	(0x03, sp), x
      000156                        437 00103$:
      000156 0D 03            [ 1]  438 	tnz	(0x03, sp)
      000158 2B 22            [ 1]  439 	jrmi	00101$
                                    440 ;	main.c: 128: rx_binary_chars[7 - i] = ((num >> i) & 1) + '0';
      00015A AE 00 07         [ 2]  441 	ldw	x, #0x0007
      00015D 72 F0 03         [ 2]  442 	subw	x, (0x03, sp)
      000160 72 FB 07         [ 2]  443 	addw	x, (0x07, sp)
      000163 16 01            [ 2]  444 	ldw	y, (0x01, sp)
      000165 7B 04            [ 1]  445 	ld	a, (0x04, sp)
      000167 27 05            [ 1]  446 	jreq	00120$
      000169                        447 00119$:
      000169 90 57            [ 2]  448 	sraw	y
      00016B 4A               [ 1]  449 	dec	a
      00016C 26 FB            [ 1]  450 	jrne	00119$
      00016E                        451 00120$:
      00016E 90 9F            [ 1]  452 	ld	a, yl
      000170 A4 01            [ 1]  453 	and	a, #0x01
      000172 AB 30            [ 1]  454 	add	a, #0x30
      000174 F7               [ 1]  455 	ld	(x), a
                                    456 ;	main.c: 126: for(int i = 7; i >= 0; i--) {
      000175 1E 03            [ 2]  457 	ldw	x, (0x03, sp)
      000177 5A               [ 2]  458 	decw	x
      000178 1F 03            [ 2]  459 	ldw	(0x03, sp), x
      00017A 20 DA            [ 2]  460 	jra	00103$
      00017C                        461 00101$:
                                    462 ;	main.c: 130: rx_binary_chars[8] = '\0'; // Добавляем символ конца строки
      00017C 1E 07            [ 2]  463 	ldw	x, (0x07, sp)
      00017E 6F 08            [ 1]  464 	clr	(0x0008, x)
                                    465 ;	main.c: 131: }
      000180 1E 05            [ 2]  466 	ldw	x, (5, sp)
      000182 5B 08            [ 2]  467 	addw	sp, #8
      000184 FC               [ 2]  468 	jp	(x)
                                    469 ;	main.c: 140: void get_addr_from_buff(void)
                                    470 ;	-----------------------------------------
                                    471 ;	 function get_addr_from_buff
                                    472 ;	-----------------------------------------
      000185                        473 _get_addr_from_buff:
      000185 52 02            [ 2]  474 	sub	sp, #2
                                    475 ;	main.c: 144: while(1)
      000187 A6 03            [ 1]  476 	ld	a, #0x03
      000189 6B 01            [ 1]  477 	ld	(0x01, sp), a
      00018B 0F 02            [ 1]  478 	clr	(0x02, sp)
      00018D                        479 00105$:
                                    480 ;	main.c: 146: if(buffer[i] == ' ' || buffer[i] == '\r\n')
      00018D 5F               [ 1]  481 	clrw	x
      00018E 7B 01            [ 1]  482 	ld	a, (0x01, sp)
      000190 97               [ 1]  483 	ld	xl, a
      000191 D6u01u00         [ 1]  484 	ld	a, (_buffer+0, x)
      000194 A1 20            [ 1]  485 	cp	a, #0x20
      000196 27 04            [ 1]  486 	jreq	00101$
      000198 A1 0D            [ 1]  487 	cp	a, #0x0d
      00019A 26 08            [ 1]  488 	jrne	00102$
      00019C                        489 00101$:
                                    490 ;	main.c: 148: p_size = i+1;
      00019C 7B 01            [ 1]  491 	ld	a, (0x01, sp)
      00019E 4C               [ 1]  492 	inc	a
      00019F C7u02u04         [ 1]  493 	ld	_p_size+0, a
                                    494 ;	main.c: 149: break;
      0001A2 20 06            [ 2]  495 	jra	00106$
      0001A4                        496 00102$:
                                    497 ;	main.c: 151: i++;
      0001A4 0C 01            [ 1]  498 	inc	(0x01, sp)
                                    499 ;	main.c: 152: counter++;
      0001A6 0C 02            [ 1]  500 	inc	(0x02, sp)
      0001A8 20 E3            [ 2]  501 	jra	00105$
      0001AA                        502 00106$:
                                    503 ;	main.c: 154: memcpy(a, &buffer[3], counter);
      0001AA 5F               [ 1]  504 	clrw	x
      0001AB 7B 02            [ 1]  505 	ld	a, (0x02, sp)
      0001AD 97               [ 1]  506 	ld	xl, a
      0001AE 89               [ 2]  507 	pushw	x
      0001AF 4Br03            [ 1]  508 	push	#<(_buffer+3)
      0001B1 4Bs01            [ 1]  509 	push	#((_buffer+3) >> 8)
      0001B3 AEr02r00         [ 2]  510 	ldw	x, #(_a+0)
      0001B6 CDr00r00         [ 4]  511 	call	___memcpy
                                    512 ;	main.c: 155: d_addr = convert_chars_to_int(a, counter);
      0001B9 5F               [ 1]  513 	clrw	x
      0001BA 7B 02            [ 1]  514 	ld	a, (0x02, sp)
      0001BC 97               [ 1]  515 	ld	xl, a
      0001BD 89               [ 2]  516 	pushw	x
      0001BE AEr02r00         [ 2]  517 	ldw	x, #(_a+0)
      0001C1 CDr01r26         [ 4]  518 	call	_convert_chars_to_int
      0001C4 C7u02u03         [ 1]  519 	ld	_d_addr+0, a
                                    520 ;	main.c: 156: }
      0001C7 5B 02            [ 2]  521 	addw	sp, #2
      0001C9 81               [ 4]  522 	ret
                                    523 ;	main.c: 158: void get_size_from_buff(void)
                                    524 ;	-----------------------------------------
                                    525 ;	 function get_size_from_buff
                                    526 ;	-----------------------------------------
      0001CA                        527 _get_size_from_buff:
      0001CA 52 02            [ 2]  528 	sub	sp, #2
                                    529 ;	main.c: 160: memset(a, 0, sizeof(a));
      0001CC 4B 03            [ 1]  530 	push	#0x03
      0001CE 4B 00            [ 1]  531 	push	#0x00
      0001D0 5F               [ 1]  532 	clrw	x
      0001D1 89               [ 2]  533 	pushw	x
      0001D2 AEr02r00         [ 2]  534 	ldw	x, #(_a+0)
      0001D5 CDr00r00         [ 4]  535 	call	_memset
                                    536 ;	main.c: 162: uint8_t i = p_size;
      0001D8 C6u02u04         [ 1]  537 	ld	a, _p_size+0
      0001DB 6B 01            [ 1]  538 	ld	(0x01, sp), a
                                    539 ;	main.c: 163: while(1)
      0001DD 0F 02            [ 1]  540 	clr	(0x02, sp)
      0001DF                        541 00105$:
                                    542 ;	main.c: 165: if(buffer[i] == ' ' || buffer[i] == '\r\n')
      0001DF 5F               [ 1]  543 	clrw	x
      0001E0 7B 01            [ 1]  544 	ld	a, (0x01, sp)
      0001E2 97               [ 1]  545 	ld	xl, a
      0001E3 D6u01u00         [ 1]  546 	ld	a, (_buffer+0, x)
      0001E6 A1 20            [ 1]  547 	cp	a, #0x20
      0001E8 27 04            [ 1]  548 	jreq	00101$
      0001EA A1 0D            [ 1]  549 	cp	a, #0x0d
      0001EC 26 08            [ 1]  550 	jrne	00102$
      0001EE                        551 00101$:
                                    552 ;	main.c: 168: p_bytes = i+1;
      0001EE 7B 01            [ 1]  553 	ld	a, (0x01, sp)
      0001F0 4C               [ 1]  554 	inc	a
      0001F1 C7u02u06         [ 1]  555 	ld	_p_bytes+0, a
                                    556 ;	main.c: 169: break;
      0001F4 20 06            [ 2]  557 	jra	00106$
      0001F6                        558 00102$:
                                    559 ;	main.c: 171: i++;
      0001F6 0C 01            [ 1]  560 	inc	(0x01, sp)
                                    561 ;	main.c: 172: counter++;
      0001F8 0C 02            [ 1]  562 	inc	(0x02, sp)
      0001FA 20 E3            [ 2]  563 	jra	00105$
      0001FC                        564 00106$:
                                    565 ;	main.c: 175: memcpy(a, &buffer[p_size], counter);
      0001FC 90 5F            [ 1]  566 	clrw	y
      0001FE 7B 02            [ 1]  567 	ld	a, (0x02, sp)
      000200 90 97            [ 1]  568 	ld	yl, a
      000202 5F               [ 1]  569 	clrw	x
      000203 C6u02u04         [ 1]  570 	ld	a, _p_size+0
      000206 97               [ 1]  571 	ld	xl, a
      000207 1Cr01r00         [ 2]  572 	addw	x, #(_buffer+0)
      00020A 90 89            [ 2]  573 	pushw	y
      00020C 89               [ 2]  574 	pushw	x
      00020D AEr02r00         [ 2]  575 	ldw	x, #(_a+0)
      000210 CDr00r00         [ 4]  576 	call	___memcpy
                                    577 ;	main.c: 176: d_size = convert_chars_to_int(a, counter);
      000213 5F               [ 1]  578 	clrw	x
      000214 7B 02            [ 1]  579 	ld	a, (0x02, sp)
      000216 97               [ 1]  580 	ld	xl, a
      000217 89               [ 2]  581 	pushw	x
      000218 AEr02r00         [ 2]  582 	ldw	x, #(_a+0)
      00021B CDr01r26         [ 4]  583 	call	_convert_chars_to_int
      00021E C7u02u05         [ 1]  584 	ld	_d_size+0, a
                                    585 ;	main.c: 177: }
      000221 5B 02            [ 2]  586 	addw	sp, #2
      000223 81               [ 4]  587 	ret
                                    588 ;	main.c: 178: void char_buffer_to_int(void)
                                    589 ;	-----------------------------------------
                                    590 ;	 function char_buffer_to_int
                                    591 ;	-----------------------------------------
      000224                        592 _char_buffer_to_int:
      000224 52 08            [ 2]  593 	sub	sp, #8
                                    594 ;	main.c: 180: memset(a, 0, sizeof(a));
      000226 4B 03            [ 1]  595 	push	#0x03
      000228 4B 00            [ 1]  596 	push	#0x00
      00022A 5F               [ 1]  597 	clrw	x
      00022B 89               [ 2]  598 	pushw	x
      00022C AEr02r00         [ 2]  599 	ldw	x, #(_a+0)
      00022F CDr00r00         [ 4]  600 	call	_memset
                                    601 ;	main.c: 181: uint8_t counter = d_size;
      000232 C6u02u05         [ 1]  602 	ld	a, _d_size+0
      000235 6B 01            [ 1]  603 	ld	(0x01, sp), a
                                    604 ;	main.c: 182: uint8_t i = p_bytes;
      000237 C6u02u06         [ 1]  605 	ld	a, _p_bytes+0
      00023A 6B 03            [ 1]  606 	ld	(0x03, sp), a
                                    607 ;	main.c: 185: for(int o = 0; o < counter;o++)
      00023C 0F 04            [ 1]  608 	clr	(0x04, sp)
      00023E 5F               [ 1]  609 	clrw	x
      00023F 1F 05            [ 2]  610 	ldw	(0x05, sp), x
      000241                        611 00112$:
      000241 7B 01            [ 1]  612 	ld	a, (0x01, sp)
      000243 6B 08            [ 1]  613 	ld	(0x08, sp), a
      000245 0F 07            [ 1]  614 	clr	(0x07, sp)
      000247 1E 05            [ 2]  615 	ldw	x, (0x05, sp)
      000249 13 07            [ 2]  616 	cpw	x, (0x07, sp)
      00024B 2E 65            [ 1]  617 	jrsge	00114$
                                    618 ;	main.c: 187: uint8_t number_counter = 0;
      00024D 0F 02            [ 1]  619 	clr	(0x02, sp)
                                    620 ;	main.c: 188: while(1)
      00024F 7B 03            [ 1]  621 	ld	a, (0x03, sp)
      000251 6B 07            [ 1]  622 	ld	(0x07, sp), a
      000253 0F 08            [ 1]  623 	clr	(0x08, sp)
      000255                        624 00108$:
                                    625 ;	main.c: 190: if(buffer[i] == ' ')
      000255 5F               [ 1]  626 	clrw	x
      000256 7B 07            [ 1]  627 	ld	a, (0x07, sp)
      000258 97               [ 1]  628 	ld	xl, a
      000259 D6u01u00         [ 1]  629 	ld	a, (_buffer+0, x)
      00025C A1 20            [ 1]  630 	cp	a, #0x20
      00025E 26 04            [ 1]  631 	jrne	00105$
                                    632 ;	main.c: 192: i++;
      000260 0C 03            [ 1]  633 	inc	(0x03, sp)
                                    634 ;	main.c: 193: break;
      000262 20 12            [ 2]  635 	jra	00109$
      000264                        636 00105$:
                                    637 ;	main.c: 195: else if(buffer[i] == '\r\n')
      000264 A1 0D            [ 1]  638 	cp	a, #0x0d
      000266 27 0E            [ 1]  639 	jreq	00109$
                                    640 ;	main.c: 198: i++;
      000268 0C 07            [ 1]  641 	inc	(0x07, sp)
      00026A 7B 07            [ 1]  642 	ld	a, (0x07, sp)
      00026C 6B 03            [ 1]  643 	ld	(0x03, sp), a
                                    644 ;	main.c: 200: number_counter++;
      00026E 0C 08            [ 1]  645 	inc	(0x08, sp)
      000270 7B 08            [ 1]  646 	ld	a, (0x08, sp)
      000272 6B 02            [ 1]  647 	ld	(0x02, sp), a
      000274 20 DF            [ 2]  648 	jra	00108$
      000276                        649 00109$:
                                    650 ;	main.c: 202: memcpy(a, &buffer[i - number_counter], number_counter);
      000276 90 5F            [ 1]  651 	clrw	y
      000278 7B 02            [ 1]  652 	ld	a, (0x02, sp)
      00027A 90 97            [ 1]  653 	ld	yl, a
      00027C 5F               [ 1]  654 	clrw	x
      00027D 7B 03            [ 1]  655 	ld	a, (0x03, sp)
      00027F 97               [ 1]  656 	ld	xl, a
      000280 7B 02            [ 1]  657 	ld	a, (0x02, sp)
      000282 6B 08            [ 1]  658 	ld	(0x08, sp), a
      000284 0F 07            [ 1]  659 	clr	(0x07, sp)
      000286 72 F0 07         [ 2]  660 	subw	x, (0x07, sp)
      000289 1Cr01r00         [ 2]  661 	addw	x, #(_buffer+0)
      00028C 90 89            [ 2]  662 	pushw	y
      00028E 89               [ 2]  663 	pushw	x
      00028F AEr02r00         [ 2]  664 	ldw	x, #(_a+0)
      000292 CDr00r00         [ 4]  665 	call	___memcpy
                                    666 ;	main.c: 203: data_buf[int_buf_i] = convert_chars_to_int(a, number_counter);
      000295 5F               [ 1]  667 	clrw	x
      000296 7B 04            [ 1]  668 	ld	a, (0x04, sp)
      000298 97               [ 1]  669 	ld	xl, a
      000299 1Cr02r07         [ 2]  670 	addw	x, #(_data_buf+0)
      00029C 89               [ 2]  671 	pushw	x
      00029D 16 09            [ 2]  672 	ldw	y, (0x09, sp)
      00029F 90 89            [ 2]  673 	pushw	y
      0002A1 AEr02r00         [ 2]  674 	ldw	x, #(_a+0)
      0002A4 CDr01r26         [ 4]  675 	call	_convert_chars_to_int
      0002A7 85               [ 2]  676 	popw	x
      0002A8 F7               [ 1]  677 	ld	(x), a
                                    678 ;	main.c: 204: int_buf_i++;
      0002A9 0C 04            [ 1]  679 	inc	(0x04, sp)
                                    680 ;	main.c: 185: for(int o = 0; o < counter;o++)
      0002AB 1E 05            [ 2]  681 	ldw	x, (0x05, sp)
      0002AD 5C               [ 1]  682 	incw	x
      0002AE 1F 05            [ 2]  683 	ldw	(0x05, sp), x
      0002B0 20 8F            [ 2]  684 	jra	00112$
      0002B2                        685 00114$:
                                    686 ;	main.c: 206: }
      0002B2 5B 08            [ 2]  687 	addw	sp, #8
      0002B4 81               [ 4]  688 	ret
                                    689 ;	main.c: 214: void reg_check(void)
                                    690 ;	-----------------------------------------
                                    691 ;	 function reg_check
                                    692 ;	-----------------------------------------
      0002B5                        693 _reg_check:
      0002B5 52 09            [ 2]  694 	sub	sp, #9
                                    695 ;	main.c: 216: char rx_binary_chars[9]={0};
      0002B7 0F 01            [ 1]  696 	clr	(0x01, sp)
      0002B9 0F 02            [ 1]  697 	clr	(0x02, sp)
      0002BB 0F 03            [ 1]  698 	clr	(0x03, sp)
      0002BD 0F 04            [ 1]  699 	clr	(0x04, sp)
      0002BF 0F 05            [ 1]  700 	clr	(0x05, sp)
      0002C1 0F 06            [ 1]  701 	clr	(0x06, sp)
      0002C3 0F 07            [ 1]  702 	clr	(0x07, sp)
      0002C5 0F 08            [ 1]  703 	clr	(0x08, sp)
      0002C7 0F 09            [ 1]  704 	clr	(0x09, sp)
                                    705 ;	main.c: 217: convert_int_to_binary(I2C_SR1, rx_binary_chars);
      0002C9 96               [ 1]  706 	ldw	x, sp
      0002CA 5C               [ 1]  707 	incw	x
      0002CB 51               [ 1]  708 	exgw	x, y
      0002CC C6 52 17         [ 1]  709 	ld	a, 0x5217
      0002CF 5F               [ 1]  710 	clrw	x
      0002D0 90 89            [ 2]  711 	pushw	y
      0002D2 97               [ 1]  712 	ld	xl, a
      0002D3 CDr01r4D         [ 4]  713 	call	_convert_int_to_binary
                                    714 ;	main.c: 218: status_registers[0] = I2C_SR1;
      0002D6 55 52 17u00u00   [ 1]  715 	mov	_status_registers+0, 0x5217
                                    716 ;	main.c: 219: convert_int_to_binary(I2C_SR2, rx_binary_chars);
      0002DB 96               [ 1]  717 	ldw	x, sp
      0002DC 5C               [ 1]  718 	incw	x
      0002DD 51               [ 1]  719 	exgw	x, y
      0002DE C6 52 18         [ 1]  720 	ld	a, 0x5218
      0002E1 5F               [ 1]  721 	clrw	x
      0002E2 90 89            [ 2]  722 	pushw	y
      0002E4 97               [ 1]  723 	ld	xl, a
      0002E5 CDr01r4D         [ 4]  724 	call	_convert_int_to_binary
                                    725 ;	main.c: 220: status_registers[1] = I2C_SR2;
      0002E8 55 52 18u00u01   [ 1]  726 	mov	_status_registers+1, 0x5218
                                    727 ;	main.c: 221: convert_int_to_binary(I2C_SR3, rx_binary_chars);
      0002ED 96               [ 1]  728 	ldw	x, sp
      0002EE 5C               [ 1]  729 	incw	x
      0002EF 51               [ 1]  730 	exgw	x, y
      0002F0 C6 52 19         [ 1]  731 	ld	a, 0x5219
      0002F3 5F               [ 1]  732 	clrw	x
      0002F4 90 89            [ 2]  733 	pushw	y
      0002F6 97               [ 1]  734 	ld	xl, a
      0002F7 CDr01r4D         [ 4]  735 	call	_convert_int_to_binary
                                    736 ;	main.c: 222: status_registers[2] = I2C_SR3;
      0002FA 55 52 19u00u02   [ 1]  737 	mov	_status_registers+2, 0x5219
                                    738 ;	main.c: 223: convert_int_to_binary(I2C_CR1, rx_binary_chars);
      0002FF 96               [ 1]  739 	ldw	x, sp
      000300 5C               [ 1]  740 	incw	x
      000301 51               [ 1]  741 	exgw	x, y
      000302 C6 52 10         [ 1]  742 	ld	a, 0x5210
      000305 5F               [ 1]  743 	clrw	x
      000306 90 89            [ 2]  744 	pushw	y
      000308 97               [ 1]  745 	ld	xl, a
      000309 CDr01r4D         [ 4]  746 	call	_convert_int_to_binary
                                    747 ;	main.c: 224: status_registers[3] = I2C_CR1;
      00030C 55 52 10u00u03   [ 1]  748 	mov	_status_registers+3, 0x5210
                                    749 ;	main.c: 225: convert_int_to_binary(I2C_CR2, rx_binary_chars);
      000311 96               [ 1]  750 	ldw	x, sp
      000312 5C               [ 1]  751 	incw	x
      000313 51               [ 1]  752 	exgw	x, y
      000314 C6 52 11         [ 1]  753 	ld	a, 0x5211
      000317 5F               [ 1]  754 	clrw	x
      000318 90 89            [ 2]  755 	pushw	y
      00031A 97               [ 1]  756 	ld	xl, a
      00031B CDr01r4D         [ 4]  757 	call	_convert_int_to_binary
                                    758 ;	main.c: 226: status_registers[4] = I2C_CR2;
      00031E 55 52 11u00u04   [ 1]  759 	mov	_status_registers+4, 0x5211
                                    760 ;	main.c: 227: convert_int_to_binary(I2C_DR, rx_binary_chars);
      000323 96               [ 1]  761 	ldw	x, sp
      000324 5C               [ 1]  762 	incw	x
      000325 51               [ 1]  763 	exgw	x, y
      000326 C6 52 16         [ 1]  764 	ld	a, 0x5216
      000329 5F               [ 1]  765 	clrw	x
      00032A 90 89            [ 2]  766 	pushw	y
      00032C 97               [ 1]  767 	ld	xl, a
      00032D CDr01r4D         [ 4]  768 	call	_convert_int_to_binary
                                    769 ;	main.c: 228: status_registers[5] = I2C_DR;
      000330 55 52 16u00u05   [ 1]  770 	mov	_status_registers+5, 0x5216
                                    771 ;	main.c: 229: }
      000335 5B 09            [ 2]  772 	addw	sp, #9
      000337 81               [ 4]  773 	ret
                                    774 ;	main.c: 232: void status_check(void){
                                    775 ;	-----------------------------------------
                                    776 ;	 function status_check
                                    777 ;	-----------------------------------------
      000338                        778 _status_check:
      000338 52 09            [ 2]  779 	sub	sp, #9
                                    780 ;	main.c: 233: char rx_binary_chars[9]={0};
      00033A 0F 01            [ 1]  781 	clr	(0x01, sp)
      00033C 0F 02            [ 1]  782 	clr	(0x02, sp)
      00033E 0F 03            [ 1]  783 	clr	(0x03, sp)
      000340 0F 04            [ 1]  784 	clr	(0x04, sp)
      000342 0F 05            [ 1]  785 	clr	(0x05, sp)
      000344 0F 06            [ 1]  786 	clr	(0x06, sp)
      000346 0F 07            [ 1]  787 	clr	(0x07, sp)
      000348 0F 08            [ 1]  788 	clr	(0x08, sp)
      00034A 0F 09            [ 1]  789 	clr	(0x09, sp)
                                    790 ;	main.c: 234: uart_write("\nI2C_REGS >.<\n");
      00034C AEr00r00         [ 2]  791 	ldw	x, #(___str_0+0)
      00034F CDr00r37         [ 4]  792 	call	_uart_write
                                    793 ;	main.c: 235: convert_int_to_binary(I2C_SR1, rx_binary_chars);
      000352 96               [ 1]  794 	ldw	x, sp
      000353 5C               [ 1]  795 	incw	x
      000354 51               [ 1]  796 	exgw	x, y
      000355 C6 52 17         [ 1]  797 	ld	a, 0x5217
      000358 5F               [ 1]  798 	clrw	x
      000359 90 89            [ 2]  799 	pushw	y
      00035B 97               [ 1]  800 	ld	xl, a
      00035C CDr01r4D         [ 4]  801 	call	_convert_int_to_binary
                                    802 ;	main.c: 236: uart_write("\nSR1 -> ");
      00035F AEr00r0F         [ 2]  803 	ldw	x, #(___str_1+0)
      000362 CDr00r37         [ 4]  804 	call	_uart_write
                                    805 ;	main.c: 237: uart_write(rx_binary_chars);
      000365 96               [ 1]  806 	ldw	x, sp
      000366 5C               [ 1]  807 	incw	x
      000367 CDr00r37         [ 4]  808 	call	_uart_write
                                    809 ;	main.c: 238: uart_write(" <-\n");
      00036A AEr00r18         [ 2]  810 	ldw	x, #(___str_2+0)
      00036D CDr00r37         [ 4]  811 	call	_uart_write
                                    812 ;	main.c: 239: convert_int_to_binary(I2C_SR2, rx_binary_chars);
      000370 96               [ 1]  813 	ldw	x, sp
      000371 5C               [ 1]  814 	incw	x
      000372 51               [ 1]  815 	exgw	x, y
      000373 C6 52 18         [ 1]  816 	ld	a, 0x5218
      000376 5F               [ 1]  817 	clrw	x
      000377 90 89            [ 2]  818 	pushw	y
      000379 97               [ 1]  819 	ld	xl, a
      00037A CDr01r4D         [ 4]  820 	call	_convert_int_to_binary
                                    821 ;	main.c: 240: uart_write("SR2 -> ");
      00037D AEr00r1D         [ 2]  822 	ldw	x, #(___str_3+0)
      000380 CDr00r37         [ 4]  823 	call	_uart_write
                                    824 ;	main.c: 241: uart_write(rx_binary_chars);
      000383 96               [ 1]  825 	ldw	x, sp
      000384 5C               [ 1]  826 	incw	x
      000385 CDr00r37         [ 4]  827 	call	_uart_write
                                    828 ;	main.c: 242: uart_write(" <-\n");
      000388 AEr00r18         [ 2]  829 	ldw	x, #(___str_2+0)
      00038B CDr00r37         [ 4]  830 	call	_uart_write
                                    831 ;	main.c: 243: convert_int_to_binary(I2C_SR3, rx_binary_chars);
      00038E 96               [ 1]  832 	ldw	x, sp
      00038F 5C               [ 1]  833 	incw	x
      000390 51               [ 1]  834 	exgw	x, y
      000391 C6 52 19         [ 1]  835 	ld	a, 0x5219
      000394 5F               [ 1]  836 	clrw	x
      000395 90 89            [ 2]  837 	pushw	y
      000397 97               [ 1]  838 	ld	xl, a
      000398 CDr01r4D         [ 4]  839 	call	_convert_int_to_binary
                                    840 ;	main.c: 244: uart_write("SR3 -> ");
      00039B AEr00r25         [ 2]  841 	ldw	x, #(___str_4+0)
      00039E CDr00r37         [ 4]  842 	call	_uart_write
                                    843 ;	main.c: 245: uart_write(rx_binary_chars);
      0003A1 96               [ 1]  844 	ldw	x, sp
      0003A2 5C               [ 1]  845 	incw	x
      0003A3 CDr00r37         [ 4]  846 	call	_uart_write
                                    847 ;	main.c: 246: uart_write(" <-\n");
      0003A6 AEr00r18         [ 2]  848 	ldw	x, #(___str_2+0)
      0003A9 CDr00r37         [ 4]  849 	call	_uart_write
                                    850 ;	main.c: 247: convert_int_to_binary(I2C_CR1, rx_binary_chars);
      0003AC 96               [ 1]  851 	ldw	x, sp
      0003AD 5C               [ 1]  852 	incw	x
      0003AE 51               [ 1]  853 	exgw	x, y
      0003AF C6 52 10         [ 1]  854 	ld	a, 0x5210
      0003B2 5F               [ 1]  855 	clrw	x
      0003B3 90 89            [ 2]  856 	pushw	y
      0003B5 97               [ 1]  857 	ld	xl, a
      0003B6 CDr01r4D         [ 4]  858 	call	_convert_int_to_binary
                                    859 ;	main.c: 248: uart_write("CR1 -> ");
      0003B9 AEr00r2D         [ 2]  860 	ldw	x, #(___str_5+0)
      0003BC CDr00r37         [ 4]  861 	call	_uart_write
                                    862 ;	main.c: 249: uart_write(rx_binary_chars);
      0003BF 96               [ 1]  863 	ldw	x, sp
      0003C0 5C               [ 1]  864 	incw	x
      0003C1 CDr00r37         [ 4]  865 	call	_uart_write
                                    866 ;	main.c: 250: uart_write(" <-\n");
      0003C4 AEr00r18         [ 2]  867 	ldw	x, #(___str_2+0)
      0003C7 CDr00r37         [ 4]  868 	call	_uart_write
                                    869 ;	main.c: 251: convert_int_to_binary(I2C_CR2, rx_binary_chars);
      0003CA 96               [ 1]  870 	ldw	x, sp
      0003CB 5C               [ 1]  871 	incw	x
      0003CC 51               [ 1]  872 	exgw	x, y
      0003CD C6 52 11         [ 1]  873 	ld	a, 0x5211
      0003D0 5F               [ 1]  874 	clrw	x
      0003D1 90 89            [ 2]  875 	pushw	y
      0003D3 97               [ 1]  876 	ld	xl, a
      0003D4 CDr01r4D         [ 4]  877 	call	_convert_int_to_binary
                                    878 ;	main.c: 252: uart_write("CR2 -> ");
      0003D7 AEr00r35         [ 2]  879 	ldw	x, #(___str_6+0)
      0003DA CDr00r37         [ 4]  880 	call	_uart_write
                                    881 ;	main.c: 253: uart_write(rx_binary_chars);
      0003DD 96               [ 1]  882 	ldw	x, sp
      0003DE 5C               [ 1]  883 	incw	x
      0003DF CDr00r37         [ 4]  884 	call	_uart_write
                                    885 ;	main.c: 254: uart_write(" <-\n");
      0003E2 AEr00r18         [ 2]  886 	ldw	x, #(___str_2+0)
      0003E5 CDr00r37         [ 4]  887 	call	_uart_write
                                    888 ;	main.c: 255: convert_int_to_binary(I2C_DR, rx_binary_chars);
      0003E8 96               [ 1]  889 	ldw	x, sp
      0003E9 5C               [ 1]  890 	incw	x
      0003EA 51               [ 1]  891 	exgw	x, y
      0003EB C6 52 16         [ 1]  892 	ld	a, 0x5216
      0003EE 5F               [ 1]  893 	clrw	x
      0003EF 90 89            [ 2]  894 	pushw	y
      0003F1 97               [ 1]  895 	ld	xl, a
      0003F2 CDr01r4D         [ 4]  896 	call	_convert_int_to_binary
                                    897 ;	main.c: 256: uart_write("DR -> ");
      0003F5 AEr00r3D         [ 2]  898 	ldw	x, #(___str_7+0)
      0003F8 CDr00r37         [ 4]  899 	call	_uart_write
                                    900 ;	main.c: 257: uart_write(rx_binary_chars);
      0003FB 96               [ 1]  901 	ldw	x, sp
      0003FC 5C               [ 1]  902 	incw	x
      0003FD CDr00r37         [ 4]  903 	call	_uart_write
                                    904 ;	main.c: 258: uart_write(" <-\n");
      000400 AEr00r18         [ 2]  905 	ldw	x, #(___str_2+0)
      000403 CDr00r37         [ 4]  906 	call	_uart_write
                                    907 ;	main.c: 304: }
      000406 5B 09            [ 2]  908 	addw	sp, #9
      000408 81               [ 4]  909 	ret
                                    910 ;	main.c: 306: void uart_init(void){
                                    911 ;	-----------------------------------------
                                    912 ;	 function uart_init
                                    913 ;	-----------------------------------------
      000409                        914 _uart_init:
                                    915 ;	main.c: 307: CLK_CKDIVR = 0;
      000409 35 00 50 C6      [ 1]  916 	mov	0x50c6+0, #0x00
                                    917 ;	main.c: 310: UART1_CR2 |= UART_CR2_TEN; // Transmitter enable
      00040D 72 16 52 35      [ 1]  918 	bset	0x5235, #3
                                    919 ;	main.c: 311: UART1_CR2 |= UART_CR2_REN; // Receiver enable
      000411 72 14 52 35      [ 1]  920 	bset	0x5235, #2
                                    921 ;	main.c: 312: UART1_CR3 &= ~(UART_CR3_STOP1 | UART_CR3_STOP2); // 1 stop bit
      000415 C6 52 36         [ 1]  922 	ld	a, 0x5236
      000418 A4 CF            [ 1]  923 	and	a, #0xcf
      00041A C7 52 36         [ 1]  924 	ld	0x5236, a
                                    925 ;	main.c: 314: UART1_BRR2 = 0x03; UART1_BRR1 = 0x68; // 0x0683 coded funky way (see ref manual)
      00041D 35 03 52 33      [ 1]  926 	mov	0x5233+0, #0x03
      000421 35 68 52 32      [ 1]  927 	mov	0x5232+0, #0x68
                                    928 ;	main.c: 315: }
      000425 81               [ 4]  929 	ret
                                    930 ;	main.c: 319: void i2c_init(void) {
                                    931 ;	-----------------------------------------
                                    932 ;	 function i2c_init
                                    933 ;	-----------------------------------------
      000426                        934 _i2c_init:
                                    935 ;	main.c: 325: I2C_CR1 = I2C_CR1 & ~0x01;      // PE=0, disable I2C before setup
      000426 72 11 52 10      [ 1]  936 	bres	0x5210, #0
                                    937 ;	main.c: 326: I2C_FREQR= 16;                  // peripheral frequence =16MHz
      00042A 35 10 52 12      [ 1]  938 	mov	0x5212+0, #0x10
                                    939 ;	main.c: 327: I2C_CCRH = 0;                   // =0
      00042E 35 00 52 1C      [ 1]  940 	mov	0x521c+0, #0x00
                                    941 ;	main.c: 328: I2C_CCRL = 80;                  // 100kHz for I2C
      000432 35 50 52 1B      [ 1]  942 	mov	0x521b+0, #0x50
                                    943 ;	main.c: 329: I2C_CCRH = I2C_CCRH & ~0x80;    // set standart mode(100кHz)
      000436 72 1F 52 1C      [ 1]  944 	bres	0x521c, #7
                                    945 ;	main.c: 330: I2C_OARH = I2C_OARH & ~0x80;    // 7-bit address mode
      00043A 72 1F 52 14      [ 1]  946 	bres	0x5214, #7
                                    947 ;	main.c: 331: I2C_OARH = I2C_OARH | 0x40;     // see reference manual
      00043E 72 1C 52 14      [ 1]  948 	bset	0x5214, #6
                                    949 ;	main.c: 332: I2C_CR1 = I2C_CR1 | 0x01;       // PE=1, enable I2C
      000442 72 10 52 10      [ 1]  950 	bset	0x5210, #0
                                    951 ;	main.c: 333: }
      000446 81               [ 4]  952 	ret
                                    953 ;	main.c: 342: void i2c_start(void) {
                                    954 ;	-----------------------------------------
                                    955 ;	 function i2c_start
                                    956 ;	-----------------------------------------
      000447                        957 _i2c_start:
                                    958 ;	main.c: 343: I2C_CR2 = I2C_CR2 | (1 << 0); // Отправляем стартовый сигнал
      000447 72 10 52 11      [ 1]  959 	bset	0x5211, #0
                                    960 ;	main.c: 344: while(!(I2C_SR1 & (1 << 0)));
      00044B                        961 00101$:
      00044B 72 01 52 17 FB   [ 2]  962 	btjf	0x5217, #0, 00101$
                                    963 ;	main.c: 346: }
      000450 81               [ 4]  964 	ret
                                    965 ;	main.c: 348: void i2c_send_address(uint8_t address) {
                                    966 ;	-----------------------------------------
                                    967 ;	 function i2c_send_address
                                    968 ;	-----------------------------------------
      000451                        969 _i2c_send_address:
                                    970 ;	main.c: 349: I2C_DR = address << 1; // Отправка адреса устройства с битом на запись
      000451 48               [ 1]  971 	sll	a
      000452 C7 52 16         [ 1]  972 	ld	0x5216, a
                                    973 ;	main.c: 350: reg_check();
      000455 CDr02rB5         [ 4]  974 	call	_reg_check
                                    975 ;	main.c: 351: while (!(I2C_SR1 & (1 << 1)) && !(I2C_SR2 & (1 << 2)));
      000458                        976 00102$:
      000458 72 03 52 17 01   [ 2]  977 	btjf	0x5217, #1, 00117$
      00045D 81               [ 4]  978 	ret
      00045E                        979 00117$:
      00045E 72 05 52 18 F5   [ 2]  980 	btjf	0x5218, #2, 00102$
                                    981 ;	main.c: 353: }
      000463 81               [ 4]  982 	ret
                                    983 ;	main.c: 355: void i2c_stop(void) {
                                    984 ;	-----------------------------------------
                                    985 ;	 function i2c_stop
                                    986 ;	-----------------------------------------
      000464                        987 _i2c_stop:
                                    988 ;	main.c: 356: I2C_CR2 = I2C_CR2 | (1 << 1);// Отправка стопового сигнала
      000464 72 12 52 11      [ 1]  989 	bset	0x5211, #1
                                    990 ;	main.c: 358: }
      000468 81               [ 4]  991 	ret
                                    992 ;	main.c: 359: void i2c_write(void){
                                    993 ;	-----------------------------------------
                                    994 ;	 function i2c_write
                                    995 ;	-----------------------------------------
      000469                        996 _i2c_write:
      000469 52 02            [ 2]  997 	sub	sp, #2
                                    998 ;	main.c: 360: I2C_DR = 0;
      00046B 35 00 52 16      [ 1]  999 	mov	0x5216+0, #0x00
                                   1000 ;	main.c: 361: reg_check();
      00046F CDr02rB5         [ 4] 1001 	call	_reg_check
                                   1002 ;	main.c: 362: I2C_DR = d_addr;
      000472 55u02u03 52 16   [ 1] 1003 	mov	0x5216+0, _d_addr+0
                                   1004 ;	main.c: 363: reg_check();
      000477 CDr02rB5         [ 4] 1005 	call	_reg_check
                                   1006 ;	main.c: 364: while (!(I2C_SR1 & (1 << 7)) && (I2C_SR2 & (1 << 2)) && !(I2C_SR1 & (1 << 2))); // Отправка адреса регистра
      00047A                       1007 00103$:
      00047A C6 52 17         [ 1] 1008 	ld	a, 0x5217
      00047D 2B 0A            [ 1] 1009 	jrmi	00124$
      00047F 72 05 52 18 05   [ 2] 1010 	btjf	0x5218, #2, 00124$
      000484 72 05 52 17 F1   [ 2] 1011 	btjf	0x5217, #2, 00103$
                                   1012 ;	main.c: 365: for(int i = 0;i < d_size;i++)
      000489                       1013 00124$:
      000489 5F               [ 1] 1014 	clrw	x
      00048A                       1015 00113$:
      00048A C6u02u05         [ 1] 1016 	ld	a, _d_size+0
      00048D 6B 02            [ 1] 1017 	ld	(0x02, sp), a
      00048F 0F 01            [ 1] 1018 	clr	(0x01, sp)
      000491 13 01            [ 2] 1019 	cpw	x, (0x01, sp)
      000493 2E 25            [ 1] 1020 	jrsge	00115$
                                   1021 ;	main.c: 367: I2C_DR = data_buf[i];
      000495 90 93            [ 1] 1022 	ldw	y, x
      000497 90 D6u02u07      [ 1] 1023 	ld	a, (_data_buf+0, y)
      00049B C7 52 16         [ 1] 1024 	ld	0x5216, a
                                   1025 ;	main.c: 368: reg_check();
      00049E 89               [ 2] 1026 	pushw	x
      00049F CDr02rB5         [ 4] 1027 	call	_reg_check
      0004A2 85               [ 2] 1028 	popw	x
                                   1029 ;	main.c: 369: while (!(I2C_SR1 & (1 << 7)) && (I2C_SR2 & (1 << 2)) && !(I2C_SR1 & (1 << 2)));
      0004A3                       1030 00108$:
      0004A3 C6 52 17         [ 1] 1031 	ld	a, 0x5217
      0004A6 2B 0A            [ 1] 1032 	jrmi	00110$
      0004A8 72 05 52 18 05   [ 2] 1033 	btjf	0x5218, #2, 00110$
      0004AD 72 05 52 17 F1   [ 2] 1034 	btjf	0x5217, #2, 00108$
      0004B2                       1035 00110$:
                                   1036 ;	main.c: 370: reg_check();
      0004B2 89               [ 2] 1037 	pushw	x
      0004B3 CDr02rB5         [ 4] 1038 	call	_reg_check
      0004B6 85               [ 2] 1039 	popw	x
                                   1040 ;	main.c: 365: for(int i = 0;i < d_size;i++)
      0004B7 5C               [ 1] 1041 	incw	x
      0004B8 20 D0            [ 2] 1042 	jra	00113$
      0004BA                       1043 00115$:
                                   1044 ;	main.c: 372: }
      0004BA 5B 02            [ 2] 1045 	addw	sp, #2
      0004BC 81               [ 4] 1046 	ret
                                   1047 ;	main.c: 374: void i2c_read(void){
                                   1048 ;	-----------------------------------------
                                   1049 ;	 function i2c_read
                                   1050 ;	-----------------------------------------
      0004BD                       1051 _i2c_read:
      0004BD 52 02            [ 2] 1052 	sub	sp, #2
                                   1053 ;	main.c: 375: I2C_CR2 = I2C_CR2 | (1 << 2);
      0004BF 72 14 52 11      [ 1] 1054 	bset	0x5211, #2
                                   1055 ;	main.c: 376: I2C_DR = 0;
      0004C3 35 00 52 16      [ 1] 1056 	mov	0x5216+0, #0x00
                                   1057 ;	main.c: 377: reg_check();
      0004C7 CDr02rB5         [ 4] 1058 	call	_reg_check
                                   1059 ;	main.c: 378: I2C_DR = d_addr;
      0004CA 55u02u03 52 16   [ 1] 1060 	mov	0x5216+0, _d_addr+0
                                   1061 ;	main.c: 379: reg_check();
      0004CF CDr02rB5         [ 4] 1062 	call	_reg_check
                                   1063 ;	main.c: 380: while (!(I2C_SR1 & (1 << 7)) && (I2C_SR2 & (1 << 2)) && !(I2C_SR1 & (1 << 2))); // Отправка адреса регистра
      0004D2                       1064 00103$:
      0004D2 C6 52 17         [ 1] 1065 	ld	a, 0x5217
      0004D5 2B 0A            [ 1] 1066 	jrmi	00105$
      0004D7 72 05 52 18 05   [ 2] 1067 	btjf	0x5218, #2, 00105$
      0004DC 72 05 52 17 F1   [ 2] 1068 	btjf	0x5217, #2, 00103$
      0004E1                       1069 00105$:
                                   1070 ;	main.c: 383: i2c_start();
      0004E1 CDr04r47         [ 4] 1071 	call	_i2c_start
                                   1072 ;	main.c: 384: I2C_DR = (current_dev << 1) | (1 << 0);
      0004E4 C6u03u07         [ 1] 1073 	ld	a, _current_dev+0
      0004E7 48               [ 1] 1074 	sll	a
      0004E8 AA 01            [ 1] 1075 	or	a, #0x01
      0004EA C7 52 16         [ 1] 1076 	ld	0x5216, a
                                   1077 ;	main.c: 385: reg_check();
      0004ED CDr02rB5         [ 4] 1078 	call	_reg_check
                                   1079 ;	main.c: 386: while (!(I2C_SR1 & (1 << 1)) && !(I2C_SR1 & (1 << 2)) && !(I2C_SR1 & (1 << 6)));
      0004F0                       1080 00108$:
      0004F0 72 02 52 17 0A   [ 2] 1081 	btjt	0x5217, #1, 00110$
      0004F5 72 04 52 17 05   [ 2] 1082 	btjt	0x5217, #2, 00110$
      0004FA 72 0D 52 17 F1   [ 2] 1083 	btjf	0x5217, #6, 00108$
      0004FF                       1084 00110$:
                                   1085 ;	main.c: 387: reg_check();
      0004FF CDr02rB5         [ 4] 1086 	call	_reg_check
                                   1087 ;	main.c: 388: for(int i = 0;i < d_size;i++)
      000502 5F               [ 1] 1088 	clrw	x
      000503                       1089 00116$:
      000503 C6u02u05         [ 1] 1090 	ld	a, _d_size+0
      000506 6B 02            [ 1] 1091 	ld	(0x02, sp), a
      000508 0F 01            [ 1] 1092 	clr	(0x01, sp)
      00050A 13 01            [ 2] 1093 	cpw	x, (0x01, sp)
      00050C 2E 13            [ 1] 1094 	jrsge	00114$
                                   1095 ;	main.c: 390: data_buf[i] = I2C_DR;
      00050E 90 93            [ 1] 1096 	ldw	y, x
      000510 72 A9r02r07      [ 2] 1097 	addw	y, #(_data_buf+0)
      000514 C6 52 16         [ 1] 1098 	ld	a, 0x5216
      000517 90 F7            [ 1] 1099 	ld	(y), a
                                   1100 ;	main.c: 391: while (!(I2C_SR1 & (1 << 6)));
      000519                       1101 00111$:
      000519 72 0D 52 17 FB   [ 2] 1102 	btjf	0x5217, #6, 00111$
                                   1103 ;	main.c: 388: for(int i = 0;i < d_size;i++)
      00051E 5C               [ 1] 1104 	incw	x
      00051F 20 E2            [ 2] 1105 	jra	00116$
      000521                       1106 00114$:
                                   1107 ;	main.c: 393: reg_check();
      000521 CDr02rB5         [ 4] 1108 	call	_reg_check
                                   1109 ;	main.c: 394: I2C_CR2 = I2C_CR2 & ~(1 << 2);
      000524 C6 52 11         [ 1] 1110 	ld	a, 0x5211
      000527 A4 FB            [ 1] 1111 	and	a, #0xfb
      000529 C7 52 11         [ 1] 1112 	ld	0x5211, a
                                   1113 ;	main.c: 395: reg_check();
      00052C 5B 02            [ 2] 1114 	addw	sp, #2
                                   1115 ;	main.c: 396: }
      00052E CCr02rB5         [ 2] 1116 	jp	_reg_check
                                   1117 ;	main.c: 397: void i2c_scan(void) {
                                   1118 ;	-----------------------------------------
                                   1119 ;	 function i2c_scan
                                   1120 ;	-----------------------------------------
      000531                       1121 _i2c_scan:
      000531 52 02            [ 2] 1122 	sub	sp, #2
                                   1123 ;	main.c: 398: for (uint8_t addr = current_dev; addr < 127; addr++) {
      000533 C6u03u07         [ 1] 1124 	ld	a, _current_dev+0
      000536 6B 01            [ 1] 1125 	ld	(0x01, sp), a
      000538 6B 02            [ 1] 1126 	ld	(0x02, sp), a
      00053A                       1127 00105$:
      00053A 7B 02            [ 1] 1128 	ld	a, (0x02, sp)
      00053C A1 7F            [ 1] 1129 	cp	a, #0x7f
      00053E 24 26            [ 1] 1130 	jrnc	00107$
                                   1131 ;	main.c: 399: i2c_start();
      000540 CDr04r47         [ 4] 1132 	call	_i2c_start
                                   1133 ;	main.c: 400: i2c_send_address(addr);
      000543 7B 02            [ 1] 1134 	ld	a, (0x02, sp)
      000545 CDr04r51         [ 4] 1135 	call	_i2c_send_address
                                   1136 ;	main.c: 401: if (!(I2C_SR2 & (1 << 2))) { // Проверка на ACK
      000548 72 04 52 18 0A   [ 2] 1137 	btjt	0x5218, #2, 00102$
                                   1138 ;	main.c: 403: current_dev = addr;
      00054D 7B 01            [ 1] 1139 	ld	a, (0x01, sp)
      00054F C7u03u07         [ 1] 1140 	ld	_current_dev+0, a
                                   1141 ;	main.c: 404: i2c_stop();
      000552 5B 02            [ 2] 1142 	addw	sp, #2
                                   1143 ;	main.c: 405: break;
      000554 CCr04r64         [ 2] 1144 	jp	_i2c_stop
      000557                       1145 00102$:
                                   1146 ;	main.c: 407: i2c_stop();
      000557 CDr04r64         [ 4] 1147 	call	_i2c_stop
                                   1148 ;	main.c: 408: I2C_SR2 = I2C_SR2 & ~(1 << 2); // Очистка флага ошибки
      00055A 72 15 52 18      [ 1] 1149 	bres	0x5218, #2
                                   1150 ;	main.c: 398: for (uint8_t addr = current_dev; addr < 127; addr++) {
      00055E 0C 02            [ 1] 1151 	inc	(0x02, sp)
      000560 7B 02            [ 1] 1152 	ld	a, (0x02, sp)
      000562 6B 01            [ 1] 1153 	ld	(0x01, sp), a
      000564 20 D4            [ 2] 1154 	jra	00105$
      000566                       1155 00107$:
                                   1156 ;	main.c: 410: }
      000566 5B 02            [ 2] 1157 	addw	sp, #2
      000568 81               [ 4] 1158 	ret
                                   1159 ;	main.c: 420: void cm_SM(void)
                                   1160 ;	-----------------------------------------
                                   1161 ;	 function cm_SM
                                   1162 ;	-----------------------------------------
      000569                       1163 _cm_SM:
      000569 52 04            [ 2] 1164 	sub	sp, #4
                                   1165 ;	main.c: 422: char cur_dev[4]={0};
      00056B 0F 01            [ 1] 1166 	clr	(0x01, sp)
      00056D 0F 02            [ 1] 1167 	clr	(0x02, sp)
      00056F 0F 03            [ 1] 1168 	clr	(0x03, sp)
      000571 0F 04            [ 1] 1169 	clr	(0x04, sp)
                                   1170 ;	main.c: 423: convert_int_to_chars(current_dev, cur_dev);
      000573 96               [ 1] 1171 	ldw	x, sp
      000574 5C               [ 1] 1172 	incw	x
      000575 C6u03u07         [ 1] 1173 	ld	a, _current_dev+0
      000578 CDr00rA1         [ 4] 1174 	call	_convert_int_to_chars
                                   1175 ;	main.c: 424: uart_write("SM ");
      00057B AEr00r44         [ 2] 1176 	ldw	x, #(___str_8+0)
      00057E CDr00r37         [ 4] 1177 	call	_uart_write
                                   1178 ;	main.c: 425: uart_write(cur_dev);
      000581 96               [ 1] 1179 	ldw	x, sp
      000582 5C               [ 1] 1180 	incw	x
      000583 CDr00r37         [ 4] 1181 	call	_uart_write
                                   1182 ;	main.c: 426: uart_write("\r\n");
      000586 AEr00r48         [ 2] 1183 	ldw	x, #(___str_9+0)
      000589 CDr00r37         [ 4] 1184 	call	_uart_write
                                   1185 ;	main.c: 427: }
      00058C 5B 04            [ 2] 1186 	addw	sp, #4
      00058E 81               [ 4] 1187 	ret
                                   1188 ;	main.c: 428: void cm_SN(void)
                                   1189 ;	-----------------------------------------
                                   1190 ;	 function cm_SN
                                   1191 ;	-----------------------------------------
      00058F                       1192 _cm_SN:
                                   1193 ;	main.c: 430: i2c_scan();
      00058F CDr05r31         [ 4] 1194 	call	_i2c_scan
                                   1195 ;	main.c: 431: cm_SM();
                                   1196 ;	main.c: 432: }
      000592 CCr05r69         [ 2] 1197 	jp	_cm_SM
                                   1198 ;	main.c: 433: void cm_RM(void)
                                   1199 ;	-----------------------------------------
                                   1200 ;	 function cm_RM
                                   1201 ;	-----------------------------------------
      000595                       1202 _cm_RM:
                                   1203 ;	main.c: 435: current_dev = 0;
      000595 72 5Fu03u07      [ 1] 1204 	clr	_current_dev+0
                                   1205 ;	main.c: 436: uart_write("RM\n");
      000599 AEr00r4B         [ 2] 1206 	ldw	x, #(___str_10+0)
                                   1207 ;	main.c: 437: }
      00059C CCr00r37         [ 2] 1208 	jp	_uart_write
                                   1209 ;	main.c: 439: void cm_DB(void)
                                   1210 ;	-----------------------------------------
                                   1211 ;	 function cm_DB
                                   1212 ;	-----------------------------------------
      00059F                       1213 _cm_DB:
                                   1214 ;	main.c: 441: status_check();
                                   1215 ;	main.c: 442: }
      00059F CCr03r38         [ 2] 1216 	jp	_status_check
                                   1217 ;	main.c: 444: void cm_ST(void)
                                   1218 ;	-----------------------------------------
                                   1219 ;	 function cm_ST
                                   1220 ;	-----------------------------------------
      0005A2                       1221 _cm_ST:
                                   1222 ;	main.c: 446: get_addr_from_buff();
      0005A2 CDr01r85         [ 4] 1223 	call	_get_addr_from_buff
                                   1224 ;	main.c: 447: current_dev = d_addr;
      0005A5 55u02u03u03u07   [ 1] 1225 	mov	_current_dev+0, _d_addr+0
                                   1226 ;	main.c: 448: uart_write("ST\n");
      0005AA AEr00r4F         [ 2] 1227 	ldw	x, #(___str_11+0)
                                   1228 ;	main.c: 449: }
      0005AD CCr00r37         [ 2] 1229 	jp	_uart_write
                                   1230 ;	main.c: 450: void cm_SR(void)
                                   1231 ;	-----------------------------------------
                                   1232 ;	 function cm_SR
                                   1233 ;	-----------------------------------------
      0005B0                       1234 _cm_SR:
      0005B0 52 04            [ 2] 1235 	sub	sp, #4
                                   1236 ;	main.c: 452: i2c_start();
      0005B2 CDr04r47         [ 4] 1237 	call	_i2c_start
                                   1238 ;	main.c: 453: i2c_send_address(current_dev);
      0005B5 C6u03u07         [ 1] 1239 	ld	a, _current_dev+0
      0005B8 CDr04r51         [ 4] 1240 	call	_i2c_send_address
                                   1241 ;	main.c: 454: i2c_read();
      0005BB CDr04rBD         [ 4] 1242 	call	_i2c_read
                                   1243 ;	main.c: 455: i2c_stop();
      0005BE CDr04r64         [ 4] 1244 	call	_i2c_stop
                                   1245 ;	main.c: 456: uart_write("SR ");
      0005C1 AEr00r53         [ 2] 1246 	ldw	x, #(___str_12+0)
      0005C4 CDr00r37         [ 4] 1247 	call	_uart_write
                                   1248 ;	main.c: 457: convert_int_to_chars(d_addr, a);
      0005C7 AEr02r00         [ 2] 1249 	ldw	x, #(_a+0)
      0005CA C6u02u03         [ 1] 1250 	ld	a, _d_addr+0
      0005CD CDr00rA1         [ 4] 1251 	call	_convert_int_to_chars
                                   1252 ;	main.c: 458: uart_write(a);
      0005D0 AEr02r00         [ 2] 1253 	ldw	x, #(_a+0)
      0005D3 CDr00r37         [ 4] 1254 	call	_uart_write
                                   1255 ;	main.c: 459: uart_write(" ");
      0005D6 AEr00r57         [ 2] 1256 	ldw	x, #(___str_13+0)
      0005D9 CDr00r37         [ 4] 1257 	call	_uart_write
                                   1258 ;	main.c: 460: convert_int_to_chars(d_size, a);
      0005DC AEr02r00         [ 2] 1259 	ldw	x, #(_a+0)
      0005DF C6u02u05         [ 1] 1260 	ld	a, _d_size+0
      0005E2 CDr00rA1         [ 4] 1261 	call	_convert_int_to_chars
                                   1262 ;	main.c: 461: uart_write(a);
      0005E5 AEr02r00         [ 2] 1263 	ldw	x, #(_a+0)
      0005E8 CDr00r37         [ 4] 1264 	call	_uart_write
                                   1265 ;	main.c: 462: for(int i = 0;i < d_size;i++)
      0005EB 5F               [ 1] 1266 	clrw	x
      0005EC 1F 03            [ 2] 1267 	ldw	(0x03, sp), x
      0005EE                       1268 00103$:
      0005EE C6u02u05         [ 1] 1269 	ld	a, _d_size+0
      0005F1 6B 02            [ 1] 1270 	ld	(0x02, sp), a
      0005F3 0F 01            [ 1] 1271 	clr	(0x01, sp)
      0005F5 1E 03            [ 2] 1272 	ldw	x, (0x03, sp)
      0005F7 13 01            [ 2] 1273 	cpw	x, (0x01, sp)
      0005F9 2E 1E            [ 1] 1274 	jrsge	00101$
                                   1275 ;	main.c: 464: uart_write(" ");
      0005FB AEr00r57         [ 2] 1276 	ldw	x, #(___str_13+0)
      0005FE CDr00r37         [ 4] 1277 	call	_uart_write
                                   1278 ;	main.c: 465: convert_int_to_chars(data_buf[i], a);
      000601 1E 03            [ 2] 1279 	ldw	x, (0x03, sp)
      000603 D6u02u07         [ 1] 1280 	ld	a, (_data_buf+0, x)
      000606 AEr02r00         [ 2] 1281 	ldw	x, #(_a+0)
      000609 CDr00rA1         [ 4] 1282 	call	_convert_int_to_chars
                                   1283 ;	main.c: 466: uart_write(a);
      00060C AEr02r00         [ 2] 1284 	ldw	x, #(_a+0)
      00060F CDr00r37         [ 4] 1285 	call	_uart_write
                                   1286 ;	main.c: 462: for(int i = 0;i < d_size;i++)
      000612 1E 03            [ 2] 1287 	ldw	x, (0x03, sp)
      000614 5C               [ 1] 1288 	incw	x
      000615 1F 03            [ 2] 1289 	ldw	(0x03, sp), x
      000617 20 D5            [ 2] 1290 	jra	00103$
      000619                       1291 00101$:
                                   1292 ;	main.c: 469: uart_write("\r\n");
      000619 AEr00r48         [ 2] 1293 	ldw	x, #(___str_9+0)
      00061C 5B 04            [ 2] 1294 	addw	sp, #4
                                   1295 ;	main.c: 470: }
      00061E CCr00r37         [ 2] 1296 	jp	_uart_write
                                   1297 ;	main.c: 471: void cm_SW(void)
                                   1298 ;	-----------------------------------------
                                   1299 ;	 function cm_SW
                                   1300 ;	-----------------------------------------
      000621                       1301 _cm_SW:
      000621 52 04            [ 2] 1302 	sub	sp, #4
                                   1303 ;	main.c: 473: i2c_start();
      000623 CDr04r47         [ 4] 1304 	call	_i2c_start
                                   1305 ;	main.c: 474: i2c_send_address(current_dev);
      000626 C6u03u07         [ 1] 1306 	ld	a, _current_dev+0
      000629 CDr04r51         [ 4] 1307 	call	_i2c_send_address
                                   1308 ;	main.c: 475: i2c_write();
      00062C CDr04r69         [ 4] 1309 	call	_i2c_write
                                   1310 ;	main.c: 476: i2c_stop();
      00062F CDr04r64         [ 4] 1311 	call	_i2c_stop
                                   1312 ;	main.c: 477: uart_write("SW ");
      000632 AEr00r59         [ 2] 1313 	ldw	x, #(___str_14+0)
      000635 CDr00r37         [ 4] 1314 	call	_uart_write
                                   1315 ;	main.c: 478: convert_int_to_chars(d_addr, a);
      000638 AEr02r00         [ 2] 1316 	ldw	x, #(_a+0)
      00063B C6u02u03         [ 1] 1317 	ld	a, _d_addr+0
      00063E CDr00rA1         [ 4] 1318 	call	_convert_int_to_chars
                                   1319 ;	main.c: 479: uart_write(a);
      000641 AEr02r00         [ 2] 1320 	ldw	x, #(_a+0)
      000644 CDr00r37         [ 4] 1321 	call	_uart_write
                                   1322 ;	main.c: 480: uart_write(" ");
      000647 AEr00r57         [ 2] 1323 	ldw	x, #(___str_13+0)
      00064A CDr00r37         [ 4] 1324 	call	_uart_write
                                   1325 ;	main.c: 481: convert_int_to_chars(d_size, a);
      00064D AEr02r00         [ 2] 1326 	ldw	x, #(_a+0)
      000650 C6u02u05         [ 1] 1327 	ld	a, _d_size+0
      000653 CDr00rA1         [ 4] 1328 	call	_convert_int_to_chars
                                   1329 ;	main.c: 482: uart_write(a);
      000656 AEr02r00         [ 2] 1330 	ldw	x, #(_a+0)
      000659 CDr00r37         [ 4] 1331 	call	_uart_write
                                   1332 ;	main.c: 483: for(int i = 0;i < d_size;i++)
      00065C 5F               [ 1] 1333 	clrw	x
      00065D 1F 03            [ 2] 1334 	ldw	(0x03, sp), x
      00065F                       1335 00103$:
      00065F C6u02u05         [ 1] 1336 	ld	a, _d_size+0
      000662 6B 02            [ 1] 1337 	ld	(0x02, sp), a
      000664 0F 01            [ 1] 1338 	clr	(0x01, sp)
      000666 1E 03            [ 2] 1339 	ldw	x, (0x03, sp)
      000668 13 01            [ 2] 1340 	cpw	x, (0x01, sp)
      00066A 2E 1E            [ 1] 1341 	jrsge	00101$
                                   1342 ;	main.c: 485: uart_write(" ");
      00066C AEr00r57         [ 2] 1343 	ldw	x, #(___str_13+0)
      00066F CDr00r37         [ 4] 1344 	call	_uart_write
                                   1345 ;	main.c: 486: convert_int_to_chars(data_buf[i], a);
      000672 1E 03            [ 2] 1346 	ldw	x, (0x03, sp)
      000674 D6u02u07         [ 1] 1347 	ld	a, (_data_buf+0, x)
      000677 AEr02r00         [ 2] 1348 	ldw	x, #(_a+0)
      00067A CDr00rA1         [ 4] 1349 	call	_convert_int_to_chars
                                   1350 ;	main.c: 487: uart_write(a);
      00067D AEr02r00         [ 2] 1351 	ldw	x, #(_a+0)
      000680 CDr00r37         [ 4] 1352 	call	_uart_write
                                   1353 ;	main.c: 483: for(int i = 0;i < d_size;i++)
      000683 1E 03            [ 2] 1354 	ldw	x, (0x03, sp)
      000685 5C               [ 1] 1355 	incw	x
      000686 1F 03            [ 2] 1356 	ldw	(0x03, sp), x
      000688 20 D5            [ 2] 1357 	jra	00103$
      00068A                       1358 00101$:
                                   1359 ;	main.c: 490: uart_write("\r\n");
      00068A AEr00r48         [ 2] 1360 	ldw	x, #(___str_9+0)
      00068D 5B 04            [ 2] 1361 	addw	sp, #4
                                   1362 ;	main.c: 491: }
      00068F CCr00r37         [ 2] 1363 	jp	_uart_write
                                   1364 ;	main.c: 499: int data_handler(void)
                                   1365 ;	-----------------------------------------
                                   1366 ;	 function data_handler
                                   1367 ;	-----------------------------------------
      000692                       1368 _data_handler:
                                   1369 ;	main.c: 501: p_size = 0;
      000692 72 5Fu02u04      [ 1] 1370 	clr	_p_size+0
                                   1371 ;	main.c: 502: p_bytes = 0;
      000696 72 5Fu02u06      [ 1] 1372 	clr	_p_bytes+0
                                   1373 ;	main.c: 503: d_addr = 0;
      00069A 72 5Fu02u03      [ 1] 1374 	clr	_d_addr+0
                                   1375 ;	main.c: 504: d_size = 0;
      00069E 72 5Fu02u05      [ 1] 1376 	clr	_d_size+0
                                   1377 ;	main.c: 505: memset(a, 0, sizeof(a));
      0006A2 4B 03            [ 1] 1378 	push	#0x03
      0006A4 4B 00            [ 1] 1379 	push	#0x00
      0006A6 5F               [ 1] 1380 	clrw	x
      0006A7 89               [ 2] 1381 	pushw	x
      0006A8 AEr02r00         [ 2] 1382 	ldw	x, #(_a+0)
      0006AB CDr00r00         [ 4] 1383 	call	_memset
                                   1384 ;	main.c: 506: memset(data_buf, 0, sizeof(data_buf));
      0006AE 4B 00            [ 1] 1385 	push	#0x00
      0006B0 4B 01            [ 1] 1386 	push	#0x01
      0006B2 5F               [ 1] 1387 	clrw	x
      0006B3 89               [ 2] 1388 	pushw	x
      0006B4 AEr02r07         [ 2] 1389 	ldw	x, #(_data_buf+0)
      0006B7 CDr00r00         [ 4] 1390 	call	_memset
                                   1391 ;	main.c: 507: if(memcmp(&buffer[0],"SM",2) == 0)
      0006BA 4B 02            [ 1] 1392 	push	#0x02
      0006BC 4B 00            [ 1] 1393 	push	#0x00
      0006BE 4Br5D            [ 1] 1394 	push	#<(___str_15+0)
      0006C0 4Bs00            [ 1] 1395 	push	#((___str_15+0) >> 8)
      0006C2 AEr01r00         [ 2] 1396 	ldw	x, #(_buffer+0)
      0006C5 CDr00r00         [ 4] 1397 	call	_memcmp
                                   1398 ;	main.c: 508: return 1;
      0006C8 5D               [ 2] 1399 	tnzw	x
      0006C9 26 02            [ 1] 1400 	jrne	00102$
      0006CB 5C               [ 1] 1401 	incw	x
      0006CC 81               [ 4] 1402 	ret
      0006CD                       1403 00102$:
                                   1404 ;	main.c: 509: if(memcmp(&buffer[0],"SN",2) == 0)
      0006CD 4B 02            [ 1] 1405 	push	#0x02
      0006CF 4B 00            [ 1] 1406 	push	#0x00
      0006D1 4Br60            [ 1] 1407 	push	#<(___str_16+0)
      0006D3 4Bs00            [ 1] 1408 	push	#((___str_16+0) >> 8)
      0006D5 AEr01r00         [ 2] 1409 	ldw	x, #(_buffer+0)
      0006D8 CDr00r00         [ 4] 1410 	call	_memcmp
      0006DB 5D               [ 2] 1411 	tnzw	x
      0006DC 26 04            [ 1] 1412 	jrne	00104$
                                   1413 ;	main.c: 510: return 2;
      0006DE AE 00 02         [ 2] 1414 	ldw	x, #0x0002
      0006E1 81               [ 4] 1415 	ret
      0006E2                       1416 00104$:
                                   1417 ;	main.c: 511: if(memcmp(&buffer[0],"ST",2) == 0)
      0006E2 4B 02            [ 1] 1418 	push	#0x02
      0006E4 4B 00            [ 1] 1419 	push	#0x00
      0006E6 4Br63            [ 1] 1420 	push	#<(___str_17+0)
      0006E8 4Bs00            [ 1] 1421 	push	#((___str_17+0) >> 8)
      0006EA AEr01r00         [ 2] 1422 	ldw	x, #(_buffer+0)
      0006ED CDr00r00         [ 4] 1423 	call	_memcmp
      0006F0 5D               [ 2] 1424 	tnzw	x
      0006F1 26 04            [ 1] 1425 	jrne	00106$
                                   1426 ;	main.c: 512: return 5;
      0006F3 AE 00 05         [ 2] 1427 	ldw	x, #0x0005
      0006F6 81               [ 4] 1428 	ret
      0006F7                       1429 00106$:
                                   1430 ;	main.c: 513: if(memcmp(&buffer[0],"RM",2) == 0)
      0006F7 4B 02            [ 1] 1431 	push	#0x02
      0006F9 4B 00            [ 1] 1432 	push	#0x00
      0006FB 4Br66            [ 1] 1433 	push	#<(___str_18+0)
      0006FD 4Bs00            [ 1] 1434 	push	#((___str_18+0) >> 8)
      0006FF AEr01r00         [ 2] 1435 	ldw	x, #(_buffer+0)
      000702 CDr00r00         [ 4] 1436 	call	_memcmp
      000705 5D               [ 2] 1437 	tnzw	x
      000706 26 04            [ 1] 1438 	jrne	00108$
                                   1439 ;	main.c: 514: return 6;
      000708 AE 00 06         [ 2] 1440 	ldw	x, #0x0006
      00070B 81               [ 4] 1441 	ret
      00070C                       1442 00108$:
                                   1443 ;	main.c: 515: if(memcmp(&buffer[0],"DB",2) == 0)
      00070C 4B 02            [ 1] 1444 	push	#0x02
      00070E 4B 00            [ 1] 1445 	push	#0x00
      000710 4Br69            [ 1] 1446 	push	#<(___str_19+0)
      000712 4Bs00            [ 1] 1447 	push	#((___str_19+0) >> 8)
      000714 AEr01r00         [ 2] 1448 	ldw	x, #(_buffer+0)
      000717 CDr00r00         [ 4] 1449 	call	_memcmp
      00071A 5D               [ 2] 1450 	tnzw	x
      00071B 26 04            [ 1] 1451 	jrne	00110$
                                   1452 ;	main.c: 516: return 7;
      00071D AE 00 07         [ 2] 1453 	ldw	x, #0x0007
      000720 81               [ 4] 1454 	ret
      000721                       1455 00110$:
                                   1456 ;	main.c: 518: get_addr_from_buff();
      000721 CDr01r85         [ 4] 1457 	call	_get_addr_from_buff
                                   1458 ;	main.c: 519: get_size_from_buff();
      000724 CDr01rCA         [ 4] 1459 	call	_get_size_from_buff
                                   1460 ;	main.c: 521: if(memcmp(&buffer[0],"SR",2) == 0)
      000727 4B 02            [ 1] 1461 	push	#0x02
      000729 4B 00            [ 1] 1462 	push	#0x00
      00072B 4Br6C            [ 1] 1463 	push	#<(___str_20+0)
      00072D 4Bs00            [ 1] 1464 	push	#((___str_20+0) >> 8)
      00072F AEr01r00         [ 2] 1465 	ldw	x, #(_buffer+0)
      000732 CDr00r00         [ 4] 1466 	call	_memcmp
      000735 5D               [ 2] 1467 	tnzw	x
      000736 26 04            [ 1] 1468 	jrne	00112$
                                   1469 ;	main.c: 522: return 3;
      000738 AE 00 03         [ 2] 1470 	ldw	x, #0x0003
      00073B 81               [ 4] 1471 	ret
      00073C                       1472 00112$:
                                   1473 ;	main.c: 524: char_buffer_to_int();
      00073C CDr02r24         [ 4] 1474 	call	_char_buffer_to_int
                                   1475 ;	main.c: 526: if(memcmp(&buffer[0],"SW",2) == 0)
      00073F 4B 02            [ 1] 1476 	push	#0x02
      000741 4B 00            [ 1] 1477 	push	#0x00
      000743 4Br6F            [ 1] 1478 	push	#<(___str_21+0)
      000745 4Bs00            [ 1] 1479 	push	#((___str_21+0) >> 8)
      000747 AEr01r00         [ 2] 1480 	ldw	x, #(_buffer+0)
      00074A CDr00r00         [ 4] 1481 	call	_memcmp
      00074D 5D               [ 2] 1482 	tnzw	x
      00074E 26 04            [ 1] 1483 	jrne	00114$
                                   1484 ;	main.c: 527: return 4;
      000750 AE 00 04         [ 2] 1485 	ldw	x, #0x0004
      000753 81               [ 4] 1486 	ret
      000754                       1487 00114$:
                                   1488 ;	main.c: 528: return 0;
      000754 5F               [ 1] 1489 	clrw	x
                                   1490 ;	main.c: 530: }
      000755 81               [ 4] 1491 	ret
                                   1492 ;	main.c: 532: void command_switcher(void)
                                   1493 ;	-----------------------------------------
                                   1494 ;	 function command_switcher
                                   1495 ;	-----------------------------------------
      000756                       1496 _command_switcher:
      000756 52 04            [ 2] 1497 	sub	sp, #4
                                   1498 ;	main.c: 534: char ar[4]={0};
      000758 0F 01            [ 1] 1499 	clr	(0x01, sp)
      00075A 0F 02            [ 1] 1500 	clr	(0x02, sp)
      00075C 0F 03            [ 1] 1501 	clr	(0x03, sp)
      00075E 0F 04            [ 1] 1502 	clr	(0x04, sp)
                                   1503 ;	main.c: 536: switch(data_handler())
      000760 CDr06r92         [ 4] 1504 	call	_data_handler
      000763 5D               [ 2] 1505 	tnzw	x
      000764 2B 3B            [ 1] 1506 	jrmi	00109$
      000766 A3 00 07         [ 2] 1507 	cpw	x, #0x0007
      000769 2C 36            [ 1] 1508 	jrsgt	00109$
      00076B 58               [ 2] 1509 	sllw	x
      00076C DEu07u70         [ 2] 1510 	ldw	x, (#00123$, x)
      00076F FC               [ 2] 1511 	jp	(x)
      000770                       1512 00123$:
      000770r07rA1                 1513 	.dw	#00109$
      000772r07r80                 1514 	.dw	#00101$
      000774r07r85                 1515 	.dw	#00102$
      000776r07r8A                 1516 	.dw	#00103$
      000778r07r8F                 1517 	.dw	#00104$
      00077Ar07r94                 1518 	.dw	#00105$
      00077Cr07r99                 1519 	.dw	#00106$
      00077Er07r9E                 1520 	.dw	#00107$
                                   1521 ;	main.c: 538: case 1:
      000780                       1522 00101$:
                                   1523 ;	main.c: 539: cm_SM();
      000780 CDr05r69         [ 4] 1524 	call	_cm_SM
                                   1525 ;	main.c: 540: break;
      000783 20 1C            [ 2] 1526 	jra	00109$
                                   1527 ;	main.c: 541: case 2:
      000785                       1528 00102$:
                                   1529 ;	main.c: 542: cm_SN();
      000785 CDr05r8F         [ 4] 1530 	call	_cm_SN
                                   1531 ;	main.c: 543: break;
      000788 20 17            [ 2] 1532 	jra	00109$
                                   1533 ;	main.c: 544: case 3:
      00078A                       1534 00103$:
                                   1535 ;	main.c: 545: cm_SR();
      00078A CDr05rB0         [ 4] 1536 	call	_cm_SR
                                   1537 ;	main.c: 546: break;
      00078D 20 12            [ 2] 1538 	jra	00109$
                                   1539 ;	main.c: 547: case 4:
      00078F                       1540 00104$:
                                   1541 ;	main.c: 548: cm_SW();
      00078F CDr06r21         [ 4] 1542 	call	_cm_SW
                                   1543 ;	main.c: 549: break;
      000792 20 0D            [ 2] 1544 	jra	00109$
                                   1545 ;	main.c: 550: case 5:
      000794                       1546 00105$:
                                   1547 ;	main.c: 551: cm_ST();
      000794 CDr05rA2         [ 4] 1548 	call	_cm_ST
                                   1549 ;	main.c: 552: break;
      000797 20 08            [ 2] 1550 	jra	00109$
                                   1551 ;	main.c: 553: case 6:
      000799                       1552 00106$:
                                   1553 ;	main.c: 554: cm_RM();
      000799 CDr05r95         [ 4] 1554 	call	_cm_RM
                                   1555 ;	main.c: 555: break;
      00079C 20 03            [ 2] 1556 	jra	00109$
                                   1557 ;	main.c: 556: case 7:
      00079E                       1558 00107$:
                                   1559 ;	main.c: 557: cm_DB();
      00079E CDr05r9F         [ 4] 1560 	call	_cm_DB
                                   1561 ;	main.c: 559: }
      0007A1                       1562 00109$:
                                   1563 ;	main.c: 560: }
      0007A1 5B 04            [ 2] 1564 	addw	sp, #4
      0007A3 81               [ 4] 1565 	ret
                                   1566 ;	main.c: 563: void main(void)
                                   1567 ;	-----------------------------------------
                                   1568 ;	 function main
                                   1569 ;	-----------------------------------------
      0007A4                       1570 _main:
                                   1571 ;	main.c: 565: uart_init();
      0007A4 CDr04r09         [ 4] 1572 	call	_uart_init
                                   1573 ;	main.c: 566: i2c_init();
      0007A7 CDr04r26         [ 4] 1574 	call	_i2c_init
                                   1575 ;	main.c: 567: uart_write("SS\n");
      0007AA AEr00r72         [ 2] 1576 	ldw	x, #(___str_22+0)
      0007AD CDr00r37         [ 4] 1577 	call	_uart_write
                                   1578 ;	main.c: 568: while(1)
      0007B0                       1579 00102$:
                                   1580 ;	main.c: 570: uart_read();
      0007B0 CDr00r6B         [ 4] 1581 	call	_uart_read
                                   1582 ;	main.c: 571: command_switcher();
      0007B3 CDr07r56         [ 4] 1583 	call	_command_switcher
      0007B6 20 F8            [ 2] 1584 	jra	00102$
                                   1585 ;	main.c: 573: }
      0007B8 81               [ 4] 1586 	ret
                                   1587 	.area CODE
                                   1588 	.area CONST
                                   1589 	.area CONST
      000000                       1590 ___str_0:
      000000 0A                    1591 	.db 0x0a
      000001 49 32 43 5F 52 45 47  1592 	.ascii "I2C_REGS >.<"
             53 20 3E 2E 3C
      00000D 0A                    1593 	.db 0x0a
      00000E 00                    1594 	.db 0x00
                                   1595 	.area CODE
                                   1596 	.area CONST
      00000F                       1597 ___str_1:
      00000F 0A                    1598 	.db 0x0a
      000010 53 52 31 20 2D 3E 20  1599 	.ascii "SR1 -> "
      000017 00                    1600 	.db 0x00
                                   1601 	.area CODE
                                   1602 	.area CONST
      000018                       1603 ___str_2:
      000018 20 3C 2D              1604 	.ascii " <-"
      00001B 0A                    1605 	.db 0x0a
      00001C 00                    1606 	.db 0x00
                                   1607 	.area CODE
                                   1608 	.area CONST
      00001D                       1609 ___str_3:
      00001D 53 52 32 20 2D 3E 20  1610 	.ascii "SR2 -> "
      000024 00                    1611 	.db 0x00
                                   1612 	.area CODE
                                   1613 	.area CONST
      000025                       1614 ___str_4:
      000025 53 52 33 20 2D 3E 20  1615 	.ascii "SR3 -> "
      00002C 00                    1616 	.db 0x00
                                   1617 	.area CODE
                                   1618 	.area CONST
      00002D                       1619 ___str_5:
      00002D 43 52 31 20 2D 3E 20  1620 	.ascii "CR1 -> "
      000034 00                    1621 	.db 0x00
                                   1622 	.area CODE
                                   1623 	.area CONST
      000035                       1624 ___str_6:
      000035 43 52 32 20 2D 3E 20  1625 	.ascii "CR2 -> "
      00003C 00                    1626 	.db 0x00
                                   1627 	.area CODE
                                   1628 	.area CONST
      00003D                       1629 ___str_7:
      00003D 44 52 20 2D 3E 20     1630 	.ascii "DR -> "
      000043 00                    1631 	.db 0x00
                                   1632 	.area CODE
                                   1633 	.area CONST
      000044                       1634 ___str_8:
      000044 53 4D 20              1635 	.ascii "SM "
      000047 00                    1636 	.db 0x00
                                   1637 	.area CODE
                                   1638 	.area CONST
      000048                       1639 ___str_9:
      000048 0D                    1640 	.db 0x0d
      000049 0A                    1641 	.db 0x0a
      00004A 00                    1642 	.db 0x00
                                   1643 	.area CODE
                                   1644 	.area CONST
      00004B                       1645 ___str_10:
      00004B 52 4D                 1646 	.ascii "RM"
      00004D 0A                    1647 	.db 0x0a
      00004E 00                    1648 	.db 0x00
                                   1649 	.area CODE
                                   1650 	.area CONST
      00004F                       1651 ___str_11:
      00004F 53 54                 1652 	.ascii "ST"
      000051 0A                    1653 	.db 0x0a
      000052 00                    1654 	.db 0x00
                                   1655 	.area CODE
                                   1656 	.area CONST
      000053                       1657 ___str_12:
      000053 53 52 20              1658 	.ascii "SR "
      000056 00                    1659 	.db 0x00
                                   1660 	.area CODE
                                   1661 	.area CONST
      000057                       1662 ___str_13:
      000057 20                    1663 	.ascii " "
      000058 00                    1664 	.db 0x00
                                   1665 	.area CODE
                                   1666 	.area CONST
      000059                       1667 ___str_14:
      000059 53 57 20              1668 	.ascii "SW "
      00005C 00                    1669 	.db 0x00
                                   1670 	.area CODE
                                   1671 	.area CONST
      00005D                       1672 ___str_15:
      00005D 53 4D                 1673 	.ascii "SM"
      00005F 00                    1674 	.db 0x00
                                   1675 	.area CODE
                                   1676 	.area CONST
      000060                       1677 ___str_16:
      000060 53 4E                 1678 	.ascii "SN"
      000062 00                    1679 	.db 0x00
                                   1680 	.area CODE
                                   1681 	.area CONST
      000063                       1682 ___str_17:
      000063 53 54                 1683 	.ascii "ST"
      000065 00                    1684 	.db 0x00
                                   1685 	.area CODE
                                   1686 	.area CONST
      000066                       1687 ___str_18:
      000066 52 4D                 1688 	.ascii "RM"
      000068 00                    1689 	.db 0x00
                                   1690 	.area CODE
                                   1691 	.area CONST
      000069                       1692 ___str_19:
      000069 44 42                 1693 	.ascii "DB"
      00006B 00                    1694 	.db 0x00
                                   1695 	.area CODE
                                   1696 	.area CONST
      00006C                       1697 ___str_20:
      00006C 53 52                 1698 	.ascii "SR"
      00006E 00                    1699 	.db 0x00
                                   1700 	.area CODE
                                   1701 	.area CONST
      00006F                       1702 ___str_21:
      00006F 53 57                 1703 	.ascii "SW"
      000071 00                    1704 	.db 0x00
                                   1705 	.area CODE
                                   1706 	.area CONST
      000072                       1707 ___str_22:
      000072 53 53                 1708 	.ascii "SS"
      000074 0A                    1709 	.db 0x0a
      000075 00                    1710 	.db 0x00
                                   1711 	.area CODE
                                   1712 	.area INITIALIZER
      000000                       1713 __xinit__status_registers:
      000000 00                    1714 	.db #0x00	; 0
      000001 00                    1715 	.db 0x00
      000002 00                    1716 	.db 0x00
      000003 00                    1717 	.db 0x00
      000004 00                    1718 	.db 0x00
      000005 00                    1719 	.db 0x00
      000006 00                    1720 	.db 0x00
      000007 00                    1721 	.db 0x00
      000008 00                    1722 	.db 0x00
      000009 00                    1723 	.db 0x00
      00000A 00                    1724 	.db 0x00
      00000B 00                    1725 	.db 0x00
      00000C 00                    1726 	.db 0x00
      00000D 00                    1727 	.db 0x00
      00000E 00                    1728 	.db 0x00
      00000F 00                    1729 	.db 0x00
      000010 00                    1730 	.db 0x00
      000011 00                    1731 	.db 0x00
      000012 00                    1732 	.db 0x00
      000013 00                    1733 	.db 0x00
      000014 00                    1734 	.db 0x00
      000015 00                    1735 	.db 0x00
      000016 00                    1736 	.db 0x00
      000017 00                    1737 	.db 0x00
      000018 00                    1738 	.db 0x00
      000019 00                    1739 	.db 0x00
      00001A 00                    1740 	.db 0x00
      00001B 00                    1741 	.db 0x00
      00001C 00                    1742 	.db 0x00
      00001D 00                    1743 	.db 0x00
      00001E 00                    1744 	.db 0x00
      00001F 00                    1745 	.db 0x00
      000020 00                    1746 	.db 0x00
      000021 00                    1747 	.db 0x00
      000022 00                    1748 	.db 0x00
      000023 00                    1749 	.db 0x00
      000024 00                    1750 	.db 0x00
      000025 00                    1751 	.db 0x00
      000026 00                    1752 	.db 0x00
      000027 00                    1753 	.db 0x00
      000028 00                    1754 	.db 0x00
      000029 00                    1755 	.db 0x00
      00002A 00                    1756 	.db 0x00
      00002B 00                    1757 	.db 0x00
      00002C 00                    1758 	.db 0x00
      00002D 00                    1759 	.db 0x00
      00002E 00                    1760 	.db 0x00
      00002F 00                    1761 	.db 0x00
      000030 00                    1762 	.db 0x00
      000031 00                    1763 	.db 0x00
      000032 00                    1764 	.db 0x00
      000033 00                    1765 	.db 0x00
      000034 00                    1766 	.db 0x00
      000035 00                    1767 	.db 0x00
      000036 00                    1768 	.db 0x00
      000037 00                    1769 	.db 0x00
      000038 00                    1770 	.db 0x00
      000039 00                    1771 	.db 0x00
      00003A 00                    1772 	.db 0x00
      00003B 00                    1773 	.db 0x00
      00003C 00                    1774 	.db 0x00
      00003D 00                    1775 	.db 0x00
      00003E 00                    1776 	.db 0x00
      00003F 00                    1777 	.db 0x00
      000040 00                    1778 	.db 0x00
      000041 00                    1779 	.db 0x00
      000042 00                    1780 	.db 0x00
      000043 00                    1781 	.db 0x00
      000044 00                    1782 	.db 0x00
      000045 00                    1783 	.db 0x00
      000046 00                    1784 	.db 0x00
      000047 00                    1785 	.db 0x00
      000048 00                    1786 	.db 0x00
      000049 00                    1787 	.db 0x00
      00004A 00                    1788 	.db 0x00
      00004B 00                    1789 	.db 0x00
      00004C 00                    1790 	.db 0x00
      00004D 00                    1791 	.db 0x00
      00004E 00                    1792 	.db 0x00
      00004F 00                    1793 	.db 0x00
      000050 00                    1794 	.db 0x00
      000051 00                    1795 	.db 0x00
      000052 00                    1796 	.db 0x00
      000053 00                    1797 	.db 0x00
      000054 00                    1798 	.db 0x00
      000055 00                    1799 	.db 0x00
      000056 00                    1800 	.db 0x00
      000057 00                    1801 	.db 0x00
      000058 00                    1802 	.db 0x00
      000059 00                    1803 	.db 0x00
      00005A 00                    1804 	.db 0x00
      00005B 00                    1805 	.db 0x00
      00005C 00                    1806 	.db 0x00
      00005D 00                    1807 	.db 0x00
      00005E 00                    1808 	.db 0x00
      00005F 00                    1809 	.db 0x00
      000060 00                    1810 	.db 0x00
      000061 00                    1811 	.db 0x00
      000062 00                    1812 	.db 0x00
      000063 00                    1813 	.db 0x00
      000064 00                    1814 	.db 0x00
      000065 00                    1815 	.db 0x00
      000066 00                    1816 	.db 0x00
      000067 00                    1817 	.db 0x00
      000068 00                    1818 	.db 0x00
      000069 00                    1819 	.db 0x00
      00006A 00                    1820 	.db 0x00
      00006B 00                    1821 	.db 0x00
      00006C 00                    1822 	.db 0x00
      00006D 00                    1823 	.db 0x00
      00006E 00                    1824 	.db 0x00
      00006F 00                    1825 	.db 0x00
      000070 00                    1826 	.db 0x00
      000071 00                    1827 	.db 0x00
      000072 00                    1828 	.db 0x00
      000073 00                    1829 	.db 0x00
      000074 00                    1830 	.db 0x00
      000075 00                    1831 	.db 0x00
      000076 00                    1832 	.db 0x00
      000077 00                    1833 	.db 0x00
      000078 00                    1834 	.db 0x00
      000079 00                    1835 	.db 0x00
      00007A 00                    1836 	.db 0x00
      00007B 00                    1837 	.db 0x00
      00007C 00                    1838 	.db 0x00
      00007D 00                    1839 	.db 0x00
      00007E 00                    1840 	.db 0x00
      00007F 00                    1841 	.db 0x00
      000080 00                    1842 	.db 0x00
      000081 00                    1843 	.db 0x00
      000082 00                    1844 	.db 0x00
      000083 00                    1845 	.db 0x00
      000084 00                    1846 	.db 0x00
      000085 00                    1847 	.db 0x00
      000086 00                    1848 	.db 0x00
      000087 00                    1849 	.db 0x00
      000088 00                    1850 	.db 0x00
      000089 00                    1851 	.db 0x00
      00008A 00                    1852 	.db 0x00
      00008B 00                    1853 	.db 0x00
      00008C 00                    1854 	.db 0x00
      00008D 00                    1855 	.db 0x00
      00008E 00                    1856 	.db 0x00
      00008F 00                    1857 	.db 0x00
      000090 00                    1858 	.db 0x00
      000091 00                    1859 	.db 0x00
      000092 00                    1860 	.db 0x00
      000093 00                    1861 	.db 0x00
      000094 00                    1862 	.db 0x00
      000095 00                    1863 	.db 0x00
      000096 00                    1864 	.db 0x00
      000097 00                    1865 	.db 0x00
      000098 00                    1866 	.db 0x00
      000099 00                    1867 	.db 0x00
      00009A 00                    1868 	.db 0x00
      00009B 00                    1869 	.db 0x00
      00009C 00                    1870 	.db 0x00
      00009D 00                    1871 	.db 0x00
      00009E 00                    1872 	.db 0x00
      00009F 00                    1873 	.db 0x00
      0000A0 00                    1874 	.db 0x00
      0000A1 00                    1875 	.db 0x00
      0000A2 00                    1876 	.db 0x00
      0000A3 00                    1877 	.db 0x00
      0000A4 00                    1878 	.db 0x00
      0000A5 00                    1879 	.db 0x00
      0000A6 00                    1880 	.db 0x00
      0000A7 00                    1881 	.db 0x00
      0000A8 00                    1882 	.db 0x00
      0000A9 00                    1883 	.db 0x00
      0000AA 00                    1884 	.db 0x00
      0000AB 00                    1885 	.db 0x00
      0000AC 00                    1886 	.db 0x00
      0000AD 00                    1887 	.db 0x00
      0000AE 00                    1888 	.db 0x00
      0000AF 00                    1889 	.db 0x00
      0000B0 00                    1890 	.db 0x00
      0000B1 00                    1891 	.db 0x00
      0000B2 00                    1892 	.db 0x00
      0000B3 00                    1893 	.db 0x00
      0000B4 00                    1894 	.db 0x00
      0000B5 00                    1895 	.db 0x00
      0000B6 00                    1896 	.db 0x00
      0000B7 00                    1897 	.db 0x00
      0000B8 00                    1898 	.db 0x00
      0000B9 00                    1899 	.db 0x00
      0000BA 00                    1900 	.db 0x00
      0000BB 00                    1901 	.db 0x00
      0000BC 00                    1902 	.db 0x00
      0000BD 00                    1903 	.db 0x00
      0000BE 00                    1904 	.db 0x00
      0000BF 00                    1905 	.db 0x00
      0000C0 00                    1906 	.db 0x00
      0000C1 00                    1907 	.db 0x00
      0000C2 00                    1908 	.db 0x00
      0000C3 00                    1909 	.db 0x00
      0000C4 00                    1910 	.db 0x00
      0000C5 00                    1911 	.db 0x00
      0000C6 00                    1912 	.db 0x00
      0000C7 00                    1913 	.db 0x00
      0000C8 00                    1914 	.db 0x00
      0000C9 00                    1915 	.db 0x00
      0000CA 00                    1916 	.db 0x00
      0000CB 00                    1917 	.db 0x00
      0000CC 00                    1918 	.db 0x00
      0000CD 00                    1919 	.db 0x00
      0000CE 00                    1920 	.db 0x00
      0000CF 00                    1921 	.db 0x00
      0000D0 00                    1922 	.db 0x00
      0000D1 00                    1923 	.db 0x00
      0000D2 00                    1924 	.db 0x00
      0000D3 00                    1925 	.db 0x00
      0000D4 00                    1926 	.db 0x00
      0000D5 00                    1927 	.db 0x00
      0000D6 00                    1928 	.db 0x00
      0000D7 00                    1929 	.db 0x00
      0000D8 00                    1930 	.db 0x00
      0000D9 00                    1931 	.db 0x00
      0000DA 00                    1932 	.db 0x00
      0000DB 00                    1933 	.db 0x00
      0000DC 00                    1934 	.db 0x00
      0000DD 00                    1935 	.db 0x00
      0000DE 00                    1936 	.db 0x00
      0000DF 00                    1937 	.db 0x00
      0000E0 00                    1938 	.db 0x00
      0000E1 00                    1939 	.db 0x00
      0000E2 00                    1940 	.db 0x00
      0000E3 00                    1941 	.db 0x00
      0000E4 00                    1942 	.db 0x00
      0000E5 00                    1943 	.db 0x00
      0000E6 00                    1944 	.db 0x00
      0000E7 00                    1945 	.db 0x00
      0000E8 00                    1946 	.db 0x00
      0000E9 00                    1947 	.db 0x00
      0000EA 00                    1948 	.db 0x00
      0000EB 00                    1949 	.db 0x00
      0000EC 00                    1950 	.db 0x00
      0000ED 00                    1951 	.db 0x00
      0000EE 00                    1952 	.db 0x00
      0000EF 00                    1953 	.db 0x00
      0000F0 00                    1954 	.db 0x00
      0000F1 00                    1955 	.db 0x00
      0000F2 00                    1956 	.db 0x00
      0000F3 00                    1957 	.db 0x00
      0000F4 00                    1958 	.db 0x00
      0000F5 00                    1959 	.db 0x00
      0000F6 00                    1960 	.db 0x00
      0000F7 00                    1961 	.db 0x00
      0000F8 00                    1962 	.db 0x00
      0000F9 00                    1963 	.db 0x00
      0000FA 00                    1964 	.db 0x00
      0000FB 00                    1965 	.db 0x00
      0000FC 00                    1966 	.db 0x00
      0000FD 00                    1967 	.db 0x00
      0000FE 00                    1968 	.db 0x00
      0000FF 00                    1969 	.db 0x00
      000100                       1970 __xinit__buffer:
      000100 00                    1971 	.db #0x00	; 0
      000101 00                    1972 	.db 0x00
      000102 00                    1973 	.db 0x00
      000103 00                    1974 	.db 0x00
      000104 00                    1975 	.db 0x00
      000105 00                    1976 	.db 0x00
      000106 00                    1977 	.db 0x00
      000107 00                    1978 	.db 0x00
      000108 00                    1979 	.db 0x00
      000109 00                    1980 	.db 0x00
      00010A 00                    1981 	.db 0x00
      00010B 00                    1982 	.db 0x00
      00010C 00                    1983 	.db 0x00
      00010D 00                    1984 	.db 0x00
      00010E 00                    1985 	.db 0x00
      00010F 00                    1986 	.db 0x00
      000110 00                    1987 	.db 0x00
      000111 00                    1988 	.db 0x00
      000112 00                    1989 	.db 0x00
      000113 00                    1990 	.db 0x00
      000114 00                    1991 	.db 0x00
      000115 00                    1992 	.db 0x00
      000116 00                    1993 	.db 0x00
      000117 00                    1994 	.db 0x00
      000118 00                    1995 	.db 0x00
      000119 00                    1996 	.db 0x00
      00011A 00                    1997 	.db 0x00
      00011B 00                    1998 	.db 0x00
      00011C 00                    1999 	.db 0x00
      00011D 00                    2000 	.db 0x00
      00011E 00                    2001 	.db 0x00
      00011F 00                    2002 	.db 0x00
      000120 00                    2003 	.db 0x00
      000121 00                    2004 	.db 0x00
      000122 00                    2005 	.db 0x00
      000123 00                    2006 	.db 0x00
      000124 00                    2007 	.db 0x00
      000125 00                    2008 	.db 0x00
      000126 00                    2009 	.db 0x00
      000127 00                    2010 	.db 0x00
      000128 00                    2011 	.db 0x00
      000129 00                    2012 	.db 0x00
      00012A 00                    2013 	.db 0x00
      00012B 00                    2014 	.db 0x00
      00012C 00                    2015 	.db 0x00
      00012D 00                    2016 	.db 0x00
      00012E 00                    2017 	.db 0x00
      00012F 00                    2018 	.db 0x00
      000130 00                    2019 	.db 0x00
      000131 00                    2020 	.db 0x00
      000132 00                    2021 	.db 0x00
      000133 00                    2022 	.db 0x00
      000134 00                    2023 	.db 0x00
      000135 00                    2024 	.db 0x00
      000136 00                    2025 	.db 0x00
      000137 00                    2026 	.db 0x00
      000138 00                    2027 	.db 0x00
      000139 00                    2028 	.db 0x00
      00013A 00                    2029 	.db 0x00
      00013B 00                    2030 	.db 0x00
      00013C 00                    2031 	.db 0x00
      00013D 00                    2032 	.db 0x00
      00013E 00                    2033 	.db 0x00
      00013F 00                    2034 	.db 0x00
      000140 00                    2035 	.db 0x00
      000141 00                    2036 	.db 0x00
      000142 00                    2037 	.db 0x00
      000143 00                    2038 	.db 0x00
      000144 00                    2039 	.db 0x00
      000145 00                    2040 	.db 0x00
      000146 00                    2041 	.db 0x00
      000147 00                    2042 	.db 0x00
      000148 00                    2043 	.db 0x00
      000149 00                    2044 	.db 0x00
      00014A 00                    2045 	.db 0x00
      00014B 00                    2046 	.db 0x00
      00014C 00                    2047 	.db 0x00
      00014D 00                    2048 	.db 0x00
      00014E 00                    2049 	.db 0x00
      00014F 00                    2050 	.db 0x00
      000150 00                    2051 	.db 0x00
      000151 00                    2052 	.db 0x00
      000152 00                    2053 	.db 0x00
      000153 00                    2054 	.db 0x00
      000154 00                    2055 	.db 0x00
      000155 00                    2056 	.db 0x00
      000156 00                    2057 	.db 0x00
      000157 00                    2058 	.db 0x00
      000158 00                    2059 	.db 0x00
      000159 00                    2060 	.db 0x00
      00015A 00                    2061 	.db 0x00
      00015B 00                    2062 	.db 0x00
      00015C 00                    2063 	.db 0x00
      00015D 00                    2064 	.db 0x00
      00015E 00                    2065 	.db 0x00
      00015F 00                    2066 	.db 0x00
      000160 00                    2067 	.db 0x00
      000161 00                    2068 	.db 0x00
      000162 00                    2069 	.db 0x00
      000163 00                    2070 	.db 0x00
      000164 00                    2071 	.db 0x00
      000165 00                    2072 	.db 0x00
      000166 00                    2073 	.db 0x00
      000167 00                    2074 	.db 0x00
      000168 00                    2075 	.db 0x00
      000169 00                    2076 	.db 0x00
      00016A 00                    2077 	.db 0x00
      00016B 00                    2078 	.db 0x00
      00016C 00                    2079 	.db 0x00
      00016D 00                    2080 	.db 0x00
      00016E 00                    2081 	.db 0x00
      00016F 00                    2082 	.db 0x00
      000170 00                    2083 	.db 0x00
      000171 00                    2084 	.db 0x00
      000172 00                    2085 	.db 0x00
      000173 00                    2086 	.db 0x00
      000174 00                    2087 	.db 0x00
      000175 00                    2088 	.db 0x00
      000176 00                    2089 	.db 0x00
      000177 00                    2090 	.db 0x00
      000178 00                    2091 	.db 0x00
      000179 00                    2092 	.db 0x00
      00017A 00                    2093 	.db 0x00
      00017B 00                    2094 	.db 0x00
      00017C 00                    2095 	.db 0x00
      00017D 00                    2096 	.db 0x00
      00017E 00                    2097 	.db 0x00
      00017F 00                    2098 	.db 0x00
      000180 00                    2099 	.db 0x00
      000181 00                    2100 	.db 0x00
      000182 00                    2101 	.db 0x00
      000183 00                    2102 	.db 0x00
      000184 00                    2103 	.db 0x00
      000185 00                    2104 	.db 0x00
      000186 00                    2105 	.db 0x00
      000187 00                    2106 	.db 0x00
      000188 00                    2107 	.db 0x00
      000189 00                    2108 	.db 0x00
      00018A 00                    2109 	.db 0x00
      00018B 00                    2110 	.db 0x00
      00018C 00                    2111 	.db 0x00
      00018D 00                    2112 	.db 0x00
      00018E 00                    2113 	.db 0x00
      00018F 00                    2114 	.db 0x00
      000190 00                    2115 	.db 0x00
      000191 00                    2116 	.db 0x00
      000192 00                    2117 	.db 0x00
      000193 00                    2118 	.db 0x00
      000194 00                    2119 	.db 0x00
      000195 00                    2120 	.db 0x00
      000196 00                    2121 	.db 0x00
      000197 00                    2122 	.db 0x00
      000198 00                    2123 	.db 0x00
      000199 00                    2124 	.db 0x00
      00019A 00                    2125 	.db 0x00
      00019B 00                    2126 	.db 0x00
      00019C 00                    2127 	.db 0x00
      00019D 00                    2128 	.db 0x00
      00019E 00                    2129 	.db 0x00
      00019F 00                    2130 	.db 0x00
      0001A0 00                    2131 	.db 0x00
      0001A1 00                    2132 	.db 0x00
      0001A2 00                    2133 	.db 0x00
      0001A3 00                    2134 	.db 0x00
      0001A4 00                    2135 	.db 0x00
      0001A5 00                    2136 	.db 0x00
      0001A6 00                    2137 	.db 0x00
      0001A7 00                    2138 	.db 0x00
      0001A8 00                    2139 	.db 0x00
      0001A9 00                    2140 	.db 0x00
      0001AA 00                    2141 	.db 0x00
      0001AB 00                    2142 	.db 0x00
      0001AC 00                    2143 	.db 0x00
      0001AD 00                    2144 	.db 0x00
      0001AE 00                    2145 	.db 0x00
      0001AF 00                    2146 	.db 0x00
      0001B0 00                    2147 	.db 0x00
      0001B1 00                    2148 	.db 0x00
      0001B2 00                    2149 	.db 0x00
      0001B3 00                    2150 	.db 0x00
      0001B4 00                    2151 	.db 0x00
      0001B5 00                    2152 	.db 0x00
      0001B6 00                    2153 	.db 0x00
      0001B7 00                    2154 	.db 0x00
      0001B8 00                    2155 	.db 0x00
      0001B9 00                    2156 	.db 0x00
      0001BA 00                    2157 	.db 0x00
      0001BB 00                    2158 	.db 0x00
      0001BC 00                    2159 	.db 0x00
      0001BD 00                    2160 	.db 0x00
      0001BE 00                    2161 	.db 0x00
      0001BF 00                    2162 	.db 0x00
      0001C0 00                    2163 	.db 0x00
      0001C1 00                    2164 	.db 0x00
      0001C2 00                    2165 	.db 0x00
      0001C3 00                    2166 	.db 0x00
      0001C4 00                    2167 	.db 0x00
      0001C5 00                    2168 	.db 0x00
      0001C6 00                    2169 	.db 0x00
      0001C7 00                    2170 	.db 0x00
      0001C8 00                    2171 	.db 0x00
      0001C9 00                    2172 	.db 0x00
      0001CA 00                    2173 	.db 0x00
      0001CB 00                    2174 	.db 0x00
      0001CC 00                    2175 	.db 0x00
      0001CD 00                    2176 	.db 0x00
      0001CE 00                    2177 	.db 0x00
      0001CF 00                    2178 	.db 0x00
      0001D0 00                    2179 	.db 0x00
      0001D1 00                    2180 	.db 0x00
      0001D2 00                    2181 	.db 0x00
      0001D3 00                    2182 	.db 0x00
      0001D4 00                    2183 	.db 0x00
      0001D5 00                    2184 	.db 0x00
      0001D6 00                    2185 	.db 0x00
      0001D7 00                    2186 	.db 0x00
      0001D8 00                    2187 	.db 0x00
      0001D9 00                    2188 	.db 0x00
      0001DA 00                    2189 	.db 0x00
      0001DB 00                    2190 	.db 0x00
      0001DC 00                    2191 	.db 0x00
      0001DD 00                    2192 	.db 0x00
      0001DE 00                    2193 	.db 0x00
      0001DF 00                    2194 	.db 0x00
      0001E0 00                    2195 	.db 0x00
      0001E1 00                    2196 	.db 0x00
      0001E2 00                    2197 	.db 0x00
      0001E3 00                    2198 	.db 0x00
      0001E4 00                    2199 	.db 0x00
      0001E5 00                    2200 	.db 0x00
      0001E6 00                    2201 	.db 0x00
      0001E7 00                    2202 	.db 0x00
      0001E8 00                    2203 	.db 0x00
      0001E9 00                    2204 	.db 0x00
      0001EA 00                    2205 	.db 0x00
      0001EB 00                    2206 	.db 0x00
      0001EC 00                    2207 	.db 0x00
      0001ED 00                    2208 	.db 0x00
      0001EE 00                    2209 	.db 0x00
      0001EF 00                    2210 	.db 0x00
      0001F0 00                    2211 	.db 0x00
      0001F1 00                    2212 	.db 0x00
      0001F2 00                    2213 	.db 0x00
      0001F3 00                    2214 	.db 0x00
      0001F4 00                    2215 	.db 0x00
      0001F5 00                    2216 	.db 0x00
      0001F6 00                    2217 	.db 0x00
      0001F7 00                    2218 	.db 0x00
      0001F8 00                    2219 	.db 0x00
      0001F9 00                    2220 	.db 0x00
      0001FA 00                    2221 	.db 0x00
      0001FB 00                    2222 	.db 0x00
      0001FC 00                    2223 	.db 0x00
      0001FD 00                    2224 	.db 0x00
      0001FE 00                    2225 	.db 0x00
      0001FF 00                    2226 	.db 0x00
      000200                       2227 __xinit__a:
      000200 00                    2228 	.db #0x00	; 0
      000201 00                    2229 	.db 0x00
      000202 00                    2230 	.db 0x00
      000203                       2231 __xinit__d_addr:
      000203 00                    2232 	.db #0x00	; 0
      000204                       2233 __xinit__p_size:
      000204 00                    2234 	.db #0x00	; 0
      000205                       2235 __xinit__d_size:
      000205 00                    2236 	.db #0x00	; 0
      000206                       2237 __xinit__p_bytes:
      000206 00                    2238 	.db #0x00	; 0
      000207                       2239 __xinit__data_buf:
      000207 00                    2240 	.db #0x00	; 0
      000208 00                    2241 	.db 0x00
      000209 00                    2242 	.db 0x00
      00020A 00                    2243 	.db 0x00
      00020B 00                    2244 	.db 0x00
      00020C 00                    2245 	.db 0x00
      00020D 00                    2246 	.db 0x00
      00020E 00                    2247 	.db 0x00
      00020F 00                    2248 	.db 0x00
      000210 00                    2249 	.db 0x00
      000211 00                    2250 	.db 0x00
      000212 00                    2251 	.db 0x00
      000213 00                    2252 	.db 0x00
      000214 00                    2253 	.db 0x00
      000215 00                    2254 	.db 0x00
      000216 00                    2255 	.db 0x00
      000217 00                    2256 	.db 0x00
      000218 00                    2257 	.db 0x00
      000219 00                    2258 	.db 0x00
      00021A 00                    2259 	.db 0x00
      00021B 00                    2260 	.db 0x00
      00021C 00                    2261 	.db 0x00
      00021D 00                    2262 	.db 0x00
      00021E 00                    2263 	.db 0x00
      00021F 00                    2264 	.db 0x00
      000220 00                    2265 	.db 0x00
      000221 00                    2266 	.db 0x00
      000222 00                    2267 	.db 0x00
      000223 00                    2268 	.db 0x00
      000224 00                    2269 	.db 0x00
      000225 00                    2270 	.db 0x00
      000226 00                    2271 	.db 0x00
      000227 00                    2272 	.db 0x00
      000228 00                    2273 	.db 0x00
      000229 00                    2274 	.db 0x00
      00022A 00                    2275 	.db 0x00
      00022B 00                    2276 	.db 0x00
      00022C 00                    2277 	.db 0x00
      00022D 00                    2278 	.db 0x00
      00022E 00                    2279 	.db 0x00
      00022F 00                    2280 	.db 0x00
      000230 00                    2281 	.db 0x00
      000231 00                    2282 	.db 0x00
      000232 00                    2283 	.db 0x00
      000233 00                    2284 	.db 0x00
      000234 00                    2285 	.db 0x00
      000235 00                    2286 	.db 0x00
      000236 00                    2287 	.db 0x00
      000237 00                    2288 	.db 0x00
      000238 00                    2289 	.db 0x00
      000239 00                    2290 	.db 0x00
      00023A 00                    2291 	.db 0x00
      00023B 00                    2292 	.db 0x00
      00023C 00                    2293 	.db 0x00
      00023D 00                    2294 	.db 0x00
      00023E 00                    2295 	.db 0x00
      00023F 00                    2296 	.db 0x00
      000240 00                    2297 	.db 0x00
      000241 00                    2298 	.db 0x00
      000242 00                    2299 	.db 0x00
      000243 00                    2300 	.db 0x00
      000244 00                    2301 	.db 0x00
      000245 00                    2302 	.db 0x00
      000246 00                    2303 	.db 0x00
      000247 00                    2304 	.db 0x00
      000248 00                    2305 	.db 0x00
      000249 00                    2306 	.db 0x00
      00024A 00                    2307 	.db 0x00
      00024B 00                    2308 	.db 0x00
      00024C 00                    2309 	.db 0x00
      00024D 00                    2310 	.db 0x00
      00024E 00                    2311 	.db 0x00
      00024F 00                    2312 	.db 0x00
      000250 00                    2313 	.db 0x00
      000251 00                    2314 	.db 0x00
      000252 00                    2315 	.db 0x00
      000253 00                    2316 	.db 0x00
      000254 00                    2317 	.db 0x00
      000255 00                    2318 	.db 0x00
      000256 00                    2319 	.db 0x00
      000257 00                    2320 	.db 0x00
      000258 00                    2321 	.db 0x00
      000259 00                    2322 	.db 0x00
      00025A 00                    2323 	.db 0x00
      00025B 00                    2324 	.db 0x00
      00025C 00                    2325 	.db 0x00
      00025D 00                    2326 	.db 0x00
      00025E 00                    2327 	.db 0x00
      00025F 00                    2328 	.db 0x00
      000260 00                    2329 	.db 0x00
      000261 00                    2330 	.db 0x00
      000262 00                    2331 	.db 0x00
      000263 00                    2332 	.db 0x00
      000264 00                    2333 	.db 0x00
      000265 00                    2334 	.db 0x00
      000266 00                    2335 	.db 0x00
      000267 00                    2336 	.db 0x00
      000268 00                    2337 	.db 0x00
      000269 00                    2338 	.db 0x00
      00026A 00                    2339 	.db 0x00
      00026B 00                    2340 	.db 0x00
      00026C 00                    2341 	.db 0x00
      00026D 00                    2342 	.db 0x00
      00026E 00                    2343 	.db 0x00
      00026F 00                    2344 	.db 0x00
      000270 00                    2345 	.db 0x00
      000271 00                    2346 	.db 0x00
      000272 00                    2347 	.db 0x00
      000273 00                    2348 	.db 0x00
      000274 00                    2349 	.db 0x00
      000275 00                    2350 	.db 0x00
      000276 00                    2351 	.db 0x00
      000277 00                    2352 	.db 0x00
      000278 00                    2353 	.db 0x00
      000279 00                    2354 	.db 0x00
      00027A 00                    2355 	.db 0x00
      00027B 00                    2356 	.db 0x00
      00027C 00                    2357 	.db 0x00
      00027D 00                    2358 	.db 0x00
      00027E 00                    2359 	.db 0x00
      00027F 00                    2360 	.db 0x00
      000280 00                    2361 	.db 0x00
      000281 00                    2362 	.db 0x00
      000282 00                    2363 	.db 0x00
      000283 00                    2364 	.db 0x00
      000284 00                    2365 	.db 0x00
      000285 00                    2366 	.db 0x00
      000286 00                    2367 	.db 0x00
      000287 00                    2368 	.db 0x00
      000288 00                    2369 	.db 0x00
      000289 00                    2370 	.db 0x00
      00028A 00                    2371 	.db 0x00
      00028B 00                    2372 	.db 0x00
      00028C 00                    2373 	.db 0x00
      00028D 00                    2374 	.db 0x00
      00028E 00                    2375 	.db 0x00
      00028F 00                    2376 	.db 0x00
      000290 00                    2377 	.db 0x00
      000291 00                    2378 	.db 0x00
      000292 00                    2379 	.db 0x00
      000293 00                    2380 	.db 0x00
      000294 00                    2381 	.db 0x00
      000295 00                    2382 	.db 0x00
      000296 00                    2383 	.db 0x00
      000297 00                    2384 	.db 0x00
      000298 00                    2385 	.db 0x00
      000299 00                    2386 	.db 0x00
      00029A 00                    2387 	.db 0x00
      00029B 00                    2388 	.db 0x00
      00029C 00                    2389 	.db 0x00
      00029D 00                    2390 	.db 0x00
      00029E 00                    2391 	.db 0x00
      00029F 00                    2392 	.db 0x00
      0002A0 00                    2393 	.db 0x00
      0002A1 00                    2394 	.db 0x00
      0002A2 00                    2395 	.db 0x00
      0002A3 00                    2396 	.db 0x00
      0002A4 00                    2397 	.db 0x00
      0002A5 00                    2398 	.db 0x00
      0002A6 00                    2399 	.db 0x00
      0002A7 00                    2400 	.db 0x00
      0002A8 00                    2401 	.db 0x00
      0002A9 00                    2402 	.db 0x00
      0002AA 00                    2403 	.db 0x00
      0002AB 00                    2404 	.db 0x00
      0002AC 00                    2405 	.db 0x00
      0002AD 00                    2406 	.db 0x00
      0002AE 00                    2407 	.db 0x00
      0002AF 00                    2408 	.db 0x00
      0002B0 00                    2409 	.db 0x00
      0002B1 00                    2410 	.db 0x00
      0002B2 00                    2411 	.db 0x00
      0002B3 00                    2412 	.db 0x00
      0002B4 00                    2413 	.db 0x00
      0002B5 00                    2414 	.db 0x00
      0002B6 00                    2415 	.db 0x00
      0002B7 00                    2416 	.db 0x00
      0002B8 00                    2417 	.db 0x00
      0002B9 00                    2418 	.db 0x00
      0002BA 00                    2419 	.db 0x00
      0002BB 00                    2420 	.db 0x00
      0002BC 00                    2421 	.db 0x00
      0002BD 00                    2422 	.db 0x00
      0002BE 00                    2423 	.db 0x00
      0002BF 00                    2424 	.db 0x00
      0002C0 00                    2425 	.db 0x00
      0002C1 00                    2426 	.db 0x00
      0002C2 00                    2427 	.db 0x00
      0002C3 00                    2428 	.db 0x00
      0002C4 00                    2429 	.db 0x00
      0002C5 00                    2430 	.db 0x00
      0002C6 00                    2431 	.db 0x00
      0002C7 00                    2432 	.db 0x00
      0002C8 00                    2433 	.db 0x00
      0002C9 00                    2434 	.db 0x00
      0002CA 00                    2435 	.db 0x00
      0002CB 00                    2436 	.db 0x00
      0002CC 00                    2437 	.db 0x00
      0002CD 00                    2438 	.db 0x00
      0002CE 00                    2439 	.db 0x00
      0002CF 00                    2440 	.db 0x00
      0002D0 00                    2441 	.db 0x00
      0002D1 00                    2442 	.db 0x00
      0002D2 00                    2443 	.db 0x00
      0002D3 00                    2444 	.db 0x00
      0002D4 00                    2445 	.db 0x00
      0002D5 00                    2446 	.db 0x00
      0002D6 00                    2447 	.db 0x00
      0002D7 00                    2448 	.db 0x00
      0002D8 00                    2449 	.db 0x00
      0002D9 00                    2450 	.db 0x00
      0002DA 00                    2451 	.db 0x00
      0002DB 00                    2452 	.db 0x00
      0002DC 00                    2453 	.db 0x00
      0002DD 00                    2454 	.db 0x00
      0002DE 00                    2455 	.db 0x00
      0002DF 00                    2456 	.db 0x00
      0002E0 00                    2457 	.db 0x00
      0002E1 00                    2458 	.db 0x00
      0002E2 00                    2459 	.db 0x00
      0002E3 00                    2460 	.db 0x00
      0002E4 00                    2461 	.db 0x00
      0002E5 00                    2462 	.db 0x00
      0002E6 00                    2463 	.db 0x00
      0002E7 00                    2464 	.db 0x00
      0002E8 00                    2465 	.db 0x00
      0002E9 00                    2466 	.db 0x00
      0002EA 00                    2467 	.db 0x00
      0002EB 00                    2468 	.db 0x00
      0002EC 00                    2469 	.db 0x00
      0002ED 00                    2470 	.db 0x00
      0002EE 00                    2471 	.db 0x00
      0002EF 00                    2472 	.db 0x00
      0002F0 00                    2473 	.db 0x00
      0002F1 00                    2474 	.db 0x00
      0002F2 00                    2475 	.db 0x00
      0002F3 00                    2476 	.db 0x00
      0002F4 00                    2477 	.db 0x00
      0002F5 00                    2478 	.db 0x00
      0002F6 00                    2479 	.db 0x00
      0002F7 00                    2480 	.db 0x00
      0002F8 00                    2481 	.db 0x00
      0002F9 00                    2482 	.db 0x00
      0002FA 00                    2483 	.db 0x00
      0002FB 00                    2484 	.db 0x00
      0002FC 00                    2485 	.db 0x00
      0002FD 00                    2486 	.db 0x00
      0002FE 00                    2487 	.db 0x00
      0002FF 00                    2488 	.db 0x00
      000300 00                    2489 	.db 0x00
      000301 00                    2490 	.db 0x00
      000302 00                    2491 	.db 0x00
      000303 00                    2492 	.db 0x00
      000304 00                    2493 	.db 0x00
      000305 00                    2494 	.db 0x00
      000306 00                    2495 	.db 0x00
      000307                       2496 __xinit__current_dev:
      000307 00                    2497 	.db #0x00	; 0
                                   2498 	.area CABS (ABS)
