                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.3.0 #14184 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _command_switcher
                                     13 	.globl _data_handler
                                     14 	.globl _cm_SW
                                     15 	.globl _cm_SR
                                     16 	.globl _cm_ST
                                     17 	.globl _cm_DB
                                     18 	.globl _cm_RM
                                     19 	.globl _cm_SN
                                     20 	.globl _cm_SM
                                     21 	.globl _i2c_scan
                                     22 	.globl _i2c_read
                                     23 	.globl _i2c_write
                                     24 	.globl _i2c_stop
                                     25 	.globl _i2c_send_address
                                     26 	.globl _i2c_start
                                     27 	.globl _i2c_init
                                     28 	.globl _uart_init
                                     29 	.globl _status_check
                                     30 	.globl _reg_check
                                     31 	.globl _char_buffer_to_int
                                     32 	.globl _get_size_from_buff
                                     33 	.globl _get_addr_from_buff
                                     34 	.globl _convert_int_to_binary
                                     35 	.globl _convert_chars_to_int
                                     36 	.globl _convert_int_to_chars
                                     37 	.globl _uart_read
                                     38 	.globl _UART_RX
                                     39 	.globl _uart_write
                                     40 	.globl _UART_TX
                                     41 	.globl _delay
                                     42 	.globl ___memcpy
                                     43 	.globl _strlen
                                     44 	.globl _memset
                                     45 	.globl _memcmp
                                     46 	.globl _current_dev
                                     47 	.globl _data_buf
                                     48 	.globl _p_bytes
                                     49 	.globl _d_size
                                     50 	.globl _p_size
                                     51 	.globl _d_addr
                                     52 	.globl _a
                                     53 	.globl _buffer
                                     54 	.globl _status_registers
                                     55 ;--------------------------------------------------------
                                     56 ; ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area DATA
                                     59 ;--------------------------------------------------------
                                     60 ; ram data
                                     61 ;--------------------------------------------------------
                                     62 	.area INITIALIZED
      000000                         63 _status_registers::
      000000                         64 	.ds 256
      000100                         65 _buffer::
      000100                         66 	.ds 256
      000200                         67 _a::
      000200                         68 	.ds 3
      000203                         69 _d_addr::
      000203                         70 	.ds 1
      000204                         71 _p_size::
      000204                         72 	.ds 1
      000205                         73 _d_size::
      000205                         74 	.ds 1
      000206                         75 _p_bytes::
      000206                         76 	.ds 1
      000207                         77 _data_buf::
      000207                         78 	.ds 256
      000307                         79 _current_dev::
      000307                         80 	.ds 1
                                     81 ;--------------------------------------------------------
                                     82 ; Stack segment in internal ram
                                     83 ;--------------------------------------------------------
                                     84 	.area SSEG
      000000                         85 __start__stack:
      000000                         86 	.ds	1
                                     87 
                                     88 ;--------------------------------------------------------
                                     89 ; absolute external ram data
                                     90 ;--------------------------------------------------------
                                     91 	.area DABS (ABS)
                                     92 
                                     93 ; default segment ordering for linker
                                     94 	.area HOME
                                     95 	.area GSINIT
                                     96 	.area GSFINAL
                                     97 	.area CONST
                                     98 	.area INITIALIZER
                                     99 	.area CODE
                                    100 
                                    101 ;--------------------------------------------------------
                                    102 ; interrupt vector
                                    103 ;--------------------------------------------------------
                                    104 	.area HOME
      000000                        105 __interrupt_vect:
      000000 82v00u00u00            106 	int s_GSINIT ; reset
                                    107 ;--------------------------------------------------------
                                    108 ; global & static initialisations
                                    109 ;--------------------------------------------------------
                                    110 	.area HOME
                                    111 	.area GSINIT
                                    112 	.area GSFINAL
                                    113 	.area GSINIT
      000000 CDr00r00         [ 4]  114 	call	___sdcc_external_startup
      000003 4D               [ 1]  115 	tnz	a
      000004 27 03            [ 1]  116 	jreq	__sdcc_init_data
      000006 CCr00r04         [ 2]  117 	jp	__sdcc_program_startup
      000009                        118 __sdcc_init_data:
                                    119 ; stm8_genXINIT() start
      000009 AEr00r00         [ 2]  120 	ldw x, #l_DATA
      00000C 27 07            [ 1]  121 	jreq	00002$
      00000E                        122 00001$:
      00000E 72 4FuFFuFF      [ 1]  123 	clr (s_DATA - 1, x)
      000012 5A               [ 2]  124 	decw x
      000013 26 F9            [ 1]  125 	jrne	00001$
      000015                        126 00002$:
      000015 AEr00r00         [ 2]  127 	ldw	x, #l_INITIALIZER
      000018 27 09            [ 1]  128 	jreq	00004$
      00001A                        129 00003$:
      00001A D6uFFuFF         [ 1]  130 	ld	a, (s_INITIALIZER - 1, x)
      00001D D7uFFuFF         [ 1]  131 	ld	(s_INITIALIZED - 1, x), a
      000020 5A               [ 2]  132 	decw	x
      000021 26 F7            [ 1]  133 	jrne	00003$
      000023                        134 00004$:
                                    135 ; stm8_genXINIT() end
                                    136 	.area GSFINAL
      000000 CCr00r04         [ 2]  137 	jp	__sdcc_program_startup
                                    138 ;--------------------------------------------------------
                                    139 ; Home
                                    140 ;--------------------------------------------------------
                                    141 	.area HOME
                                    142 	.area HOME
      000004                        143 __sdcc_program_startup:
      000004 CCr07rAE         [ 2]  144 	jp	_main
                                    145 ;	return from main will return to caller
                                    146 ;--------------------------------------------------------
                                    147 ; code
                                    148 ;--------------------------------------------------------
                                    149 	.area CODE
                                    150 ;	main.c: 27: void delay(unsigned long count) {
                                    151 ;	-----------------------------------------
                                    152 ;	 function delay
                                    153 ;	-----------------------------------------
      000000                        154 _delay:
      000000 52 08            [ 2]  155 	sub	sp, #8
                                    156 ;	main.c: 28: while (count--)
      000002 16 0D            [ 2]  157 	ldw	y, (0x0d, sp)
      000004 17 07            [ 2]  158 	ldw	(0x07, sp), y
      000006 1E 0B            [ 2]  159 	ldw	x, (0x0b, sp)
      000008                        160 00101$:
      000008 1F 01            [ 2]  161 	ldw	(0x01, sp), x
      00000A 7B 07            [ 1]  162 	ld	a, (0x07, sp)
      00000C 6B 03            [ 1]  163 	ld	(0x03, sp), a
      00000E 7B 08            [ 1]  164 	ld	a, (0x08, sp)
      000010 16 07            [ 2]  165 	ldw	y, (0x07, sp)
      000012 72 A2 00 01      [ 2]  166 	subw	y, #0x0001
      000016 17 07            [ 2]  167 	ldw	(0x07, sp), y
      000018 24 01            [ 1]  168 	jrnc	00117$
      00001A 5A               [ 2]  169 	decw	x
      00001B                        170 00117$:
      00001B 4D               [ 1]  171 	tnz	a
      00001C 26 08            [ 1]  172 	jrne	00118$
      00001E 16 02            [ 2]  173 	ldw	y, (0x02, sp)
      000020 26 04            [ 1]  174 	jrne	00118$
      000022 0D 01            [ 1]  175 	tnz	(0x01, sp)
      000024 27 03            [ 1]  176 	jreq	00104$
      000026                        177 00118$:
                                    178 ;	main.c: 29: nop();
      000026 9D               [ 1]  179 	nop
      000027 20 DF            [ 2]  180 	jra	00101$
      000029                        181 00104$:
                                    182 ;	main.c: 30: }
      000029 1E 09            [ 2]  183 	ldw	x, (9, sp)
      00002B 5B 0E            [ 2]  184 	addw	sp, #14
      00002D FC               [ 2]  185 	jp	(x)
                                    186 ;	main.c: 38: void UART_TX(unsigned char value)
                                    187 ;	-----------------------------------------
                                    188 ;	 function UART_TX
                                    189 ;	-----------------------------------------
      00002E                        190 _UART_TX:
                                    191 ;	main.c: 40: UART1_DR = value;
      00002E C7 52 31         [ 1]  192 	ld	0x5231, a
                                    193 ;	main.c: 41: while(!(UART1_SR & UART_SR_TXE));
      000031                        194 00101$:
      000031 C6 52 30         [ 1]  195 	ld	a, 0x5230
      000034 2A FB            [ 1]  196 	jrpl	00101$
                                    197 ;	main.c: 42: }
      000036 81               [ 4]  198 	ret
                                    199 ;	main.c: 44: int uart_write(const char *str) {
                                    200 ;	-----------------------------------------
                                    201 ;	 function uart_write
                                    202 ;	-----------------------------------------
      000037                        203 _uart_write:
      000037 52 05            [ 2]  204 	sub	sp, #5
      000039 1F 03            [ 2]  205 	ldw	(0x03, sp), x
                                    206 ;	main.c: 46: for(i = 0; i < strlen(str); i++) {
      00003B 0F 05            [ 1]  207 	clr	(0x05, sp)
      00003D                        208 00103$:
      00003D 1E 03            [ 2]  209 	ldw	x, (0x03, sp)
      00003F CDr00r00         [ 4]  210 	call	_strlen
      000042 1F 01            [ 2]  211 	ldw	(0x01, sp), x
      000044 7B 05            [ 1]  212 	ld	a, (0x05, sp)
      000046 5F               [ 1]  213 	clrw	x
      000047 97               [ 1]  214 	ld	xl, a
      000048 13 01            [ 2]  215 	cpw	x, (0x01, sp)
      00004A 24 0F            [ 1]  216 	jrnc	00101$
                                    217 ;	main.c: 48: UART_TX(str[i]);
      00004C 5F               [ 1]  218 	clrw	x
      00004D 7B 05            [ 1]  219 	ld	a, (0x05, sp)
      00004F 97               [ 1]  220 	ld	xl, a
      000050 72 FB 03         [ 2]  221 	addw	x, (0x03, sp)
      000053 F6               [ 1]  222 	ld	a, (x)
      000054 CDr00r2E         [ 4]  223 	call	_UART_TX
                                    224 ;	main.c: 46: for(i = 0; i < strlen(str); i++) {
      000057 0C 05            [ 1]  225 	inc	(0x05, sp)
      000059 20 E2            [ 2]  226 	jra	00103$
      00005B                        227 00101$:
                                    228 ;	main.c: 51: return(i); // Bytes sent
      00005B 7B 05            [ 1]  229 	ld	a, (0x05, sp)
      00005D 5F               [ 1]  230 	clrw	x
      00005E 97               [ 1]  231 	ld	xl, a
                                    232 ;	main.c: 52: }
      00005F 5B 05            [ 2]  233 	addw	sp, #5
      000061 81               [ 4]  234 	ret
                                    235 ;	main.c: 53: unsigned char UART_RX(void)
                                    236 ;	-----------------------------------------
                                    237 ;	 function UART_RX
                                    238 ;	-----------------------------------------
      000062                        239 _UART_RX:
                                    240 ;	main.c: 56: while(!(UART1_SR & UART_SR_TXE));
      000062                        241 00101$:
      000062 C6 52 30         [ 1]  242 	ld	a, 0x5230
      000065 2A FB            [ 1]  243 	jrpl	00101$
                                    244 ;	main.c: 58: return UART1_DR;
      000067 C6 52 31         [ 1]  245 	ld	a, 0x5231
                                    246 ;	main.c: 59: }
      00006A 81               [ 4]  247 	ret
                                    248 ;	main.c: 60: int uart_read(void)
                                    249 ;	-----------------------------------------
                                    250 ;	 function uart_read
                                    251 ;	-----------------------------------------
      00006B                        252 _uart_read:
                                    253 ;	main.c: 63: memset(buffer, 0, sizeof(buffer));
      00006B 4B 00            [ 1]  254 	push	#0x00
      00006D 4B 01            [ 1]  255 	push	#0x01
      00006F 5F               [ 1]  256 	clrw	x
      000070 89               [ 2]  257 	pushw	x
      000071 AEr01r00         [ 2]  258 	ldw	x, #(_buffer+0)
      000074 CDr00r00         [ 4]  259 	call	_memset
                                    260 ;	main.c: 66: while(i<256)
      000077 5F               [ 1]  261 	clrw	x
      000078                        262 00109$:
      000078 A3 01 00         [ 2]  263 	cpw	x, #0x0100
      00007B 2E 2C            [ 1]  264 	jrsge	00111$
                                    265 ;	main.c: 69: if(UART1_SR & UART_SR_RXNE)
      00007D C6 52 30         [ 1]  266 	ld	a, 0x5230
      000080 A5 20            [ 1]  267 	bcp	a, #0x20
      000082 27 F4            [ 1]  268 	jreq	00109$
                                    269 ;	main.c: 72: buffer[i] = UART_RX();
      000084 90 93            [ 1]  270 	ldw	y, x
      000086 72 A9r01r00      [ 2]  271 	addw	y, #(_buffer+0)
      00008A 89               [ 2]  272 	pushw	x
      00008B 90 89            [ 2]  273 	pushw	y
      00008D CDr00r62         [ 4]  274 	call	_UART_RX
      000090 90 85            [ 2]  275 	popw	y
      000092 85               [ 2]  276 	popw	x
      000093 90 F7            [ 1]  277 	ld	(y), a
                                    278 ;	main.c: 73: if(buffer[i] == '\r')
      000095 A1 0D            [ 1]  279 	cp	a, #0x0d
      000097 26 03            [ 1]  280 	jrne	00102$
                                    281 ;	main.c: 75: return 1;
      000099 5F               [ 1]  282 	clrw	x
      00009A 5C               [ 1]  283 	incw	x
      00009B 81               [ 4]  284 	ret
                                    285 ;	main.c: 76: break;
      00009C                        286 00102$:
                                    287 ;	main.c: 78: if(buffer[i] < 32 || buffer[i] > 126);
      00009C 90 F6            [ 1]  288 	ld	a, (y)
      00009E A1 20            [ 1]  289 	cp	a, #0x20
      0000A0 25 D6            [ 1]  290 	jrc	00109$
      0000A2 A1 7E            [ 1]  291 	cp	a, #0x7e
      0000A4 22 D2            [ 1]  292 	jrugt	00109$
                                    293 ;	main.c: 80: i++;
      0000A6 5C               [ 1]  294 	incw	x
      0000A7 20 CF            [ 2]  295 	jra	00109$
      0000A9                        296 00111$:
                                    297 ;	main.c: 84: return 0;
      0000A9 5F               [ 1]  298 	clrw	x
                                    299 ;	main.c: 85: }
      0000AA 81               [ 4]  300 	ret
                                    301 ;	main.c: 94: void convert_int_to_chars(uint8_t num, char* rx_int_chars) {
                                    302 ;	-----------------------------------------
                                    303 ;	 function convert_int_to_chars
                                    304 ;	-----------------------------------------
      0000AB                        305 _convert_int_to_chars:
      0000AB 52 0D            [ 2]  306 	sub	sp, #13
      0000AD 6B 0D            [ 1]  307 	ld	(0x0d, sp), a
      0000AF 1F 0B            [ 2]  308 	ldw	(0x0b, sp), x
                                    309 ;	main.c: 97: rx_int_chars[0] = num / 100 + '0';
      0000B1 7B 0D            [ 1]  310 	ld	a, (0x0d, sp)
      0000B3 6B 02            [ 1]  311 	ld	(0x02, sp), a
      0000B5 0F 01            [ 1]  312 	clr	(0x01, sp)
                                    313 ;	main.c: 98: rx_int_chars[1] = num / 10 % 10 + '0';
      0000B7 1E 0B            [ 2]  314 	ldw	x, (0x0b, sp)
      0000B9 5C               [ 1]  315 	incw	x
      0000BA 1F 03            [ 2]  316 	ldw	(0x03, sp), x
                                    317 ;	main.c: 99: rx_int_chars[2] = num % 10 + '0';
      0000BC 1E 0B            [ 2]  318 	ldw	x, (0x0b, sp)
      0000BE 5C               [ 1]  319 	incw	x
      0000BF 5C               [ 1]  320 	incw	x
      0000C0 1F 05            [ 2]  321 	ldw	(0x05, sp), x
                                    322 ;	main.c: 98: rx_int_chars[1] = num / 10 % 10 + '0';
      0000C2 4B 0A            [ 1]  323 	push	#0x0a
      0000C4 4B 00            [ 1]  324 	push	#0x00
      0000C6 1E 03            [ 2]  325 	ldw	x, (0x03, sp)
                                    326 ;	main.c: 99: rx_int_chars[2] = num % 10 + '0';
      0000C8 CDr00r00         [ 4]  327 	call	__divsint
      0000CB 1F 07            [ 2]  328 	ldw	(0x07, sp), x
      0000CD 4B 0A            [ 1]  329 	push	#0x0a
      0000CF 4B 00            [ 1]  330 	push	#0x00
      0000D1 1E 03            [ 2]  331 	ldw	x, (0x03, sp)
      0000D3 CDr00r00         [ 4]  332 	call	__modsint
      0000D6 9F               [ 1]  333 	ld	a, xl
      0000D7 AB 30            [ 1]  334 	add	a, #0x30
      0000D9 6B 09            [ 1]  335 	ld	(0x09, sp), a
                                    336 ;	main.c: 95: if (num > 99) {
      0000DB 7B 0D            [ 1]  337 	ld	a, (0x0d, sp)
      0000DD A1 63            [ 1]  338 	cp	a, #0x63
      0000DF 23 29            [ 2]  339 	jrule	00105$
                                    340 ;	main.c: 97: rx_int_chars[0] = num / 100 + '0';
      0000E1 4B 64            [ 1]  341 	push	#0x64
      0000E3 4B 00            [ 1]  342 	push	#0x00
      0000E5 1E 03            [ 2]  343 	ldw	x, (0x03, sp)
      0000E7 CDr00r00         [ 4]  344 	call	__divsint
      0000EA 9F               [ 1]  345 	ld	a, xl
      0000EB AB 30            [ 1]  346 	add	a, #0x30
      0000ED 1E 0B            [ 2]  347 	ldw	x, (0x0b, sp)
      0000EF F7               [ 1]  348 	ld	(x), a
                                    349 ;	main.c: 98: rx_int_chars[1] = num / 10 % 10 + '0';
      0000F0 4B 0A            [ 1]  350 	push	#0x0a
      0000F2 4B 00            [ 1]  351 	push	#0x00
      0000F4 1E 09            [ 2]  352 	ldw	x, (0x09, sp)
      0000F6 CDr00r00         [ 4]  353 	call	__modsint
      0000F9 9F               [ 1]  354 	ld	a, xl
      0000FA AB 30            [ 1]  355 	add	a, #0x30
      0000FC 1E 03            [ 2]  356 	ldw	x, (0x03, sp)
      0000FE F7               [ 1]  357 	ld	(x), a
                                    358 ;	main.c: 99: rx_int_chars[2] = num % 10 + '0';
      0000FF 1E 05            [ 2]  359 	ldw	x, (0x05, sp)
      000101 7B 09            [ 1]  360 	ld	a, (0x09, sp)
      000103 F7               [ 1]  361 	ld	(x), a
                                    362 ;	main.c: 100: rx_int_chars[3] ='\0';
      000104 1E 0B            [ 2]  363 	ldw	x, (0x0b, sp)
      000106 6F 03            [ 1]  364 	clr	(0x0003, x)
      000108 20 23            [ 2]  365 	jra	00107$
      00010A                        366 00105$:
                                    367 ;	main.c: 102: } else if (num > 9) {
      00010A 7B 0D            [ 1]  368 	ld	a, (0x0d, sp)
      00010C A1 09            [ 1]  369 	cp	a, #0x09
      00010E 23 13            [ 2]  370 	jrule	00102$
                                    371 ;	main.c: 104: rx_int_chars[0] = num / 10 + '0';
      000110 7B 08            [ 1]  372 	ld	a, (0x08, sp)
      000112 6B 0A            [ 1]  373 	ld	(0x0a, sp), a
      000114 AB 30            [ 1]  374 	add	a, #0x30
      000116 1E 0B            [ 2]  375 	ldw	x, (0x0b, sp)
      000118 F7               [ 1]  376 	ld	(x), a
                                    377 ;	main.c: 105: rx_int_chars[1] = num % 10 + '0';
      000119 1E 03            [ 2]  378 	ldw	x, (0x03, sp)
      00011B 7B 09            [ 1]  379 	ld	a, (0x09, sp)
      00011D F7               [ 1]  380 	ld	(x), a
                                    381 ;	main.c: 106: rx_int_chars[2] ='\0'; // Заканчиваем строку символом конца строки
      00011E 1E 05            [ 2]  382 	ldw	x, (0x05, sp)
      000120 7F               [ 1]  383 	clr	(x)
      000121 20 0A            [ 2]  384 	jra	00107$
      000123                        385 00102$:
                                    386 ;	main.c: 109: rx_int_chars[0] = num + '0';
      000123 7B 0D            [ 1]  387 	ld	a, (0x0d, sp)
      000125 AB 30            [ 1]  388 	add	a, #0x30
      000127 1E 0B            [ 2]  389 	ldw	x, (0x0b, sp)
      000129 F7               [ 1]  390 	ld	(x), a
                                    391 ;	main.c: 110: rx_int_chars[1] ='\0';
      00012A 1E 03            [ 2]  392 	ldw	x, (0x03, sp)
      00012C 7F               [ 1]  393 	clr	(x)
      00012D                        394 00107$:
                                    395 ;	main.c: 112: }
      00012D 5B 0D            [ 2]  396 	addw	sp, #13
      00012F 81               [ 4]  397 	ret
                                    398 ;	main.c: 114: uint8_t convert_chars_to_int(char* rx_chars_int, const int i) {
                                    399 ;	-----------------------------------------
                                    400 ;	 function convert_chars_to_int
                                    401 ;	-----------------------------------------
      000130                        402 _convert_chars_to_int:
      000130 52 03            [ 2]  403 	sub	sp, #3
      000132 1F 02            [ 2]  404 	ldw	(0x02, sp), x
                                    405 ;	main.c: 115: uint8_t result = 0;
      000134 4F               [ 1]  406 	clr	a
                                    407 ;	main.c: 117: for (int o = 0; o < i; o++) {
      000135 5F               [ 1]  408 	clrw	x
      000136                        409 00103$:
      000136 13 06            [ 2]  410 	cpw	x, (0x06, sp)
      000138 2E 18            [ 1]  411 	jrsge	00101$
                                    412 ;	main.c: 119: result = (result * 10) + (rx_chars_int[o] - '0');
      00013A 90 97            [ 1]  413 	ld	yl, a
      00013C A6 0A            [ 1]  414 	ld	a, #0x0a
      00013E 90 42            [ 4]  415 	mul	y, a
      000140 61               [ 1]  416 	exg	a, yl
      000141 6B 01            [ 1]  417 	ld	(0x01, sp), a
      000143 61               [ 1]  418 	exg	a, yl
      000144 90 93            [ 1]  419 	ldw	y, x
      000146 72 F9 02         [ 2]  420 	addw	y, (0x02, sp)
      000149 90 F6            [ 1]  421 	ld	a, (y)
      00014B A0 30            [ 1]  422 	sub	a, #0x30
      00014D 1B 01            [ 1]  423 	add	a, (0x01, sp)
                                    424 ;	main.c: 117: for (int o = 0; o < i; o++) {
      00014F 5C               [ 1]  425 	incw	x
      000150 20 E4            [ 2]  426 	jra	00103$
      000152                        427 00101$:
                                    428 ;	main.c: 122: return result;
                                    429 ;	main.c: 123: }
      000152 1E 04            [ 2]  430 	ldw	x, (4, sp)
      000154 5B 07            [ 2]  431 	addw	sp, #7
      000156 FC               [ 2]  432 	jp	(x)
                                    433 ;	main.c: 126: void convert_int_to_binary(int num, char* rx_binary_chars) {
                                    434 ;	-----------------------------------------
                                    435 ;	 function convert_int_to_binary
                                    436 ;	-----------------------------------------
      000157                        437 _convert_int_to_binary:
      000157 52 04            [ 2]  438 	sub	sp, #4
      000159 1F 01            [ 2]  439 	ldw	(0x01, sp), x
                                    440 ;	main.c: 128: for(int i = 7; i >= 0; i--) {
      00015B AE 00 07         [ 2]  441 	ldw	x, #0x0007
      00015E 1F 03            [ 2]  442 	ldw	(0x03, sp), x
      000160                        443 00103$:
      000160 0D 03            [ 1]  444 	tnz	(0x03, sp)
      000162 2B 22            [ 1]  445 	jrmi	00101$
                                    446 ;	main.c: 130: rx_binary_chars[7 - i] = ((num >> i) & 1) + '0';
      000164 AE 00 07         [ 2]  447 	ldw	x, #0x0007
      000167 72 F0 03         [ 2]  448 	subw	x, (0x03, sp)
      00016A 72 FB 07         [ 2]  449 	addw	x, (0x07, sp)
      00016D 16 01            [ 2]  450 	ldw	y, (0x01, sp)
      00016F 7B 04            [ 1]  451 	ld	a, (0x04, sp)
      000171 27 05            [ 1]  452 	jreq	00120$
      000173                        453 00119$:
      000173 90 57            [ 2]  454 	sraw	y
      000175 4A               [ 1]  455 	dec	a
      000176 26 FB            [ 1]  456 	jrne	00119$
      000178                        457 00120$:
      000178 90 9F            [ 1]  458 	ld	a, yl
      00017A A4 01            [ 1]  459 	and	a, #0x01
      00017C AB 30            [ 1]  460 	add	a, #0x30
      00017E F7               [ 1]  461 	ld	(x), a
                                    462 ;	main.c: 128: for(int i = 7; i >= 0; i--) {
      00017F 1E 03            [ 2]  463 	ldw	x, (0x03, sp)
      000181 5A               [ 2]  464 	decw	x
      000182 1F 03            [ 2]  465 	ldw	(0x03, sp), x
      000184 20 DA            [ 2]  466 	jra	00103$
      000186                        467 00101$:
                                    468 ;	main.c: 132: rx_binary_chars[8] = '\0'; // Добавляем символ конца строки
      000186 1E 07            [ 2]  469 	ldw	x, (0x07, sp)
      000188 6F 08            [ 1]  470 	clr	(0x0008, x)
                                    471 ;	main.c: 133: }
      00018A 1E 05            [ 2]  472 	ldw	x, (5, sp)
      00018C 5B 08            [ 2]  473 	addw	sp, #8
      00018E FC               [ 2]  474 	jp	(x)
                                    475 ;	main.c: 142: void get_addr_from_buff(void)
                                    476 ;	-----------------------------------------
                                    477 ;	 function get_addr_from_buff
                                    478 ;	-----------------------------------------
      00018F                        479 _get_addr_from_buff:
      00018F 52 02            [ 2]  480 	sub	sp, #2
                                    481 ;	main.c: 146: while(1)
      000191 A6 03            [ 1]  482 	ld	a, #0x03
      000193 6B 01            [ 1]  483 	ld	(0x01, sp), a
      000195 0F 02            [ 1]  484 	clr	(0x02, sp)
      000197                        485 00105$:
                                    486 ;	main.c: 148: if(buffer[i] == ' ' || buffer[i] == '\r\n')
      000197 5F               [ 1]  487 	clrw	x
      000198 7B 01            [ 1]  488 	ld	a, (0x01, sp)
      00019A 97               [ 1]  489 	ld	xl, a
      00019B D6u01u00         [ 1]  490 	ld	a, (_buffer+0, x)
      00019E A1 20            [ 1]  491 	cp	a, #0x20
      0001A0 27 04            [ 1]  492 	jreq	00101$
      0001A2 A1 0D            [ 1]  493 	cp	a, #0x0d
      0001A4 26 08            [ 1]  494 	jrne	00102$
      0001A6                        495 00101$:
                                    496 ;	main.c: 150: p_size = i+1;
      0001A6 7B 01            [ 1]  497 	ld	a, (0x01, sp)
      0001A8 4C               [ 1]  498 	inc	a
      0001A9 C7u02u04         [ 1]  499 	ld	_p_size+0, a
                                    500 ;	main.c: 151: break;
      0001AC 20 06            [ 2]  501 	jra	00106$
      0001AE                        502 00102$:
                                    503 ;	main.c: 153: i++;
      0001AE 0C 01            [ 1]  504 	inc	(0x01, sp)
                                    505 ;	main.c: 154: counter++;
      0001B0 0C 02            [ 1]  506 	inc	(0x02, sp)
      0001B2 20 E3            [ 2]  507 	jra	00105$
      0001B4                        508 00106$:
                                    509 ;	main.c: 156: memcpy(a, &buffer[3], counter);
      0001B4 5F               [ 1]  510 	clrw	x
      0001B5 7B 02            [ 1]  511 	ld	a, (0x02, sp)
      0001B7 97               [ 1]  512 	ld	xl, a
      0001B8 89               [ 2]  513 	pushw	x
      0001B9 4Br03            [ 1]  514 	push	#<(_buffer+3)
      0001BB 4Bs01            [ 1]  515 	push	#((_buffer+3) >> 8)
      0001BD AEr02r00         [ 2]  516 	ldw	x, #(_a+0)
      0001C0 CDr00r00         [ 4]  517 	call	___memcpy
                                    518 ;	main.c: 157: d_addr = convert_chars_to_int(a, counter);
      0001C3 5F               [ 1]  519 	clrw	x
      0001C4 7B 02            [ 1]  520 	ld	a, (0x02, sp)
      0001C6 97               [ 1]  521 	ld	xl, a
      0001C7 89               [ 2]  522 	pushw	x
      0001C8 AEr02r00         [ 2]  523 	ldw	x, #(_a+0)
      0001CB CDr01r30         [ 4]  524 	call	_convert_chars_to_int
      0001CE C7u02u03         [ 1]  525 	ld	_d_addr+0, a
                                    526 ;	main.c: 158: }
      0001D1 5B 02            [ 2]  527 	addw	sp, #2
      0001D3 81               [ 4]  528 	ret
                                    529 ;	main.c: 160: void get_size_from_buff(void)
                                    530 ;	-----------------------------------------
                                    531 ;	 function get_size_from_buff
                                    532 ;	-----------------------------------------
      0001D4                        533 _get_size_from_buff:
      0001D4 52 02            [ 2]  534 	sub	sp, #2
                                    535 ;	main.c: 162: memset(a, 0, sizeof(a));
      0001D6 4B 03            [ 1]  536 	push	#0x03
      0001D8 4B 00            [ 1]  537 	push	#0x00
      0001DA 5F               [ 1]  538 	clrw	x
      0001DB 89               [ 2]  539 	pushw	x
      0001DC AEr02r00         [ 2]  540 	ldw	x, #(_a+0)
      0001DF CDr00r00         [ 4]  541 	call	_memset
                                    542 ;	main.c: 164: uint8_t i = p_size;
      0001E2 C6u02u04         [ 1]  543 	ld	a, _p_size+0
      0001E5 6B 01            [ 1]  544 	ld	(0x01, sp), a
                                    545 ;	main.c: 165: while(1)
      0001E7 0F 02            [ 1]  546 	clr	(0x02, sp)
      0001E9                        547 00105$:
                                    548 ;	main.c: 167: if(buffer[i] == ' ' || buffer[i] == '\r\n')
      0001E9 5F               [ 1]  549 	clrw	x
      0001EA 7B 01            [ 1]  550 	ld	a, (0x01, sp)
      0001EC 97               [ 1]  551 	ld	xl, a
      0001ED D6u01u00         [ 1]  552 	ld	a, (_buffer+0, x)
      0001F0 A1 20            [ 1]  553 	cp	a, #0x20
      0001F2 27 04            [ 1]  554 	jreq	00101$
      0001F4 A1 0D            [ 1]  555 	cp	a, #0x0d
      0001F6 26 08            [ 1]  556 	jrne	00102$
      0001F8                        557 00101$:
                                    558 ;	main.c: 170: p_bytes = i+1;
      0001F8 7B 01            [ 1]  559 	ld	a, (0x01, sp)
      0001FA 4C               [ 1]  560 	inc	a
      0001FB C7u02u06         [ 1]  561 	ld	_p_bytes+0, a
                                    562 ;	main.c: 171: break;
      0001FE 20 06            [ 2]  563 	jra	00106$
      000200                        564 00102$:
                                    565 ;	main.c: 173: i++;
      000200 0C 01            [ 1]  566 	inc	(0x01, sp)
                                    567 ;	main.c: 174: counter++;
      000202 0C 02            [ 1]  568 	inc	(0x02, sp)
      000204 20 E3            [ 2]  569 	jra	00105$
      000206                        570 00106$:
                                    571 ;	main.c: 177: memcpy(a, &buffer[p_size], counter);
      000206 90 5F            [ 1]  572 	clrw	y
      000208 7B 02            [ 1]  573 	ld	a, (0x02, sp)
      00020A 90 97            [ 1]  574 	ld	yl, a
      00020C 5F               [ 1]  575 	clrw	x
      00020D C6u02u04         [ 1]  576 	ld	a, _p_size+0
      000210 97               [ 1]  577 	ld	xl, a
      000211 1Cr01r00         [ 2]  578 	addw	x, #(_buffer+0)
      000214 90 89            [ 2]  579 	pushw	y
      000216 89               [ 2]  580 	pushw	x
      000217 AEr02r00         [ 2]  581 	ldw	x, #(_a+0)
      00021A CDr00r00         [ 4]  582 	call	___memcpy
                                    583 ;	main.c: 178: d_size = convert_chars_to_int(a, counter);
      00021D 5F               [ 1]  584 	clrw	x
      00021E 7B 02            [ 1]  585 	ld	a, (0x02, sp)
      000220 97               [ 1]  586 	ld	xl, a
      000221 89               [ 2]  587 	pushw	x
      000222 AEr02r00         [ 2]  588 	ldw	x, #(_a+0)
      000225 CDr01r30         [ 4]  589 	call	_convert_chars_to_int
      000228 C7u02u05         [ 1]  590 	ld	_d_size+0, a
                                    591 ;	main.c: 179: }
      00022B 5B 02            [ 2]  592 	addw	sp, #2
      00022D 81               [ 4]  593 	ret
                                    594 ;	main.c: 180: void char_buffer_to_int(void)
                                    595 ;	-----------------------------------------
                                    596 ;	 function char_buffer_to_int
                                    597 ;	-----------------------------------------
      00022E                        598 _char_buffer_to_int:
      00022E 52 08            [ 2]  599 	sub	sp, #8
                                    600 ;	main.c: 182: memset(a, 0, sizeof(a));
      000230 4B 03            [ 1]  601 	push	#0x03
      000232 4B 00            [ 1]  602 	push	#0x00
      000234 5F               [ 1]  603 	clrw	x
      000235 89               [ 2]  604 	pushw	x
      000236 AEr02r00         [ 2]  605 	ldw	x, #(_a+0)
      000239 CDr00r00         [ 4]  606 	call	_memset
                                    607 ;	main.c: 183: uint8_t counter = d_size;
      00023C C6u02u05         [ 1]  608 	ld	a, _d_size+0
      00023F 6B 01            [ 1]  609 	ld	(0x01, sp), a
                                    610 ;	main.c: 184: uint8_t i = p_bytes;
      000241 C6u02u06         [ 1]  611 	ld	a, _p_bytes+0
      000244 6B 03            [ 1]  612 	ld	(0x03, sp), a
                                    613 ;	main.c: 187: for(int o = 0; o < counter;o++)
      000246 0F 04            [ 1]  614 	clr	(0x04, sp)
      000248 5F               [ 1]  615 	clrw	x
      000249 1F 05            [ 2]  616 	ldw	(0x05, sp), x
      00024B                        617 00112$:
      00024B 7B 01            [ 1]  618 	ld	a, (0x01, sp)
      00024D 6B 08            [ 1]  619 	ld	(0x08, sp), a
      00024F 0F 07            [ 1]  620 	clr	(0x07, sp)
      000251 1E 05            [ 2]  621 	ldw	x, (0x05, sp)
      000253 13 07            [ 2]  622 	cpw	x, (0x07, sp)
      000255 2E 65            [ 1]  623 	jrsge	00114$
                                    624 ;	main.c: 189: uint8_t number_counter = 0;
      000257 0F 02            [ 1]  625 	clr	(0x02, sp)
                                    626 ;	main.c: 190: while(1)
      000259 7B 03            [ 1]  627 	ld	a, (0x03, sp)
      00025B 6B 07            [ 1]  628 	ld	(0x07, sp), a
      00025D 0F 08            [ 1]  629 	clr	(0x08, sp)
      00025F                        630 00108$:
                                    631 ;	main.c: 192: if(buffer[i] == ' ')
      00025F 5F               [ 1]  632 	clrw	x
      000260 7B 07            [ 1]  633 	ld	a, (0x07, sp)
      000262 97               [ 1]  634 	ld	xl, a
      000263 D6u01u00         [ 1]  635 	ld	a, (_buffer+0, x)
      000266 A1 20            [ 1]  636 	cp	a, #0x20
      000268 26 04            [ 1]  637 	jrne	00105$
                                    638 ;	main.c: 194: i++;
      00026A 0C 03            [ 1]  639 	inc	(0x03, sp)
                                    640 ;	main.c: 195: break;
      00026C 20 12            [ 2]  641 	jra	00109$
      00026E                        642 00105$:
                                    643 ;	main.c: 197: else if(buffer[i] == '\r\n')
      00026E A1 0D            [ 1]  644 	cp	a, #0x0d
      000270 27 0E            [ 1]  645 	jreq	00109$
                                    646 ;	main.c: 200: i++;
      000272 0C 07            [ 1]  647 	inc	(0x07, sp)
      000274 7B 07            [ 1]  648 	ld	a, (0x07, sp)
      000276 6B 03            [ 1]  649 	ld	(0x03, sp), a
                                    650 ;	main.c: 202: number_counter++;
      000278 0C 08            [ 1]  651 	inc	(0x08, sp)
      00027A 7B 08            [ 1]  652 	ld	a, (0x08, sp)
      00027C 6B 02            [ 1]  653 	ld	(0x02, sp), a
      00027E 20 DF            [ 2]  654 	jra	00108$
      000280                        655 00109$:
                                    656 ;	main.c: 204: memcpy(a, &buffer[i - number_counter], number_counter);
      000280 90 5F            [ 1]  657 	clrw	y
      000282 7B 02            [ 1]  658 	ld	a, (0x02, sp)
      000284 90 97            [ 1]  659 	ld	yl, a
      000286 5F               [ 1]  660 	clrw	x
      000287 7B 03            [ 1]  661 	ld	a, (0x03, sp)
      000289 97               [ 1]  662 	ld	xl, a
      00028A 7B 02            [ 1]  663 	ld	a, (0x02, sp)
      00028C 6B 08            [ 1]  664 	ld	(0x08, sp), a
      00028E 0F 07            [ 1]  665 	clr	(0x07, sp)
      000290 72 F0 07         [ 2]  666 	subw	x, (0x07, sp)
      000293 1Cr01r00         [ 2]  667 	addw	x, #(_buffer+0)
      000296 90 89            [ 2]  668 	pushw	y
      000298 89               [ 2]  669 	pushw	x
      000299 AEr02r00         [ 2]  670 	ldw	x, #(_a+0)
      00029C CDr00r00         [ 4]  671 	call	___memcpy
                                    672 ;	main.c: 205: data_buf[int_buf_i] = convert_chars_to_int(a, number_counter);
      00029F 5F               [ 1]  673 	clrw	x
      0002A0 7B 04            [ 1]  674 	ld	a, (0x04, sp)
      0002A2 97               [ 1]  675 	ld	xl, a
      0002A3 1Cr02r07         [ 2]  676 	addw	x, #(_data_buf+0)
      0002A6 89               [ 2]  677 	pushw	x
      0002A7 16 09            [ 2]  678 	ldw	y, (0x09, sp)
      0002A9 90 89            [ 2]  679 	pushw	y
      0002AB AEr02r00         [ 2]  680 	ldw	x, #(_a+0)
      0002AE CDr01r30         [ 4]  681 	call	_convert_chars_to_int
      0002B1 85               [ 2]  682 	popw	x
      0002B2 F7               [ 1]  683 	ld	(x), a
                                    684 ;	main.c: 206: int_buf_i++;
      0002B3 0C 04            [ 1]  685 	inc	(0x04, sp)
                                    686 ;	main.c: 187: for(int o = 0; o < counter;o++)
      0002B5 1E 05            [ 2]  687 	ldw	x, (0x05, sp)
      0002B7 5C               [ 1]  688 	incw	x
      0002B8 1F 05            [ 2]  689 	ldw	(0x05, sp), x
      0002BA 20 8F            [ 2]  690 	jra	00112$
      0002BC                        691 00114$:
                                    692 ;	main.c: 208: }
      0002BC 5B 08            [ 2]  693 	addw	sp, #8
      0002BE 81               [ 4]  694 	ret
                                    695 ;	main.c: 216: void reg_check(void)
                                    696 ;	-----------------------------------------
                                    697 ;	 function reg_check
                                    698 ;	-----------------------------------------
      0002BF                        699 _reg_check:
      0002BF 52 09            [ 2]  700 	sub	sp, #9
                                    701 ;	main.c: 218: char rx_binary_chars[9]={0};
      0002C1 0F 01            [ 1]  702 	clr	(0x01, sp)
      0002C3 0F 02            [ 1]  703 	clr	(0x02, sp)
      0002C5 0F 03            [ 1]  704 	clr	(0x03, sp)
      0002C7 0F 04            [ 1]  705 	clr	(0x04, sp)
      0002C9 0F 05            [ 1]  706 	clr	(0x05, sp)
      0002CB 0F 06            [ 1]  707 	clr	(0x06, sp)
      0002CD 0F 07            [ 1]  708 	clr	(0x07, sp)
      0002CF 0F 08            [ 1]  709 	clr	(0x08, sp)
      0002D1 0F 09            [ 1]  710 	clr	(0x09, sp)
                                    711 ;	main.c: 219: convert_int_to_binary(I2C_SR1, rx_binary_chars);
      0002D3 96               [ 1]  712 	ldw	x, sp
      0002D4 5C               [ 1]  713 	incw	x
      0002D5 51               [ 1]  714 	exgw	x, y
      0002D6 C6 52 17         [ 1]  715 	ld	a, 0x5217
      0002D9 5F               [ 1]  716 	clrw	x
      0002DA 90 89            [ 2]  717 	pushw	y
      0002DC 97               [ 1]  718 	ld	xl, a
      0002DD CDr01r57         [ 4]  719 	call	_convert_int_to_binary
                                    720 ;	main.c: 220: status_registers[0] = I2C_SR1;
      0002E0 55 52 17u00u00   [ 1]  721 	mov	_status_registers+0, 0x5217
                                    722 ;	main.c: 221: convert_int_to_binary(I2C_SR2, rx_binary_chars);
      0002E5 96               [ 1]  723 	ldw	x, sp
      0002E6 5C               [ 1]  724 	incw	x
      0002E7 51               [ 1]  725 	exgw	x, y
      0002E8 C6 52 18         [ 1]  726 	ld	a, 0x5218
      0002EB 5F               [ 1]  727 	clrw	x
      0002EC 90 89            [ 2]  728 	pushw	y
      0002EE 97               [ 1]  729 	ld	xl, a
      0002EF CDr01r57         [ 4]  730 	call	_convert_int_to_binary
                                    731 ;	main.c: 222: status_registers[1] = I2C_SR2;
      0002F2 55 52 18u00u01   [ 1]  732 	mov	_status_registers+1, 0x5218
                                    733 ;	main.c: 223: convert_int_to_binary(I2C_SR3, rx_binary_chars);
      0002F7 96               [ 1]  734 	ldw	x, sp
      0002F8 5C               [ 1]  735 	incw	x
      0002F9 51               [ 1]  736 	exgw	x, y
      0002FA C6 52 19         [ 1]  737 	ld	a, 0x5219
      0002FD 5F               [ 1]  738 	clrw	x
      0002FE 90 89            [ 2]  739 	pushw	y
      000300 97               [ 1]  740 	ld	xl, a
      000301 CDr01r57         [ 4]  741 	call	_convert_int_to_binary
                                    742 ;	main.c: 224: status_registers[2] = I2C_SR3;
      000304 55 52 19u00u02   [ 1]  743 	mov	_status_registers+2, 0x5219
                                    744 ;	main.c: 225: convert_int_to_binary(I2C_CR1, rx_binary_chars);
      000309 96               [ 1]  745 	ldw	x, sp
      00030A 5C               [ 1]  746 	incw	x
      00030B 51               [ 1]  747 	exgw	x, y
      00030C C6 52 10         [ 1]  748 	ld	a, 0x5210
      00030F 5F               [ 1]  749 	clrw	x
      000310 90 89            [ 2]  750 	pushw	y
      000312 97               [ 1]  751 	ld	xl, a
      000313 CDr01r57         [ 4]  752 	call	_convert_int_to_binary
                                    753 ;	main.c: 226: status_registers[3] = I2C_CR1;
      000316 55 52 10u00u03   [ 1]  754 	mov	_status_registers+3, 0x5210
                                    755 ;	main.c: 227: convert_int_to_binary(I2C_CR2, rx_binary_chars);
      00031B 96               [ 1]  756 	ldw	x, sp
      00031C 5C               [ 1]  757 	incw	x
      00031D 51               [ 1]  758 	exgw	x, y
      00031E C6 52 11         [ 1]  759 	ld	a, 0x5211
      000321 5F               [ 1]  760 	clrw	x
      000322 90 89            [ 2]  761 	pushw	y
      000324 97               [ 1]  762 	ld	xl, a
      000325 CDr01r57         [ 4]  763 	call	_convert_int_to_binary
                                    764 ;	main.c: 228: status_registers[4] = I2C_CR2;
      000328 55 52 11u00u04   [ 1]  765 	mov	_status_registers+4, 0x5211
                                    766 ;	main.c: 229: convert_int_to_binary(I2C_DR, rx_binary_chars);
      00032D 96               [ 1]  767 	ldw	x, sp
      00032E 5C               [ 1]  768 	incw	x
      00032F 51               [ 1]  769 	exgw	x, y
      000330 C6 52 16         [ 1]  770 	ld	a, 0x5216
      000333 5F               [ 1]  771 	clrw	x
      000334 90 89            [ 2]  772 	pushw	y
      000336 97               [ 1]  773 	ld	xl, a
      000337 CDr01r57         [ 4]  774 	call	_convert_int_to_binary
                                    775 ;	main.c: 230: status_registers[5] = I2C_DR;
      00033A 55 52 16u00u05   [ 1]  776 	mov	_status_registers+5, 0x5216
                                    777 ;	main.c: 231: }
      00033F 5B 09            [ 2]  778 	addw	sp, #9
      000341 81               [ 4]  779 	ret
                                    780 ;	main.c: 234: void status_check(void){
                                    781 ;	-----------------------------------------
                                    782 ;	 function status_check
                                    783 ;	-----------------------------------------
      000342                        784 _status_check:
      000342 52 09            [ 2]  785 	sub	sp, #9
                                    786 ;	main.c: 235: char rx_binary_chars[9]={0};
      000344 0F 01            [ 1]  787 	clr	(0x01, sp)
      000346 0F 02            [ 1]  788 	clr	(0x02, sp)
      000348 0F 03            [ 1]  789 	clr	(0x03, sp)
      00034A 0F 04            [ 1]  790 	clr	(0x04, sp)
      00034C 0F 05            [ 1]  791 	clr	(0x05, sp)
      00034E 0F 06            [ 1]  792 	clr	(0x06, sp)
      000350 0F 07            [ 1]  793 	clr	(0x07, sp)
      000352 0F 08            [ 1]  794 	clr	(0x08, sp)
      000354 0F 09            [ 1]  795 	clr	(0x09, sp)
                                    796 ;	main.c: 236: uart_write("\nI2C_REGS >.<\n");
      000356 AEr00r00         [ 2]  797 	ldw	x, #(___str_0+0)
      000359 CDr00r37         [ 4]  798 	call	_uart_write
                                    799 ;	main.c: 237: convert_int_to_binary(I2C_SR1, rx_binary_chars);
      00035C 96               [ 1]  800 	ldw	x, sp
      00035D 5C               [ 1]  801 	incw	x
      00035E 51               [ 1]  802 	exgw	x, y
      00035F C6 52 17         [ 1]  803 	ld	a, 0x5217
      000362 5F               [ 1]  804 	clrw	x
      000363 90 89            [ 2]  805 	pushw	y
      000365 97               [ 1]  806 	ld	xl, a
      000366 CDr01r57         [ 4]  807 	call	_convert_int_to_binary
                                    808 ;	main.c: 238: uart_write("\nSR1 -> ");
      000369 AEr00r0F         [ 2]  809 	ldw	x, #(___str_1+0)
      00036C CDr00r37         [ 4]  810 	call	_uart_write
                                    811 ;	main.c: 239: uart_write(rx_binary_chars);
      00036F 96               [ 1]  812 	ldw	x, sp
      000370 5C               [ 1]  813 	incw	x
      000371 CDr00r37         [ 4]  814 	call	_uart_write
                                    815 ;	main.c: 240: uart_write(" <-\n");
      000374 AEr00r18         [ 2]  816 	ldw	x, #(___str_2+0)
      000377 CDr00r37         [ 4]  817 	call	_uart_write
                                    818 ;	main.c: 241: convert_int_to_binary(I2C_SR2, rx_binary_chars);
      00037A 96               [ 1]  819 	ldw	x, sp
      00037B 5C               [ 1]  820 	incw	x
      00037C 51               [ 1]  821 	exgw	x, y
      00037D C6 52 18         [ 1]  822 	ld	a, 0x5218
      000380 5F               [ 1]  823 	clrw	x
      000381 90 89            [ 2]  824 	pushw	y
      000383 97               [ 1]  825 	ld	xl, a
      000384 CDr01r57         [ 4]  826 	call	_convert_int_to_binary
                                    827 ;	main.c: 242: uart_write("SR2 -> ");
      000387 AEr00r1D         [ 2]  828 	ldw	x, #(___str_3+0)
      00038A CDr00r37         [ 4]  829 	call	_uart_write
                                    830 ;	main.c: 243: uart_write(rx_binary_chars);
      00038D 96               [ 1]  831 	ldw	x, sp
      00038E 5C               [ 1]  832 	incw	x
      00038F CDr00r37         [ 4]  833 	call	_uart_write
                                    834 ;	main.c: 244: uart_write(" <-\n");
      000392 AEr00r18         [ 2]  835 	ldw	x, #(___str_2+0)
      000395 CDr00r37         [ 4]  836 	call	_uart_write
                                    837 ;	main.c: 245: convert_int_to_binary(I2C_SR3, rx_binary_chars);
      000398 96               [ 1]  838 	ldw	x, sp
      000399 5C               [ 1]  839 	incw	x
      00039A 51               [ 1]  840 	exgw	x, y
      00039B C6 52 19         [ 1]  841 	ld	a, 0x5219
      00039E 5F               [ 1]  842 	clrw	x
      00039F 90 89            [ 2]  843 	pushw	y
      0003A1 97               [ 1]  844 	ld	xl, a
      0003A2 CDr01r57         [ 4]  845 	call	_convert_int_to_binary
                                    846 ;	main.c: 246: uart_write("SR3 -> ");
      0003A5 AEr00r25         [ 2]  847 	ldw	x, #(___str_4+0)
      0003A8 CDr00r37         [ 4]  848 	call	_uart_write
                                    849 ;	main.c: 247: uart_write(rx_binary_chars);
      0003AB 96               [ 1]  850 	ldw	x, sp
      0003AC 5C               [ 1]  851 	incw	x
      0003AD CDr00r37         [ 4]  852 	call	_uart_write
                                    853 ;	main.c: 248: uart_write(" <-\n");
      0003B0 AEr00r18         [ 2]  854 	ldw	x, #(___str_2+0)
      0003B3 CDr00r37         [ 4]  855 	call	_uart_write
                                    856 ;	main.c: 249: convert_int_to_binary(I2C_CR1, rx_binary_chars);
      0003B6 96               [ 1]  857 	ldw	x, sp
      0003B7 5C               [ 1]  858 	incw	x
      0003B8 51               [ 1]  859 	exgw	x, y
      0003B9 C6 52 10         [ 1]  860 	ld	a, 0x5210
      0003BC 5F               [ 1]  861 	clrw	x
      0003BD 90 89            [ 2]  862 	pushw	y
      0003BF 97               [ 1]  863 	ld	xl, a
      0003C0 CDr01r57         [ 4]  864 	call	_convert_int_to_binary
                                    865 ;	main.c: 250: uart_write("CR1 -> ");
      0003C3 AEr00r2D         [ 2]  866 	ldw	x, #(___str_5+0)
      0003C6 CDr00r37         [ 4]  867 	call	_uart_write
                                    868 ;	main.c: 251: uart_write(rx_binary_chars);
      0003C9 96               [ 1]  869 	ldw	x, sp
      0003CA 5C               [ 1]  870 	incw	x
      0003CB CDr00r37         [ 4]  871 	call	_uart_write
                                    872 ;	main.c: 252: uart_write(" <-\n");
      0003CE AEr00r18         [ 2]  873 	ldw	x, #(___str_2+0)
      0003D1 CDr00r37         [ 4]  874 	call	_uart_write
                                    875 ;	main.c: 253: convert_int_to_binary(I2C_CR2, rx_binary_chars);
      0003D4 96               [ 1]  876 	ldw	x, sp
      0003D5 5C               [ 1]  877 	incw	x
      0003D6 51               [ 1]  878 	exgw	x, y
      0003D7 C6 52 11         [ 1]  879 	ld	a, 0x5211
      0003DA 5F               [ 1]  880 	clrw	x
      0003DB 90 89            [ 2]  881 	pushw	y
      0003DD 97               [ 1]  882 	ld	xl, a
      0003DE CDr01r57         [ 4]  883 	call	_convert_int_to_binary
                                    884 ;	main.c: 254: uart_write("CR2 -> ");
      0003E1 AEr00r35         [ 2]  885 	ldw	x, #(___str_6+0)
      0003E4 CDr00r37         [ 4]  886 	call	_uart_write
                                    887 ;	main.c: 255: uart_write(rx_binary_chars);
      0003E7 96               [ 1]  888 	ldw	x, sp
      0003E8 5C               [ 1]  889 	incw	x
      0003E9 CDr00r37         [ 4]  890 	call	_uart_write
                                    891 ;	main.c: 256: uart_write(" <-\n");
      0003EC AEr00r18         [ 2]  892 	ldw	x, #(___str_2+0)
      0003EF CDr00r37         [ 4]  893 	call	_uart_write
                                    894 ;	main.c: 257: convert_int_to_binary(I2C_DR, rx_binary_chars);
      0003F2 96               [ 1]  895 	ldw	x, sp
      0003F3 5C               [ 1]  896 	incw	x
      0003F4 51               [ 1]  897 	exgw	x, y
      0003F5 C6 52 16         [ 1]  898 	ld	a, 0x5216
      0003F8 5F               [ 1]  899 	clrw	x
      0003F9 90 89            [ 2]  900 	pushw	y
      0003FB 97               [ 1]  901 	ld	xl, a
      0003FC CDr01r57         [ 4]  902 	call	_convert_int_to_binary
                                    903 ;	main.c: 258: uart_write("DR -> ");
      0003FF AEr00r3D         [ 2]  904 	ldw	x, #(___str_7+0)
      000402 CDr00r37         [ 4]  905 	call	_uart_write
                                    906 ;	main.c: 259: uart_write(rx_binary_chars);
      000405 96               [ 1]  907 	ldw	x, sp
      000406 5C               [ 1]  908 	incw	x
      000407 CDr00r37         [ 4]  909 	call	_uart_write
                                    910 ;	main.c: 260: uart_write(" <-\n");
      00040A AEr00r18         [ 2]  911 	ldw	x, #(___str_2+0)
      00040D CDr00r37         [ 4]  912 	call	_uart_write
                                    913 ;	main.c: 306: }
      000410 5B 09            [ 2]  914 	addw	sp, #9
      000412 81               [ 4]  915 	ret
                                    916 ;	main.c: 308: void uart_init(void){
                                    917 ;	-----------------------------------------
                                    918 ;	 function uart_init
                                    919 ;	-----------------------------------------
      000413                        920 _uart_init:
                                    921 ;	main.c: 309: CLK_CKDIVR = 0;
      000413 35 00 50 C6      [ 1]  922 	mov	0x50c6+0, #0x00
                                    923 ;	main.c: 312: UART1_CR2 |= UART_CR2_TEN; // Transmitter enable
      000417 72 16 52 35      [ 1]  924 	bset	0x5235, #3
                                    925 ;	main.c: 313: UART1_CR2 |= UART_CR2_REN; // Receiver enable
      00041B 72 14 52 35      [ 1]  926 	bset	0x5235, #2
                                    927 ;	main.c: 314: UART1_CR3 &= ~(UART_CR3_STOP1 | UART_CR3_STOP2); // 1 stop bit
      00041F C6 52 36         [ 1]  928 	ld	a, 0x5236
      000422 A4 CF            [ 1]  929 	and	a, #0xcf
      000424 C7 52 36         [ 1]  930 	ld	0x5236, a
                                    931 ;	main.c: 316: UART1_BRR2 = 0x03; UART1_BRR1 = 0x68; // 0x0683 coded funky way (see ref manual)
      000427 35 03 52 33      [ 1]  932 	mov	0x5233+0, #0x03
      00042B 35 68 52 32      [ 1]  933 	mov	0x5232+0, #0x68
                                    934 ;	main.c: 317: }
      00042F 81               [ 4]  935 	ret
                                    936 ;	main.c: 321: void i2c_init(void) {
                                    937 ;	-----------------------------------------
                                    938 ;	 function i2c_init
                                    939 ;	-----------------------------------------
      000430                        940 _i2c_init:
                                    941 ;	main.c: 327: I2C_CR1 = I2C_CR1 & ~0x01;      // PE=0, disable I2C before setup
      000430 72 11 52 10      [ 1]  942 	bres	0x5210, #0
                                    943 ;	main.c: 328: I2C_FREQR= 16;                  // peripheral frequence =16MHz
      000434 35 10 52 12      [ 1]  944 	mov	0x5212+0, #0x10
                                    945 ;	main.c: 329: I2C_CCRH = 0;                   // =0
      000438 35 00 52 1C      [ 1]  946 	mov	0x521c+0, #0x00
                                    947 ;	main.c: 330: I2C_CCRL = 80;                  // 100kHz for I2C
      00043C 35 50 52 1B      [ 1]  948 	mov	0x521b+0, #0x50
                                    949 ;	main.c: 331: I2C_CCRH = I2C_CCRH & ~0x80;    // set standart mode(100кHz)
      000440 72 1F 52 1C      [ 1]  950 	bres	0x521c, #7
                                    951 ;	main.c: 332: I2C_OARH = I2C_OARH & ~0x80;    // 7-bit address mode
      000444 72 1F 52 14      [ 1]  952 	bres	0x5214, #7
                                    953 ;	main.c: 333: I2C_OARH = I2C_OARH | 0x40;     // see reference manual
      000448 72 1C 52 14      [ 1]  954 	bset	0x5214, #6
                                    955 ;	main.c: 334: I2C_CR1 = I2C_CR1 | 0x01;       // PE=1, enable I2C
      00044C 72 10 52 10      [ 1]  956 	bset	0x5210, #0
                                    957 ;	main.c: 335: }
      000450 81               [ 4]  958 	ret
                                    959 ;	main.c: 344: void i2c_start(void) {
                                    960 ;	-----------------------------------------
                                    961 ;	 function i2c_start
                                    962 ;	-----------------------------------------
      000451                        963 _i2c_start:
                                    964 ;	main.c: 345: I2C_CR2 = I2C_CR2 | (1 << 0); // Отправляем стартовый сигнал
      000451 72 10 52 11      [ 1]  965 	bset	0x5211, #0
                                    966 ;	main.c: 346: while(!(I2C_SR1 & (1 << 0)));
      000455                        967 00101$:
      000455 72 01 52 17 FB   [ 2]  968 	btjf	0x5217, #0, 00101$
                                    969 ;	main.c: 348: }
      00045A 81               [ 4]  970 	ret
                                    971 ;	main.c: 350: void i2c_send_address(uint8_t address) {
                                    972 ;	-----------------------------------------
                                    973 ;	 function i2c_send_address
                                    974 ;	-----------------------------------------
      00045B                        975 _i2c_send_address:
                                    976 ;	main.c: 351: I2C_DR = address << 1; // Отправка адреса устройства с битом на запись
      00045B 48               [ 1]  977 	sll	a
      00045C C7 52 16         [ 1]  978 	ld	0x5216, a
                                    979 ;	main.c: 352: reg_check();
      00045F CDr02rBF         [ 4]  980 	call	_reg_check
                                    981 ;	main.c: 353: while (!(I2C_SR1 & (1 << 1)) && !(I2C_SR2 & (1 << 2)));
      000462                        982 00102$:
      000462 72 03 52 17 01   [ 2]  983 	btjf	0x5217, #1, 00117$
      000467 81               [ 4]  984 	ret
      000468                        985 00117$:
      000468 72 05 52 18 F5   [ 2]  986 	btjf	0x5218, #2, 00102$
                                    987 ;	main.c: 355: }
      00046D 81               [ 4]  988 	ret
                                    989 ;	main.c: 357: void i2c_stop(void) {
                                    990 ;	-----------------------------------------
                                    991 ;	 function i2c_stop
                                    992 ;	-----------------------------------------
      00046E                        993 _i2c_stop:
                                    994 ;	main.c: 358: I2C_CR2 = I2C_CR2 | (1 << 1);// Отправка стопового сигнала
      00046E 72 12 52 11      [ 1]  995 	bset	0x5211, #1
                                    996 ;	main.c: 360: }
      000472 81               [ 4]  997 	ret
                                    998 ;	main.c: 361: void i2c_write(void){
                                    999 ;	-----------------------------------------
                                   1000 ;	 function i2c_write
                                   1001 ;	-----------------------------------------
      000473                       1002 _i2c_write:
      000473 52 02            [ 2] 1003 	sub	sp, #2
                                   1004 ;	main.c: 362: I2C_DR = 0;
      000475 35 00 52 16      [ 1] 1005 	mov	0x5216+0, #0x00
                                   1006 ;	main.c: 363: reg_check();
      000479 CDr02rBF         [ 4] 1007 	call	_reg_check
                                   1008 ;	main.c: 364: I2C_DR = d_addr;
      00047C 55u02u03 52 16   [ 1] 1009 	mov	0x5216+0, _d_addr+0
                                   1010 ;	main.c: 365: reg_check();
      000481 CDr02rBF         [ 4] 1011 	call	_reg_check
                                   1012 ;	main.c: 366: while (!(I2C_SR1 & (1 << 7)) && (I2C_SR2 & (1 << 2)) && !(I2C_SR1 & (1 << 2))); // Отправка адреса регистра
      000484                       1013 00103$:
      000484 C6 52 17         [ 1] 1014 	ld	a, 0x5217
      000487 2B 0A            [ 1] 1015 	jrmi	00124$
      000489 72 05 52 18 05   [ 2] 1016 	btjf	0x5218, #2, 00124$
      00048E 72 05 52 17 F1   [ 2] 1017 	btjf	0x5217, #2, 00103$
                                   1018 ;	main.c: 367: for(int i = 0;i < d_size;i++)
      000493                       1019 00124$:
      000493 5F               [ 1] 1020 	clrw	x
      000494                       1021 00113$:
      000494 C6u02u05         [ 1] 1022 	ld	a, _d_size+0
      000497 6B 02            [ 1] 1023 	ld	(0x02, sp), a
      000499 0F 01            [ 1] 1024 	clr	(0x01, sp)
      00049B 13 01            [ 2] 1025 	cpw	x, (0x01, sp)
      00049D 2E 25            [ 1] 1026 	jrsge	00115$
                                   1027 ;	main.c: 369: I2C_DR = data_buf[i];
      00049F 90 93            [ 1] 1028 	ldw	y, x
      0004A1 90 D6u02u07      [ 1] 1029 	ld	a, (_data_buf+0, y)
      0004A5 C7 52 16         [ 1] 1030 	ld	0x5216, a
                                   1031 ;	main.c: 370: reg_check();
      0004A8 89               [ 2] 1032 	pushw	x
      0004A9 CDr02rBF         [ 4] 1033 	call	_reg_check
      0004AC 85               [ 2] 1034 	popw	x
                                   1035 ;	main.c: 371: while (!(I2C_SR1 & (1 << 7)) && (I2C_SR2 & (1 << 2)) && !(I2C_SR1 & (1 << 2)));
      0004AD                       1036 00108$:
      0004AD C6 52 17         [ 1] 1037 	ld	a, 0x5217
      0004B0 2B 0A            [ 1] 1038 	jrmi	00110$
      0004B2 72 05 52 18 05   [ 2] 1039 	btjf	0x5218, #2, 00110$
      0004B7 72 05 52 17 F1   [ 2] 1040 	btjf	0x5217, #2, 00108$
      0004BC                       1041 00110$:
                                   1042 ;	main.c: 372: reg_check();
      0004BC 89               [ 2] 1043 	pushw	x
      0004BD CDr02rBF         [ 4] 1044 	call	_reg_check
      0004C0 85               [ 2] 1045 	popw	x
                                   1046 ;	main.c: 367: for(int i = 0;i < d_size;i++)
      0004C1 5C               [ 1] 1047 	incw	x
      0004C2 20 D0            [ 2] 1048 	jra	00113$
      0004C4                       1049 00115$:
                                   1050 ;	main.c: 374: }
      0004C4 5B 02            [ 2] 1051 	addw	sp, #2
      0004C6 81               [ 4] 1052 	ret
                                   1053 ;	main.c: 376: void i2c_read(void){
                                   1054 ;	-----------------------------------------
                                   1055 ;	 function i2c_read
                                   1056 ;	-----------------------------------------
      0004C7                       1057 _i2c_read:
      0004C7 52 02            [ 2] 1058 	sub	sp, #2
                                   1059 ;	main.c: 377: I2C_CR2 = I2C_CR2 | (1 << 2);
      0004C9 72 14 52 11      [ 1] 1060 	bset	0x5211, #2
                                   1061 ;	main.c: 378: I2C_DR = 0;
      0004CD 35 00 52 16      [ 1] 1062 	mov	0x5216+0, #0x00
                                   1063 ;	main.c: 379: reg_check();
      0004D1 CDr02rBF         [ 4] 1064 	call	_reg_check
                                   1065 ;	main.c: 380: I2C_DR = d_addr;
      0004D4 55u02u03 52 16   [ 1] 1066 	mov	0x5216+0, _d_addr+0
                                   1067 ;	main.c: 381: reg_check();
      0004D9 CDr02rBF         [ 4] 1068 	call	_reg_check
                                   1069 ;	main.c: 382: while (!(I2C_SR1 & (1 << 7)) && (I2C_SR2 & (1 << 2)) && !(I2C_SR1 & (1 << 2))); // Отправка адреса регистра
      0004DC                       1070 00103$:
      0004DC C6 52 17         [ 1] 1071 	ld	a, 0x5217
      0004DF 2B 0A            [ 1] 1072 	jrmi	00105$
      0004E1 72 05 52 18 05   [ 2] 1073 	btjf	0x5218, #2, 00105$
      0004E6 72 05 52 17 F1   [ 2] 1074 	btjf	0x5217, #2, 00103$
      0004EB                       1075 00105$:
                                   1076 ;	main.c: 385: i2c_start();
      0004EB CDr04r51         [ 4] 1077 	call	_i2c_start
                                   1078 ;	main.c: 386: I2C_DR = (current_dev << 1) | (1 << 0);
      0004EE C6u03u07         [ 1] 1079 	ld	a, _current_dev+0
      0004F1 48               [ 1] 1080 	sll	a
      0004F2 AA 01            [ 1] 1081 	or	a, #0x01
      0004F4 C7 52 16         [ 1] 1082 	ld	0x5216, a
                                   1083 ;	main.c: 387: reg_check();
      0004F7 CDr02rBF         [ 4] 1084 	call	_reg_check
                                   1085 ;	main.c: 388: while (!(I2C_SR1 & (1 << 1)) && !(I2C_SR1 & (1 << 2)) && !(I2C_SR1 & (1 << 6)));
      0004FA                       1086 00108$:
      0004FA 72 02 52 17 0A   [ 2] 1087 	btjt	0x5217, #1, 00110$
      0004FF 72 04 52 17 05   [ 2] 1088 	btjt	0x5217, #2, 00110$
      000504 72 0D 52 17 F1   [ 2] 1089 	btjf	0x5217, #6, 00108$
      000509                       1090 00110$:
                                   1091 ;	main.c: 389: reg_check();
      000509 CDr02rBF         [ 4] 1092 	call	_reg_check
                                   1093 ;	main.c: 390: for(int i = 0;i < d_size;i++)
      00050C 5F               [ 1] 1094 	clrw	x
      00050D                       1095 00116$:
      00050D C6u02u05         [ 1] 1096 	ld	a, _d_size+0
      000510 6B 02            [ 1] 1097 	ld	(0x02, sp), a
      000512 0F 01            [ 1] 1098 	clr	(0x01, sp)
      000514 13 01            [ 2] 1099 	cpw	x, (0x01, sp)
      000516 2E 13            [ 1] 1100 	jrsge	00114$
                                   1101 ;	main.c: 392: data_buf[i] = I2C_DR;
      000518 90 93            [ 1] 1102 	ldw	y, x
      00051A 72 A9r02r07      [ 2] 1103 	addw	y, #(_data_buf+0)
      00051E C6 52 16         [ 1] 1104 	ld	a, 0x5216
      000521 90 F7            [ 1] 1105 	ld	(y), a
                                   1106 ;	main.c: 393: while (!(I2C_SR1 & (1 << 6)));
      000523                       1107 00111$:
      000523 72 0D 52 17 FB   [ 2] 1108 	btjf	0x5217, #6, 00111$
                                   1109 ;	main.c: 390: for(int i = 0;i < d_size;i++)
      000528 5C               [ 1] 1110 	incw	x
      000529 20 E2            [ 2] 1111 	jra	00116$
      00052B                       1112 00114$:
                                   1113 ;	main.c: 395: reg_check();
      00052B CDr02rBF         [ 4] 1114 	call	_reg_check
                                   1115 ;	main.c: 396: I2C_CR2 = I2C_CR2 & ~(1 << 2);
      00052E C6 52 11         [ 1] 1116 	ld	a, 0x5211
      000531 A4 FB            [ 1] 1117 	and	a, #0xfb
      000533 C7 52 11         [ 1] 1118 	ld	0x5211, a
                                   1119 ;	main.c: 397: reg_check();
      000536 5B 02            [ 2] 1120 	addw	sp, #2
                                   1121 ;	main.c: 398: }
      000538 CCr02rBF         [ 2] 1122 	jp	_reg_check
                                   1123 ;	main.c: 399: void i2c_scan(void) {
                                   1124 ;	-----------------------------------------
                                   1125 ;	 function i2c_scan
                                   1126 ;	-----------------------------------------
      00053B                       1127 _i2c_scan:
      00053B 52 02            [ 2] 1128 	sub	sp, #2
                                   1129 ;	main.c: 400: for (uint8_t addr = current_dev; addr < 127; addr++) {
      00053D C6u03u07         [ 1] 1130 	ld	a, _current_dev+0
      000540 6B 01            [ 1] 1131 	ld	(0x01, sp), a
      000542 6B 02            [ 1] 1132 	ld	(0x02, sp), a
      000544                       1133 00105$:
      000544 7B 02            [ 1] 1134 	ld	a, (0x02, sp)
      000546 A1 7F            [ 1] 1135 	cp	a, #0x7f
      000548 24 26            [ 1] 1136 	jrnc	00107$
                                   1137 ;	main.c: 401: i2c_start();
      00054A CDr04r51         [ 4] 1138 	call	_i2c_start
                                   1139 ;	main.c: 402: i2c_send_address(addr);
      00054D 7B 02            [ 1] 1140 	ld	a, (0x02, sp)
      00054F CDr04r5B         [ 4] 1141 	call	_i2c_send_address
                                   1142 ;	main.c: 403: if (!(I2C_SR2 & (1 << 2))) { // Проверка на ACK
      000552 72 04 52 18 0A   [ 2] 1143 	btjt	0x5218, #2, 00102$
                                   1144 ;	main.c: 405: current_dev = addr;
      000557 7B 01            [ 1] 1145 	ld	a, (0x01, sp)
      000559 C7u03u07         [ 1] 1146 	ld	_current_dev+0, a
                                   1147 ;	main.c: 406: i2c_stop();
      00055C 5B 02            [ 2] 1148 	addw	sp, #2
                                   1149 ;	main.c: 407: break;
      00055E CCr04r6E         [ 2] 1150 	jp	_i2c_stop
      000561                       1151 00102$:
                                   1152 ;	main.c: 409: i2c_stop();
      000561 CDr04r6E         [ 4] 1153 	call	_i2c_stop
                                   1154 ;	main.c: 410: I2C_SR2 = I2C_SR2 & ~(1 << 2); // Очистка флага ошибки
      000564 72 15 52 18      [ 1] 1155 	bres	0x5218, #2
                                   1156 ;	main.c: 400: for (uint8_t addr = current_dev; addr < 127; addr++) {
      000568 0C 02            [ 1] 1157 	inc	(0x02, sp)
      00056A 7B 02            [ 1] 1158 	ld	a, (0x02, sp)
      00056C 6B 01            [ 1] 1159 	ld	(0x01, sp), a
      00056E 20 D4            [ 2] 1160 	jra	00105$
      000570                       1161 00107$:
                                   1162 ;	main.c: 412: }
      000570 5B 02            [ 2] 1163 	addw	sp, #2
      000572 81               [ 4] 1164 	ret
                                   1165 ;	main.c: 422: void cm_SM(void)
                                   1166 ;	-----------------------------------------
                                   1167 ;	 function cm_SM
                                   1168 ;	-----------------------------------------
      000573                       1169 _cm_SM:
      000573 52 04            [ 2] 1170 	sub	sp, #4
                                   1171 ;	main.c: 424: char cur_dev[4]={0};
      000575 0F 01            [ 1] 1172 	clr	(0x01, sp)
      000577 0F 02            [ 1] 1173 	clr	(0x02, sp)
      000579 0F 03            [ 1] 1174 	clr	(0x03, sp)
      00057B 0F 04            [ 1] 1175 	clr	(0x04, sp)
                                   1176 ;	main.c: 425: convert_int_to_chars(current_dev, cur_dev);
      00057D 96               [ 1] 1177 	ldw	x, sp
      00057E 5C               [ 1] 1178 	incw	x
      00057F C6u03u07         [ 1] 1179 	ld	a, _current_dev+0
      000582 CDr00rAB         [ 4] 1180 	call	_convert_int_to_chars
                                   1181 ;	main.c: 426: uart_write("SM ");
      000585 AEr00r44         [ 2] 1182 	ldw	x, #(___str_8+0)
      000588 CDr00r37         [ 4] 1183 	call	_uart_write
                                   1184 ;	main.c: 427: uart_write(cur_dev);
      00058B 96               [ 1] 1185 	ldw	x, sp
      00058C 5C               [ 1] 1186 	incw	x
      00058D CDr00r37         [ 4] 1187 	call	_uart_write
                                   1188 ;	main.c: 428: uart_write("\r\n");
      000590 AEr00r48         [ 2] 1189 	ldw	x, #(___str_9+0)
      000593 CDr00r37         [ 4] 1190 	call	_uart_write
                                   1191 ;	main.c: 429: }
      000596 5B 04            [ 2] 1192 	addw	sp, #4
      000598 81               [ 4] 1193 	ret
                                   1194 ;	main.c: 430: void cm_SN(void)
                                   1195 ;	-----------------------------------------
                                   1196 ;	 function cm_SN
                                   1197 ;	-----------------------------------------
      000599                       1198 _cm_SN:
                                   1199 ;	main.c: 432: i2c_scan();
      000599 CDr05r3B         [ 4] 1200 	call	_i2c_scan
                                   1201 ;	main.c: 433: cm_SM();
                                   1202 ;	main.c: 434: }
      00059C CCr05r73         [ 2] 1203 	jp	_cm_SM
                                   1204 ;	main.c: 435: void cm_RM(void)
                                   1205 ;	-----------------------------------------
                                   1206 ;	 function cm_RM
                                   1207 ;	-----------------------------------------
      00059F                       1208 _cm_RM:
                                   1209 ;	main.c: 437: current_dev = 0;
      00059F 72 5Fu03u07      [ 1] 1210 	clr	_current_dev+0
                                   1211 ;	main.c: 438: uart_write("RM\n");
      0005A3 AEr00r4B         [ 2] 1212 	ldw	x, #(___str_10+0)
                                   1213 ;	main.c: 439: }
      0005A6 CCr00r37         [ 2] 1214 	jp	_uart_write
                                   1215 ;	main.c: 441: void cm_DB(void)
                                   1216 ;	-----------------------------------------
                                   1217 ;	 function cm_DB
                                   1218 ;	-----------------------------------------
      0005A9                       1219 _cm_DB:
                                   1220 ;	main.c: 443: status_check();
                                   1221 ;	main.c: 444: }
      0005A9 CCr03r42         [ 2] 1222 	jp	_status_check
                                   1223 ;	main.c: 446: void cm_ST(void)
                                   1224 ;	-----------------------------------------
                                   1225 ;	 function cm_ST
                                   1226 ;	-----------------------------------------
      0005AC                       1227 _cm_ST:
                                   1228 ;	main.c: 448: get_addr_from_buff();
      0005AC CDr01r8F         [ 4] 1229 	call	_get_addr_from_buff
                                   1230 ;	main.c: 449: current_dev = d_addr;
      0005AF 55u02u03u03u07   [ 1] 1231 	mov	_current_dev+0, _d_addr+0
                                   1232 ;	main.c: 450: uart_write("ST\n");
      0005B4 AEr00r4F         [ 2] 1233 	ldw	x, #(___str_11+0)
                                   1234 ;	main.c: 451: }
      0005B7 CCr00r37         [ 2] 1235 	jp	_uart_write
                                   1236 ;	main.c: 452: void cm_SR(void)
                                   1237 ;	-----------------------------------------
                                   1238 ;	 function cm_SR
                                   1239 ;	-----------------------------------------
      0005BA                       1240 _cm_SR:
      0005BA 52 04            [ 2] 1241 	sub	sp, #4
                                   1242 ;	main.c: 454: i2c_start();
      0005BC CDr04r51         [ 4] 1243 	call	_i2c_start
                                   1244 ;	main.c: 455: i2c_send_address(current_dev);
      0005BF C6u03u07         [ 1] 1245 	ld	a, _current_dev+0
      0005C2 CDr04r5B         [ 4] 1246 	call	_i2c_send_address
                                   1247 ;	main.c: 456: i2c_read();
      0005C5 CDr04rC7         [ 4] 1248 	call	_i2c_read
                                   1249 ;	main.c: 457: i2c_stop();
      0005C8 CDr04r6E         [ 4] 1250 	call	_i2c_stop
                                   1251 ;	main.c: 458: uart_write("SR ");
      0005CB AEr00r53         [ 2] 1252 	ldw	x, #(___str_12+0)
      0005CE CDr00r37         [ 4] 1253 	call	_uart_write
                                   1254 ;	main.c: 459: convert_int_to_chars(d_addr, a);
      0005D1 AEr02r00         [ 2] 1255 	ldw	x, #(_a+0)
      0005D4 C6u02u03         [ 1] 1256 	ld	a, _d_addr+0
      0005D7 CDr00rAB         [ 4] 1257 	call	_convert_int_to_chars
                                   1258 ;	main.c: 460: uart_write(a);
      0005DA AEr02r00         [ 2] 1259 	ldw	x, #(_a+0)
      0005DD CDr00r37         [ 4] 1260 	call	_uart_write
                                   1261 ;	main.c: 461: uart_write(" ");
      0005E0 AEr00r57         [ 2] 1262 	ldw	x, #(___str_13+0)
      0005E3 CDr00r37         [ 4] 1263 	call	_uart_write
                                   1264 ;	main.c: 462: convert_int_to_chars(d_size, a);
      0005E6 AEr02r00         [ 2] 1265 	ldw	x, #(_a+0)
      0005E9 C6u02u05         [ 1] 1266 	ld	a, _d_size+0
      0005EC CDr00rAB         [ 4] 1267 	call	_convert_int_to_chars
                                   1268 ;	main.c: 463: uart_write(a);
      0005EF AEr02r00         [ 2] 1269 	ldw	x, #(_a+0)
      0005F2 CDr00r37         [ 4] 1270 	call	_uart_write
                                   1271 ;	main.c: 464: for(int i = 0;i < d_size;i++)
      0005F5 5F               [ 1] 1272 	clrw	x
      0005F6 1F 03            [ 2] 1273 	ldw	(0x03, sp), x
      0005F8                       1274 00103$:
      0005F8 C6u02u05         [ 1] 1275 	ld	a, _d_size+0
      0005FB 6B 02            [ 1] 1276 	ld	(0x02, sp), a
      0005FD 0F 01            [ 1] 1277 	clr	(0x01, sp)
      0005FF 1E 03            [ 2] 1278 	ldw	x, (0x03, sp)
      000601 13 01            [ 2] 1279 	cpw	x, (0x01, sp)
      000603 2E 1E            [ 1] 1280 	jrsge	00101$
                                   1281 ;	main.c: 466: uart_write(" ");
      000605 AEr00r57         [ 2] 1282 	ldw	x, #(___str_13+0)
      000608 CDr00r37         [ 4] 1283 	call	_uart_write
                                   1284 ;	main.c: 467: convert_int_to_chars(data_buf[i], a);
      00060B 1E 03            [ 2] 1285 	ldw	x, (0x03, sp)
      00060D D6u02u07         [ 1] 1286 	ld	a, (_data_buf+0, x)
      000610 AEr02r00         [ 2] 1287 	ldw	x, #(_a+0)
      000613 CDr00rAB         [ 4] 1288 	call	_convert_int_to_chars
                                   1289 ;	main.c: 468: uart_write(a);
      000616 AEr02r00         [ 2] 1290 	ldw	x, #(_a+0)
      000619 CDr00r37         [ 4] 1291 	call	_uart_write
                                   1292 ;	main.c: 464: for(int i = 0;i < d_size;i++)
      00061C 1E 03            [ 2] 1293 	ldw	x, (0x03, sp)
      00061E 5C               [ 1] 1294 	incw	x
      00061F 1F 03            [ 2] 1295 	ldw	(0x03, sp), x
      000621 20 D5            [ 2] 1296 	jra	00103$
      000623                       1297 00101$:
                                   1298 ;	main.c: 471: uart_write("\r\n");
      000623 AEr00r48         [ 2] 1299 	ldw	x, #(___str_9+0)
      000626 5B 04            [ 2] 1300 	addw	sp, #4
                                   1301 ;	main.c: 472: }
      000628 CCr00r37         [ 2] 1302 	jp	_uart_write
                                   1303 ;	main.c: 473: void cm_SW(void)
                                   1304 ;	-----------------------------------------
                                   1305 ;	 function cm_SW
                                   1306 ;	-----------------------------------------
      00062B                       1307 _cm_SW:
      00062B 52 04            [ 2] 1308 	sub	sp, #4
                                   1309 ;	main.c: 475: i2c_start();
      00062D CDr04r51         [ 4] 1310 	call	_i2c_start
                                   1311 ;	main.c: 476: i2c_send_address(current_dev);
      000630 C6u03u07         [ 1] 1312 	ld	a, _current_dev+0
      000633 CDr04r5B         [ 4] 1313 	call	_i2c_send_address
                                   1314 ;	main.c: 477: i2c_write();
      000636 CDr04r73         [ 4] 1315 	call	_i2c_write
                                   1316 ;	main.c: 478: i2c_stop();
      000639 CDr04r6E         [ 4] 1317 	call	_i2c_stop
                                   1318 ;	main.c: 479: uart_write("SW ");
      00063C AEr00r59         [ 2] 1319 	ldw	x, #(___str_14+0)
      00063F CDr00r37         [ 4] 1320 	call	_uart_write
                                   1321 ;	main.c: 480: convert_int_to_chars(d_addr, a);
      000642 AEr02r00         [ 2] 1322 	ldw	x, #(_a+0)
      000645 C6u02u03         [ 1] 1323 	ld	a, _d_addr+0
      000648 CDr00rAB         [ 4] 1324 	call	_convert_int_to_chars
                                   1325 ;	main.c: 481: uart_write(a);
      00064B AEr02r00         [ 2] 1326 	ldw	x, #(_a+0)
      00064E CDr00r37         [ 4] 1327 	call	_uart_write
                                   1328 ;	main.c: 482: uart_write(" ");
      000651 AEr00r57         [ 2] 1329 	ldw	x, #(___str_13+0)
      000654 CDr00r37         [ 4] 1330 	call	_uart_write
                                   1331 ;	main.c: 483: convert_int_to_chars(d_size, a);
      000657 AEr02r00         [ 2] 1332 	ldw	x, #(_a+0)
      00065A C6u02u05         [ 1] 1333 	ld	a, _d_size+0
      00065D CDr00rAB         [ 4] 1334 	call	_convert_int_to_chars
                                   1335 ;	main.c: 484: uart_write(a);
      000660 AEr02r00         [ 2] 1336 	ldw	x, #(_a+0)
      000663 CDr00r37         [ 4] 1337 	call	_uart_write
                                   1338 ;	main.c: 485: for(int i = 0;i < d_size;i++)
      000666 5F               [ 1] 1339 	clrw	x
      000667 1F 03            [ 2] 1340 	ldw	(0x03, sp), x
      000669                       1341 00103$:
      000669 C6u02u05         [ 1] 1342 	ld	a, _d_size+0
      00066C 6B 02            [ 1] 1343 	ld	(0x02, sp), a
      00066E 0F 01            [ 1] 1344 	clr	(0x01, sp)
      000670 1E 03            [ 2] 1345 	ldw	x, (0x03, sp)
      000672 13 01            [ 2] 1346 	cpw	x, (0x01, sp)
      000674 2E 1E            [ 1] 1347 	jrsge	00101$
                                   1348 ;	main.c: 487: uart_write(" ");
      000676 AEr00r57         [ 2] 1349 	ldw	x, #(___str_13+0)
      000679 CDr00r37         [ 4] 1350 	call	_uart_write
                                   1351 ;	main.c: 488: convert_int_to_chars(data_buf[i], a);
      00067C 1E 03            [ 2] 1352 	ldw	x, (0x03, sp)
      00067E D6u02u07         [ 1] 1353 	ld	a, (_data_buf+0, x)
      000681 AEr02r00         [ 2] 1354 	ldw	x, #(_a+0)
      000684 CDr00rAB         [ 4] 1355 	call	_convert_int_to_chars
                                   1356 ;	main.c: 489: uart_write(a);
      000687 AEr02r00         [ 2] 1357 	ldw	x, #(_a+0)
      00068A CDr00r37         [ 4] 1358 	call	_uart_write
                                   1359 ;	main.c: 485: for(int i = 0;i < d_size;i++)
      00068D 1E 03            [ 2] 1360 	ldw	x, (0x03, sp)
      00068F 5C               [ 1] 1361 	incw	x
      000690 1F 03            [ 2] 1362 	ldw	(0x03, sp), x
      000692 20 D5            [ 2] 1363 	jra	00103$
      000694                       1364 00101$:
                                   1365 ;	main.c: 492: uart_write("\r\n");
      000694 AEr00r48         [ 2] 1366 	ldw	x, #(___str_9+0)
      000697 5B 04            [ 2] 1367 	addw	sp, #4
                                   1368 ;	main.c: 493: }
      000699 CCr00r37         [ 2] 1369 	jp	_uart_write
                                   1370 ;	main.c: 501: int data_handler(void)
                                   1371 ;	-----------------------------------------
                                   1372 ;	 function data_handler
                                   1373 ;	-----------------------------------------
      00069C                       1374 _data_handler:
                                   1375 ;	main.c: 503: p_size = 0;
      00069C 72 5Fu02u04      [ 1] 1376 	clr	_p_size+0
                                   1377 ;	main.c: 504: p_bytes = 0;
      0006A0 72 5Fu02u06      [ 1] 1378 	clr	_p_bytes+0
                                   1379 ;	main.c: 505: d_addr = 0;
      0006A4 72 5Fu02u03      [ 1] 1380 	clr	_d_addr+0
                                   1381 ;	main.c: 506: d_size = 0;
      0006A8 72 5Fu02u05      [ 1] 1382 	clr	_d_size+0
                                   1383 ;	main.c: 507: memset(a, 0, sizeof(a));
      0006AC 4B 03            [ 1] 1384 	push	#0x03
      0006AE 4B 00            [ 1] 1385 	push	#0x00
      0006B0 5F               [ 1] 1386 	clrw	x
      0006B1 89               [ 2] 1387 	pushw	x
      0006B2 AEr02r00         [ 2] 1388 	ldw	x, #(_a+0)
      0006B5 CDr00r00         [ 4] 1389 	call	_memset
                                   1390 ;	main.c: 508: memset(data_buf, 0, sizeof(data_buf));
      0006B8 4B 00            [ 1] 1391 	push	#0x00
      0006BA 4B 01            [ 1] 1392 	push	#0x01
      0006BC 5F               [ 1] 1393 	clrw	x
      0006BD 89               [ 2] 1394 	pushw	x
      0006BE AEr02r07         [ 2] 1395 	ldw	x, #(_data_buf+0)
      0006C1 CDr00r00         [ 4] 1396 	call	_memset
                                   1397 ;	main.c: 509: if(memcmp(&buffer[0],"SM",2) == 0)
      0006C4 4B 02            [ 1] 1398 	push	#0x02
      0006C6 4B 00            [ 1] 1399 	push	#0x00
      0006C8 4Br5D            [ 1] 1400 	push	#<(___str_15+0)
      0006CA 4Bs00            [ 1] 1401 	push	#((___str_15+0) >> 8)
      0006CC AEr01r00         [ 2] 1402 	ldw	x, #(_buffer+0)
      0006CF CDr00r00         [ 4] 1403 	call	_memcmp
                                   1404 ;	main.c: 510: return 1;
      0006D2 5D               [ 2] 1405 	tnzw	x
      0006D3 26 02            [ 1] 1406 	jrne	00102$
      0006D5 5C               [ 1] 1407 	incw	x
      0006D6 81               [ 4] 1408 	ret
      0006D7                       1409 00102$:
                                   1410 ;	main.c: 511: if(memcmp(&buffer[0],"SN",2) == 0)
      0006D7 4B 02            [ 1] 1411 	push	#0x02
      0006D9 4B 00            [ 1] 1412 	push	#0x00
      0006DB 4Br60            [ 1] 1413 	push	#<(___str_16+0)
      0006DD 4Bs00            [ 1] 1414 	push	#((___str_16+0) >> 8)
      0006DF AEr01r00         [ 2] 1415 	ldw	x, #(_buffer+0)
      0006E2 CDr00r00         [ 4] 1416 	call	_memcmp
      0006E5 5D               [ 2] 1417 	tnzw	x
      0006E6 26 04            [ 1] 1418 	jrne	00104$
                                   1419 ;	main.c: 512: return 2;
      0006E8 AE 00 02         [ 2] 1420 	ldw	x, #0x0002
      0006EB 81               [ 4] 1421 	ret
      0006EC                       1422 00104$:
                                   1423 ;	main.c: 513: if(memcmp(&buffer[0],"ST",2) == 0)
      0006EC 4B 02            [ 1] 1424 	push	#0x02
      0006EE 4B 00            [ 1] 1425 	push	#0x00
      0006F0 4Br63            [ 1] 1426 	push	#<(___str_17+0)
      0006F2 4Bs00            [ 1] 1427 	push	#((___str_17+0) >> 8)
      0006F4 AEr01r00         [ 2] 1428 	ldw	x, #(_buffer+0)
      0006F7 CDr00r00         [ 4] 1429 	call	_memcmp
      0006FA 5D               [ 2] 1430 	tnzw	x
      0006FB 26 04            [ 1] 1431 	jrne	00106$
                                   1432 ;	main.c: 514: return 5;
      0006FD AE 00 05         [ 2] 1433 	ldw	x, #0x0005
      000700 81               [ 4] 1434 	ret
      000701                       1435 00106$:
                                   1436 ;	main.c: 515: if(memcmp(&buffer[0],"RM",2) == 0)
      000701 4B 02            [ 1] 1437 	push	#0x02
      000703 4B 00            [ 1] 1438 	push	#0x00
      000705 4Br66            [ 1] 1439 	push	#<(___str_18+0)
      000707 4Bs00            [ 1] 1440 	push	#((___str_18+0) >> 8)
      000709 AEr01r00         [ 2] 1441 	ldw	x, #(_buffer+0)
      00070C CDr00r00         [ 4] 1442 	call	_memcmp
      00070F 5D               [ 2] 1443 	tnzw	x
      000710 26 04            [ 1] 1444 	jrne	00108$
                                   1445 ;	main.c: 516: return 6;
      000712 AE 00 06         [ 2] 1446 	ldw	x, #0x0006
      000715 81               [ 4] 1447 	ret
      000716                       1448 00108$:
                                   1449 ;	main.c: 517: if(memcmp(&buffer[0],"DB",2) == 0)
      000716 4B 02            [ 1] 1450 	push	#0x02
      000718 4B 00            [ 1] 1451 	push	#0x00
      00071A 4Br69            [ 1] 1452 	push	#<(___str_19+0)
      00071C 4Bs00            [ 1] 1453 	push	#((___str_19+0) >> 8)
      00071E AEr01r00         [ 2] 1454 	ldw	x, #(_buffer+0)
      000721 CDr00r00         [ 4] 1455 	call	_memcmp
      000724 5D               [ 2] 1456 	tnzw	x
      000725 26 04            [ 1] 1457 	jrne	00110$
                                   1458 ;	main.c: 518: return 7;
      000727 AE 00 07         [ 2] 1459 	ldw	x, #0x0007
      00072A 81               [ 4] 1460 	ret
      00072B                       1461 00110$:
                                   1462 ;	main.c: 520: get_addr_from_buff();
      00072B CDr01r8F         [ 4] 1463 	call	_get_addr_from_buff
                                   1464 ;	main.c: 521: get_size_from_buff();
      00072E CDr01rD4         [ 4] 1465 	call	_get_size_from_buff
                                   1466 ;	main.c: 523: if(memcmp(&buffer[0],"SR",2) == 0)
      000731 4B 02            [ 1] 1467 	push	#0x02
      000733 4B 00            [ 1] 1468 	push	#0x00
      000735 4Br6C            [ 1] 1469 	push	#<(___str_20+0)
      000737 4Bs00            [ 1] 1470 	push	#((___str_20+0) >> 8)
      000739 AEr01r00         [ 2] 1471 	ldw	x, #(_buffer+0)
      00073C CDr00r00         [ 4] 1472 	call	_memcmp
      00073F 5D               [ 2] 1473 	tnzw	x
      000740 26 04            [ 1] 1474 	jrne	00112$
                                   1475 ;	main.c: 524: return 3;
      000742 AE 00 03         [ 2] 1476 	ldw	x, #0x0003
      000745 81               [ 4] 1477 	ret
      000746                       1478 00112$:
                                   1479 ;	main.c: 526: char_buffer_to_int();
      000746 CDr02r2E         [ 4] 1480 	call	_char_buffer_to_int
                                   1481 ;	main.c: 528: if(memcmp(&buffer[0],"SW",2) == 0)
      000749 4B 02            [ 1] 1482 	push	#0x02
      00074B 4B 00            [ 1] 1483 	push	#0x00
      00074D 4Br6F            [ 1] 1484 	push	#<(___str_21+0)
      00074F 4Bs00            [ 1] 1485 	push	#((___str_21+0) >> 8)
      000751 AEr01r00         [ 2] 1486 	ldw	x, #(_buffer+0)
      000754 CDr00r00         [ 4] 1487 	call	_memcmp
      000757 5D               [ 2] 1488 	tnzw	x
      000758 26 04            [ 1] 1489 	jrne	00114$
                                   1490 ;	main.c: 529: return 4;
      00075A AE 00 04         [ 2] 1491 	ldw	x, #0x0004
      00075D 81               [ 4] 1492 	ret
      00075E                       1493 00114$:
                                   1494 ;	main.c: 530: return 0;
      00075E 5F               [ 1] 1495 	clrw	x
                                   1496 ;	main.c: 532: }
      00075F 81               [ 4] 1497 	ret
                                   1498 ;	main.c: 534: void command_switcher(void)
                                   1499 ;	-----------------------------------------
                                   1500 ;	 function command_switcher
                                   1501 ;	-----------------------------------------
      000760                       1502 _command_switcher:
      000760 52 04            [ 2] 1503 	sub	sp, #4
                                   1504 ;	main.c: 536: char ar[4]={0};
      000762 0F 01            [ 1] 1505 	clr	(0x01, sp)
      000764 0F 02            [ 1] 1506 	clr	(0x02, sp)
      000766 0F 03            [ 1] 1507 	clr	(0x03, sp)
      000768 0F 04            [ 1] 1508 	clr	(0x04, sp)
                                   1509 ;	main.c: 538: switch(data_handler())
      00076A CDr06r9C         [ 4] 1510 	call	_data_handler
      00076D 5D               [ 2] 1511 	tnzw	x
      00076E 2B 3B            [ 1] 1512 	jrmi	00109$
      000770 A3 00 07         [ 2] 1513 	cpw	x, #0x0007
      000773 2C 36            [ 1] 1514 	jrsgt	00109$
      000775 58               [ 2] 1515 	sllw	x
      000776 DEu07u7A         [ 2] 1516 	ldw	x, (#00123$, x)
      000779 FC               [ 2] 1517 	jp	(x)
      00077A                       1518 00123$:
      00077Ar07rAB                 1519 	.dw	#00109$
      00077Cr07r8A                 1520 	.dw	#00101$
      00077Er07r8F                 1521 	.dw	#00102$
      000780r07r94                 1522 	.dw	#00103$
      000782r07r99                 1523 	.dw	#00104$
      000784r07r9E                 1524 	.dw	#00105$
      000786r07rA3                 1525 	.dw	#00106$
      000788r07rA8                 1526 	.dw	#00107$
                                   1527 ;	main.c: 540: case 1:
      00078A                       1528 00101$:
                                   1529 ;	main.c: 541: cm_SM();
      00078A CDr05r73         [ 4] 1530 	call	_cm_SM
                                   1531 ;	main.c: 542: break;
      00078D 20 1C            [ 2] 1532 	jra	00109$
                                   1533 ;	main.c: 543: case 2:
      00078F                       1534 00102$:
                                   1535 ;	main.c: 544: cm_SN();
      00078F CDr05r99         [ 4] 1536 	call	_cm_SN
                                   1537 ;	main.c: 545: break;
      000792 20 17            [ 2] 1538 	jra	00109$
                                   1539 ;	main.c: 546: case 3:
      000794                       1540 00103$:
                                   1541 ;	main.c: 547: cm_SR();
      000794 CDr05rBA         [ 4] 1542 	call	_cm_SR
                                   1543 ;	main.c: 548: break;
      000797 20 12            [ 2] 1544 	jra	00109$
                                   1545 ;	main.c: 549: case 4:
      000799                       1546 00104$:
                                   1547 ;	main.c: 550: cm_SW();
      000799 CDr06r2B         [ 4] 1548 	call	_cm_SW
                                   1549 ;	main.c: 551: break;
      00079C 20 0D            [ 2] 1550 	jra	00109$
                                   1551 ;	main.c: 552: case 5:
      00079E                       1552 00105$:
                                   1553 ;	main.c: 553: cm_ST();
      00079E CDr05rAC         [ 4] 1554 	call	_cm_ST
                                   1555 ;	main.c: 554: break;
      0007A1 20 08            [ 2] 1556 	jra	00109$
                                   1557 ;	main.c: 555: case 6:
      0007A3                       1558 00106$:
                                   1559 ;	main.c: 556: cm_RM();
      0007A3 CDr05r9F         [ 4] 1560 	call	_cm_RM
                                   1561 ;	main.c: 557: break;
      0007A6 20 03            [ 2] 1562 	jra	00109$
                                   1563 ;	main.c: 558: case 7:
      0007A8                       1564 00107$:
                                   1565 ;	main.c: 559: cm_DB();
      0007A8 CDr05rA9         [ 4] 1566 	call	_cm_DB
                                   1567 ;	main.c: 561: }
      0007AB                       1568 00109$:
                                   1569 ;	main.c: 562: }
      0007AB 5B 04            [ 2] 1570 	addw	sp, #4
      0007AD 81               [ 4] 1571 	ret
                                   1572 ;	main.c: 565: void main(void)
                                   1573 ;	-----------------------------------------
                                   1574 ;	 function main
                                   1575 ;	-----------------------------------------
      0007AE                       1576 _main:
                                   1577 ;	main.c: 567: uart_init();
      0007AE CDr04r13         [ 4] 1578 	call	_uart_init
                                   1579 ;	main.c: 568: i2c_init();
      0007B1 CDr04r30         [ 4] 1580 	call	_i2c_init
                                   1581 ;	main.c: 569: uart_write("SS\n");
      0007B4 AEr00r72         [ 2] 1582 	ldw	x, #(___str_22+0)
      0007B7 CDr00r37         [ 4] 1583 	call	_uart_write
                                   1584 ;	main.c: 570: while(1)
      0007BA                       1585 00102$:
                                   1586 ;	main.c: 572: uart_read();
      0007BA CDr00r6B         [ 4] 1587 	call	_uart_read
                                   1588 ;	main.c: 573: command_switcher();
      0007BD CDr07r60         [ 4] 1589 	call	_command_switcher
      0007C0 20 F8            [ 2] 1590 	jra	00102$
                                   1591 ;	main.c: 575: }
      0007C2 81               [ 4] 1592 	ret
                                   1593 	.area CODE
                                   1594 	.area CONST
                                   1595 	.area CONST
      000000                       1596 ___str_0:
      000000 0A                    1597 	.db 0x0a
      000001 49 32 43 5F 52 45 47  1598 	.ascii "I2C_REGS >.<"
             53 20 3E 2E 3C
      00000D 0A                    1599 	.db 0x0a
      00000E 00                    1600 	.db 0x00
                                   1601 	.area CODE
                                   1602 	.area CONST
      00000F                       1603 ___str_1:
      00000F 0A                    1604 	.db 0x0a
      000010 53 52 31 20 2D 3E 20  1605 	.ascii "SR1 -> "
      000017 00                    1606 	.db 0x00
                                   1607 	.area CODE
                                   1608 	.area CONST
      000018                       1609 ___str_2:
      000018 20 3C 2D              1610 	.ascii " <-"
      00001B 0A                    1611 	.db 0x0a
      00001C 00                    1612 	.db 0x00
                                   1613 	.area CODE
                                   1614 	.area CONST
      00001D                       1615 ___str_3:
      00001D 53 52 32 20 2D 3E 20  1616 	.ascii "SR2 -> "
      000024 00                    1617 	.db 0x00
                                   1618 	.area CODE
                                   1619 	.area CONST
      000025                       1620 ___str_4:
      000025 53 52 33 20 2D 3E 20  1621 	.ascii "SR3 -> "
      00002C 00                    1622 	.db 0x00
                                   1623 	.area CODE
                                   1624 	.area CONST
      00002D                       1625 ___str_5:
      00002D 43 52 31 20 2D 3E 20  1626 	.ascii "CR1 -> "
      000034 00                    1627 	.db 0x00
                                   1628 	.area CODE
                                   1629 	.area CONST
      000035                       1630 ___str_6:
      000035 43 52 32 20 2D 3E 20  1631 	.ascii "CR2 -> "
      00003C 00                    1632 	.db 0x00
                                   1633 	.area CODE
                                   1634 	.area CONST
      00003D                       1635 ___str_7:
      00003D 44 52 20 2D 3E 20     1636 	.ascii "DR -> "
      000043 00                    1637 	.db 0x00
                                   1638 	.area CODE
                                   1639 	.area CONST
      000044                       1640 ___str_8:
      000044 53 4D 20              1641 	.ascii "SM "
      000047 00                    1642 	.db 0x00
                                   1643 	.area CODE
                                   1644 	.area CONST
      000048                       1645 ___str_9:
      000048 0D                    1646 	.db 0x0d
      000049 0A                    1647 	.db 0x0a
      00004A 00                    1648 	.db 0x00
                                   1649 	.area CODE
                                   1650 	.area CONST
      00004B                       1651 ___str_10:
      00004B 52 4D                 1652 	.ascii "RM"
      00004D 0A                    1653 	.db 0x0a
      00004E 00                    1654 	.db 0x00
                                   1655 	.area CODE
                                   1656 	.area CONST
      00004F                       1657 ___str_11:
      00004F 53 54                 1658 	.ascii "ST"
      000051 0A                    1659 	.db 0x0a
      000052 00                    1660 	.db 0x00
                                   1661 	.area CODE
                                   1662 	.area CONST
      000053                       1663 ___str_12:
      000053 53 52 20              1664 	.ascii "SR "
      000056 00                    1665 	.db 0x00
                                   1666 	.area CODE
                                   1667 	.area CONST
      000057                       1668 ___str_13:
      000057 20                    1669 	.ascii " "
      000058 00                    1670 	.db 0x00
                                   1671 	.area CODE
                                   1672 	.area CONST
      000059                       1673 ___str_14:
      000059 53 57 20              1674 	.ascii "SW "
      00005C 00                    1675 	.db 0x00
                                   1676 	.area CODE
                                   1677 	.area CONST
      00005D                       1678 ___str_15:
      00005D 53 4D                 1679 	.ascii "SM"
      00005F 00                    1680 	.db 0x00
                                   1681 	.area CODE
                                   1682 	.area CONST
      000060                       1683 ___str_16:
      000060 53 4E                 1684 	.ascii "SN"
      000062 00                    1685 	.db 0x00
                                   1686 	.area CODE
                                   1687 	.area CONST
      000063                       1688 ___str_17:
      000063 53 54                 1689 	.ascii "ST"
      000065 00                    1690 	.db 0x00
                                   1691 	.area CODE
                                   1692 	.area CONST
      000066                       1693 ___str_18:
      000066 52 4D                 1694 	.ascii "RM"
      000068 00                    1695 	.db 0x00
                                   1696 	.area CODE
                                   1697 	.area CONST
      000069                       1698 ___str_19:
      000069 44 42                 1699 	.ascii "DB"
      00006B 00                    1700 	.db 0x00
                                   1701 	.area CODE
                                   1702 	.area CONST
      00006C                       1703 ___str_20:
      00006C 53 52                 1704 	.ascii "SR"
      00006E 00                    1705 	.db 0x00
                                   1706 	.area CODE
                                   1707 	.area CONST
      00006F                       1708 ___str_21:
      00006F 53 57                 1709 	.ascii "SW"
      000071 00                    1710 	.db 0x00
                                   1711 	.area CODE
                                   1712 	.area CONST
      000072                       1713 ___str_22:
      000072 53 53                 1714 	.ascii "SS"
      000074 0A                    1715 	.db 0x0a
      000075 00                    1716 	.db 0x00
                                   1717 	.area CODE
                                   1718 	.area INITIALIZER
      000000                       1719 __xinit__status_registers:
      000000 00                    1720 	.db #0x00	; 0
      000001 00                    1721 	.db 0x00
      000002 00                    1722 	.db 0x00
      000003 00                    1723 	.db 0x00
      000004 00                    1724 	.db 0x00
      000005 00                    1725 	.db 0x00
      000006 00                    1726 	.db 0x00
      000007 00                    1727 	.db 0x00
      000008 00                    1728 	.db 0x00
      000009 00                    1729 	.db 0x00
      00000A 00                    1730 	.db 0x00
      00000B 00                    1731 	.db 0x00
      00000C 00                    1732 	.db 0x00
      00000D 00                    1733 	.db 0x00
      00000E 00                    1734 	.db 0x00
      00000F 00                    1735 	.db 0x00
      000010 00                    1736 	.db 0x00
      000011 00                    1737 	.db 0x00
      000012 00                    1738 	.db 0x00
      000013 00                    1739 	.db 0x00
      000014 00                    1740 	.db 0x00
      000015 00                    1741 	.db 0x00
      000016 00                    1742 	.db 0x00
      000017 00                    1743 	.db 0x00
      000018 00                    1744 	.db 0x00
      000019 00                    1745 	.db 0x00
      00001A 00                    1746 	.db 0x00
      00001B 00                    1747 	.db 0x00
      00001C 00                    1748 	.db 0x00
      00001D 00                    1749 	.db 0x00
      00001E 00                    1750 	.db 0x00
      00001F 00                    1751 	.db 0x00
      000020 00                    1752 	.db 0x00
      000021 00                    1753 	.db 0x00
      000022 00                    1754 	.db 0x00
      000023 00                    1755 	.db 0x00
      000024 00                    1756 	.db 0x00
      000025 00                    1757 	.db 0x00
      000026 00                    1758 	.db 0x00
      000027 00                    1759 	.db 0x00
      000028 00                    1760 	.db 0x00
      000029 00                    1761 	.db 0x00
      00002A 00                    1762 	.db 0x00
      00002B 00                    1763 	.db 0x00
      00002C 00                    1764 	.db 0x00
      00002D 00                    1765 	.db 0x00
      00002E 00                    1766 	.db 0x00
      00002F 00                    1767 	.db 0x00
      000030 00                    1768 	.db 0x00
      000031 00                    1769 	.db 0x00
      000032 00                    1770 	.db 0x00
      000033 00                    1771 	.db 0x00
      000034 00                    1772 	.db 0x00
      000035 00                    1773 	.db 0x00
      000036 00                    1774 	.db 0x00
      000037 00                    1775 	.db 0x00
      000038 00                    1776 	.db 0x00
      000039 00                    1777 	.db 0x00
      00003A 00                    1778 	.db 0x00
      00003B 00                    1779 	.db 0x00
      00003C 00                    1780 	.db 0x00
      00003D 00                    1781 	.db 0x00
      00003E 00                    1782 	.db 0x00
      00003F 00                    1783 	.db 0x00
      000040 00                    1784 	.db 0x00
      000041 00                    1785 	.db 0x00
      000042 00                    1786 	.db 0x00
      000043 00                    1787 	.db 0x00
      000044 00                    1788 	.db 0x00
      000045 00                    1789 	.db 0x00
      000046 00                    1790 	.db 0x00
      000047 00                    1791 	.db 0x00
      000048 00                    1792 	.db 0x00
      000049 00                    1793 	.db 0x00
      00004A 00                    1794 	.db 0x00
      00004B 00                    1795 	.db 0x00
      00004C 00                    1796 	.db 0x00
      00004D 00                    1797 	.db 0x00
      00004E 00                    1798 	.db 0x00
      00004F 00                    1799 	.db 0x00
      000050 00                    1800 	.db 0x00
      000051 00                    1801 	.db 0x00
      000052 00                    1802 	.db 0x00
      000053 00                    1803 	.db 0x00
      000054 00                    1804 	.db 0x00
      000055 00                    1805 	.db 0x00
      000056 00                    1806 	.db 0x00
      000057 00                    1807 	.db 0x00
      000058 00                    1808 	.db 0x00
      000059 00                    1809 	.db 0x00
      00005A 00                    1810 	.db 0x00
      00005B 00                    1811 	.db 0x00
      00005C 00                    1812 	.db 0x00
      00005D 00                    1813 	.db 0x00
      00005E 00                    1814 	.db 0x00
      00005F 00                    1815 	.db 0x00
      000060 00                    1816 	.db 0x00
      000061 00                    1817 	.db 0x00
      000062 00                    1818 	.db 0x00
      000063 00                    1819 	.db 0x00
      000064 00                    1820 	.db 0x00
      000065 00                    1821 	.db 0x00
      000066 00                    1822 	.db 0x00
      000067 00                    1823 	.db 0x00
      000068 00                    1824 	.db 0x00
      000069 00                    1825 	.db 0x00
      00006A 00                    1826 	.db 0x00
      00006B 00                    1827 	.db 0x00
      00006C 00                    1828 	.db 0x00
      00006D 00                    1829 	.db 0x00
      00006E 00                    1830 	.db 0x00
      00006F 00                    1831 	.db 0x00
      000070 00                    1832 	.db 0x00
      000071 00                    1833 	.db 0x00
      000072 00                    1834 	.db 0x00
      000073 00                    1835 	.db 0x00
      000074 00                    1836 	.db 0x00
      000075 00                    1837 	.db 0x00
      000076 00                    1838 	.db 0x00
      000077 00                    1839 	.db 0x00
      000078 00                    1840 	.db 0x00
      000079 00                    1841 	.db 0x00
      00007A 00                    1842 	.db 0x00
      00007B 00                    1843 	.db 0x00
      00007C 00                    1844 	.db 0x00
      00007D 00                    1845 	.db 0x00
      00007E 00                    1846 	.db 0x00
      00007F 00                    1847 	.db 0x00
      000080 00                    1848 	.db 0x00
      000081 00                    1849 	.db 0x00
      000082 00                    1850 	.db 0x00
      000083 00                    1851 	.db 0x00
      000084 00                    1852 	.db 0x00
      000085 00                    1853 	.db 0x00
      000086 00                    1854 	.db 0x00
      000087 00                    1855 	.db 0x00
      000088 00                    1856 	.db 0x00
      000089 00                    1857 	.db 0x00
      00008A 00                    1858 	.db 0x00
      00008B 00                    1859 	.db 0x00
      00008C 00                    1860 	.db 0x00
      00008D 00                    1861 	.db 0x00
      00008E 00                    1862 	.db 0x00
      00008F 00                    1863 	.db 0x00
      000090 00                    1864 	.db 0x00
      000091 00                    1865 	.db 0x00
      000092 00                    1866 	.db 0x00
      000093 00                    1867 	.db 0x00
      000094 00                    1868 	.db 0x00
      000095 00                    1869 	.db 0x00
      000096 00                    1870 	.db 0x00
      000097 00                    1871 	.db 0x00
      000098 00                    1872 	.db 0x00
      000099 00                    1873 	.db 0x00
      00009A 00                    1874 	.db 0x00
      00009B 00                    1875 	.db 0x00
      00009C 00                    1876 	.db 0x00
      00009D 00                    1877 	.db 0x00
      00009E 00                    1878 	.db 0x00
      00009F 00                    1879 	.db 0x00
      0000A0 00                    1880 	.db 0x00
      0000A1 00                    1881 	.db 0x00
      0000A2 00                    1882 	.db 0x00
      0000A3 00                    1883 	.db 0x00
      0000A4 00                    1884 	.db 0x00
      0000A5 00                    1885 	.db 0x00
      0000A6 00                    1886 	.db 0x00
      0000A7 00                    1887 	.db 0x00
      0000A8 00                    1888 	.db 0x00
      0000A9 00                    1889 	.db 0x00
      0000AA 00                    1890 	.db 0x00
      0000AB 00                    1891 	.db 0x00
      0000AC 00                    1892 	.db 0x00
      0000AD 00                    1893 	.db 0x00
      0000AE 00                    1894 	.db 0x00
      0000AF 00                    1895 	.db 0x00
      0000B0 00                    1896 	.db 0x00
      0000B1 00                    1897 	.db 0x00
      0000B2 00                    1898 	.db 0x00
      0000B3 00                    1899 	.db 0x00
      0000B4 00                    1900 	.db 0x00
      0000B5 00                    1901 	.db 0x00
      0000B6 00                    1902 	.db 0x00
      0000B7 00                    1903 	.db 0x00
      0000B8 00                    1904 	.db 0x00
      0000B9 00                    1905 	.db 0x00
      0000BA 00                    1906 	.db 0x00
      0000BB 00                    1907 	.db 0x00
      0000BC 00                    1908 	.db 0x00
      0000BD 00                    1909 	.db 0x00
      0000BE 00                    1910 	.db 0x00
      0000BF 00                    1911 	.db 0x00
      0000C0 00                    1912 	.db 0x00
      0000C1 00                    1913 	.db 0x00
      0000C2 00                    1914 	.db 0x00
      0000C3 00                    1915 	.db 0x00
      0000C4 00                    1916 	.db 0x00
      0000C5 00                    1917 	.db 0x00
      0000C6 00                    1918 	.db 0x00
      0000C7 00                    1919 	.db 0x00
      0000C8 00                    1920 	.db 0x00
      0000C9 00                    1921 	.db 0x00
      0000CA 00                    1922 	.db 0x00
      0000CB 00                    1923 	.db 0x00
      0000CC 00                    1924 	.db 0x00
      0000CD 00                    1925 	.db 0x00
      0000CE 00                    1926 	.db 0x00
      0000CF 00                    1927 	.db 0x00
      0000D0 00                    1928 	.db 0x00
      0000D1 00                    1929 	.db 0x00
      0000D2 00                    1930 	.db 0x00
      0000D3 00                    1931 	.db 0x00
      0000D4 00                    1932 	.db 0x00
      0000D5 00                    1933 	.db 0x00
      0000D6 00                    1934 	.db 0x00
      0000D7 00                    1935 	.db 0x00
      0000D8 00                    1936 	.db 0x00
      0000D9 00                    1937 	.db 0x00
      0000DA 00                    1938 	.db 0x00
      0000DB 00                    1939 	.db 0x00
      0000DC 00                    1940 	.db 0x00
      0000DD 00                    1941 	.db 0x00
      0000DE 00                    1942 	.db 0x00
      0000DF 00                    1943 	.db 0x00
      0000E0 00                    1944 	.db 0x00
      0000E1 00                    1945 	.db 0x00
      0000E2 00                    1946 	.db 0x00
      0000E3 00                    1947 	.db 0x00
      0000E4 00                    1948 	.db 0x00
      0000E5 00                    1949 	.db 0x00
      0000E6 00                    1950 	.db 0x00
      0000E7 00                    1951 	.db 0x00
      0000E8 00                    1952 	.db 0x00
      0000E9 00                    1953 	.db 0x00
      0000EA 00                    1954 	.db 0x00
      0000EB 00                    1955 	.db 0x00
      0000EC 00                    1956 	.db 0x00
      0000ED 00                    1957 	.db 0x00
      0000EE 00                    1958 	.db 0x00
      0000EF 00                    1959 	.db 0x00
      0000F0 00                    1960 	.db 0x00
      0000F1 00                    1961 	.db 0x00
      0000F2 00                    1962 	.db 0x00
      0000F3 00                    1963 	.db 0x00
      0000F4 00                    1964 	.db 0x00
      0000F5 00                    1965 	.db 0x00
      0000F6 00                    1966 	.db 0x00
      0000F7 00                    1967 	.db 0x00
      0000F8 00                    1968 	.db 0x00
      0000F9 00                    1969 	.db 0x00
      0000FA 00                    1970 	.db 0x00
      0000FB 00                    1971 	.db 0x00
      0000FC 00                    1972 	.db 0x00
      0000FD 00                    1973 	.db 0x00
      0000FE 00                    1974 	.db 0x00
      0000FF 00                    1975 	.db 0x00
      000100                       1976 __xinit__buffer:
      000100 00                    1977 	.db #0x00	; 0
      000101 00                    1978 	.db 0x00
      000102 00                    1979 	.db 0x00
      000103 00                    1980 	.db 0x00
      000104 00                    1981 	.db 0x00
      000105 00                    1982 	.db 0x00
      000106 00                    1983 	.db 0x00
      000107 00                    1984 	.db 0x00
      000108 00                    1985 	.db 0x00
      000109 00                    1986 	.db 0x00
      00010A 00                    1987 	.db 0x00
      00010B 00                    1988 	.db 0x00
      00010C 00                    1989 	.db 0x00
      00010D 00                    1990 	.db 0x00
      00010E 00                    1991 	.db 0x00
      00010F 00                    1992 	.db 0x00
      000110 00                    1993 	.db 0x00
      000111 00                    1994 	.db 0x00
      000112 00                    1995 	.db 0x00
      000113 00                    1996 	.db 0x00
      000114 00                    1997 	.db 0x00
      000115 00                    1998 	.db 0x00
      000116 00                    1999 	.db 0x00
      000117 00                    2000 	.db 0x00
      000118 00                    2001 	.db 0x00
      000119 00                    2002 	.db 0x00
      00011A 00                    2003 	.db 0x00
      00011B 00                    2004 	.db 0x00
      00011C 00                    2005 	.db 0x00
      00011D 00                    2006 	.db 0x00
      00011E 00                    2007 	.db 0x00
      00011F 00                    2008 	.db 0x00
      000120 00                    2009 	.db 0x00
      000121 00                    2010 	.db 0x00
      000122 00                    2011 	.db 0x00
      000123 00                    2012 	.db 0x00
      000124 00                    2013 	.db 0x00
      000125 00                    2014 	.db 0x00
      000126 00                    2015 	.db 0x00
      000127 00                    2016 	.db 0x00
      000128 00                    2017 	.db 0x00
      000129 00                    2018 	.db 0x00
      00012A 00                    2019 	.db 0x00
      00012B 00                    2020 	.db 0x00
      00012C 00                    2021 	.db 0x00
      00012D 00                    2022 	.db 0x00
      00012E 00                    2023 	.db 0x00
      00012F 00                    2024 	.db 0x00
      000130 00                    2025 	.db 0x00
      000131 00                    2026 	.db 0x00
      000132 00                    2027 	.db 0x00
      000133 00                    2028 	.db 0x00
      000134 00                    2029 	.db 0x00
      000135 00                    2030 	.db 0x00
      000136 00                    2031 	.db 0x00
      000137 00                    2032 	.db 0x00
      000138 00                    2033 	.db 0x00
      000139 00                    2034 	.db 0x00
      00013A 00                    2035 	.db 0x00
      00013B 00                    2036 	.db 0x00
      00013C 00                    2037 	.db 0x00
      00013D 00                    2038 	.db 0x00
      00013E 00                    2039 	.db 0x00
      00013F 00                    2040 	.db 0x00
      000140 00                    2041 	.db 0x00
      000141 00                    2042 	.db 0x00
      000142 00                    2043 	.db 0x00
      000143 00                    2044 	.db 0x00
      000144 00                    2045 	.db 0x00
      000145 00                    2046 	.db 0x00
      000146 00                    2047 	.db 0x00
      000147 00                    2048 	.db 0x00
      000148 00                    2049 	.db 0x00
      000149 00                    2050 	.db 0x00
      00014A 00                    2051 	.db 0x00
      00014B 00                    2052 	.db 0x00
      00014C 00                    2053 	.db 0x00
      00014D 00                    2054 	.db 0x00
      00014E 00                    2055 	.db 0x00
      00014F 00                    2056 	.db 0x00
      000150 00                    2057 	.db 0x00
      000151 00                    2058 	.db 0x00
      000152 00                    2059 	.db 0x00
      000153 00                    2060 	.db 0x00
      000154 00                    2061 	.db 0x00
      000155 00                    2062 	.db 0x00
      000156 00                    2063 	.db 0x00
      000157 00                    2064 	.db 0x00
      000158 00                    2065 	.db 0x00
      000159 00                    2066 	.db 0x00
      00015A 00                    2067 	.db 0x00
      00015B 00                    2068 	.db 0x00
      00015C 00                    2069 	.db 0x00
      00015D 00                    2070 	.db 0x00
      00015E 00                    2071 	.db 0x00
      00015F 00                    2072 	.db 0x00
      000160 00                    2073 	.db 0x00
      000161 00                    2074 	.db 0x00
      000162 00                    2075 	.db 0x00
      000163 00                    2076 	.db 0x00
      000164 00                    2077 	.db 0x00
      000165 00                    2078 	.db 0x00
      000166 00                    2079 	.db 0x00
      000167 00                    2080 	.db 0x00
      000168 00                    2081 	.db 0x00
      000169 00                    2082 	.db 0x00
      00016A 00                    2083 	.db 0x00
      00016B 00                    2084 	.db 0x00
      00016C 00                    2085 	.db 0x00
      00016D 00                    2086 	.db 0x00
      00016E 00                    2087 	.db 0x00
      00016F 00                    2088 	.db 0x00
      000170 00                    2089 	.db 0x00
      000171 00                    2090 	.db 0x00
      000172 00                    2091 	.db 0x00
      000173 00                    2092 	.db 0x00
      000174 00                    2093 	.db 0x00
      000175 00                    2094 	.db 0x00
      000176 00                    2095 	.db 0x00
      000177 00                    2096 	.db 0x00
      000178 00                    2097 	.db 0x00
      000179 00                    2098 	.db 0x00
      00017A 00                    2099 	.db 0x00
      00017B 00                    2100 	.db 0x00
      00017C 00                    2101 	.db 0x00
      00017D 00                    2102 	.db 0x00
      00017E 00                    2103 	.db 0x00
      00017F 00                    2104 	.db 0x00
      000180 00                    2105 	.db 0x00
      000181 00                    2106 	.db 0x00
      000182 00                    2107 	.db 0x00
      000183 00                    2108 	.db 0x00
      000184 00                    2109 	.db 0x00
      000185 00                    2110 	.db 0x00
      000186 00                    2111 	.db 0x00
      000187 00                    2112 	.db 0x00
      000188 00                    2113 	.db 0x00
      000189 00                    2114 	.db 0x00
      00018A 00                    2115 	.db 0x00
      00018B 00                    2116 	.db 0x00
      00018C 00                    2117 	.db 0x00
      00018D 00                    2118 	.db 0x00
      00018E 00                    2119 	.db 0x00
      00018F 00                    2120 	.db 0x00
      000190 00                    2121 	.db 0x00
      000191 00                    2122 	.db 0x00
      000192 00                    2123 	.db 0x00
      000193 00                    2124 	.db 0x00
      000194 00                    2125 	.db 0x00
      000195 00                    2126 	.db 0x00
      000196 00                    2127 	.db 0x00
      000197 00                    2128 	.db 0x00
      000198 00                    2129 	.db 0x00
      000199 00                    2130 	.db 0x00
      00019A 00                    2131 	.db 0x00
      00019B 00                    2132 	.db 0x00
      00019C 00                    2133 	.db 0x00
      00019D 00                    2134 	.db 0x00
      00019E 00                    2135 	.db 0x00
      00019F 00                    2136 	.db 0x00
      0001A0 00                    2137 	.db 0x00
      0001A1 00                    2138 	.db 0x00
      0001A2 00                    2139 	.db 0x00
      0001A3 00                    2140 	.db 0x00
      0001A4 00                    2141 	.db 0x00
      0001A5 00                    2142 	.db 0x00
      0001A6 00                    2143 	.db 0x00
      0001A7 00                    2144 	.db 0x00
      0001A8 00                    2145 	.db 0x00
      0001A9 00                    2146 	.db 0x00
      0001AA 00                    2147 	.db 0x00
      0001AB 00                    2148 	.db 0x00
      0001AC 00                    2149 	.db 0x00
      0001AD 00                    2150 	.db 0x00
      0001AE 00                    2151 	.db 0x00
      0001AF 00                    2152 	.db 0x00
      0001B0 00                    2153 	.db 0x00
      0001B1 00                    2154 	.db 0x00
      0001B2 00                    2155 	.db 0x00
      0001B3 00                    2156 	.db 0x00
      0001B4 00                    2157 	.db 0x00
      0001B5 00                    2158 	.db 0x00
      0001B6 00                    2159 	.db 0x00
      0001B7 00                    2160 	.db 0x00
      0001B8 00                    2161 	.db 0x00
      0001B9 00                    2162 	.db 0x00
      0001BA 00                    2163 	.db 0x00
      0001BB 00                    2164 	.db 0x00
      0001BC 00                    2165 	.db 0x00
      0001BD 00                    2166 	.db 0x00
      0001BE 00                    2167 	.db 0x00
      0001BF 00                    2168 	.db 0x00
      0001C0 00                    2169 	.db 0x00
      0001C1 00                    2170 	.db 0x00
      0001C2 00                    2171 	.db 0x00
      0001C3 00                    2172 	.db 0x00
      0001C4 00                    2173 	.db 0x00
      0001C5 00                    2174 	.db 0x00
      0001C6 00                    2175 	.db 0x00
      0001C7 00                    2176 	.db 0x00
      0001C8 00                    2177 	.db 0x00
      0001C9 00                    2178 	.db 0x00
      0001CA 00                    2179 	.db 0x00
      0001CB 00                    2180 	.db 0x00
      0001CC 00                    2181 	.db 0x00
      0001CD 00                    2182 	.db 0x00
      0001CE 00                    2183 	.db 0x00
      0001CF 00                    2184 	.db 0x00
      0001D0 00                    2185 	.db 0x00
      0001D1 00                    2186 	.db 0x00
      0001D2 00                    2187 	.db 0x00
      0001D3 00                    2188 	.db 0x00
      0001D4 00                    2189 	.db 0x00
      0001D5 00                    2190 	.db 0x00
      0001D6 00                    2191 	.db 0x00
      0001D7 00                    2192 	.db 0x00
      0001D8 00                    2193 	.db 0x00
      0001D9 00                    2194 	.db 0x00
      0001DA 00                    2195 	.db 0x00
      0001DB 00                    2196 	.db 0x00
      0001DC 00                    2197 	.db 0x00
      0001DD 00                    2198 	.db 0x00
      0001DE 00                    2199 	.db 0x00
      0001DF 00                    2200 	.db 0x00
      0001E0 00                    2201 	.db 0x00
      0001E1 00                    2202 	.db 0x00
      0001E2 00                    2203 	.db 0x00
      0001E3 00                    2204 	.db 0x00
      0001E4 00                    2205 	.db 0x00
      0001E5 00                    2206 	.db 0x00
      0001E6 00                    2207 	.db 0x00
      0001E7 00                    2208 	.db 0x00
      0001E8 00                    2209 	.db 0x00
      0001E9 00                    2210 	.db 0x00
      0001EA 00                    2211 	.db 0x00
      0001EB 00                    2212 	.db 0x00
      0001EC 00                    2213 	.db 0x00
      0001ED 00                    2214 	.db 0x00
      0001EE 00                    2215 	.db 0x00
      0001EF 00                    2216 	.db 0x00
      0001F0 00                    2217 	.db 0x00
      0001F1 00                    2218 	.db 0x00
      0001F2 00                    2219 	.db 0x00
      0001F3 00                    2220 	.db 0x00
      0001F4 00                    2221 	.db 0x00
      0001F5 00                    2222 	.db 0x00
      0001F6 00                    2223 	.db 0x00
      0001F7 00                    2224 	.db 0x00
      0001F8 00                    2225 	.db 0x00
      0001F9 00                    2226 	.db 0x00
      0001FA 00                    2227 	.db 0x00
      0001FB 00                    2228 	.db 0x00
      0001FC 00                    2229 	.db 0x00
      0001FD 00                    2230 	.db 0x00
      0001FE 00                    2231 	.db 0x00
      0001FF 00                    2232 	.db 0x00
      000200                       2233 __xinit__a:
      000200 00                    2234 	.db #0x00	; 0
      000201 00                    2235 	.db 0x00
      000202 00                    2236 	.db 0x00
      000203                       2237 __xinit__d_addr:
      000203 00                    2238 	.db #0x00	; 0
      000204                       2239 __xinit__p_size:
      000204 00                    2240 	.db #0x00	; 0
      000205                       2241 __xinit__d_size:
      000205 00                    2242 	.db #0x00	; 0
      000206                       2243 __xinit__p_bytes:
      000206 00                    2244 	.db #0x00	; 0
      000207                       2245 __xinit__data_buf:
      000207 00                    2246 	.db #0x00	; 0
      000208 00                    2247 	.db 0x00
      000209 00                    2248 	.db 0x00
      00020A 00                    2249 	.db 0x00
      00020B 00                    2250 	.db 0x00
      00020C 00                    2251 	.db 0x00
      00020D 00                    2252 	.db 0x00
      00020E 00                    2253 	.db 0x00
      00020F 00                    2254 	.db 0x00
      000210 00                    2255 	.db 0x00
      000211 00                    2256 	.db 0x00
      000212 00                    2257 	.db 0x00
      000213 00                    2258 	.db 0x00
      000214 00                    2259 	.db 0x00
      000215 00                    2260 	.db 0x00
      000216 00                    2261 	.db 0x00
      000217 00                    2262 	.db 0x00
      000218 00                    2263 	.db 0x00
      000219 00                    2264 	.db 0x00
      00021A 00                    2265 	.db 0x00
      00021B 00                    2266 	.db 0x00
      00021C 00                    2267 	.db 0x00
      00021D 00                    2268 	.db 0x00
      00021E 00                    2269 	.db 0x00
      00021F 00                    2270 	.db 0x00
      000220 00                    2271 	.db 0x00
      000221 00                    2272 	.db 0x00
      000222 00                    2273 	.db 0x00
      000223 00                    2274 	.db 0x00
      000224 00                    2275 	.db 0x00
      000225 00                    2276 	.db 0x00
      000226 00                    2277 	.db 0x00
      000227 00                    2278 	.db 0x00
      000228 00                    2279 	.db 0x00
      000229 00                    2280 	.db 0x00
      00022A 00                    2281 	.db 0x00
      00022B 00                    2282 	.db 0x00
      00022C 00                    2283 	.db 0x00
      00022D 00                    2284 	.db 0x00
      00022E 00                    2285 	.db 0x00
      00022F 00                    2286 	.db 0x00
      000230 00                    2287 	.db 0x00
      000231 00                    2288 	.db 0x00
      000232 00                    2289 	.db 0x00
      000233 00                    2290 	.db 0x00
      000234 00                    2291 	.db 0x00
      000235 00                    2292 	.db 0x00
      000236 00                    2293 	.db 0x00
      000237 00                    2294 	.db 0x00
      000238 00                    2295 	.db 0x00
      000239 00                    2296 	.db 0x00
      00023A 00                    2297 	.db 0x00
      00023B 00                    2298 	.db 0x00
      00023C 00                    2299 	.db 0x00
      00023D 00                    2300 	.db 0x00
      00023E 00                    2301 	.db 0x00
      00023F 00                    2302 	.db 0x00
      000240 00                    2303 	.db 0x00
      000241 00                    2304 	.db 0x00
      000242 00                    2305 	.db 0x00
      000243 00                    2306 	.db 0x00
      000244 00                    2307 	.db 0x00
      000245 00                    2308 	.db 0x00
      000246 00                    2309 	.db 0x00
      000247 00                    2310 	.db 0x00
      000248 00                    2311 	.db 0x00
      000249 00                    2312 	.db 0x00
      00024A 00                    2313 	.db 0x00
      00024B 00                    2314 	.db 0x00
      00024C 00                    2315 	.db 0x00
      00024D 00                    2316 	.db 0x00
      00024E 00                    2317 	.db 0x00
      00024F 00                    2318 	.db 0x00
      000250 00                    2319 	.db 0x00
      000251 00                    2320 	.db 0x00
      000252 00                    2321 	.db 0x00
      000253 00                    2322 	.db 0x00
      000254 00                    2323 	.db 0x00
      000255 00                    2324 	.db 0x00
      000256 00                    2325 	.db 0x00
      000257 00                    2326 	.db 0x00
      000258 00                    2327 	.db 0x00
      000259 00                    2328 	.db 0x00
      00025A 00                    2329 	.db 0x00
      00025B 00                    2330 	.db 0x00
      00025C 00                    2331 	.db 0x00
      00025D 00                    2332 	.db 0x00
      00025E 00                    2333 	.db 0x00
      00025F 00                    2334 	.db 0x00
      000260 00                    2335 	.db 0x00
      000261 00                    2336 	.db 0x00
      000262 00                    2337 	.db 0x00
      000263 00                    2338 	.db 0x00
      000264 00                    2339 	.db 0x00
      000265 00                    2340 	.db 0x00
      000266 00                    2341 	.db 0x00
      000267 00                    2342 	.db 0x00
      000268 00                    2343 	.db 0x00
      000269 00                    2344 	.db 0x00
      00026A 00                    2345 	.db 0x00
      00026B 00                    2346 	.db 0x00
      00026C 00                    2347 	.db 0x00
      00026D 00                    2348 	.db 0x00
      00026E 00                    2349 	.db 0x00
      00026F 00                    2350 	.db 0x00
      000270 00                    2351 	.db 0x00
      000271 00                    2352 	.db 0x00
      000272 00                    2353 	.db 0x00
      000273 00                    2354 	.db 0x00
      000274 00                    2355 	.db 0x00
      000275 00                    2356 	.db 0x00
      000276 00                    2357 	.db 0x00
      000277 00                    2358 	.db 0x00
      000278 00                    2359 	.db 0x00
      000279 00                    2360 	.db 0x00
      00027A 00                    2361 	.db 0x00
      00027B 00                    2362 	.db 0x00
      00027C 00                    2363 	.db 0x00
      00027D 00                    2364 	.db 0x00
      00027E 00                    2365 	.db 0x00
      00027F 00                    2366 	.db 0x00
      000280 00                    2367 	.db 0x00
      000281 00                    2368 	.db 0x00
      000282 00                    2369 	.db 0x00
      000283 00                    2370 	.db 0x00
      000284 00                    2371 	.db 0x00
      000285 00                    2372 	.db 0x00
      000286 00                    2373 	.db 0x00
      000287 00                    2374 	.db 0x00
      000288 00                    2375 	.db 0x00
      000289 00                    2376 	.db 0x00
      00028A 00                    2377 	.db 0x00
      00028B 00                    2378 	.db 0x00
      00028C 00                    2379 	.db 0x00
      00028D 00                    2380 	.db 0x00
      00028E 00                    2381 	.db 0x00
      00028F 00                    2382 	.db 0x00
      000290 00                    2383 	.db 0x00
      000291 00                    2384 	.db 0x00
      000292 00                    2385 	.db 0x00
      000293 00                    2386 	.db 0x00
      000294 00                    2387 	.db 0x00
      000295 00                    2388 	.db 0x00
      000296 00                    2389 	.db 0x00
      000297 00                    2390 	.db 0x00
      000298 00                    2391 	.db 0x00
      000299 00                    2392 	.db 0x00
      00029A 00                    2393 	.db 0x00
      00029B 00                    2394 	.db 0x00
      00029C 00                    2395 	.db 0x00
      00029D 00                    2396 	.db 0x00
      00029E 00                    2397 	.db 0x00
      00029F 00                    2398 	.db 0x00
      0002A0 00                    2399 	.db 0x00
      0002A1 00                    2400 	.db 0x00
      0002A2 00                    2401 	.db 0x00
      0002A3 00                    2402 	.db 0x00
      0002A4 00                    2403 	.db 0x00
      0002A5 00                    2404 	.db 0x00
      0002A6 00                    2405 	.db 0x00
      0002A7 00                    2406 	.db 0x00
      0002A8 00                    2407 	.db 0x00
      0002A9 00                    2408 	.db 0x00
      0002AA 00                    2409 	.db 0x00
      0002AB 00                    2410 	.db 0x00
      0002AC 00                    2411 	.db 0x00
      0002AD 00                    2412 	.db 0x00
      0002AE 00                    2413 	.db 0x00
      0002AF 00                    2414 	.db 0x00
      0002B0 00                    2415 	.db 0x00
      0002B1 00                    2416 	.db 0x00
      0002B2 00                    2417 	.db 0x00
      0002B3 00                    2418 	.db 0x00
      0002B4 00                    2419 	.db 0x00
      0002B5 00                    2420 	.db 0x00
      0002B6 00                    2421 	.db 0x00
      0002B7 00                    2422 	.db 0x00
      0002B8 00                    2423 	.db 0x00
      0002B9 00                    2424 	.db 0x00
      0002BA 00                    2425 	.db 0x00
      0002BB 00                    2426 	.db 0x00
      0002BC 00                    2427 	.db 0x00
      0002BD 00                    2428 	.db 0x00
      0002BE 00                    2429 	.db 0x00
      0002BF 00                    2430 	.db 0x00
      0002C0 00                    2431 	.db 0x00
      0002C1 00                    2432 	.db 0x00
      0002C2 00                    2433 	.db 0x00
      0002C3 00                    2434 	.db 0x00
      0002C4 00                    2435 	.db 0x00
      0002C5 00                    2436 	.db 0x00
      0002C6 00                    2437 	.db 0x00
      0002C7 00                    2438 	.db 0x00
      0002C8 00                    2439 	.db 0x00
      0002C9 00                    2440 	.db 0x00
      0002CA 00                    2441 	.db 0x00
      0002CB 00                    2442 	.db 0x00
      0002CC 00                    2443 	.db 0x00
      0002CD 00                    2444 	.db 0x00
      0002CE 00                    2445 	.db 0x00
      0002CF 00                    2446 	.db 0x00
      0002D0 00                    2447 	.db 0x00
      0002D1 00                    2448 	.db 0x00
      0002D2 00                    2449 	.db 0x00
      0002D3 00                    2450 	.db 0x00
      0002D4 00                    2451 	.db 0x00
      0002D5 00                    2452 	.db 0x00
      0002D6 00                    2453 	.db 0x00
      0002D7 00                    2454 	.db 0x00
      0002D8 00                    2455 	.db 0x00
      0002D9 00                    2456 	.db 0x00
      0002DA 00                    2457 	.db 0x00
      0002DB 00                    2458 	.db 0x00
      0002DC 00                    2459 	.db 0x00
      0002DD 00                    2460 	.db 0x00
      0002DE 00                    2461 	.db 0x00
      0002DF 00                    2462 	.db 0x00
      0002E0 00                    2463 	.db 0x00
      0002E1 00                    2464 	.db 0x00
      0002E2 00                    2465 	.db 0x00
      0002E3 00                    2466 	.db 0x00
      0002E4 00                    2467 	.db 0x00
      0002E5 00                    2468 	.db 0x00
      0002E6 00                    2469 	.db 0x00
      0002E7 00                    2470 	.db 0x00
      0002E8 00                    2471 	.db 0x00
      0002E9 00                    2472 	.db 0x00
      0002EA 00                    2473 	.db 0x00
      0002EB 00                    2474 	.db 0x00
      0002EC 00                    2475 	.db 0x00
      0002ED 00                    2476 	.db 0x00
      0002EE 00                    2477 	.db 0x00
      0002EF 00                    2478 	.db 0x00
      0002F0 00                    2479 	.db 0x00
      0002F1 00                    2480 	.db 0x00
      0002F2 00                    2481 	.db 0x00
      0002F3 00                    2482 	.db 0x00
      0002F4 00                    2483 	.db 0x00
      0002F5 00                    2484 	.db 0x00
      0002F6 00                    2485 	.db 0x00
      0002F7 00                    2486 	.db 0x00
      0002F8 00                    2487 	.db 0x00
      0002F9 00                    2488 	.db 0x00
      0002FA 00                    2489 	.db 0x00
      0002FB 00                    2490 	.db 0x00
      0002FC 00                    2491 	.db 0x00
      0002FD 00                    2492 	.db 0x00
      0002FE 00                    2493 	.db 0x00
      0002FF 00                    2494 	.db 0x00
      000300 00                    2495 	.db 0x00
      000301 00                    2496 	.db 0x00
      000302 00                    2497 	.db 0x00
      000303 00                    2498 	.db 0x00
      000304 00                    2499 	.db 0x00
      000305 00                    2500 	.db 0x00
      000306 00                    2501 	.db 0x00
      000307                       2502 __xinit__current_dev:
      000307 00                    2503 	.db #0x00	; 0
                                   2504 	.area CABS (ABS)
