                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.3.0 #14184 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _uart_write
                                     13 	.globl _delay
                                     14 	.globl _strlen
                                     15 ;--------------------------------------------------------
                                     16 ; ram data
                                     17 ;--------------------------------------------------------
                                     18 	.area DATA
                                     19 ;--------------------------------------------------------
                                     20 ; ram data
                                     21 ;--------------------------------------------------------
                                     22 	.area INITIALIZED
                                     23 ;--------------------------------------------------------
                                     24 ; Stack segment in internal ram
                                     25 ;--------------------------------------------------------
                                     26 	.area SSEG
      000000                         27 __start__stack:
      000000                         28 	.ds	1
                                     29 
                                     30 ;--------------------------------------------------------
                                     31 ; absolute external ram data
                                     32 ;--------------------------------------------------------
                                     33 	.area DABS (ABS)
                                     34 
                                     35 ; default segment ordering for linker
                                     36 	.area HOME
                                     37 	.area GSINIT
                                     38 	.area GSFINAL
                                     39 	.area CONST
                                     40 	.area INITIALIZER
                                     41 	.area CODE
                                     42 
                                     43 ;--------------------------------------------------------
                                     44 ; interrupt vector
                                     45 ;--------------------------------------------------------
                                     46 	.area HOME
      000000                         47 __interrupt_vect:
      000000 82v00u00u00             48 	int s_GSINIT ; reset
                                     49 ;--------------------------------------------------------
                                     50 ; global & static initialisations
                                     51 ;--------------------------------------------------------
                                     52 	.area HOME
                                     53 	.area GSINIT
                                     54 	.area GSFINAL
                                     55 	.area GSINIT
      000000 CDr00r00         [ 4]   56 	call	___sdcc_external_startup
      000003 4D               [ 1]   57 	tnz	a
      000004 27 03            [ 1]   58 	jreq	__sdcc_init_data
      000006 CCr00r04         [ 2]   59 	jp	__sdcc_program_startup
      000009                         60 __sdcc_init_data:
                                     61 ; stm8_genXINIT() start
      000009 AEr00r00         [ 2]   62 	ldw x, #l_DATA
      00000C 27 07            [ 1]   63 	jreq	00002$
      00000E                         64 00001$:
      00000E 72 4FuFFuFF      [ 1]   65 	clr (s_DATA - 1, x)
      000012 5A               [ 2]   66 	decw x
      000013 26 F9            [ 1]   67 	jrne	00001$
      000015                         68 00002$:
      000015 AEr00r00         [ 2]   69 	ldw	x, #l_INITIALIZER
      000018 27 09            [ 1]   70 	jreq	00004$
      00001A                         71 00003$:
      00001A D6uFFuFF         [ 1]   72 	ld	a, (s_INITIALIZER - 1, x)
      00001D D7uFFuFF         [ 1]   73 	ld	(s_INITIALIZED - 1, x), a
      000020 5A               [ 2]   74 	decw	x
      000021 26 F7            [ 1]   75 	jrne	00003$
      000023                         76 00004$:
                                     77 ; stm8_genXINIT() end
                                     78 	.area GSFINAL
      000000 CCr00r04         [ 2]   79 	jp	__sdcc_program_startup
                                     80 ;--------------------------------------------------------
                                     81 ; Home
                                     82 ;--------------------------------------------------------
                                     83 	.area HOME
                                     84 	.area HOME
      000004                         85 __sdcc_program_startup:
      000004 CCr00r5E         [ 2]   86 	jp	_main
                                     87 ;	return from main will return to caller
                                     88 ;--------------------------------------------------------
                                     89 ; code
                                     90 ;--------------------------------------------------------
                                     91 	.area CODE
                                     92 ;	main.c: 7: void delay(unsigned long count) {
                                     93 ;	-----------------------------------------
                                     94 ;	 function delay
                                     95 ;	-----------------------------------------
      000000                         96 _delay:
      000000 52 08            [ 2]   97 	sub	sp, #8
                                     98 ;	main.c: 8: while (count--)
      000002 16 0D            [ 2]   99 	ldw	y, (0x0d, sp)
      000004 17 07            [ 2]  100 	ldw	(0x07, sp), y
      000006 1E 0B            [ 2]  101 	ldw	x, (0x0b, sp)
      000008                        102 00101$:
      000008 1F 01            [ 2]  103 	ldw	(0x01, sp), x
      00000A 7B 07            [ 1]  104 	ld	a, (0x07, sp)
      00000C 6B 03            [ 1]  105 	ld	(0x03, sp), a
      00000E 7B 08            [ 1]  106 	ld	a, (0x08, sp)
      000010 16 07            [ 2]  107 	ldw	y, (0x07, sp)
      000012 72 A2 00 01      [ 2]  108 	subw	y, #0x0001
      000016 17 07            [ 2]  109 	ldw	(0x07, sp), y
      000018 24 01            [ 1]  110 	jrnc	00117$
      00001A 5A               [ 2]  111 	decw	x
      00001B                        112 00117$:
      00001B 4D               [ 1]  113 	tnz	a
      00001C 26 08            [ 1]  114 	jrne	00118$
      00001E 16 02            [ 2]  115 	ldw	y, (0x02, sp)
      000020 26 04            [ 1]  116 	jrne	00118$
      000022 0D 01            [ 1]  117 	tnz	(0x01, sp)
      000024 27 03            [ 1]  118 	jreq	00104$
      000026                        119 00118$:
                                    120 ;	main.c: 9: nop();
      000026 9D               [ 1]  121 	nop
      000027 20 DF            [ 2]  122 	jra	00101$
      000029                        123 00104$:
                                    124 ;	main.c: 10: }
      000029 1E 09            [ 2]  125 	ldw	x, (9, sp)
      00002B 5B 0E            [ 2]  126 	addw	sp, #14
      00002D FC               [ 2]  127 	jp	(x)
                                    128 ;	main.c: 12: int uart_write(const char *str) {
                                    129 ;	-----------------------------------------
                                    130 ;	 function uart_write
                                    131 ;	-----------------------------------------
      00002E                        132 _uart_write:
      00002E 52 05            [ 2]  133 	sub	sp, #5
      000030 1F 03            [ 2]  134 	ldw	(0x03, sp), x
                                    135 ;	main.c: 14: for(i = 0; i < strlen(str); i++) {
      000032 0F 05            [ 1]  136 	clr	(0x05, sp)
      000034                        137 00106$:
      000034 1E 03            [ 2]  138 	ldw	x, (0x03, sp)
      000036 CDr00r00         [ 4]  139 	call	_strlen
      000039 1F 01            [ 2]  140 	ldw	(0x01, sp), x
      00003B 5F               [ 1]  141 	clrw	x
      00003C 7B 05            [ 1]  142 	ld	a, (0x05, sp)
      00003E 97               [ 1]  143 	ld	xl, a
      00003F 13 01            [ 2]  144 	cpw	x, (0x01, sp)
      000041 24 14            [ 1]  145 	jrnc	00104$
                                    146 ;	main.c: 15: while(!(UART1_SR & UART_SR_TXE)); // !Transmit data register empty
      000043                        147 00101$:
      000043 C6 52 30         [ 1]  148 	ld	a, 0x5230
      000046 2A FB            [ 1]  149 	jrpl	00101$
                                    150 ;	main.c: 16: UART1_DR = str[i];
      000048 5F               [ 1]  151 	clrw	x
      000049 7B 05            [ 1]  152 	ld	a, (0x05, sp)
      00004B 97               [ 1]  153 	ld	xl, a
      00004C 72 FB 03         [ 2]  154 	addw	x, (0x03, sp)
      00004F F6               [ 1]  155 	ld	a, (x)
      000050 C7 52 31         [ 1]  156 	ld	0x5231, a
                                    157 ;	main.c: 14: for(i = 0; i < strlen(str); i++) {
      000053 0C 05            [ 1]  158 	inc	(0x05, sp)
      000055 20 DD            [ 2]  159 	jra	00106$
      000057                        160 00104$:
                                    161 ;	main.c: 18: return(i); // Bytes sent
      000057 7B 05            [ 1]  162 	ld	a, (0x05, sp)
      000059 5F               [ 1]  163 	clrw	x
      00005A 97               [ 1]  164 	ld	xl, a
                                    165 ;	main.c: 19: }
      00005B 5B 05            [ 2]  166 	addw	sp, #5
      00005D 81               [ 4]  167 	ret
                                    168 ;	main.c: 21: int main(void)
                                    169 ;	-----------------------------------------
                                    170 ;	 function main
                                    171 ;	-----------------------------------------
      00005E                        172 _main:
                                    173 ;	main.c: 24: CLK_CKDIVR = 0;
      00005E 35 00 50 C6      [ 1]  174 	mov	0x50c6+0, #0x00
                                    175 ;	main.c: 27: UART1_CR2 |= UART_CR2_TEN; // Transmitter enable
      000062 72 16 52 35      [ 1]  176 	bset	0x5235, #3
                                    177 ;	main.c: 29: UART1_CR3 &= ~(UART_CR3_STOP1 | UART_CR3_STOP2); // 1 stop bit
      000066 C6 52 36         [ 1]  178 	ld	a, 0x5236
      000069 A4 CF            [ 1]  179 	and	a, #0xcf
      00006B C7 52 36         [ 1]  180 	ld	0x5236, a
                                    181 ;	main.c: 31: UART1_BRR2 = 0x03; UART1_BRR1 = 0x68; // 0x0683 coded funky way (see ref manual)
      00006E 35 03 52 33      [ 1]  182 	mov	0x5233+0, #0x03
      000072 35 68 52 32      [ 1]  183 	mov	0x5232+0, #0x68
                                    184 ;	main.c: 33: while(1) {
      000076                        185 00102$:
                                    186 ;	main.c: 34: uart_write("Hello World!\r\n");
      000076 AEr00r00         [ 2]  187 	ldw	x, #(___str_0+0)
      000079 CDr00r2E         [ 4]  188 	call	_uart_write
                                    189 ;	main.c: 35: delay(400000L);
      00007C 4B 80            [ 1]  190 	push	#0x80
      00007E 4B 1A            [ 1]  191 	push	#0x1a
      000080 4B 06            [ 1]  192 	push	#0x06
      000082 4B 00            [ 1]  193 	push	#0x00
      000084 CDr00r00         [ 4]  194 	call	_delay
      000087 20 ED            [ 2]  195 	jra	00102$
                                    196 ;	main.c: 37: }
      000089 81               [ 4]  197 	ret
                                    198 	.area CODE
                                    199 	.area CONST
                                    200 	.area CONST
      000000                        201 ___str_0:
      000000 48 65 6C 6C 6F 20 57   202 	.ascii "Hello World!"
             6F 72 6C 64 21
      00000C 0D                     203 	.db 0x0d
      00000D 0A                     204 	.db 0x0a
      00000E 00                     205 	.db 0x00
                                    206 	.area CODE
                                    207 	.area INITIALIZER
                                    208 	.area CABS (ABS)
