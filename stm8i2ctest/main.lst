                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.3.0 #14184 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _command_switcher
                                     13 	.globl _data_handler
                                     14 	.globl _cm_SW
                                     15 	.globl _cm_SR
                                     16 	.globl _cm_ST
                                     17 	.globl _cm_DB
                                     18 	.globl _cm_RM
                                     19 	.globl _cm_SN
                                     20 	.globl _cm_SM
                                     21 	.globl _i2c_scan
                                     22 	.globl _i2c_read
                                     23 	.globl _i2c_write
                                     24 	.globl _i2c_stop
                                     25 	.globl _i2c_send_address
                                     26 	.globl _i2c_start
                                     27 	.globl _i2c_init
                                     28 	.globl _uart_init
                                     29 	.globl _status_check
                                     30 	.globl _char_buffer_to_int
                                     31 	.globl _get_size_from_buff
                                     32 	.globl _get_addr_from_buff
                                     33 	.globl _convert_int_to_binary
                                     34 	.globl _convert_chars_to_int
                                     35 	.globl _convert_int_to_chars
                                     36 	.globl _uart_read
                                     37 	.globl _uart_write
                                     38 	.globl _UART_RX
                                     39 	.globl _UART_TX
                                     40 	.globl _delay
                                     41 	.globl ___memcpy
                                     42 	.globl _strlen
                                     43 	.globl _memset
                                     44 	.globl _memcmp
                                     45 	.globl _current_dev
                                     46 	.globl _data_buf
                                     47 	.globl _p_bytes
                                     48 	.globl _d_size
                                     49 	.globl _p_size
                                     50 	.globl _d_addr
                                     51 	.globl _a
                                     52 	.globl _buffer
                                     53 ;--------------------------------------------------------
                                     54 ; ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area DATA
                                     57 ;--------------------------------------------------------
                                     58 ; ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area INITIALIZED
      000000                         61 _buffer::
      000000                         62 	.ds 256
      000100                         63 _a::
      000100                         64 	.ds 3
      000103                         65 _d_addr::
      000103                         66 	.ds 1
      000104                         67 _p_size::
      000104                         68 	.ds 1
      000105                         69 _d_size::
      000105                         70 	.ds 1
      000106                         71 _p_bytes::
      000106                         72 	.ds 1
      000107                         73 _data_buf::
      000107                         74 	.ds 256
      000207                         75 _current_dev::
      000207                         76 	.ds 1
                                     77 ;--------------------------------------------------------
                                     78 ; Stack segment in internal ram
                                     79 ;--------------------------------------------------------
                                     80 	.area SSEG
      000000                         81 __start__stack:
      000000                         82 	.ds	1
                                     83 
                                     84 ;--------------------------------------------------------
                                     85 ; absolute external ram data
                                     86 ;--------------------------------------------------------
                                     87 	.area DABS (ABS)
                                     88 
                                     89 ; default segment ordering for linker
                                     90 	.area HOME
                                     91 	.area GSINIT
                                     92 	.area GSFINAL
                                     93 	.area CONST
                                     94 	.area INITIALIZER
                                     95 	.area CODE
                                     96 
                                     97 ;--------------------------------------------------------
                                     98 ; interrupt vector
                                     99 ;--------------------------------------------------------
                                    100 	.area HOME
      000000                        101 __interrupt_vect:
      000000 82v00u00u00            102 	int s_GSINIT ; reset
                                    103 ;--------------------------------------------------------
                                    104 ; global & static initialisations
                                    105 ;--------------------------------------------------------
                                    106 	.area HOME
                                    107 	.area GSINIT
                                    108 	.area GSFINAL
                                    109 	.area GSINIT
      000000 CDr00r00         [ 4]  110 	call	___sdcc_external_startup
      000003 4D               [ 1]  111 	tnz	a
      000004 27 03            [ 1]  112 	jreq	__sdcc_init_data
      000006 CCr00r04         [ 2]  113 	jp	__sdcc_program_startup
      000009                        114 __sdcc_init_data:
                                    115 ; stm8_genXINIT() start
      000009 AEr00r00         [ 2]  116 	ldw x, #l_DATA
      00000C 27 07            [ 1]  117 	jreq	00002$
      00000E                        118 00001$:
      00000E 72 4FuFFuFF      [ 1]  119 	clr (s_DATA - 1, x)
      000012 5A               [ 2]  120 	decw x
      000013 26 F9            [ 1]  121 	jrne	00001$
      000015                        122 00002$:
      000015 AEr00r00         [ 2]  123 	ldw	x, #l_INITIALIZER
      000018 27 09            [ 1]  124 	jreq	00004$
      00001A                        125 00003$:
      00001A D6uFFuFF         [ 1]  126 	ld	a, (s_INITIALIZER - 1, x)
      00001D D7uFFuFF         [ 1]  127 	ld	(s_INITIALIZED - 1, x), a
      000020 5A               [ 2]  128 	decw	x
      000021 26 F7            [ 1]  129 	jrne	00003$
      000023                        130 00004$:
                                    131 ; stm8_genXINIT() end
                                    132 	.area GSFINAL
      000000 CCr00r04         [ 2]  133 	jp	__sdcc_program_startup
                                    134 ;--------------------------------------------------------
                                    135 ; Home
                                    136 ;--------------------------------------------------------
                                    137 	.area HOME
                                    138 	.area HOME
      000004                        139 __sdcc_program_startup:
      000004 CCr08r0E         [ 2]  140 	jp	_main
                                    141 ;	return from main will return to caller
                                    142 ;--------------------------------------------------------
                                    143 ; code
                                    144 ;--------------------------------------------------------
                                    145 	.area CODE
                                    146 ;	main.c: 26: void delay(unsigned long count) {
                                    147 ;	-----------------------------------------
                                    148 ;	 function delay
                                    149 ;	-----------------------------------------
      000000                        150 _delay:
      000000 52 08            [ 2]  151 	sub	sp, #8
                                    152 ;	main.c: 27: while (count--)
      000002 16 0D            [ 2]  153 	ldw	y, (0x0d, sp)
      000004 17 07            [ 2]  154 	ldw	(0x07, sp), y
      000006 1E 0B            [ 2]  155 	ldw	x, (0x0b, sp)
      000008                        156 00101$:
      000008 1F 01            [ 2]  157 	ldw	(0x01, sp), x
      00000A 7B 07            [ 1]  158 	ld	a, (0x07, sp)
      00000C 6B 03            [ 1]  159 	ld	(0x03, sp), a
      00000E 7B 08            [ 1]  160 	ld	a, (0x08, sp)
      000010 16 07            [ 2]  161 	ldw	y, (0x07, sp)
      000012 72 A2 00 01      [ 2]  162 	subw	y, #0x0001
      000016 17 07            [ 2]  163 	ldw	(0x07, sp), y
      000018 24 01            [ 1]  164 	jrnc	00117$
      00001A 5A               [ 2]  165 	decw	x
      00001B                        166 00117$:
      00001B 4D               [ 1]  167 	tnz	a
      00001C 26 08            [ 1]  168 	jrne	00118$
      00001E 16 02            [ 2]  169 	ldw	y, (0x02, sp)
      000020 26 04            [ 1]  170 	jrne	00118$
      000022 0D 01            [ 1]  171 	tnz	(0x01, sp)
      000024 27 03            [ 1]  172 	jreq	00104$
      000026                        173 00118$:
                                    174 ;	main.c: 28: nop();
      000026 9D               [ 1]  175 	nop
      000027 20 DF            [ 2]  176 	jra	00101$
      000029                        177 00104$:
                                    178 ;	main.c: 29: }
      000029 1E 09            [ 2]  179 	ldw	x, (9, sp)
      00002B 5B 0E            [ 2]  180 	addw	sp, #14
      00002D FC               [ 2]  181 	jp	(x)
                                    182 ;	main.c: 37: void UART_TX(unsigned char value)
                                    183 ;	-----------------------------------------
                                    184 ;	 function UART_TX
                                    185 ;	-----------------------------------------
      00002E                        186 _UART_TX:
                                    187 ;	main.c: 39: UART1_DR = value;
      00002E C7 52 31         [ 1]  188 	ld	0x5231, a
                                    189 ;	main.c: 40: while(!(UART1_SR & UART_SR_TXE));
      000031                        190 00101$:
      000031 C6 52 30         [ 1]  191 	ld	a, 0x5230
      000034 2A FB            [ 1]  192 	jrpl	00101$
                                    193 ;	main.c: 41: }
      000036 81               [ 4]  194 	ret
                                    195 ;	main.c: 42: unsigned char UART_RX(void)
                                    196 ;	-----------------------------------------
                                    197 ;	 function UART_RX
                                    198 ;	-----------------------------------------
      000037                        199 _UART_RX:
                                    200 ;	main.c: 44: while(!(UART1_SR & UART_SR_TXE));
      000037                        201 00101$:
      000037 C6 52 30         [ 1]  202 	ld	a, 0x5230
      00003A 2A FB            [ 1]  203 	jrpl	00101$
                                    204 ;	main.c: 45: return UART1_DR;
      00003C C6 52 31         [ 1]  205 	ld	a, 0x5231
                                    206 ;	main.c: 46: }
      00003F 81               [ 4]  207 	ret
                                    208 ;	main.c: 47: int uart_write(const char *str) {
                                    209 ;	-----------------------------------------
                                    210 ;	 function uart_write
                                    211 ;	-----------------------------------------
      000040                        212 _uart_write:
      000040 52 05            [ 2]  213 	sub	sp, #5
      000042 1F 03            [ 2]  214 	ldw	(0x03, sp), x
                                    215 ;	main.c: 49: for(i = 0; i < strlen(str); i++) {
      000044 0F 05            [ 1]  216 	clr	(0x05, sp)
      000046                        217 00103$:
      000046 1E 03            [ 2]  218 	ldw	x, (0x03, sp)
      000048 CDr00r00         [ 4]  219 	call	_strlen
      00004B 1F 01            [ 2]  220 	ldw	(0x01, sp), x
      00004D 7B 05            [ 1]  221 	ld	a, (0x05, sp)
      00004F 5F               [ 1]  222 	clrw	x
      000050 97               [ 1]  223 	ld	xl, a
      000051 13 01            [ 2]  224 	cpw	x, (0x01, sp)
      000053 24 0F            [ 1]  225 	jrnc	00101$
                                    226 ;	main.c: 51: UART_TX(str[i]);
      000055 5F               [ 1]  227 	clrw	x
      000056 7B 05            [ 1]  228 	ld	a, (0x05, sp)
      000058 97               [ 1]  229 	ld	xl, a
      000059 72 FB 03         [ 2]  230 	addw	x, (0x03, sp)
      00005C F6               [ 1]  231 	ld	a, (x)
      00005D CDr00r2E         [ 4]  232 	call	_UART_TX
                                    233 ;	main.c: 49: for(i = 0; i < strlen(str); i++) {
      000060 0C 05            [ 1]  234 	inc	(0x05, sp)
      000062 20 E2            [ 2]  235 	jra	00103$
      000064                        236 00101$:
                                    237 ;	main.c: 53: return(i); // Bytes sent
      000064 7B 05            [ 1]  238 	ld	a, (0x05, sp)
      000066 5F               [ 1]  239 	clrw	x
      000067 97               [ 1]  240 	ld	xl, a
                                    241 ;	main.c: 54: }
      000068 5B 05            [ 2]  242 	addw	sp, #5
      00006A 81               [ 4]  243 	ret
                                    244 ;	main.c: 55: int uart_read(void)
                                    245 ;	-----------------------------------------
                                    246 ;	 function uart_read
                                    247 ;	-----------------------------------------
      00006B                        248 _uart_read:
                                    249 ;	main.c: 57: memset(buffer, 0, sizeof(buffer));
      00006B 4B 00            [ 1]  250 	push	#0x00
      00006D 4B 01            [ 1]  251 	push	#0x01
      00006F 5F               [ 1]  252 	clrw	x
      000070 89               [ 2]  253 	pushw	x
      000071 AEr00r00         [ 2]  254 	ldw	x, #(_buffer+0)
      000074 CDr00r00         [ 4]  255 	call	_memset
                                    256 ;	main.c: 59: while(i<256)
      000077 5F               [ 1]  257 	clrw	x
      000078                        258 00105$:
      000078 A3 01 00         [ 2]  259 	cpw	x, #0x0100
      00007B 2E 22            [ 1]  260 	jrsge	00107$
                                    261 ;	main.c: 61: if(UART1_SR & UART_SR_RXNE)
      00007D C6 52 30         [ 1]  262 	ld	a, 0x5230
      000080 A5 20            [ 1]  263 	bcp	a, #0x20
      000082 27 F4            [ 1]  264 	jreq	00105$
                                    265 ;	main.c: 63: buffer[i] = UART_RX();
      000084 90 93            [ 1]  266 	ldw	y, x
      000086 72 A9r00r00      [ 2]  267 	addw	y, #(_buffer+0)
      00008A 89               [ 2]  268 	pushw	x
      00008B 90 89            [ 2]  269 	pushw	y
      00008D CDr00r37         [ 4]  270 	call	_UART_RX
      000090 90 85            [ 2]  271 	popw	y
      000092 85               [ 2]  272 	popw	x
      000093 90 F7            [ 1]  273 	ld	(y), a
                                    274 ;	main.c: 64: if(buffer[i] == '\r\n' )
      000095 A1 0D            [ 1]  275 	cp	a, #0x0d
      000097 26 03            [ 1]  276 	jrne	00102$
                                    277 ;	main.c: 66: return 1;
      000099 5F               [ 1]  278 	clrw	x
      00009A 5C               [ 1]  279 	incw	x
      00009B 81               [ 4]  280 	ret
                                    281 ;	main.c: 67: break;
      00009C                        282 00102$:
                                    283 ;	main.c: 69: i++;
      00009C 5C               [ 1]  284 	incw	x
      00009D 20 D9            [ 2]  285 	jra	00105$
      00009F                        286 00107$:
                                    287 ;	main.c: 72: return 0;
      00009F 5F               [ 1]  288 	clrw	x
                                    289 ;	main.c: 73: }
      0000A0 81               [ 4]  290 	ret
                                    291 ;	main.c: 82: void convert_int_to_chars(uint8_t num, char* rx_int_chars) {
                                    292 ;	-----------------------------------------
                                    293 ;	 function convert_int_to_chars
                                    294 ;	-----------------------------------------
      0000A1                        295 _convert_int_to_chars:
      0000A1 52 0D            [ 2]  296 	sub	sp, #13
      0000A3 6B 0D            [ 1]  297 	ld	(0x0d, sp), a
      0000A5 1F 0B            [ 2]  298 	ldw	(0x0b, sp), x
                                    299 ;	main.c: 85: rx_int_chars[0] = num / 100 + '0';
      0000A7 7B 0D            [ 1]  300 	ld	a, (0x0d, sp)
      0000A9 6B 02            [ 1]  301 	ld	(0x02, sp), a
      0000AB 0F 01            [ 1]  302 	clr	(0x01, sp)
                                    303 ;	main.c: 86: rx_int_chars[1] = num / 10 % 10 + '0';
      0000AD 1E 0B            [ 2]  304 	ldw	x, (0x0b, sp)
      0000AF 5C               [ 1]  305 	incw	x
      0000B0 1F 03            [ 2]  306 	ldw	(0x03, sp), x
                                    307 ;	main.c: 87: rx_int_chars[2] = num % 10 + '0';
      0000B2 1E 0B            [ 2]  308 	ldw	x, (0x0b, sp)
      0000B4 5C               [ 1]  309 	incw	x
      0000B5 5C               [ 1]  310 	incw	x
      0000B6 1F 05            [ 2]  311 	ldw	(0x05, sp), x
                                    312 ;	main.c: 86: rx_int_chars[1] = num / 10 % 10 + '0';
      0000B8 4B 0A            [ 1]  313 	push	#0x0a
      0000BA 4B 00            [ 1]  314 	push	#0x00
      0000BC 1E 03            [ 2]  315 	ldw	x, (0x03, sp)
                                    316 ;	main.c: 87: rx_int_chars[2] = num % 10 + '0';
      0000BE CDr00r00         [ 4]  317 	call	__divsint
      0000C1 1F 07            [ 2]  318 	ldw	(0x07, sp), x
      0000C3 4B 0A            [ 1]  319 	push	#0x0a
      0000C5 4B 00            [ 1]  320 	push	#0x00
      0000C7 1E 03            [ 2]  321 	ldw	x, (0x03, sp)
      0000C9 CDr00r00         [ 4]  322 	call	__modsint
      0000CC 9F               [ 1]  323 	ld	a, xl
      0000CD AB 30            [ 1]  324 	add	a, #0x30
      0000CF 6B 09            [ 1]  325 	ld	(0x09, sp), a
                                    326 ;	main.c: 83: if (num > 99) {
      0000D1 7B 0D            [ 1]  327 	ld	a, (0x0d, sp)
      0000D3 A1 63            [ 1]  328 	cp	a, #0x63
      0000D5 23 29            [ 2]  329 	jrule	00105$
                                    330 ;	main.c: 85: rx_int_chars[0] = num / 100 + '0';
      0000D7 4B 64            [ 1]  331 	push	#0x64
      0000D9 4B 00            [ 1]  332 	push	#0x00
      0000DB 1E 03            [ 2]  333 	ldw	x, (0x03, sp)
      0000DD CDr00r00         [ 4]  334 	call	__divsint
      0000E0 9F               [ 1]  335 	ld	a, xl
      0000E1 AB 30            [ 1]  336 	add	a, #0x30
      0000E3 1E 0B            [ 2]  337 	ldw	x, (0x0b, sp)
      0000E5 F7               [ 1]  338 	ld	(x), a
                                    339 ;	main.c: 86: rx_int_chars[1] = num / 10 % 10 + '0';
      0000E6 4B 0A            [ 1]  340 	push	#0x0a
      0000E8 4B 00            [ 1]  341 	push	#0x00
      0000EA 1E 09            [ 2]  342 	ldw	x, (0x09, sp)
      0000EC CDr00r00         [ 4]  343 	call	__modsint
      0000EF 9F               [ 1]  344 	ld	a, xl
      0000F0 AB 30            [ 1]  345 	add	a, #0x30
      0000F2 1E 03            [ 2]  346 	ldw	x, (0x03, sp)
      0000F4 F7               [ 1]  347 	ld	(x), a
                                    348 ;	main.c: 87: rx_int_chars[2] = num % 10 + '0';
      0000F5 1E 05            [ 2]  349 	ldw	x, (0x05, sp)
      0000F7 7B 09            [ 1]  350 	ld	a, (0x09, sp)
      0000F9 F7               [ 1]  351 	ld	(x), a
                                    352 ;	main.c: 88: rx_int_chars[3] ='\0';
      0000FA 1E 0B            [ 2]  353 	ldw	x, (0x0b, sp)
      0000FC 6F 03            [ 1]  354 	clr	(0x0003, x)
      0000FE 20 23            [ 2]  355 	jra	00107$
      000100                        356 00105$:
                                    357 ;	main.c: 90: } else if (num > 9) {
      000100 7B 0D            [ 1]  358 	ld	a, (0x0d, sp)
      000102 A1 09            [ 1]  359 	cp	a, #0x09
      000104 23 13            [ 2]  360 	jrule	00102$
                                    361 ;	main.c: 92: rx_int_chars[0] = num / 10 + '0';
      000106 7B 08            [ 1]  362 	ld	a, (0x08, sp)
      000108 6B 0A            [ 1]  363 	ld	(0x0a, sp), a
      00010A AB 30            [ 1]  364 	add	a, #0x30
      00010C 1E 0B            [ 2]  365 	ldw	x, (0x0b, sp)
      00010E F7               [ 1]  366 	ld	(x), a
                                    367 ;	main.c: 93: rx_int_chars[1] = num % 10 + '0';
      00010F 1E 03            [ 2]  368 	ldw	x, (0x03, sp)
      000111 7B 09            [ 1]  369 	ld	a, (0x09, sp)
      000113 F7               [ 1]  370 	ld	(x), a
                                    371 ;	main.c: 94: rx_int_chars[2] ='\0'; // Заканчиваем строку символом конца строки
      000114 1E 05            [ 2]  372 	ldw	x, (0x05, sp)
      000116 7F               [ 1]  373 	clr	(x)
      000117 20 0A            [ 2]  374 	jra	00107$
      000119                        375 00102$:
                                    376 ;	main.c: 97: rx_int_chars[0] = num + '0';
      000119 7B 0D            [ 1]  377 	ld	a, (0x0d, sp)
      00011B AB 30            [ 1]  378 	add	a, #0x30
      00011D 1E 0B            [ 2]  379 	ldw	x, (0x0b, sp)
      00011F F7               [ 1]  380 	ld	(x), a
                                    381 ;	main.c: 98: rx_int_chars[1] ='\0';
      000120 1E 03            [ 2]  382 	ldw	x, (0x03, sp)
      000122 7F               [ 1]  383 	clr	(x)
      000123                        384 00107$:
                                    385 ;	main.c: 100: }
      000123 5B 0D            [ 2]  386 	addw	sp, #13
      000125 81               [ 4]  387 	ret
                                    388 ;	main.c: 102: int convert_chars_to_int(char* rx_chars_int) {
                                    389 ;	-----------------------------------------
                                    390 ;	 function convert_chars_to_int
                                    391 ;	-----------------------------------------
      000126                        392 _convert_chars_to_int:
      000126 52 03            [ 2]  393 	sub	sp, #3
      000128 1F 02            [ 2]  394 	ldw	(0x02, sp), x
                                    395 ;	main.c: 103: uint8_t result = 0;
      00012A 5F               [ 1]  396 	clrw	x
                                    397 ;	main.c: 105: for (int i = 0; i < 3; i++) {
      00012B 90 5F            [ 1]  398 	clrw	y
      00012D                        399 00103$:
      00012D 90 A3 00 03      [ 2]  400 	cpw	y, #0x0003
      000131 2E 15            [ 1]  401 	jrsge	00101$
                                    402 ;	main.c: 106: result = (result * 10) + (rx_chars_int[i] - '0');
      000133 A6 0A            [ 1]  403 	ld	a, #0x0a
      000135 42               [ 4]  404 	mul	x, a
      000136 41               [ 1]  405 	exg	a, xl
      000137 6B 01            [ 1]  406 	ld	(0x01, sp), a
      000139 41               [ 1]  407 	exg	a, xl
      00013A 93               [ 1]  408 	ldw	x, y
      00013B 72 FB 02         [ 2]  409 	addw	x, (0x02, sp)
      00013E F6               [ 1]  410 	ld	a, (x)
      00013F A0 30            [ 1]  411 	sub	a, #0x30
      000141 1B 01            [ 1]  412 	add	a, (0x01, sp)
      000143 97               [ 1]  413 	ld	xl, a
                                    414 ;	main.c: 105: for (int i = 0; i < 3; i++) {
      000144 90 5C            [ 1]  415 	incw	y
      000146 20 E5            [ 2]  416 	jra	00103$
      000148                        417 00101$:
                                    418 ;	main.c: 109: return result;
      000148 4F               [ 1]  419 	clr	a
      000149 95               [ 1]  420 	ld	xh, a
                                    421 ;	main.c: 110: }
      00014A 5B 03            [ 2]  422 	addw	sp, #3
      00014C 81               [ 4]  423 	ret
                                    424 ;	main.c: 113: void convert_int_to_binary(int num, char* rx_binary_chars) {
                                    425 ;	-----------------------------------------
                                    426 ;	 function convert_int_to_binary
                                    427 ;	-----------------------------------------
      00014D                        428 _convert_int_to_binary:
      00014D 52 04            [ 2]  429 	sub	sp, #4
      00014F 1F 01            [ 2]  430 	ldw	(0x01, sp), x
                                    431 ;	main.c: 115: for(int i = 7; i >= 0; i--) {
      000151 AE 00 07         [ 2]  432 	ldw	x, #0x0007
      000154 1F 03            [ 2]  433 	ldw	(0x03, sp), x
      000156                        434 00103$:
      000156 0D 03            [ 1]  435 	tnz	(0x03, sp)
      000158 2B 22            [ 1]  436 	jrmi	00101$
                                    437 ;	main.c: 117: rx_binary_chars[7 - i] = ((num >> i) & 1) + '0';
      00015A AE 00 07         [ 2]  438 	ldw	x, #0x0007
      00015D 72 F0 03         [ 2]  439 	subw	x, (0x03, sp)
      000160 72 FB 07         [ 2]  440 	addw	x, (0x07, sp)
      000163 16 01            [ 2]  441 	ldw	y, (0x01, sp)
      000165 7B 04            [ 1]  442 	ld	a, (0x04, sp)
      000167 27 05            [ 1]  443 	jreq	00120$
      000169                        444 00119$:
      000169 90 57            [ 2]  445 	sraw	y
      00016B 4A               [ 1]  446 	dec	a
      00016C 26 FB            [ 1]  447 	jrne	00119$
      00016E                        448 00120$:
      00016E 90 9F            [ 1]  449 	ld	a, yl
      000170 A4 01            [ 1]  450 	and	a, #0x01
      000172 AB 30            [ 1]  451 	add	a, #0x30
      000174 F7               [ 1]  452 	ld	(x), a
                                    453 ;	main.c: 115: for(int i = 7; i >= 0; i--) {
      000175 1E 03            [ 2]  454 	ldw	x, (0x03, sp)
      000177 5A               [ 2]  455 	decw	x
      000178 1F 03            [ 2]  456 	ldw	(0x03, sp), x
      00017A 20 DA            [ 2]  457 	jra	00103$
      00017C                        458 00101$:
                                    459 ;	main.c: 119: rx_binary_chars[8] = '\0'; // Добавляем символ конца строки
      00017C 1E 07            [ 2]  460 	ldw	x, (0x07, sp)
      00017E 6F 08            [ 1]  461 	clr	(0x0008, x)
                                    462 ;	main.c: 120: }
      000180 1E 05            [ 2]  463 	ldw	x, (5, sp)
      000182 5B 08            [ 2]  464 	addw	sp, #8
      000184 FC               [ 2]  465 	jp	(x)
                                    466 ;	main.c: 129: void get_addr_from_buff(void)
                                    467 ;	-----------------------------------------
                                    468 ;	 function get_addr_from_buff
                                    469 ;	-----------------------------------------
      000185                        470 _get_addr_from_buff:
      000185 52 02            [ 2]  471 	sub	sp, #2
                                    472 ;	main.c: 133: while(1)
      000187 A6 04            [ 1]  473 	ld	a, #0x04
      000189 6B 01            [ 1]  474 	ld	(0x01, sp), a
      00018B 0F 02            [ 1]  475 	clr	(0x02, sp)
      00018D                        476 00105$:
                                    477 ;	main.c: 135: if(buffer[i] == 32 || buffer[i] == 10)
      00018D 5F               [ 1]  478 	clrw	x
      00018E 7B 01            [ 1]  479 	ld	a, (0x01, sp)
      000190 97               [ 1]  480 	ld	xl, a
      000191 D6u00u00         [ 1]  481 	ld	a, (_buffer+0, x)
      000194 A1 20            [ 1]  482 	cp	a, #0x20
      000196 27 04            [ 1]  483 	jreq	00101$
      000198 A1 0A            [ 1]  484 	cp	a, #0x0a
      00019A 26 08            [ 1]  485 	jrne	00102$
      00019C                        486 00101$:
                                    487 ;	main.c: 137: p_size = i+1;
      00019C 7B 01            [ 1]  488 	ld	a, (0x01, sp)
      00019E 4C               [ 1]  489 	inc	a
      00019F C7u01u04         [ 1]  490 	ld	_p_size+0, a
                                    491 ;	main.c: 138: break;
      0001A2 20 06            [ 2]  492 	jra	00106$
      0001A4                        493 00102$:
                                    494 ;	main.c: 140: i++;
      0001A4 0C 01            [ 1]  495 	inc	(0x01, sp)
                                    496 ;	main.c: 141: counter++;
      0001A6 0C 02            [ 1]  497 	inc	(0x02, sp)
      0001A8 20 E3            [ 2]  498 	jra	00105$
      0001AA                        499 00106$:
                                    500 ;	main.c: 143: memcpy(a, &buffer[3], counter);
      0001AA 5F               [ 1]  501 	clrw	x
      0001AB 7B 02            [ 1]  502 	ld	a, (0x02, sp)
      0001AD 97               [ 1]  503 	ld	xl, a
      0001AE 89               [ 2]  504 	pushw	x
      0001AF 4Br03            [ 1]  505 	push	#<(_buffer+3)
      0001B1 4Bs00            [ 1]  506 	push	#((_buffer+3) >> 8)
      0001B3 AEr01r00         [ 2]  507 	ldw	x, #(_a+0)
      0001B6 CDr00r00         [ 4]  508 	call	___memcpy
                                    509 ;	main.c: 144: d_addr = convert_chars_to_int(a);
      0001B9 AEr01r00         [ 2]  510 	ldw	x, #(_a+0)
      0001BC CDr01r26         [ 4]  511 	call	_convert_chars_to_int
      0001BF 9F               [ 1]  512 	ld	a, xl
      0001C0 C7u01u03         [ 1]  513 	ld	_d_addr+0, a
                                    514 ;	main.c: 145: }
      0001C3 5B 02            [ 2]  515 	addw	sp, #2
      0001C5 81               [ 4]  516 	ret
                                    517 ;	main.c: 147: void get_size_from_buff(void)
                                    518 ;	-----------------------------------------
                                    519 ;	 function get_size_from_buff
                                    520 ;	-----------------------------------------
      0001C6                        521 _get_size_from_buff:
      0001C6 88               [ 1]  522 	push	a
                                    523 ;	main.c: 150: uint8_t i = p_size;
      0001C7 C6u01u04         [ 1]  524 	ld	a, _p_size+0
      0001CA 6B 01            [ 1]  525 	ld	(0x01, sp), a
                                    526 ;	main.c: 151: while(1)
      0001CC 90 5F            [ 1]  527 	clrw	y
      0001CE                        528 00105$:
                                    529 ;	main.c: 153: if(buffer[i] == 32 || buffer[i] == 10)
      0001CE 5F               [ 1]  530 	clrw	x
      0001CF 7B 01            [ 1]  531 	ld	a, (0x01, sp)
      0001D1 97               [ 1]  532 	ld	xl, a
      0001D2 D6u00u00         [ 1]  533 	ld	a, (_buffer+0, x)
      0001D5 A1 20            [ 1]  534 	cp	a, #0x20
      0001D7 27 04            [ 1]  535 	jreq	00101$
      0001D9 A1 0A            [ 1]  536 	cp	a, #0x0a
      0001DB 26 08            [ 1]  537 	jrne	00102$
      0001DD                        538 00101$:
                                    539 ;	main.c: 155: p_bytes = i+1;
      0001DD 7B 01            [ 1]  540 	ld	a, (0x01, sp)
      0001DF 4C               [ 1]  541 	inc	a
      0001E0 C7u01u06         [ 1]  542 	ld	_p_bytes+0, a
                                    543 ;	main.c: 156: break;
      0001E3 20 06            [ 2]  544 	jra	00106$
      0001E5                        545 00102$:
                                    546 ;	main.c: 158: i++;
      0001E5 0C 01            [ 1]  547 	inc	(0x01, sp)
                                    548 ;	main.c: 159: counter++;
      0001E7 90 5C            [ 1]  549 	incw	y
      0001E9 20 E3            [ 2]  550 	jra	00105$
      0001EB                        551 00106$:
                                    552 ;	main.c: 161: memcpy(a, &buffer[p_size], counter);
      0001EB 4F               [ 1]  553 	clr	a
      0001EC 90 95            [ 1]  554 	ld	yh, a
      0001EE 5F               [ 1]  555 	clrw	x
      0001EF C6u01u04         [ 1]  556 	ld	a, _p_size+0
      0001F2 97               [ 1]  557 	ld	xl, a
      0001F3 1Cr00r00         [ 2]  558 	addw	x, #(_buffer+0)
      0001F6 90 89            [ 2]  559 	pushw	y
      0001F8 89               [ 2]  560 	pushw	x
      0001F9 AEr01r00         [ 2]  561 	ldw	x, #(_a+0)
      0001FC CDr00r00         [ 4]  562 	call	___memcpy
                                    563 ;	main.c: 162: d_size = convert_chars_to_int(a);
      0001FF AEr01r00         [ 2]  564 	ldw	x, #(_a+0)
      000202 CDr01r26         [ 4]  565 	call	_convert_chars_to_int
      000205 9F               [ 1]  566 	ld	a, xl
      000206 C7u01u05         [ 1]  567 	ld	_d_size+0, a
                                    568 ;	main.c: 163: }
      000209 84               [ 1]  569 	pop	a
      00020A 81               [ 4]  570 	ret
                                    571 ;	main.c: 164: void char_buffer_to_int(void)
                                    572 ;	-----------------------------------------
                                    573 ;	 function char_buffer_to_int
                                    574 ;	-----------------------------------------
      00020B                        575 _char_buffer_to_int:
      00020B 52 0A            [ 2]  576 	sub	sp, #10
                                    577 ;	main.c: 166: uint8_t counter = d_size;
      00020D C6u01u05         [ 1]  578 	ld	a, _d_size+0
      000210 6B 07            [ 1]  579 	ld	(0x07, sp), a
                                    580 ;	main.c: 167: uint8_t i = p_bytes;
      000212 C6u01u06         [ 1]  581 	ld	a, _p_bytes+0
      000215 6B 08            [ 1]  582 	ld	(0x08, sp), a
                                    583 ;	main.c: 169: while(counter > 0)
      000217 0F 09            [ 1]  584 	clr	(0x09, sp)
      000219                        585 00111$:
      000219 0D 07            [ 1]  586 	tnz	(0x07, sp)
      00021B 27 6F            [ 1]  587 	jreq	00114$
                                    588 ;	main.c: 171: if(buffer[i] == 32)
      00021D 5F               [ 1]  589 	clrw	x
      00021E 7B 08            [ 1]  590 	ld	a, (0x08, sp)
      000220 97               [ 1]  591 	ld	xl, a
      000221 1Cr00r00         [ 2]  592 	addw	x, #(_buffer+0)
      000224 1F 05            [ 2]  593 	ldw	(0x05, sp), x
      000226 F6               [ 1]  594 	ld	a, (x)
      000227 A1 20            [ 1]  595 	cp	a, #0x20
      000229 26 53            [ 1]  596 	jrne	00109$
                                    597 ;	main.c: 174: while(1)
      00022B 0F 0A            [ 1]  598 	clr	(0x0a, sp)
      00022D                        599 00104$:
                                    600 ;	main.c: 176: if(buffer[i+1] == 32)
      00022D 7B 08            [ 1]  601 	ld	a, (0x08, sp)
      00022F 5F               [ 1]  602 	clrw	x
      000230 97               [ 1]  603 	ld	xl, a
      000231 5C               [ 1]  604 	incw	x
      000232 D6u00u00         [ 1]  605 	ld	a, (_buffer+0, x)
      000235 A1 20            [ 1]  606 	cp	a, #0x20
      000237 27 04            [ 1]  607 	jreq	00105$
                                    608 ;	main.c: 178: buf_counter++;
      000239 0C 0A            [ 1]  609 	inc	(0x0a, sp)
      00023B 20 F0            [ 2]  610 	jra	00104$
      00023D                        611 00105$:
                                    612 ;	main.c: 180: char ar[4]={0};
      00023D 0F 01            [ 1]  613 	clr	(0x01, sp)
      00023F 0F 02            [ 1]  614 	clr	(0x02, sp)
      000241 0F 03            [ 1]  615 	clr	(0x03, sp)
      000243 0F 04            [ 1]  616 	clr	(0x04, sp)
                                    617 ;	main.c: 181: memcpy(a, &buffer[i], buf_counter);
      000245 5F               [ 1]  618 	clrw	x
      000246 7B 0A            [ 1]  619 	ld	a, (0x0a, sp)
      000248 97               [ 1]  620 	ld	xl, a
      000249 16 05            [ 2]  621 	ldw	y, (0x05, sp)
      00024B 89               [ 2]  622 	pushw	x
      00024C 90 89            [ 2]  623 	pushw	y
      00024E AEr01r00         [ 2]  624 	ldw	x, #(_a+0)
      000251 CDr00r00         [ 4]  625 	call	___memcpy
                                    626 ;	main.c: 182: data_buf[buf_i] = convert_chars_to_int(a);
      000254 5F               [ 1]  627 	clrw	x
      000255 7B 09            [ 1]  628 	ld	a, (0x09, sp)
      000257 97               [ 1]  629 	ld	xl, a
      000258 1Cr01r07         [ 2]  630 	addw	x, #(_data_buf+0)
      00025B 1F 05            [ 2]  631 	ldw	(0x05, sp), x
      00025D AEr01r00         [ 2]  632 	ldw	x, #(_a+0)
      000260 CDr01r26         [ 4]  633 	call	_convert_chars_to_int
      000263 9F               [ 1]  634 	ld	a, xl
      000264 1E 05            [ 2]  635 	ldw	x, (0x05, sp)
      000266 F7               [ 1]  636 	ld	(x), a
                                    637 ;	main.c: 183: counter--;
      000267 0A 07            [ 1]  638 	dec	(0x07, sp)
                                    639 ;	main.c: 184: buf_i++;
      000269 0C 09            [ 1]  640 	inc	(0x09, sp)
                                    641 ;	main.c: 185: convert_int_to_chars(data_buf[buf_i], ar);
      00026B 5F               [ 1]  642 	clrw	x
      00026C 7B 09            [ 1]  643 	ld	a, (0x09, sp)
      00026E 97               [ 1]  644 	ld	xl, a
      00026F D6u01u07         [ 1]  645 	ld	a, (_data_buf+0, x)
      000272 96               [ 1]  646 	ldw	x, sp
      000273 5C               [ 1]  647 	incw	x
      000274 CDr00rA1         [ 4]  648 	call	_convert_int_to_chars
                                    649 ;	main.c: 186: uart_write(ar);
      000277 96               [ 1]  650 	ldw	x, sp
      000278 5C               [ 1]  651 	incw	x
      000279 CDr00r40         [ 4]  652 	call	_uart_write
      00027C 20 04            [ 2]  653 	jra	00110$
      00027E                        654 00109$:
                                    655 ;	main.c: 188: else if(buffer[i] == 10)
      00027E A1 0A            [ 1]  656 	cp	a, #0x0a
      000280 27 0A            [ 1]  657 	jreq	00114$
                                    658 ;	main.c: 190: break;
      000282                        659 00110$:
                                    660 ;	main.c: 192: i++;
      000282 0C 08            [ 1]  661 	inc	(0x08, sp)
                                    662 ;	main.c: 193: uart_write("while");
      000284 AEr00r00         [ 2]  663 	ldw	x, #(___str_0+0)
      000287 CDr00r40         [ 4]  664 	call	_uart_write
      00028A 20 8D            [ 2]  665 	jra	00111$
      00028C                        666 00114$:
                                    667 ;	main.c: 196: }
      00028C 5B 0A            [ 2]  668 	addw	sp, #10
      00028E 81               [ 4]  669 	ret
                                    670 ;	main.c: 204: void status_check(void){
                                    671 ;	-----------------------------------------
                                    672 ;	 function status_check
                                    673 ;	-----------------------------------------
      00028F                        674 _status_check:
      00028F 52 09            [ 2]  675 	sub	sp, #9
                                    676 ;	main.c: 205: char rx_binary_chars[9]={0};
      000291 0F 01            [ 1]  677 	clr	(0x01, sp)
      000293 0F 02            [ 1]  678 	clr	(0x02, sp)
      000295 0F 03            [ 1]  679 	clr	(0x03, sp)
      000297 0F 04            [ 1]  680 	clr	(0x04, sp)
      000299 0F 05            [ 1]  681 	clr	(0x05, sp)
      00029B 0F 06            [ 1]  682 	clr	(0x06, sp)
      00029D 0F 07            [ 1]  683 	clr	(0x07, sp)
      00029F 0F 08            [ 1]  684 	clr	(0x08, sp)
      0002A1 0F 09            [ 1]  685 	clr	(0x09, sp)
                                    686 ;	main.c: 206: uart_write("\nI2C_REGS >.<\n");
      0002A3 AEr00r06         [ 2]  687 	ldw	x, #(___str_1+0)
      0002A6 CDr00r40         [ 4]  688 	call	_uart_write
                                    689 ;	main.c: 207: convert_int_to_binary(I2C_SR1, rx_binary_chars);
      0002A9 96               [ 1]  690 	ldw	x, sp
      0002AA 5C               [ 1]  691 	incw	x
      0002AB 51               [ 1]  692 	exgw	x, y
      0002AC C6 52 17         [ 1]  693 	ld	a, 0x5217
      0002AF 5F               [ 1]  694 	clrw	x
      0002B0 90 89            [ 2]  695 	pushw	y
      0002B2 97               [ 1]  696 	ld	xl, a
      0002B3 CDr01r4D         [ 4]  697 	call	_convert_int_to_binary
                                    698 ;	main.c: 208: uart_write("\nSR1 -> ");
      0002B6 AEr00r15         [ 2]  699 	ldw	x, #(___str_2+0)
      0002B9 CDr00r40         [ 4]  700 	call	_uart_write
                                    701 ;	main.c: 209: uart_write(rx_binary_chars);
      0002BC 96               [ 1]  702 	ldw	x, sp
      0002BD 5C               [ 1]  703 	incw	x
      0002BE CDr00r40         [ 4]  704 	call	_uart_write
                                    705 ;	main.c: 210: uart_write(" <-\n");
      0002C1 AEr00r1E         [ 2]  706 	ldw	x, #(___str_3+0)
      0002C4 CDr00r40         [ 4]  707 	call	_uart_write
                                    708 ;	main.c: 211: convert_int_to_binary(I2C_SR2, rx_binary_chars);
      0002C7 96               [ 1]  709 	ldw	x, sp
      0002C8 5C               [ 1]  710 	incw	x
      0002C9 51               [ 1]  711 	exgw	x, y
      0002CA C6 52 18         [ 1]  712 	ld	a, 0x5218
      0002CD 5F               [ 1]  713 	clrw	x
      0002CE 90 89            [ 2]  714 	pushw	y
      0002D0 97               [ 1]  715 	ld	xl, a
      0002D1 CDr01r4D         [ 4]  716 	call	_convert_int_to_binary
                                    717 ;	main.c: 212: uart_write("SR2 -> ");
      0002D4 AEr00r23         [ 2]  718 	ldw	x, #(___str_4+0)
      0002D7 CDr00r40         [ 4]  719 	call	_uart_write
                                    720 ;	main.c: 213: uart_write(rx_binary_chars);
      0002DA 96               [ 1]  721 	ldw	x, sp
      0002DB 5C               [ 1]  722 	incw	x
      0002DC CDr00r40         [ 4]  723 	call	_uart_write
                                    724 ;	main.c: 214: uart_write(" <-\n");
      0002DF AEr00r1E         [ 2]  725 	ldw	x, #(___str_3+0)
      0002E2 CDr00r40         [ 4]  726 	call	_uart_write
                                    727 ;	main.c: 215: convert_int_to_binary(I2C_SR3, rx_binary_chars);
      0002E5 96               [ 1]  728 	ldw	x, sp
      0002E6 5C               [ 1]  729 	incw	x
      0002E7 51               [ 1]  730 	exgw	x, y
      0002E8 C6 52 19         [ 1]  731 	ld	a, 0x5219
      0002EB 5F               [ 1]  732 	clrw	x
      0002EC 90 89            [ 2]  733 	pushw	y
      0002EE 97               [ 1]  734 	ld	xl, a
      0002EF CDr01r4D         [ 4]  735 	call	_convert_int_to_binary
                                    736 ;	main.c: 216: uart_write("SR3 -> ");
      0002F2 AEr00r2B         [ 2]  737 	ldw	x, #(___str_5+0)
      0002F5 CDr00r40         [ 4]  738 	call	_uart_write
                                    739 ;	main.c: 217: uart_write(rx_binary_chars);
      0002F8 96               [ 1]  740 	ldw	x, sp
      0002F9 5C               [ 1]  741 	incw	x
      0002FA CDr00r40         [ 4]  742 	call	_uart_write
                                    743 ;	main.c: 218: uart_write(" <-\n");
      0002FD AEr00r1E         [ 2]  744 	ldw	x, #(___str_3+0)
      000300 CDr00r40         [ 4]  745 	call	_uart_write
                                    746 ;	main.c: 219: convert_int_to_binary(I2C_CR1, rx_binary_chars);
      000303 96               [ 1]  747 	ldw	x, sp
      000304 5C               [ 1]  748 	incw	x
      000305 51               [ 1]  749 	exgw	x, y
      000306 C6 52 10         [ 1]  750 	ld	a, 0x5210
      000309 5F               [ 1]  751 	clrw	x
      00030A 90 89            [ 2]  752 	pushw	y
      00030C 97               [ 1]  753 	ld	xl, a
      00030D CDr01r4D         [ 4]  754 	call	_convert_int_to_binary
                                    755 ;	main.c: 220: uart_write("CR1 -> ");
      000310 AEr00r33         [ 2]  756 	ldw	x, #(___str_6+0)
      000313 CDr00r40         [ 4]  757 	call	_uart_write
                                    758 ;	main.c: 221: uart_write(rx_binary_chars);
      000316 96               [ 1]  759 	ldw	x, sp
      000317 5C               [ 1]  760 	incw	x
      000318 CDr00r40         [ 4]  761 	call	_uart_write
                                    762 ;	main.c: 222: uart_write(" <-\n");
      00031B AEr00r1E         [ 2]  763 	ldw	x, #(___str_3+0)
      00031E CDr00r40         [ 4]  764 	call	_uart_write
                                    765 ;	main.c: 223: convert_int_to_binary(I2C_CR2, rx_binary_chars);
      000321 96               [ 1]  766 	ldw	x, sp
      000322 5C               [ 1]  767 	incw	x
      000323 51               [ 1]  768 	exgw	x, y
      000324 C6 52 11         [ 1]  769 	ld	a, 0x5211
      000327 5F               [ 1]  770 	clrw	x
      000328 90 89            [ 2]  771 	pushw	y
      00032A 97               [ 1]  772 	ld	xl, a
      00032B CDr01r4D         [ 4]  773 	call	_convert_int_to_binary
                                    774 ;	main.c: 224: uart_write("CR2 -> ");
      00032E AEr00r3B         [ 2]  775 	ldw	x, #(___str_7+0)
      000331 CDr00r40         [ 4]  776 	call	_uart_write
                                    777 ;	main.c: 225: uart_write(rx_binary_chars);
      000334 96               [ 1]  778 	ldw	x, sp
      000335 5C               [ 1]  779 	incw	x
      000336 CDr00r40         [ 4]  780 	call	_uart_write
                                    781 ;	main.c: 226: uart_write(" <-\n");
      000339 AEr00r1E         [ 2]  782 	ldw	x, #(___str_3+0)
      00033C CDr00r40         [ 4]  783 	call	_uart_write
                                    784 ;	main.c: 227: convert_int_to_binary(I2C_DR, rx_binary_chars);
      00033F 96               [ 1]  785 	ldw	x, sp
      000340 5C               [ 1]  786 	incw	x
      000341 51               [ 1]  787 	exgw	x, y
      000342 C6 52 16         [ 1]  788 	ld	a, 0x5216
      000345 5F               [ 1]  789 	clrw	x
      000346 90 89            [ 2]  790 	pushw	y
      000348 97               [ 1]  791 	ld	xl, a
      000349 CDr01r4D         [ 4]  792 	call	_convert_int_to_binary
                                    793 ;	main.c: 228: uart_write("DR -> ");
      00034C AEr00r43         [ 2]  794 	ldw	x, #(___str_8+0)
      00034F CDr00r40         [ 4]  795 	call	_uart_write
                                    796 ;	main.c: 229: uart_write(rx_binary_chars);
      000352 96               [ 1]  797 	ldw	x, sp
      000353 5C               [ 1]  798 	incw	x
      000354 CDr00r40         [ 4]  799 	call	_uart_write
                                    800 ;	main.c: 230: uart_write(" <-\n");
      000357 AEr00r1E         [ 2]  801 	ldw	x, #(___str_3+0)
      00035A CDr00r40         [ 4]  802 	call	_uart_write
                                    803 ;	main.c: 231: uart_write("UART_REGS >.<\n");
      00035D AEr00r4A         [ 2]  804 	ldw	x, #(___str_9+0)
      000360 CDr00r40         [ 4]  805 	call	_uart_write
                                    806 ;	main.c: 232: convert_int_to_binary(UART1_SR, rx_binary_chars);
      000363 96               [ 1]  807 	ldw	x, sp
      000364 5C               [ 1]  808 	incw	x
      000365 51               [ 1]  809 	exgw	x, y
      000366 C6 52 30         [ 1]  810 	ld	a, 0x5230
      000369 5F               [ 1]  811 	clrw	x
      00036A 90 89            [ 2]  812 	pushw	y
      00036C 97               [ 1]  813 	ld	xl, a
      00036D CDr01r4D         [ 4]  814 	call	_convert_int_to_binary
                                    815 ;	main.c: 233: uart_write("\nSR -> ");
      000370 AEr00r59         [ 2]  816 	ldw	x, #(___str_10+0)
      000373 CDr00r40         [ 4]  817 	call	_uart_write
                                    818 ;	main.c: 234: uart_write(rx_binary_chars);
      000376 96               [ 1]  819 	ldw	x, sp
      000377 5C               [ 1]  820 	incw	x
      000378 CDr00r40         [ 4]  821 	call	_uart_write
                                    822 ;	main.c: 235: uart_write(" <-\n");
      00037B AEr00r1E         [ 2]  823 	ldw	x, #(___str_3+0)
      00037E CDr00r40         [ 4]  824 	call	_uart_write
                                    825 ;	main.c: 236: convert_int_to_binary(UART1_DR, rx_binary_chars);
      000381 96               [ 1]  826 	ldw	x, sp
      000382 5C               [ 1]  827 	incw	x
      000383 51               [ 1]  828 	exgw	x, y
      000384 C6 52 31         [ 1]  829 	ld	a, 0x5231
      000387 5F               [ 1]  830 	clrw	x
      000388 90 89            [ 2]  831 	pushw	y
      00038A 97               [ 1]  832 	ld	xl, a
      00038B CDr01r4D         [ 4]  833 	call	_convert_int_to_binary
                                    834 ;	main.c: 237: uart_write("DR -> ");
      00038E AEr00r43         [ 2]  835 	ldw	x, #(___str_8+0)
      000391 CDr00r40         [ 4]  836 	call	_uart_write
                                    837 ;	main.c: 238: uart_write(rx_binary_chars);
      000394 96               [ 1]  838 	ldw	x, sp
      000395 5C               [ 1]  839 	incw	x
      000396 CDr00r40         [ 4]  840 	call	_uart_write
                                    841 ;	main.c: 239: uart_write(" <-\n");
      000399 AEr00r1E         [ 2]  842 	ldw	x, #(___str_3+0)
      00039C CDr00r40         [ 4]  843 	call	_uart_write
                                    844 ;	main.c: 240: convert_int_to_binary(UART1_BRR1, rx_binary_chars);
      00039F 96               [ 1]  845 	ldw	x, sp
      0003A0 5C               [ 1]  846 	incw	x
      0003A1 51               [ 1]  847 	exgw	x, y
      0003A2 C6 52 32         [ 1]  848 	ld	a, 0x5232
      0003A5 5F               [ 1]  849 	clrw	x
      0003A6 90 89            [ 2]  850 	pushw	y
      0003A8 97               [ 1]  851 	ld	xl, a
      0003A9 CDr01r4D         [ 4]  852 	call	_convert_int_to_binary
                                    853 ;	main.c: 241: uart_write("BRR1 -> ");
      0003AC AEr00r61         [ 2]  854 	ldw	x, #(___str_11+0)
      0003AF CDr00r40         [ 4]  855 	call	_uart_write
                                    856 ;	main.c: 242: uart_write(rx_binary_chars);
      0003B2 96               [ 1]  857 	ldw	x, sp
      0003B3 5C               [ 1]  858 	incw	x
      0003B4 CDr00r40         [ 4]  859 	call	_uart_write
                                    860 ;	main.c: 243: uart_write(" <-\n");
      0003B7 AEr00r1E         [ 2]  861 	ldw	x, #(___str_3+0)
      0003BA CDr00r40         [ 4]  862 	call	_uart_write
                                    863 ;	main.c: 244: convert_int_to_binary(UART1_BRR2, rx_binary_chars);
      0003BD 96               [ 1]  864 	ldw	x, sp
      0003BE 5C               [ 1]  865 	incw	x
      0003BF 51               [ 1]  866 	exgw	x, y
      0003C0 C6 52 33         [ 1]  867 	ld	a, 0x5233
      0003C3 5F               [ 1]  868 	clrw	x
      0003C4 90 89            [ 2]  869 	pushw	y
      0003C6 97               [ 1]  870 	ld	xl, a
      0003C7 CDr01r4D         [ 4]  871 	call	_convert_int_to_binary
                                    872 ;	main.c: 245: uart_write("BRR2 -> ");
      0003CA AEr00r6A         [ 2]  873 	ldw	x, #(___str_12+0)
      0003CD CDr00r40         [ 4]  874 	call	_uart_write
                                    875 ;	main.c: 246: uart_write(rx_binary_chars);
      0003D0 96               [ 1]  876 	ldw	x, sp
      0003D1 5C               [ 1]  877 	incw	x
      0003D2 CDr00r40         [ 4]  878 	call	_uart_write
                                    879 ;	main.c: 247: uart_write(" <-\n");
      0003D5 AEr00r1E         [ 2]  880 	ldw	x, #(___str_3+0)
      0003D8 CDr00r40         [ 4]  881 	call	_uart_write
                                    882 ;	main.c: 248: convert_int_to_binary(UART1_CR1, rx_binary_chars);
      0003DB 96               [ 1]  883 	ldw	x, sp
      0003DC 5C               [ 1]  884 	incw	x
      0003DD 51               [ 1]  885 	exgw	x, y
      0003DE C6 52 34         [ 1]  886 	ld	a, 0x5234
      0003E1 5F               [ 1]  887 	clrw	x
      0003E2 90 89            [ 2]  888 	pushw	y
      0003E4 97               [ 1]  889 	ld	xl, a
      0003E5 CDr01r4D         [ 4]  890 	call	_convert_int_to_binary
                                    891 ;	main.c: 249: uart_write("CR1 -> ");
      0003E8 AEr00r33         [ 2]  892 	ldw	x, #(___str_6+0)
      0003EB CDr00r40         [ 4]  893 	call	_uart_write
                                    894 ;	main.c: 250: uart_write(rx_binary_chars);
      0003EE 96               [ 1]  895 	ldw	x, sp
      0003EF 5C               [ 1]  896 	incw	x
      0003F0 CDr00r40         [ 4]  897 	call	_uart_write
                                    898 ;	main.c: 251: uart_write(" <-\n");
      0003F3 AEr00r1E         [ 2]  899 	ldw	x, #(___str_3+0)
      0003F6 CDr00r40         [ 4]  900 	call	_uart_write
                                    901 ;	main.c: 252: convert_int_to_binary(UART1_CR2, rx_binary_chars);
      0003F9 96               [ 1]  902 	ldw	x, sp
      0003FA 5C               [ 1]  903 	incw	x
      0003FB 51               [ 1]  904 	exgw	x, y
      0003FC C6 52 35         [ 1]  905 	ld	a, 0x5235
      0003FF 5F               [ 1]  906 	clrw	x
      000400 90 89            [ 2]  907 	pushw	y
      000402 97               [ 1]  908 	ld	xl, a
      000403 CDr01r4D         [ 4]  909 	call	_convert_int_to_binary
                                    910 ;	main.c: 253: uart_write("CR2 -> ");
      000406 AEr00r3B         [ 2]  911 	ldw	x, #(___str_7+0)
      000409 CDr00r40         [ 4]  912 	call	_uart_write
                                    913 ;	main.c: 254: uart_write(rx_binary_chars);
      00040C 96               [ 1]  914 	ldw	x, sp
      00040D 5C               [ 1]  915 	incw	x
      00040E CDr00r40         [ 4]  916 	call	_uart_write
                                    917 ;	main.c: 255: uart_write(" <-\n");
      000411 AEr00r1E         [ 2]  918 	ldw	x, #(___str_3+0)
      000414 CDr00r40         [ 4]  919 	call	_uart_write
                                    920 ;	main.c: 256: convert_int_to_binary(UART1_CR3, rx_binary_chars);
      000417 96               [ 1]  921 	ldw	x, sp
      000418 5C               [ 1]  922 	incw	x
      000419 51               [ 1]  923 	exgw	x, y
      00041A C6 52 36         [ 1]  924 	ld	a, 0x5236
      00041D 5F               [ 1]  925 	clrw	x
      00041E 90 89            [ 2]  926 	pushw	y
      000420 97               [ 1]  927 	ld	xl, a
      000421 CDr01r4D         [ 4]  928 	call	_convert_int_to_binary
                                    929 ;	main.c: 257: uart_write("CR3 -> ");
      000424 AEr00r73         [ 2]  930 	ldw	x, #(___str_13+0)
      000427 CDr00r40         [ 4]  931 	call	_uart_write
                                    932 ;	main.c: 258: uart_write(rx_binary_chars);
      00042A 96               [ 1]  933 	ldw	x, sp
      00042B 5C               [ 1]  934 	incw	x
      00042C CDr00r40         [ 4]  935 	call	_uart_write
                                    936 ;	main.c: 259: uart_write(" <-\n");
      00042F AEr00r1E         [ 2]  937 	ldw	x, #(___str_3+0)
      000432 CDr00r40         [ 4]  938 	call	_uart_write
                                    939 ;	main.c: 260: convert_int_to_binary(UART1_CR4, rx_binary_chars);
      000435 96               [ 1]  940 	ldw	x, sp
      000436 5C               [ 1]  941 	incw	x
      000437 51               [ 1]  942 	exgw	x, y
      000438 C6 52 37         [ 1]  943 	ld	a, 0x5237
      00043B 5F               [ 1]  944 	clrw	x
      00043C 90 89            [ 2]  945 	pushw	y
      00043E 97               [ 1]  946 	ld	xl, a
      00043F CDr01r4D         [ 4]  947 	call	_convert_int_to_binary
                                    948 ;	main.c: 261: uart_write("CR4 -> ");
      000442 AEr00r7B         [ 2]  949 	ldw	x, #(___str_14+0)
      000445 CDr00r40         [ 4]  950 	call	_uart_write
                                    951 ;	main.c: 262: uart_write(rx_binary_chars);
      000448 96               [ 1]  952 	ldw	x, sp
      000449 5C               [ 1]  953 	incw	x
      00044A CDr00r40         [ 4]  954 	call	_uart_write
                                    955 ;	main.c: 263: uart_write(" <-\n");
      00044D AEr00r1E         [ 2]  956 	ldw	x, #(___str_3+0)
      000450 CDr00r40         [ 4]  957 	call	_uart_write
                                    958 ;	main.c: 264: convert_int_to_binary(UART1_CR5, rx_binary_chars);
      000453 96               [ 1]  959 	ldw	x, sp
      000454 5C               [ 1]  960 	incw	x
      000455 51               [ 1]  961 	exgw	x, y
      000456 C6 52 38         [ 1]  962 	ld	a, 0x5238
      000459 5F               [ 1]  963 	clrw	x
      00045A 90 89            [ 2]  964 	pushw	y
      00045C 97               [ 1]  965 	ld	xl, a
      00045D CDr01r4D         [ 4]  966 	call	_convert_int_to_binary
                                    967 ;	main.c: 265: uart_write("CR5 -> ");
      000460 AEr00r83         [ 2]  968 	ldw	x, #(___str_15+0)
      000463 CDr00r40         [ 4]  969 	call	_uart_write
                                    970 ;	main.c: 266: uart_write(rx_binary_chars);
      000466 96               [ 1]  971 	ldw	x, sp
      000467 5C               [ 1]  972 	incw	x
      000468 CDr00r40         [ 4]  973 	call	_uart_write
                                    974 ;	main.c: 267: uart_write(" <-\n");
      00046B AEr00r1E         [ 2]  975 	ldw	x, #(___str_3+0)
      00046E CDr00r40         [ 4]  976 	call	_uart_write
                                    977 ;	main.c: 268: convert_int_to_binary(UART1_GTR, rx_binary_chars);
      000471 96               [ 1]  978 	ldw	x, sp
      000472 5C               [ 1]  979 	incw	x
      000473 51               [ 1]  980 	exgw	x, y
      000474 C6 52 39         [ 1]  981 	ld	a, 0x5239
      000477 5F               [ 1]  982 	clrw	x
      000478 90 89            [ 2]  983 	pushw	y
      00047A 97               [ 1]  984 	ld	xl, a
      00047B CDr01r4D         [ 4]  985 	call	_convert_int_to_binary
                                    986 ;	main.c: 269: uart_write("GTR -> ");
      00047E AEr00r8B         [ 2]  987 	ldw	x, #(___str_16+0)
      000481 CDr00r40         [ 4]  988 	call	_uart_write
                                    989 ;	main.c: 270: uart_write(rx_binary_chars);
      000484 96               [ 1]  990 	ldw	x, sp
      000485 5C               [ 1]  991 	incw	x
      000486 CDr00r40         [ 4]  992 	call	_uart_write
                                    993 ;	main.c: 271: uart_write(" <-\n");
      000489 AEr00r1E         [ 2]  994 	ldw	x, #(___str_3+0)
      00048C CDr00r40         [ 4]  995 	call	_uart_write
                                    996 ;	main.c: 272: convert_int_to_binary(UART1_PSCR, rx_binary_chars);
      00048F 96               [ 1]  997 	ldw	x, sp
      000490 5C               [ 1]  998 	incw	x
      000491 51               [ 1]  999 	exgw	x, y
      000492 C6 52 3A         [ 1] 1000 	ld	a, 0x523a
      000495 5F               [ 1] 1001 	clrw	x
      000496 90 89            [ 2] 1002 	pushw	y
      000498 97               [ 1] 1003 	ld	xl, a
      000499 CDr01r4D         [ 4] 1004 	call	_convert_int_to_binary
                                   1005 ;	main.c: 273: uart_write("PSCR -> ");
      00049C AEr00r93         [ 2] 1006 	ldw	x, #(___str_17+0)
      00049F CDr00r40         [ 4] 1007 	call	_uart_write
                                   1008 ;	main.c: 274: uart_write(rx_binary_chars);
      0004A2 96               [ 1] 1009 	ldw	x, sp
      0004A3 5C               [ 1] 1010 	incw	x
      0004A4 CDr00r40         [ 4] 1011 	call	_uart_write
                                   1012 ;	main.c: 275: uart_write(" <-\n");
      0004A7 AEr00r1E         [ 2] 1013 	ldw	x, #(___str_3+0)
      0004AA CDr00r40         [ 4] 1014 	call	_uart_write
                                   1015 ;	main.c: 276: }
      0004AD 5B 09            [ 2] 1016 	addw	sp, #9
      0004AF 81               [ 4] 1017 	ret
                                   1018 ;	main.c: 278: void uart_init(void){
                                   1019 ;	-----------------------------------------
                                   1020 ;	 function uart_init
                                   1021 ;	-----------------------------------------
      0004B0                       1022 _uart_init:
                                   1023 ;	main.c: 279: CLK_CKDIVR = 0;
      0004B0 35 00 50 C6      [ 1] 1024 	mov	0x50c6+0, #0x00
                                   1025 ;	main.c: 282: UART1_CR2 |= UART_CR2_TEN; // Transmitter enable
      0004B4 72 16 52 35      [ 1] 1026 	bset	0x5235, #3
                                   1027 ;	main.c: 283: UART1_CR2 |= UART_CR2_REN; // Receiver enable
      0004B8 72 14 52 35      [ 1] 1028 	bset	0x5235, #2
                                   1029 ;	main.c: 284: UART1_CR3 &= ~(UART_CR3_STOP1 | UART_CR3_STOP2); // 1 stop bit
      0004BC C6 52 36         [ 1] 1030 	ld	a, 0x5236
      0004BF A4 CF            [ 1] 1031 	and	a, #0xcf
      0004C1 C7 52 36         [ 1] 1032 	ld	0x5236, a
                                   1033 ;	main.c: 286: UART1_BRR2 = 0x03; UART1_BRR1 = 0x68; // 0x0683 coded funky way (see ref manual)
      0004C4 35 03 52 33      [ 1] 1034 	mov	0x5233+0, #0x03
      0004C8 35 68 52 32      [ 1] 1035 	mov	0x5232+0, #0x68
                                   1036 ;	main.c: 287: }
      0004CC 81               [ 4] 1037 	ret
                                   1038 ;	main.c: 291: void i2c_init(void) {
                                   1039 ;	-----------------------------------------
                                   1040 ;	 function i2c_init
                                   1041 ;	-----------------------------------------
      0004CD                       1042 _i2c_init:
                                   1043 ;	main.c: 297: I2C_CR1 = I2C_CR1 & ~0x01;      // PE=0, disable I2C before setup
      0004CD 72 11 52 10      [ 1] 1044 	bres	0x5210, #0
                                   1045 ;	main.c: 298: I2C_FREQR= 16;                  // peripheral frequence =16MHz
      0004D1 35 10 52 12      [ 1] 1046 	mov	0x5212+0, #0x10
                                   1047 ;	main.c: 299: I2C_CCRH = 0;                   // =0
      0004D5 35 00 52 1C      [ 1] 1048 	mov	0x521c+0, #0x00
                                   1049 ;	main.c: 300: I2C_CCRL = 80;                  // 100kHz for I2C
      0004D9 35 50 52 1B      [ 1] 1050 	mov	0x521b+0, #0x50
                                   1051 ;	main.c: 301: I2C_CCRH = I2C_CCRH & ~0x80;    // set standart mode(100кHz)
      0004DD 72 1F 52 1C      [ 1] 1052 	bres	0x521c, #7
                                   1053 ;	main.c: 302: I2C_OARH = I2C_OARH & ~0x80;    // 7-bit address mode
      0004E1 72 1F 52 14      [ 1] 1054 	bres	0x5214, #7
                                   1055 ;	main.c: 303: I2C_OARH = I2C_OARH | 0x40;     // see reference manual
      0004E5 72 1C 52 14      [ 1] 1056 	bset	0x5214, #6
                                   1057 ;	main.c: 304: I2C_CR1 = I2C_CR1 | 0x01;       // PE=1, enable I2C
      0004E9 72 10 52 10      [ 1] 1058 	bset	0x5210, #0
                                   1059 ;	main.c: 305: }
      0004ED 81               [ 4] 1060 	ret
                                   1061 ;	main.c: 314: void i2c_start(void) {
                                   1062 ;	-----------------------------------------
                                   1063 ;	 function i2c_start
                                   1064 ;	-----------------------------------------
      0004EE                       1065 _i2c_start:
                                   1066 ;	main.c: 315: I2C_CR2 = I2C_CR2 | (1 << 0); // Отправляем стартовый сигнал
      0004EE 72 10 52 11      [ 1] 1067 	bset	0x5211, #0
                                   1068 ;	main.c: 316: while(!(I2C_SR1 & (1 << 0)));
      0004F2                       1069 00101$:
      0004F2 72 01 52 17 FB   [ 2] 1070 	btjf	0x5217, #0, 00101$
                                   1071 ;	main.c: 318: }
      0004F7 81               [ 4] 1072 	ret
                                   1073 ;	main.c: 320: void i2c_send_address(uint8_t address) {
                                   1074 ;	-----------------------------------------
                                   1075 ;	 function i2c_send_address
                                   1076 ;	-----------------------------------------
      0004F8                       1077 _i2c_send_address:
                                   1078 ;	main.c: 321: I2C_DR = address << 1; // Отправка адреса устройства с битом на запись
      0004F8 48               [ 1] 1079 	sll	a
      0004F9 C7 52 16         [ 1] 1080 	ld	0x5216, a
                                   1081 ;	main.c: 322: while (!(I2C_SR1 & (1 << 1)) && !(I2C_SR2 & (1 << 2)));
      0004FC                       1082 00102$:
      0004FC 72 03 52 17 01   [ 2] 1083 	btjf	0x5217, #1, 00117$
      000501 81               [ 4] 1084 	ret
      000502                       1085 00117$:
      000502 72 05 52 18 F5   [ 2] 1086 	btjf	0x5218, #2, 00102$
                                   1087 ;	main.c: 323: }
      000507 81               [ 4] 1088 	ret
                                   1089 ;	main.c: 325: void i2c_stop(void) {
                                   1090 ;	-----------------------------------------
                                   1091 ;	 function i2c_stop
                                   1092 ;	-----------------------------------------
      000508                       1093 _i2c_stop:
                                   1094 ;	main.c: 326: I2C_CR2 = I2C_CR2 | (1 << 1); // Отправка стопового сигнала
      000508 72 12 52 11      [ 1] 1095 	bset	0x5211, #1
                                   1096 ;	main.c: 328: }
      00050C 81               [ 4] 1097 	ret
                                   1098 ;	main.c: 329: void i2c_write(void){
                                   1099 ;	-----------------------------------------
                                   1100 ;	 function i2c_write
                                   1101 ;	-----------------------------------------
      00050D                       1102 _i2c_write:
      00050D 52 04            [ 2] 1103 	sub	sp, #4
                                   1104 ;	main.c: 330: I2C_DR = d_addr; // Отправка адреса устройства с битом на запись
      00050F 55u01u03 52 16   [ 1] 1105 	mov	0x5216+0, _d_addr+0
                                   1106 ;	main.c: 331: uart_write("flag1\r");
      000514 AEr00r9C         [ 2] 1107 	ldw	x, #(___str_18+0)
      000517 CDr00r40         [ 4] 1108 	call	_uart_write
                                   1109 ;	main.c: 332: while (!(I2C_SR1 & (1 << 1)) && !(I2C_SR2 & (1 << 2)))
      00051A                       1110 00102$:
      00051A 72 02 52 17 0D   [ 2] 1111 	btjt	0x5217, #1, 00104$
      00051F 72 04 52 18 08   [ 2] 1112 	btjt	0x5218, #2, 00104$
                                   1113 ;	main.c: 333: uart_write(".");
      000524 AEr00rA3         [ 2] 1114 	ldw	x, #(___str_19+0)
      000527 CDr00r40         [ 4] 1115 	call	_uart_write
      00052A 20 EE            [ 2] 1116 	jra	00102$
      00052C                       1117 00104$:
                                   1118 ;	main.c: 334: uart_write("flag2\r");
      00052C AEr00rA5         [ 2] 1119 	ldw	x, #(___str_20+0)
      00052F CDr00r40         [ 4] 1120 	call	_uart_write
                                   1121 ;	main.c: 335: for(int i = 0;i < d_size;i++)
      000532 5F               [ 1] 1122 	clrw	x
      000533 1F 03            [ 2] 1123 	ldw	(0x03, sp), x
      000535                       1124 00111$:
      000535 C6u01u05         [ 1] 1125 	ld	a, _d_size+0
      000538 6B 02            [ 1] 1126 	ld	(0x02, sp), a
      00053A 0F 01            [ 1] 1127 	clr	(0x01, sp)
      00053C 1E 03            [ 2] 1128 	ldw	x, (0x03, sp)
      00053E 13 01            [ 2] 1129 	cpw	x, (0x01, sp)
      000540 2E 2D            [ 1] 1130 	jrsge	00113$
                                   1131 ;	main.c: 337: uart_write("flag3\r");
      000542 AEr00rAC         [ 2] 1132 	ldw	x, #(___str_21+0)
      000545 CDr00r40         [ 4] 1133 	call	_uart_write
                                   1134 ;	main.c: 338: I2C_DR = data_buf[i];
      000548 1E 03            [ 2] 1135 	ldw	x, (0x03, sp)
      00054A D6u01u07         [ 1] 1136 	ld	a, (_data_buf+0, x)
      00054D C7 52 16         [ 1] 1137 	ld	0x5216, a
                                   1138 ;	main.c: 339: while (!(I2C_SR1 & (1 << 1)) && !(I2C_SR2 & (1 << 2)))
      000550                       1139 00106$:
      000550 72 02 52 17 0D   [ 2] 1140 	btjt	0x5217, #1, 00108$
      000555 72 04 52 18 08   [ 2] 1141 	btjt	0x5218, #2, 00108$
                                   1142 ;	main.c: 340: uart_write(".");
      00055A AEr00rA3         [ 2] 1143 	ldw	x, #(___str_19+0)
      00055D CDr00r40         [ 4] 1144 	call	_uart_write
      000560 20 EE            [ 2] 1145 	jra	00106$
      000562                       1146 00108$:
                                   1147 ;	main.c: 341: uart_write("flag4\r");
      000562 AEr00rB3         [ 2] 1148 	ldw	x, #(___str_22+0)
      000565 CDr00r40         [ 4] 1149 	call	_uart_write
                                   1150 ;	main.c: 335: for(int i = 0;i < d_size;i++)
      000568 1E 03            [ 2] 1151 	ldw	x, (0x03, sp)
      00056A 5C               [ 1] 1152 	incw	x
      00056B 1F 03            [ 2] 1153 	ldw	(0x03, sp), x
      00056D 20 C6            [ 2] 1154 	jra	00111$
      00056F                       1155 00113$:
                                   1156 ;	main.c: 343: }
      00056F 5B 04            [ 2] 1157 	addw	sp, #4
      000571 81               [ 4] 1158 	ret
                                   1159 ;	main.c: 345: void i2c_read(void){
                                   1160 ;	-----------------------------------------
                                   1161 ;	 function i2c_read
                                   1162 ;	-----------------------------------------
      000572                       1163 _i2c_read:
      000572 52 04            [ 2] 1164 	sub	sp, #4
                                   1165 ;	main.c: 346: I2C_DR = (current_dev << 1) & (1 << 0);
      000574 C6u02u07         [ 1] 1166 	ld	a, _current_dev+0
      000577 48               [ 1] 1167 	sll	a
      000578 A4 01            [ 1] 1168 	and	a, #0x01
      00057A C7 52 16         [ 1] 1169 	ld	0x5216, a
                                   1170 ;	main.c: 347: while (!(I2C_SR1 & (1 << 1)) && !(I2C_SR2 & (1 << 2)))
      00057D                       1171 00102$:
      00057D 72 02 52 17 0D   [ 2] 1172 	btjt	0x5217, #1, 00104$
      000582 72 04 52 18 08   [ 2] 1173 	btjt	0x5218, #2, 00104$
                                   1174 ;	main.c: 348: uart_write(".");
      000587 AEr00rA3         [ 2] 1175 	ldw	x, #(___str_19+0)
      00058A CDr00r40         [ 4] 1176 	call	_uart_write
      00058D 20 EE            [ 2] 1177 	jra	00102$
      00058F                       1178 00104$:
                                   1179 ;	main.c: 349: uart_write("\r\n");
      00058F AEr00rBA         [ 2] 1180 	ldw	x, #(___str_23+0)
      000592 CDr00r40         [ 4] 1181 	call	_uart_write
                                   1182 ;	main.c: 350: I2C_DR = d_addr;
      000595 55u01u03 52 16   [ 1] 1183 	mov	0x5216+0, _d_addr+0
                                   1184 ;	main.c: 351: while (!(I2C_SR1 & (1 << 1)) && !(I2C_SR2 & (1 << 2)))
      00059A                       1185 00106$:
      00059A 72 02 52 17 0D   [ 2] 1186 	btjt	0x5217, #1, 00108$
      00059F 72 04 52 18 08   [ 2] 1187 	btjt	0x5218, #2, 00108$
                                   1188 ;	main.c: 352: uart_write(".");
      0005A4 AEr00rA3         [ 2] 1189 	ldw	x, #(___str_19+0)
      0005A7 CDr00r40         [ 4] 1190 	call	_uart_write
      0005AA 20 EE            [ 2] 1191 	jra	00106$
      0005AC                       1192 00108$:
                                   1193 ;	main.c: 353: uart_write("\r\n");
      0005AC AEr00rBA         [ 2] 1194 	ldw	x, #(___str_23+0)
      0005AF CDr00r40         [ 4] 1195 	call	_uart_write
                                   1196 ;	main.c: 354: i2c_stop();
      0005B2 CDr05r08         [ 4] 1197 	call	_i2c_stop
                                   1198 ;	main.c: 355: for(int i = 0;i < d_size;i++)
      0005B5 5F               [ 1] 1199 	clrw	x
      0005B6 1F 03            [ 2] 1200 	ldw	(0x03, sp), x
      0005B8                       1201 00115$:
      0005B8 C6u01u05         [ 1] 1202 	ld	a, _d_size+0
      0005BB 6B 02            [ 1] 1203 	ld	(0x02, sp), a
      0005BD 0F 01            [ 1] 1204 	clr	(0x01, sp)
      0005BF 1E 03            [ 2] 1205 	ldw	x, (0x03, sp)
      0005C1 13 01            [ 2] 1206 	cpw	x, (0x01, sp)
      0005C3 2E 27            [ 1] 1207 	jrsge	00117$
                                   1208 ;	main.c: 357: data_buf[i] = I2C_DR;
      0005C5 1E 03            [ 2] 1209 	ldw	x, (0x03, sp)
      0005C7 C6 52 16         [ 1] 1210 	ld	a, 0x5216
      0005CA D7u01u07         [ 1] 1211 	ld	((_data_buf+0), x), a
                                   1212 ;	main.c: 358: while (!(I2C_SR1 & (1 << 1)) && !(I2C_SR2 & (1 << 2)))
      0005CD                       1213 00110$:
      0005CD 72 02 52 17 0D   [ 2] 1214 	btjt	0x5217, #1, 00112$
      0005D2 72 04 52 18 08   [ 2] 1215 	btjt	0x5218, #2, 00112$
                                   1216 ;	main.c: 359: uart_write(".");
      0005D7 AEr00rA3         [ 2] 1217 	ldw	x, #(___str_19+0)
      0005DA CDr00r40         [ 4] 1218 	call	_uart_write
      0005DD 20 EE            [ 2] 1219 	jra	00110$
      0005DF                       1220 00112$:
                                   1221 ;	main.c: 360: uart_write("\r\n");
      0005DF AEr00rBA         [ 2] 1222 	ldw	x, #(___str_23+0)
      0005E2 CDr00r40         [ 4] 1223 	call	_uart_write
                                   1224 ;	main.c: 355: for(int i = 0;i < d_size;i++)
      0005E5 1E 03            [ 2] 1225 	ldw	x, (0x03, sp)
      0005E7 5C               [ 1] 1226 	incw	x
      0005E8 1F 03            [ 2] 1227 	ldw	(0x03, sp), x
      0005EA 20 CC            [ 2] 1228 	jra	00115$
      0005EC                       1229 00117$:
                                   1230 ;	main.c: 363: }
      0005EC 5B 04            [ 2] 1231 	addw	sp, #4
      0005EE 81               [ 4] 1232 	ret
                                   1233 ;	main.c: 364: void i2c_scan(void) {
                                   1234 ;	-----------------------------------------
                                   1235 ;	 function i2c_scan
                                   1236 ;	-----------------------------------------
      0005EF                       1237 _i2c_scan:
      0005EF 52 02            [ 2] 1238 	sub	sp, #2
                                   1239 ;	main.c: 365: for (uint8_t addr = current_dev; addr < 127; addr++) {
      0005F1 C6u02u07         [ 1] 1240 	ld	a, _current_dev+0
      0005F4 6B 01            [ 1] 1241 	ld	(0x01, sp), a
      0005F6 6B 02            [ 1] 1242 	ld	(0x02, sp), a
      0005F8                       1243 00105$:
      0005F8 7B 02            [ 1] 1244 	ld	a, (0x02, sp)
      0005FA A1 7F            [ 1] 1245 	cp	a, #0x7f
      0005FC 24 26            [ 1] 1246 	jrnc	00107$
                                   1247 ;	main.c: 366: i2c_start();
      0005FE CDr04rEE         [ 4] 1248 	call	_i2c_start
                                   1249 ;	main.c: 367: i2c_send_address(addr);
      000601 7B 02            [ 1] 1250 	ld	a, (0x02, sp)
      000603 CDr04rF8         [ 4] 1251 	call	_i2c_send_address
                                   1252 ;	main.c: 368: if (!(I2C_SR2 & (1 << 2))) { // Проверка на ACK
      000606 72 04 52 18 0A   [ 2] 1253 	btjt	0x5218, #2, 00102$
                                   1254 ;	main.c: 370: current_dev = addr;
      00060B 7B 01            [ 1] 1255 	ld	a, (0x01, sp)
      00060D C7u02u07         [ 1] 1256 	ld	_current_dev+0, a
                                   1257 ;	main.c: 371: i2c_stop();
      000610 5B 02            [ 2] 1258 	addw	sp, #2
                                   1259 ;	main.c: 372: break;
      000612 CCr05r08         [ 2] 1260 	jp	_i2c_stop
      000615                       1261 00102$:
                                   1262 ;	main.c: 374: i2c_stop();
      000615 CDr05r08         [ 4] 1263 	call	_i2c_stop
                                   1264 ;	main.c: 375: I2C_SR2 = I2C_SR2 & ~(1 << 2); // Очистка флага ошибки
      000618 72 15 52 18      [ 1] 1265 	bres	0x5218, #2
                                   1266 ;	main.c: 365: for (uint8_t addr = current_dev; addr < 127; addr++) {
      00061C 0C 02            [ 1] 1267 	inc	(0x02, sp)
      00061E 7B 02            [ 1] 1268 	ld	a, (0x02, sp)
      000620 6B 01            [ 1] 1269 	ld	(0x01, sp), a
      000622 20 D4            [ 2] 1270 	jra	00105$
      000624                       1271 00107$:
                                   1272 ;	main.c: 377: }
      000624 5B 02            [ 2] 1273 	addw	sp, #2
      000626 81               [ 4] 1274 	ret
                                   1275 ;	main.c: 387: void cm_SM(void)
                                   1276 ;	-----------------------------------------
                                   1277 ;	 function cm_SM
                                   1278 ;	-----------------------------------------
      000627                       1279 _cm_SM:
      000627 52 04            [ 2] 1280 	sub	sp, #4
                                   1281 ;	main.c: 389: char cur_dev[4]={0};
      000629 0F 01            [ 1] 1282 	clr	(0x01, sp)
      00062B 0F 02            [ 1] 1283 	clr	(0x02, sp)
      00062D 0F 03            [ 1] 1284 	clr	(0x03, sp)
      00062F 0F 04            [ 1] 1285 	clr	(0x04, sp)
                                   1286 ;	main.c: 390: convert_int_to_chars(current_dev, cur_dev);
      000631 96               [ 1] 1287 	ldw	x, sp
      000632 5C               [ 1] 1288 	incw	x
      000633 C6u02u07         [ 1] 1289 	ld	a, _current_dev+0
      000636 CDr00rA1         [ 4] 1290 	call	_convert_int_to_chars
                                   1291 ;	main.c: 391: uart_write("SM ");
      000639 AEr00rBD         [ 2] 1292 	ldw	x, #(___str_24+0)
      00063C CDr00r40         [ 4] 1293 	call	_uart_write
                                   1294 ;	main.c: 392: uart_write(cur_dev);
      00063F 96               [ 1] 1295 	ldw	x, sp
      000640 5C               [ 1] 1296 	incw	x
      000641 CDr00r40         [ 4] 1297 	call	_uart_write
                                   1298 ;	main.c: 393: uart_write("\r\n");
      000644 AEr00rBA         [ 2] 1299 	ldw	x, #(___str_23+0)
      000647 CDr00r40         [ 4] 1300 	call	_uart_write
                                   1301 ;	main.c: 394: }
      00064A 5B 04            [ 2] 1302 	addw	sp, #4
      00064C 81               [ 4] 1303 	ret
                                   1304 ;	main.c: 395: void cm_SN(void)
                                   1305 ;	-----------------------------------------
                                   1306 ;	 function cm_SN
                                   1307 ;	-----------------------------------------
      00064D                       1308 _cm_SN:
                                   1309 ;	main.c: 397: i2c_scan();
      00064D CDr05rEF         [ 4] 1310 	call	_i2c_scan
                                   1311 ;	main.c: 398: cm_SM();
                                   1312 ;	main.c: 399: }
      000650 CCr06r27         [ 2] 1313 	jp	_cm_SM
                                   1314 ;	main.c: 400: void cm_RM(void)
                                   1315 ;	-----------------------------------------
                                   1316 ;	 function cm_RM
                                   1317 ;	-----------------------------------------
      000653                       1318 _cm_RM:
                                   1319 ;	main.c: 402: current_dev = 0;
      000653 72 5Fu02u07      [ 1] 1320 	clr	_current_dev+0
                                   1321 ;	main.c: 403: uart_write("RM\n");
      000657 AEr00rC1         [ 2] 1322 	ldw	x, #(___str_25+0)
                                   1323 ;	main.c: 404: }
      00065A CCr00r40         [ 2] 1324 	jp	_uart_write
                                   1325 ;	main.c: 406: void cm_DB(void)
                                   1326 ;	-----------------------------------------
                                   1327 ;	 function cm_DB
                                   1328 ;	-----------------------------------------
      00065D                       1329 _cm_DB:
                                   1330 ;	main.c: 408: status_check();
                                   1331 ;	main.c: 409: }
      00065D CCr02r8F         [ 2] 1332 	jp	_status_check
                                   1333 ;	main.c: 411: void cm_ST(void)
                                   1334 ;	-----------------------------------------
                                   1335 ;	 function cm_ST
                                   1336 ;	-----------------------------------------
      000660                       1337 _cm_ST:
                                   1338 ;	main.c: 413: get_addr_from_buff();
      000660 CDr01r85         [ 4] 1339 	call	_get_addr_from_buff
                                   1340 ;	main.c: 414: current_dev = d_addr;
      000663 55u01u03u02u07   [ 1] 1341 	mov	_current_dev+0, _d_addr+0
                                   1342 ;	main.c: 415: uart_write("ST\n");
      000668 AEr00rC5         [ 2] 1343 	ldw	x, #(___str_26+0)
                                   1344 ;	main.c: 416: }
      00066B CCr00r40         [ 2] 1345 	jp	_uart_write
                                   1346 ;	main.c: 417: void cm_SR(void)
                                   1347 ;	-----------------------------------------
                                   1348 ;	 function cm_SR
                                   1349 ;	-----------------------------------------
      00066E                       1350 _cm_SR:
                                   1351 ;	main.c: 419: i2c_start();
      00066E CDr04rEE         [ 4] 1352 	call	_i2c_start
                                   1353 ;	main.c: 420: i2c_send_address(current_dev);
      000671 C6u02u07         [ 1] 1354 	ld	a, _current_dev+0
      000674 CDr04rF8         [ 4] 1355 	call	_i2c_send_address
                                   1356 ;	main.c: 421: i2c_read();
      000677 CDr05r72         [ 4] 1357 	call	_i2c_read
                                   1358 ;	main.c: 422: i2c_stop();
                                   1359 ;	main.c: 423: }
      00067A CCr05r08         [ 2] 1360 	jp	_i2c_stop
                                   1361 ;	main.c: 424: void cm_SW(void)
                                   1362 ;	-----------------------------------------
                                   1363 ;	 function cm_SW
                                   1364 ;	-----------------------------------------
      00067D                       1365 _cm_SW:
      00067D 52 04            [ 2] 1366 	sub	sp, #4
                                   1367 ;	main.c: 426: char ar[4]={0};
      00067F 0F 01            [ 1] 1368 	clr	(0x01, sp)
      000681 0F 02            [ 1] 1369 	clr	(0x02, sp)
      000683 0F 03            [ 1] 1370 	clr	(0x03, sp)
      000685 0F 04            [ 1] 1371 	clr	(0x04, sp)
                                   1372 ;	main.c: 427: uart_write("f1");
      000687 AEr00rC9         [ 2] 1373 	ldw	x, #(___str_27+0)
      00068A CDr00r40         [ 4] 1374 	call	_uart_write
                                   1375 ;	main.c: 428: i2c_start();
      00068D CDr04rEE         [ 4] 1376 	call	_i2c_start
                                   1377 ;	main.c: 429: uart_write("f2");
      000690 AEr00rCC         [ 2] 1378 	ldw	x, #(___str_28+0)
      000693 CDr00r40         [ 4] 1379 	call	_uart_write
                                   1380 ;	main.c: 430: i2c_send_address(current_dev);
      000696 C6u02u07         [ 1] 1381 	ld	a, _current_dev+0
      000699 CDr04rF8         [ 4] 1382 	call	_i2c_send_address
                                   1383 ;	main.c: 431: uart_write("f3");
      00069C AEr00rCF         [ 2] 1384 	ldw	x, #(___str_29+0)
      00069F CDr00r40         [ 4] 1385 	call	_uart_write
                                   1386 ;	main.c: 432: i2c_write();
      0006A2 CDr05r0D         [ 4] 1387 	call	_i2c_write
                                   1388 ;	main.c: 433: uart_write("f4");
      0006A5 AEr00rD2         [ 2] 1389 	ldw	x, #(___str_30+0)
      0006A8 CDr00r40         [ 4] 1390 	call	_uart_write
                                   1391 ;	main.c: 434: i2c_stop();
      0006AB CDr05r08         [ 4] 1392 	call	_i2c_stop
                                   1393 ;	main.c: 435: uart_write("f5");
      0006AE AEr00rD5         [ 2] 1394 	ldw	x, #(___str_31+0)
      0006B1 CDr00r40         [ 4] 1395 	call	_uart_write
                                   1396 ;	main.c: 436: uart_write("SW ");
      0006B4 AEr00rD8         [ 2] 1397 	ldw	x, #(___str_32+0)
      0006B7 CDr00r40         [ 4] 1398 	call	_uart_write
                                   1399 ;	main.c: 437: convert_int_to_chars(d_addr, ar);
      0006BA 96               [ 1] 1400 	ldw	x, sp
      0006BB 5C               [ 1] 1401 	incw	x
      0006BC C6u01u03         [ 1] 1402 	ld	a, _d_addr+0
      0006BF CDr00rA1         [ 4] 1403 	call	_convert_int_to_chars
                                   1404 ;	main.c: 438: uart_write(ar);
      0006C2 96               [ 1] 1405 	ldw	x, sp
      0006C3 5C               [ 1] 1406 	incw	x
      0006C4 CDr00r40         [ 4] 1407 	call	_uart_write
                                   1408 ;	main.c: 439: uart_write(" ");
      0006C7 AEr00rDC         [ 2] 1409 	ldw	x, #(___str_33+0)
      0006CA CDr00r40         [ 4] 1410 	call	_uart_write
                                   1411 ;	main.c: 440: convert_int_to_chars(d_size, ar);
      0006CD 96               [ 1] 1412 	ldw	x, sp
      0006CE 5C               [ 1] 1413 	incw	x
      0006CF C6u01u05         [ 1] 1414 	ld	a, _d_size+0
      0006D2 CDr00rA1         [ 4] 1415 	call	_convert_int_to_chars
                                   1416 ;	main.c: 441: uart_write(ar);
      0006D5 96               [ 1] 1417 	ldw	x, sp
      0006D6 5C               [ 1] 1418 	incw	x
      0006D7 CDr00r40         [ 4] 1419 	call	_uart_write
                                   1420 ;	main.c: 442: uart_write("\r\n");
      0006DA AEr00rBA         [ 2] 1421 	ldw	x, #(___str_23+0)
      0006DD CDr00r40         [ 4] 1422 	call	_uart_write
                                   1423 ;	main.c: 443: }
      0006E0 5B 04            [ 2] 1424 	addw	sp, #4
      0006E2 81               [ 4] 1425 	ret
                                   1426 ;	main.c: 451: int data_handler(void)
                                   1427 ;	-----------------------------------------
                                   1428 ;	 function data_handler
                                   1429 ;	-----------------------------------------
      0006E3                       1430 _data_handler:
                                   1431 ;	main.c: 453: p_size = 0;
      0006E3 72 5Fu01u04      [ 1] 1432 	clr	_p_size+0
                                   1433 ;	main.c: 454: p_bytes = 0;
      0006E7 72 5Fu01u06      [ 1] 1434 	clr	_p_bytes+0
                                   1435 ;	main.c: 455: d_addr = 0;
      0006EB 72 5Fu01u03      [ 1] 1436 	clr	_d_addr+0
                                   1437 ;	main.c: 456: d_size = 0;
      0006EF 72 5Fu01u05      [ 1] 1438 	clr	_d_size+0
                                   1439 ;	main.c: 457: memset(data_buf, 0, sizeof(data_buf));
      0006F3 4B 00            [ 1] 1440 	push	#0x00
      0006F5 4B 01            [ 1] 1441 	push	#0x01
      0006F7 5F               [ 1] 1442 	clrw	x
      0006F8 89               [ 2] 1443 	pushw	x
      0006F9 AEr01r07         [ 2] 1444 	ldw	x, #(_data_buf+0)
      0006FC CDr00r00         [ 4] 1445 	call	_memset
                                   1446 ;	main.c: 458: if(memcmp(&buffer[0],"SM",2) == 0)
      0006FF 4B 02            [ 1] 1447 	push	#0x02
      000701 4B 00            [ 1] 1448 	push	#0x00
      000703 4BrDE            [ 1] 1449 	push	#<(___str_34+0)
      000705 4Bs00            [ 1] 1450 	push	#((___str_34+0) >> 8)
      000707 AEr00r00         [ 2] 1451 	ldw	x, #(_buffer+0)
      00070A CDr00r00         [ 4] 1452 	call	_memcmp
                                   1453 ;	main.c: 459: return 1;
      00070D 5D               [ 2] 1454 	tnzw	x
      00070E 26 02            [ 1] 1455 	jrne	00102$
      000710 5C               [ 1] 1456 	incw	x
      000711 81               [ 4] 1457 	ret
      000712                       1458 00102$:
                                   1459 ;	main.c: 460: if(memcmp(&buffer[0],"SN",2) == 0)
      000712 4B 02            [ 1] 1460 	push	#0x02
      000714 4B 00            [ 1] 1461 	push	#0x00
      000716 4BrE1            [ 1] 1462 	push	#<(___str_35+0)
      000718 4Bs00            [ 1] 1463 	push	#((___str_35+0) >> 8)
      00071A AEr00r00         [ 2] 1464 	ldw	x, #(_buffer+0)
      00071D CDr00r00         [ 4] 1465 	call	_memcmp
      000720 5D               [ 2] 1466 	tnzw	x
      000721 26 04            [ 1] 1467 	jrne	00104$
                                   1468 ;	main.c: 461: return 2;
      000723 AE 00 02         [ 2] 1469 	ldw	x, #0x0002
      000726 81               [ 4] 1470 	ret
      000727                       1471 00104$:
                                   1472 ;	main.c: 462: if(memcmp(&buffer[0],"ST",2) == 0)
      000727 4B 02            [ 1] 1473 	push	#0x02
      000729 4B 00            [ 1] 1474 	push	#0x00
      00072B 4BrE4            [ 1] 1475 	push	#<(___str_36+0)
      00072D 4Bs00            [ 1] 1476 	push	#((___str_36+0) >> 8)
      00072F AEr00r00         [ 2] 1477 	ldw	x, #(_buffer+0)
      000732 CDr00r00         [ 4] 1478 	call	_memcmp
      000735 5D               [ 2] 1479 	tnzw	x
      000736 26 04            [ 1] 1480 	jrne	00106$
                                   1481 ;	main.c: 463: return 5;
      000738 AE 00 05         [ 2] 1482 	ldw	x, #0x0005
      00073B 81               [ 4] 1483 	ret
      00073C                       1484 00106$:
                                   1485 ;	main.c: 464: if(memcmp(&buffer[0],"RM",2) == 0)
      00073C 4B 02            [ 1] 1486 	push	#0x02
      00073E 4B 00            [ 1] 1487 	push	#0x00
      000740 4BrE7            [ 1] 1488 	push	#<(___str_37+0)
      000742 4Bs00            [ 1] 1489 	push	#((___str_37+0) >> 8)
      000744 AEr00r00         [ 2] 1490 	ldw	x, #(_buffer+0)
      000747 CDr00r00         [ 4] 1491 	call	_memcmp
      00074A 5D               [ 2] 1492 	tnzw	x
      00074B 26 04            [ 1] 1493 	jrne	00108$
                                   1494 ;	main.c: 465: return 6;
      00074D AE 00 06         [ 2] 1495 	ldw	x, #0x0006
      000750 81               [ 4] 1496 	ret
      000751                       1497 00108$:
                                   1498 ;	main.c: 466: if(memcmp(&buffer[0],"DB",2) == 0)
      000751 4B 02            [ 1] 1499 	push	#0x02
      000753 4B 00            [ 1] 1500 	push	#0x00
      000755 4BrEA            [ 1] 1501 	push	#<(___str_38+0)
      000757 4Bs00            [ 1] 1502 	push	#((___str_38+0) >> 8)
      000759 AEr00r00         [ 2] 1503 	ldw	x, #(_buffer+0)
      00075C CDr00r00         [ 4] 1504 	call	_memcmp
      00075F 5D               [ 2] 1505 	tnzw	x
      000760 26 04            [ 1] 1506 	jrne	00110$
                                   1507 ;	main.c: 467: return 7;
      000762 AE 00 07         [ 2] 1508 	ldw	x, #0x0007
      000765 81               [ 4] 1509 	ret
      000766                       1510 00110$:
                                   1511 ;	main.c: 469: get_addr_from_buff();
      000766 CDr01r85         [ 4] 1512 	call	_get_addr_from_buff
                                   1513 ;	main.c: 470: get_size_from_buff();
      000769 CDr01rC6         [ 4] 1514 	call	_get_size_from_buff
                                   1515 ;	main.c: 472: if(memcmp(&buffer[0],"SR",2) == 0)
      00076C 4B 02            [ 1] 1516 	push	#0x02
      00076E 4B 00            [ 1] 1517 	push	#0x00
      000770 4BrED            [ 1] 1518 	push	#<(___str_39+0)
      000772 4Bs00            [ 1] 1519 	push	#((___str_39+0) >> 8)
      000774 AEr00r00         [ 2] 1520 	ldw	x, #(_buffer+0)
      000777 CDr00r00         [ 4] 1521 	call	_memcmp
      00077A 5D               [ 2] 1522 	tnzw	x
      00077B 26 04            [ 1] 1523 	jrne	00112$
                                   1524 ;	main.c: 473: return 3;
      00077D AE 00 03         [ 2] 1525 	ldw	x, #0x0003
      000780 81               [ 4] 1526 	ret
      000781                       1527 00112$:
                                   1528 ;	main.c: 475: char_buffer_to_int();
      000781 CDr02r0B         [ 4] 1529 	call	_char_buffer_to_int
                                   1530 ;	main.c: 477: if(memcmp(&buffer[0],"SW",2) == 0)
      000784 4B 02            [ 1] 1531 	push	#0x02
      000786 4B 00            [ 1] 1532 	push	#0x00
      000788 4BrF0            [ 1] 1533 	push	#<(___str_40+0)
      00078A 4Bs00            [ 1] 1534 	push	#((___str_40+0) >> 8)
      00078C AEr00r00         [ 2] 1535 	ldw	x, #(_buffer+0)
      00078F CDr00r00         [ 4] 1536 	call	_memcmp
      000792 5D               [ 2] 1537 	tnzw	x
      000793 26 04            [ 1] 1538 	jrne	00114$
                                   1539 ;	main.c: 478: return 4;
      000795 AE 00 04         [ 2] 1540 	ldw	x, #0x0004
      000798 81               [ 4] 1541 	ret
      000799                       1542 00114$:
                                   1543 ;	main.c: 479: return 0;
      000799 5F               [ 1] 1544 	clrw	x
                                   1545 ;	main.c: 481: }
      00079A 81               [ 4] 1546 	ret
                                   1547 ;	main.c: 483: void command_switcher(void)
                                   1548 ;	-----------------------------------------
                                   1549 ;	 function command_switcher
                                   1550 ;	-----------------------------------------
      00079B                       1551 _command_switcher:
      00079B 52 06            [ 2] 1552 	sub	sp, #6
                                   1553 ;	main.c: 485: char ar[4]={0};
      00079D 0F 01            [ 1] 1554 	clr	(0x01, sp)
      00079F 0F 02            [ 1] 1555 	clr	(0x02, sp)
      0007A1 0F 03            [ 1] 1556 	clr	(0x03, sp)
      0007A3 0F 04            [ 1] 1557 	clr	(0x04, sp)
                                   1558 ;	main.c: 487: int af = data_handler();
      0007A5 CDr06rE3         [ 4] 1559 	call	_data_handler
      0007A8 1F 05            [ 2] 1560 	ldw	(0x05, sp), x
                                   1561 ;	main.c: 488: convert_int_to_chars(af, ar);
      0007AA 96               [ 1] 1562 	ldw	x, sp
      0007AB 5C               [ 1] 1563 	incw	x
      0007AC 7B 06            [ 1] 1564 	ld	a, (0x06, sp)
      0007AE CDr00rA1         [ 4] 1565 	call	_convert_int_to_chars
                                   1566 ;	main.c: 489: uart_write("preswitch\n");
      0007B1 AEr00rF3         [ 2] 1567 	ldw	x, #(___str_41+0)
      0007B4 CDr00r40         [ 4] 1568 	call	_uart_write
                                   1569 ;	main.c: 490: uart_write(ar);
      0007B7 96               [ 1] 1570 	ldw	x, sp
      0007B8 5C               [ 1] 1571 	incw	x
      0007B9 CDr00r40         [ 4] 1572 	call	_uart_write
                                   1573 ;	main.c: 491: uart_write("\n");
      0007BC AEr00rFE         [ 2] 1574 	ldw	x, #(___str_42+0)
      0007BF CDr00r40         [ 4] 1575 	call	_uart_write
                                   1576 ;	main.c: 492: switch(af)
      0007C2 0D 05            [ 1] 1577 	tnz	(0x05, sp)
      0007C4 2B 45            [ 1] 1578 	jrmi	00109$
      0007C6 1E 05            [ 2] 1579 	ldw	x, (0x05, sp)
      0007C8 A3 00 07         [ 2] 1580 	cpw	x, #0x0007
      0007CB 2C 3E            [ 1] 1581 	jrsgt	00109$
      0007CD 1E 05            [ 2] 1582 	ldw	x, (0x05, sp)
      0007CF 58               [ 2] 1583 	sllw	x
      0007D0 DEu07uD4         [ 2] 1584 	ldw	x, (#00123$, x)
      0007D3 FC               [ 2] 1585 	jp	(x)
      0007D4                       1586 00123$:
      0007D4r08r0B                 1587 	.dw	#00109$
      0007D6r07rE4                 1588 	.dw	#00101$
      0007D8r07rE9                 1589 	.dw	#00102$
      0007DAr07rEE                 1590 	.dw	#00103$
      0007DCr07rF3                 1591 	.dw	#00104$
      0007DEr07rFE                 1592 	.dw	#00105$
      0007E0r08r03                 1593 	.dw	#00106$
      0007E2r08r08                 1594 	.dw	#00107$
                                   1595 ;	main.c: 494: case 1:
      0007E4                       1596 00101$:
                                   1597 ;	main.c: 495: cm_SM();
      0007E4 CDr06r27         [ 4] 1598 	call	_cm_SM
                                   1599 ;	main.c: 496: break;
      0007E7 20 22            [ 2] 1600 	jra	00109$
                                   1601 ;	main.c: 497: case 2:
      0007E9                       1602 00102$:
                                   1603 ;	main.c: 498: cm_SN();
      0007E9 CDr06r4D         [ 4] 1604 	call	_cm_SN
                                   1605 ;	main.c: 499: break;
      0007EC 20 1D            [ 2] 1606 	jra	00109$
                                   1607 ;	main.c: 500: case 3:
      0007EE                       1608 00103$:
                                   1609 ;	main.c: 501: cm_SR();
      0007EE CDr06r6E         [ 4] 1610 	call	_cm_SR
                                   1611 ;	main.c: 502: break;
      0007F1 20 18            [ 2] 1612 	jra	00109$
                                   1613 ;	main.c: 503: case 4:
      0007F3                       1614 00104$:
                                   1615 ;	main.c: 504: uart_write("switch\n");
      0007F3 AEr01r00         [ 2] 1616 	ldw	x, #(___str_43+0)
      0007F6 CDr00r40         [ 4] 1617 	call	_uart_write
                                   1618 ;	main.c: 505: cm_SW();
      0007F9 CDr06r7D         [ 4] 1619 	call	_cm_SW
                                   1620 ;	main.c: 506: break;
      0007FC 20 0D            [ 2] 1621 	jra	00109$
                                   1622 ;	main.c: 507: case 5:
      0007FE                       1623 00105$:
                                   1624 ;	main.c: 508: cm_ST();
      0007FE CDr06r60         [ 4] 1625 	call	_cm_ST
                                   1626 ;	main.c: 509: break;
      000801 20 08            [ 2] 1627 	jra	00109$
                                   1628 ;	main.c: 510: case 6:
      000803                       1629 00106$:
                                   1630 ;	main.c: 511: cm_RM();
      000803 CDr06r53         [ 4] 1631 	call	_cm_RM
                                   1632 ;	main.c: 512: break;
      000806 20 03            [ 2] 1633 	jra	00109$
                                   1634 ;	main.c: 513: case 7:
      000808                       1635 00107$:
                                   1636 ;	main.c: 514: cm_DB();
      000808 CDr06r5D         [ 4] 1637 	call	_cm_DB
                                   1638 ;	main.c: 516: }
      00080B                       1639 00109$:
                                   1640 ;	main.c: 517: }
      00080B 5B 06            [ 2] 1641 	addw	sp, #6
      00080D 81               [ 4] 1642 	ret
                                   1643 ;	main.c: 520: void main(void)
                                   1644 ;	-----------------------------------------
                                   1645 ;	 function main
                                   1646 ;	-----------------------------------------
      00080E                       1647 _main:
                                   1648 ;	main.c: 522: uart_init();
      00080E CDr04rB0         [ 4] 1649 	call	_uart_init
                                   1650 ;	main.c: 523: i2c_init();
      000811 CDr04rCD         [ 4] 1651 	call	_i2c_init
                                   1652 ;	main.c: 524: uart_write("SS\n");
      000814 AEr01r08         [ 2] 1653 	ldw	x, #(___str_44+0)
      000817 CDr00r40         [ 4] 1654 	call	_uart_write
                                   1655 ;	main.c: 525: while(1)
      00081A                       1656 00102$:
                                   1657 ;	main.c: 527: uart_read();
      00081A CDr00r6B         [ 4] 1658 	call	_uart_read
                                   1659 ;	main.c: 528: command_switcher();
      00081D CDr07r9B         [ 4] 1660 	call	_command_switcher
      000820 20 F8            [ 2] 1661 	jra	00102$
                                   1662 ;	main.c: 530: }
      000822 81               [ 4] 1663 	ret
                                   1664 	.area CODE
                                   1665 	.area CONST
                                   1666 	.area CONST
      000000                       1667 ___str_0:
      000000 77 68 69 6C 65        1668 	.ascii "while"
      000005 00                    1669 	.db 0x00
                                   1670 	.area CODE
                                   1671 	.area CONST
      000006                       1672 ___str_1:
      000006 0A                    1673 	.db 0x0a
      000007 49 32 43 5F 52 45 47  1674 	.ascii "I2C_REGS >.<"
             53 20 3E 2E 3C
      000013 0A                    1675 	.db 0x0a
      000014 00                    1676 	.db 0x00
                                   1677 	.area CODE
                                   1678 	.area CONST
      000015                       1679 ___str_2:
      000015 0A                    1680 	.db 0x0a
      000016 53 52 31 20 2D 3E 20  1681 	.ascii "SR1 -> "
      00001D 00                    1682 	.db 0x00
                                   1683 	.area CODE
                                   1684 	.area CONST
      00001E                       1685 ___str_3:
      00001E 20 3C 2D              1686 	.ascii " <-"
      000021 0A                    1687 	.db 0x0a
      000022 00                    1688 	.db 0x00
                                   1689 	.area CODE
                                   1690 	.area CONST
      000023                       1691 ___str_4:
      000023 53 52 32 20 2D 3E 20  1692 	.ascii "SR2 -> "
      00002A 00                    1693 	.db 0x00
                                   1694 	.area CODE
                                   1695 	.area CONST
      00002B                       1696 ___str_5:
      00002B 53 52 33 20 2D 3E 20  1697 	.ascii "SR3 -> "
      000032 00                    1698 	.db 0x00
                                   1699 	.area CODE
                                   1700 	.area CONST
      000033                       1701 ___str_6:
      000033 43 52 31 20 2D 3E 20  1702 	.ascii "CR1 -> "
      00003A 00                    1703 	.db 0x00
                                   1704 	.area CODE
                                   1705 	.area CONST
      00003B                       1706 ___str_7:
      00003B 43 52 32 20 2D 3E 20  1707 	.ascii "CR2 -> "
      000042 00                    1708 	.db 0x00
                                   1709 	.area CODE
                                   1710 	.area CONST
      000043                       1711 ___str_8:
      000043 44 52 20 2D 3E 20     1712 	.ascii "DR -> "
      000049 00                    1713 	.db 0x00
                                   1714 	.area CODE
                                   1715 	.area CONST
      00004A                       1716 ___str_9:
      00004A 55 41 52 54 5F 52 45  1717 	.ascii "UART_REGS >.<"
             47 53 20 3E 2E 3C
      000057 0A                    1718 	.db 0x0a
      000058 00                    1719 	.db 0x00
                                   1720 	.area CODE
                                   1721 	.area CONST
      000059                       1722 ___str_10:
      000059 0A                    1723 	.db 0x0a
      00005A 53 52 20 2D 3E 20     1724 	.ascii "SR -> "
      000060 00                    1725 	.db 0x00
                                   1726 	.area CODE
                                   1727 	.area CONST
      000061                       1728 ___str_11:
      000061 42 52 52 31 20 2D 3E  1729 	.ascii "BRR1 -> "
             20
      000069 00                    1730 	.db 0x00
                                   1731 	.area CODE
                                   1732 	.area CONST
      00006A                       1733 ___str_12:
      00006A 42 52 52 32 20 2D 3E  1734 	.ascii "BRR2 -> "
             20
      000072 00                    1735 	.db 0x00
                                   1736 	.area CODE
                                   1737 	.area CONST
      000073                       1738 ___str_13:
      000073 43 52 33 20 2D 3E 20  1739 	.ascii "CR3 -> "
      00007A 00                    1740 	.db 0x00
                                   1741 	.area CODE
                                   1742 	.area CONST
      00007B                       1743 ___str_14:
      00007B 43 52 34 20 2D 3E 20  1744 	.ascii "CR4 -> "
      000082 00                    1745 	.db 0x00
                                   1746 	.area CODE
                                   1747 	.area CONST
      000083                       1748 ___str_15:
      000083 43 52 35 20 2D 3E 20  1749 	.ascii "CR5 -> "
      00008A 00                    1750 	.db 0x00
                                   1751 	.area CODE
                                   1752 	.area CONST
      00008B                       1753 ___str_16:
      00008B 47 54 52 20 2D 3E 20  1754 	.ascii "GTR -> "
      000092 00                    1755 	.db 0x00
                                   1756 	.area CODE
                                   1757 	.area CONST
      000093                       1758 ___str_17:
      000093 50 53 43 52 20 2D 3E  1759 	.ascii "PSCR -> "
             20
      00009B 00                    1760 	.db 0x00
                                   1761 	.area CODE
                                   1762 	.area CONST
      00009C                       1763 ___str_18:
      00009C 66 6C 61 67 31        1764 	.ascii "flag1"
      0000A1 0D                    1765 	.db 0x0d
      0000A2 00                    1766 	.db 0x00
                                   1767 	.area CODE
                                   1768 	.area CONST
      0000A3                       1769 ___str_19:
      0000A3 2E                    1770 	.ascii "."
      0000A4 00                    1771 	.db 0x00
                                   1772 	.area CODE
                                   1773 	.area CONST
      0000A5                       1774 ___str_20:
      0000A5 66 6C 61 67 32        1775 	.ascii "flag2"
      0000AA 0D                    1776 	.db 0x0d
      0000AB 00                    1777 	.db 0x00
                                   1778 	.area CODE
                                   1779 	.area CONST
      0000AC                       1780 ___str_21:
      0000AC 66 6C 61 67 33        1781 	.ascii "flag3"
      0000B1 0D                    1782 	.db 0x0d
      0000B2 00                    1783 	.db 0x00
                                   1784 	.area CODE
                                   1785 	.area CONST
      0000B3                       1786 ___str_22:
      0000B3 66 6C 61 67 34        1787 	.ascii "flag4"
      0000B8 0D                    1788 	.db 0x0d
      0000B9 00                    1789 	.db 0x00
                                   1790 	.area CODE
                                   1791 	.area CONST
      0000BA                       1792 ___str_23:
      0000BA 0D                    1793 	.db 0x0d
      0000BB 0A                    1794 	.db 0x0a
      0000BC 00                    1795 	.db 0x00
                                   1796 	.area CODE
                                   1797 	.area CONST
      0000BD                       1798 ___str_24:
      0000BD 53 4D 20              1799 	.ascii "SM "
      0000C0 00                    1800 	.db 0x00
                                   1801 	.area CODE
                                   1802 	.area CONST
      0000C1                       1803 ___str_25:
      0000C1 52 4D                 1804 	.ascii "RM"
      0000C3 0A                    1805 	.db 0x0a
      0000C4 00                    1806 	.db 0x00
                                   1807 	.area CODE
                                   1808 	.area CONST
      0000C5                       1809 ___str_26:
      0000C5 53 54                 1810 	.ascii "ST"
      0000C7 0A                    1811 	.db 0x0a
      0000C8 00                    1812 	.db 0x00
                                   1813 	.area CODE
                                   1814 	.area CONST
      0000C9                       1815 ___str_27:
      0000C9 66 31                 1816 	.ascii "f1"
      0000CB 00                    1817 	.db 0x00
                                   1818 	.area CODE
                                   1819 	.area CONST
      0000CC                       1820 ___str_28:
      0000CC 66 32                 1821 	.ascii "f2"
      0000CE 00                    1822 	.db 0x00
                                   1823 	.area CODE
                                   1824 	.area CONST
      0000CF                       1825 ___str_29:
      0000CF 66 33                 1826 	.ascii "f3"
      0000D1 00                    1827 	.db 0x00
                                   1828 	.area CODE
                                   1829 	.area CONST
      0000D2                       1830 ___str_30:
      0000D2 66 34                 1831 	.ascii "f4"
      0000D4 00                    1832 	.db 0x00
                                   1833 	.area CODE
                                   1834 	.area CONST
      0000D5                       1835 ___str_31:
      0000D5 66 35                 1836 	.ascii "f5"
      0000D7 00                    1837 	.db 0x00
                                   1838 	.area CODE
                                   1839 	.area CONST
      0000D8                       1840 ___str_32:
      0000D8 53 57 20              1841 	.ascii "SW "
      0000DB 00                    1842 	.db 0x00
                                   1843 	.area CODE
                                   1844 	.area CONST
      0000DC                       1845 ___str_33:
      0000DC 20                    1846 	.ascii " "
      0000DD 00                    1847 	.db 0x00
                                   1848 	.area CODE
                                   1849 	.area CONST
      0000DE                       1850 ___str_34:
      0000DE 53 4D                 1851 	.ascii "SM"
      0000E0 00                    1852 	.db 0x00
                                   1853 	.area CODE
                                   1854 	.area CONST
      0000E1                       1855 ___str_35:
      0000E1 53 4E                 1856 	.ascii "SN"
      0000E3 00                    1857 	.db 0x00
                                   1858 	.area CODE
                                   1859 	.area CONST
      0000E4                       1860 ___str_36:
      0000E4 53 54                 1861 	.ascii "ST"
      0000E6 00                    1862 	.db 0x00
                                   1863 	.area CODE
                                   1864 	.area CONST
      0000E7                       1865 ___str_37:
      0000E7 52 4D                 1866 	.ascii "RM"
      0000E9 00                    1867 	.db 0x00
                                   1868 	.area CODE
                                   1869 	.area CONST
      0000EA                       1870 ___str_38:
      0000EA 44 42                 1871 	.ascii "DB"
      0000EC 00                    1872 	.db 0x00
                                   1873 	.area CODE
                                   1874 	.area CONST
      0000ED                       1875 ___str_39:
      0000ED 53 52                 1876 	.ascii "SR"
      0000EF 00                    1877 	.db 0x00
                                   1878 	.area CODE
                                   1879 	.area CONST
      0000F0                       1880 ___str_40:
      0000F0 53 57                 1881 	.ascii "SW"
      0000F2 00                    1882 	.db 0x00
                                   1883 	.area CODE
                                   1884 	.area CONST
      0000F3                       1885 ___str_41:
      0000F3 70 72 65 73 77 69 74  1886 	.ascii "preswitch"
             63 68
      0000FC 0A                    1887 	.db 0x0a
      0000FD 00                    1888 	.db 0x00
                                   1889 	.area CODE
                                   1890 	.area CONST
      0000FE                       1891 ___str_42:
      0000FE 0A                    1892 	.db 0x0a
      0000FF 00                    1893 	.db 0x00
                                   1894 	.area CODE
                                   1895 	.area CONST
      000100                       1896 ___str_43:
      000100 73 77 69 74 63 68     1897 	.ascii "switch"
      000106 0A                    1898 	.db 0x0a
      000107 00                    1899 	.db 0x00
                                   1900 	.area CODE
                                   1901 	.area CONST
      000108                       1902 ___str_44:
      000108 53 53                 1903 	.ascii "SS"
      00010A 0A                    1904 	.db 0x0a
      00010B 00                    1905 	.db 0x00
                                   1906 	.area CODE
                                   1907 	.area INITIALIZER
      000000                       1908 __xinit__buffer:
      000000 00                    1909 	.db #0x00	; 0
      000001 00                    1910 	.db 0x00
      000002 00                    1911 	.db 0x00
      000003 00                    1912 	.db 0x00
      000004 00                    1913 	.db 0x00
      000005 00                    1914 	.db 0x00
      000006 00                    1915 	.db 0x00
      000007 00                    1916 	.db 0x00
      000008 00                    1917 	.db 0x00
      000009 00                    1918 	.db 0x00
      00000A 00                    1919 	.db 0x00
      00000B 00                    1920 	.db 0x00
      00000C 00                    1921 	.db 0x00
      00000D 00                    1922 	.db 0x00
      00000E 00                    1923 	.db 0x00
      00000F 00                    1924 	.db 0x00
      000010 00                    1925 	.db 0x00
      000011 00                    1926 	.db 0x00
      000012 00                    1927 	.db 0x00
      000013 00                    1928 	.db 0x00
      000014 00                    1929 	.db 0x00
      000015 00                    1930 	.db 0x00
      000016 00                    1931 	.db 0x00
      000017 00                    1932 	.db 0x00
      000018 00                    1933 	.db 0x00
      000019 00                    1934 	.db 0x00
      00001A 00                    1935 	.db 0x00
      00001B 00                    1936 	.db 0x00
      00001C 00                    1937 	.db 0x00
      00001D 00                    1938 	.db 0x00
      00001E 00                    1939 	.db 0x00
      00001F 00                    1940 	.db 0x00
      000020 00                    1941 	.db 0x00
      000021 00                    1942 	.db 0x00
      000022 00                    1943 	.db 0x00
      000023 00                    1944 	.db 0x00
      000024 00                    1945 	.db 0x00
      000025 00                    1946 	.db 0x00
      000026 00                    1947 	.db 0x00
      000027 00                    1948 	.db 0x00
      000028 00                    1949 	.db 0x00
      000029 00                    1950 	.db 0x00
      00002A 00                    1951 	.db 0x00
      00002B 00                    1952 	.db 0x00
      00002C 00                    1953 	.db 0x00
      00002D 00                    1954 	.db 0x00
      00002E 00                    1955 	.db 0x00
      00002F 00                    1956 	.db 0x00
      000030 00                    1957 	.db 0x00
      000031 00                    1958 	.db 0x00
      000032 00                    1959 	.db 0x00
      000033 00                    1960 	.db 0x00
      000034 00                    1961 	.db 0x00
      000035 00                    1962 	.db 0x00
      000036 00                    1963 	.db 0x00
      000037 00                    1964 	.db 0x00
      000038 00                    1965 	.db 0x00
      000039 00                    1966 	.db 0x00
      00003A 00                    1967 	.db 0x00
      00003B 00                    1968 	.db 0x00
      00003C 00                    1969 	.db 0x00
      00003D 00                    1970 	.db 0x00
      00003E 00                    1971 	.db 0x00
      00003F 00                    1972 	.db 0x00
      000040 00                    1973 	.db 0x00
      000041 00                    1974 	.db 0x00
      000042 00                    1975 	.db 0x00
      000043 00                    1976 	.db 0x00
      000044 00                    1977 	.db 0x00
      000045 00                    1978 	.db 0x00
      000046 00                    1979 	.db 0x00
      000047 00                    1980 	.db 0x00
      000048 00                    1981 	.db 0x00
      000049 00                    1982 	.db 0x00
      00004A 00                    1983 	.db 0x00
      00004B 00                    1984 	.db 0x00
      00004C 00                    1985 	.db 0x00
      00004D 00                    1986 	.db 0x00
      00004E 00                    1987 	.db 0x00
      00004F 00                    1988 	.db 0x00
      000050 00                    1989 	.db 0x00
      000051 00                    1990 	.db 0x00
      000052 00                    1991 	.db 0x00
      000053 00                    1992 	.db 0x00
      000054 00                    1993 	.db 0x00
      000055 00                    1994 	.db 0x00
      000056 00                    1995 	.db 0x00
      000057 00                    1996 	.db 0x00
      000058 00                    1997 	.db 0x00
      000059 00                    1998 	.db 0x00
      00005A 00                    1999 	.db 0x00
      00005B 00                    2000 	.db 0x00
      00005C 00                    2001 	.db 0x00
      00005D 00                    2002 	.db 0x00
      00005E 00                    2003 	.db 0x00
      00005F 00                    2004 	.db 0x00
      000060 00                    2005 	.db 0x00
      000061 00                    2006 	.db 0x00
      000062 00                    2007 	.db 0x00
      000063 00                    2008 	.db 0x00
      000064 00                    2009 	.db 0x00
      000065 00                    2010 	.db 0x00
      000066 00                    2011 	.db 0x00
      000067 00                    2012 	.db 0x00
      000068 00                    2013 	.db 0x00
      000069 00                    2014 	.db 0x00
      00006A 00                    2015 	.db 0x00
      00006B 00                    2016 	.db 0x00
      00006C 00                    2017 	.db 0x00
      00006D 00                    2018 	.db 0x00
      00006E 00                    2019 	.db 0x00
      00006F 00                    2020 	.db 0x00
      000070 00                    2021 	.db 0x00
      000071 00                    2022 	.db 0x00
      000072 00                    2023 	.db 0x00
      000073 00                    2024 	.db 0x00
      000074 00                    2025 	.db 0x00
      000075 00                    2026 	.db 0x00
      000076 00                    2027 	.db 0x00
      000077 00                    2028 	.db 0x00
      000078 00                    2029 	.db 0x00
      000079 00                    2030 	.db 0x00
      00007A 00                    2031 	.db 0x00
      00007B 00                    2032 	.db 0x00
      00007C 00                    2033 	.db 0x00
      00007D 00                    2034 	.db 0x00
      00007E 00                    2035 	.db 0x00
      00007F 00                    2036 	.db 0x00
      000080 00                    2037 	.db 0x00
      000081 00                    2038 	.db 0x00
      000082 00                    2039 	.db 0x00
      000083 00                    2040 	.db 0x00
      000084 00                    2041 	.db 0x00
      000085 00                    2042 	.db 0x00
      000086 00                    2043 	.db 0x00
      000087 00                    2044 	.db 0x00
      000088 00                    2045 	.db 0x00
      000089 00                    2046 	.db 0x00
      00008A 00                    2047 	.db 0x00
      00008B 00                    2048 	.db 0x00
      00008C 00                    2049 	.db 0x00
      00008D 00                    2050 	.db 0x00
      00008E 00                    2051 	.db 0x00
      00008F 00                    2052 	.db 0x00
      000090 00                    2053 	.db 0x00
      000091 00                    2054 	.db 0x00
      000092 00                    2055 	.db 0x00
      000093 00                    2056 	.db 0x00
      000094 00                    2057 	.db 0x00
      000095 00                    2058 	.db 0x00
      000096 00                    2059 	.db 0x00
      000097 00                    2060 	.db 0x00
      000098 00                    2061 	.db 0x00
      000099 00                    2062 	.db 0x00
      00009A 00                    2063 	.db 0x00
      00009B 00                    2064 	.db 0x00
      00009C 00                    2065 	.db 0x00
      00009D 00                    2066 	.db 0x00
      00009E 00                    2067 	.db 0x00
      00009F 00                    2068 	.db 0x00
      0000A0 00                    2069 	.db 0x00
      0000A1 00                    2070 	.db 0x00
      0000A2 00                    2071 	.db 0x00
      0000A3 00                    2072 	.db 0x00
      0000A4 00                    2073 	.db 0x00
      0000A5 00                    2074 	.db 0x00
      0000A6 00                    2075 	.db 0x00
      0000A7 00                    2076 	.db 0x00
      0000A8 00                    2077 	.db 0x00
      0000A9 00                    2078 	.db 0x00
      0000AA 00                    2079 	.db 0x00
      0000AB 00                    2080 	.db 0x00
      0000AC 00                    2081 	.db 0x00
      0000AD 00                    2082 	.db 0x00
      0000AE 00                    2083 	.db 0x00
      0000AF 00                    2084 	.db 0x00
      0000B0 00                    2085 	.db 0x00
      0000B1 00                    2086 	.db 0x00
      0000B2 00                    2087 	.db 0x00
      0000B3 00                    2088 	.db 0x00
      0000B4 00                    2089 	.db 0x00
      0000B5 00                    2090 	.db 0x00
      0000B6 00                    2091 	.db 0x00
      0000B7 00                    2092 	.db 0x00
      0000B8 00                    2093 	.db 0x00
      0000B9 00                    2094 	.db 0x00
      0000BA 00                    2095 	.db 0x00
      0000BB 00                    2096 	.db 0x00
      0000BC 00                    2097 	.db 0x00
      0000BD 00                    2098 	.db 0x00
      0000BE 00                    2099 	.db 0x00
      0000BF 00                    2100 	.db 0x00
      0000C0 00                    2101 	.db 0x00
      0000C1 00                    2102 	.db 0x00
      0000C2 00                    2103 	.db 0x00
      0000C3 00                    2104 	.db 0x00
      0000C4 00                    2105 	.db 0x00
      0000C5 00                    2106 	.db 0x00
      0000C6 00                    2107 	.db 0x00
      0000C7 00                    2108 	.db 0x00
      0000C8 00                    2109 	.db 0x00
      0000C9 00                    2110 	.db 0x00
      0000CA 00                    2111 	.db 0x00
      0000CB 00                    2112 	.db 0x00
      0000CC 00                    2113 	.db 0x00
      0000CD 00                    2114 	.db 0x00
      0000CE 00                    2115 	.db 0x00
      0000CF 00                    2116 	.db 0x00
      0000D0 00                    2117 	.db 0x00
      0000D1 00                    2118 	.db 0x00
      0000D2 00                    2119 	.db 0x00
      0000D3 00                    2120 	.db 0x00
      0000D4 00                    2121 	.db 0x00
      0000D5 00                    2122 	.db 0x00
      0000D6 00                    2123 	.db 0x00
      0000D7 00                    2124 	.db 0x00
      0000D8 00                    2125 	.db 0x00
      0000D9 00                    2126 	.db 0x00
      0000DA 00                    2127 	.db 0x00
      0000DB 00                    2128 	.db 0x00
      0000DC 00                    2129 	.db 0x00
      0000DD 00                    2130 	.db 0x00
      0000DE 00                    2131 	.db 0x00
      0000DF 00                    2132 	.db 0x00
      0000E0 00                    2133 	.db 0x00
      0000E1 00                    2134 	.db 0x00
      0000E2 00                    2135 	.db 0x00
      0000E3 00                    2136 	.db 0x00
      0000E4 00                    2137 	.db 0x00
      0000E5 00                    2138 	.db 0x00
      0000E6 00                    2139 	.db 0x00
      0000E7 00                    2140 	.db 0x00
      0000E8 00                    2141 	.db 0x00
      0000E9 00                    2142 	.db 0x00
      0000EA 00                    2143 	.db 0x00
      0000EB 00                    2144 	.db 0x00
      0000EC 00                    2145 	.db 0x00
      0000ED 00                    2146 	.db 0x00
      0000EE 00                    2147 	.db 0x00
      0000EF 00                    2148 	.db 0x00
      0000F0 00                    2149 	.db 0x00
      0000F1 00                    2150 	.db 0x00
      0000F2 00                    2151 	.db 0x00
      0000F3 00                    2152 	.db 0x00
      0000F4 00                    2153 	.db 0x00
      0000F5 00                    2154 	.db 0x00
      0000F6 00                    2155 	.db 0x00
      0000F7 00                    2156 	.db 0x00
      0000F8 00                    2157 	.db 0x00
      0000F9 00                    2158 	.db 0x00
      0000FA 00                    2159 	.db 0x00
      0000FB 00                    2160 	.db 0x00
      0000FC 00                    2161 	.db 0x00
      0000FD 00                    2162 	.db 0x00
      0000FE 00                    2163 	.db 0x00
      0000FF 00                    2164 	.db 0x00
      000100                       2165 __xinit__a:
      000100 00                    2166 	.db #0x00	; 0
      000101 00                    2167 	.db 0x00
      000102 00                    2168 	.db 0x00
      000103                       2169 __xinit__d_addr:
      000103 00                    2170 	.db #0x00	; 0
      000104                       2171 __xinit__p_size:
      000104 00                    2172 	.db #0x00	; 0
      000105                       2173 __xinit__d_size:
      000105 00                    2174 	.db #0x00	; 0
      000106                       2175 __xinit__p_bytes:
      000106 00                    2176 	.db #0x00	; 0
      000107                       2177 __xinit__data_buf:
      000107 00                    2178 	.db #0x00	; 0
      000108 00                    2179 	.db 0x00
      000109 00                    2180 	.db 0x00
      00010A 00                    2181 	.db 0x00
      00010B 00                    2182 	.db 0x00
      00010C 00                    2183 	.db 0x00
      00010D 00                    2184 	.db 0x00
      00010E 00                    2185 	.db 0x00
      00010F 00                    2186 	.db 0x00
      000110 00                    2187 	.db 0x00
      000111 00                    2188 	.db 0x00
      000112 00                    2189 	.db 0x00
      000113 00                    2190 	.db 0x00
      000114 00                    2191 	.db 0x00
      000115 00                    2192 	.db 0x00
      000116 00                    2193 	.db 0x00
      000117 00                    2194 	.db 0x00
      000118 00                    2195 	.db 0x00
      000119 00                    2196 	.db 0x00
      00011A 00                    2197 	.db 0x00
      00011B 00                    2198 	.db 0x00
      00011C 00                    2199 	.db 0x00
      00011D 00                    2200 	.db 0x00
      00011E 00                    2201 	.db 0x00
      00011F 00                    2202 	.db 0x00
      000120 00                    2203 	.db 0x00
      000121 00                    2204 	.db 0x00
      000122 00                    2205 	.db 0x00
      000123 00                    2206 	.db 0x00
      000124 00                    2207 	.db 0x00
      000125 00                    2208 	.db 0x00
      000126 00                    2209 	.db 0x00
      000127 00                    2210 	.db 0x00
      000128 00                    2211 	.db 0x00
      000129 00                    2212 	.db 0x00
      00012A 00                    2213 	.db 0x00
      00012B 00                    2214 	.db 0x00
      00012C 00                    2215 	.db 0x00
      00012D 00                    2216 	.db 0x00
      00012E 00                    2217 	.db 0x00
      00012F 00                    2218 	.db 0x00
      000130 00                    2219 	.db 0x00
      000131 00                    2220 	.db 0x00
      000132 00                    2221 	.db 0x00
      000133 00                    2222 	.db 0x00
      000134 00                    2223 	.db 0x00
      000135 00                    2224 	.db 0x00
      000136 00                    2225 	.db 0x00
      000137 00                    2226 	.db 0x00
      000138 00                    2227 	.db 0x00
      000139 00                    2228 	.db 0x00
      00013A 00                    2229 	.db 0x00
      00013B 00                    2230 	.db 0x00
      00013C 00                    2231 	.db 0x00
      00013D 00                    2232 	.db 0x00
      00013E 00                    2233 	.db 0x00
      00013F 00                    2234 	.db 0x00
      000140 00                    2235 	.db 0x00
      000141 00                    2236 	.db 0x00
      000142 00                    2237 	.db 0x00
      000143 00                    2238 	.db 0x00
      000144 00                    2239 	.db 0x00
      000145 00                    2240 	.db 0x00
      000146 00                    2241 	.db 0x00
      000147 00                    2242 	.db 0x00
      000148 00                    2243 	.db 0x00
      000149 00                    2244 	.db 0x00
      00014A 00                    2245 	.db 0x00
      00014B 00                    2246 	.db 0x00
      00014C 00                    2247 	.db 0x00
      00014D 00                    2248 	.db 0x00
      00014E 00                    2249 	.db 0x00
      00014F 00                    2250 	.db 0x00
      000150 00                    2251 	.db 0x00
      000151 00                    2252 	.db 0x00
      000152 00                    2253 	.db 0x00
      000153 00                    2254 	.db 0x00
      000154 00                    2255 	.db 0x00
      000155 00                    2256 	.db 0x00
      000156 00                    2257 	.db 0x00
      000157 00                    2258 	.db 0x00
      000158 00                    2259 	.db 0x00
      000159 00                    2260 	.db 0x00
      00015A 00                    2261 	.db 0x00
      00015B 00                    2262 	.db 0x00
      00015C 00                    2263 	.db 0x00
      00015D 00                    2264 	.db 0x00
      00015E 00                    2265 	.db 0x00
      00015F 00                    2266 	.db 0x00
      000160 00                    2267 	.db 0x00
      000161 00                    2268 	.db 0x00
      000162 00                    2269 	.db 0x00
      000163 00                    2270 	.db 0x00
      000164 00                    2271 	.db 0x00
      000165 00                    2272 	.db 0x00
      000166 00                    2273 	.db 0x00
      000167 00                    2274 	.db 0x00
      000168 00                    2275 	.db 0x00
      000169 00                    2276 	.db 0x00
      00016A 00                    2277 	.db 0x00
      00016B 00                    2278 	.db 0x00
      00016C 00                    2279 	.db 0x00
      00016D 00                    2280 	.db 0x00
      00016E 00                    2281 	.db 0x00
      00016F 00                    2282 	.db 0x00
      000170 00                    2283 	.db 0x00
      000171 00                    2284 	.db 0x00
      000172 00                    2285 	.db 0x00
      000173 00                    2286 	.db 0x00
      000174 00                    2287 	.db 0x00
      000175 00                    2288 	.db 0x00
      000176 00                    2289 	.db 0x00
      000177 00                    2290 	.db 0x00
      000178 00                    2291 	.db 0x00
      000179 00                    2292 	.db 0x00
      00017A 00                    2293 	.db 0x00
      00017B 00                    2294 	.db 0x00
      00017C 00                    2295 	.db 0x00
      00017D 00                    2296 	.db 0x00
      00017E 00                    2297 	.db 0x00
      00017F 00                    2298 	.db 0x00
      000180 00                    2299 	.db 0x00
      000181 00                    2300 	.db 0x00
      000182 00                    2301 	.db 0x00
      000183 00                    2302 	.db 0x00
      000184 00                    2303 	.db 0x00
      000185 00                    2304 	.db 0x00
      000186 00                    2305 	.db 0x00
      000187 00                    2306 	.db 0x00
      000188 00                    2307 	.db 0x00
      000189 00                    2308 	.db 0x00
      00018A 00                    2309 	.db 0x00
      00018B 00                    2310 	.db 0x00
      00018C 00                    2311 	.db 0x00
      00018D 00                    2312 	.db 0x00
      00018E 00                    2313 	.db 0x00
      00018F 00                    2314 	.db 0x00
      000190 00                    2315 	.db 0x00
      000191 00                    2316 	.db 0x00
      000192 00                    2317 	.db 0x00
      000193 00                    2318 	.db 0x00
      000194 00                    2319 	.db 0x00
      000195 00                    2320 	.db 0x00
      000196 00                    2321 	.db 0x00
      000197 00                    2322 	.db 0x00
      000198 00                    2323 	.db 0x00
      000199 00                    2324 	.db 0x00
      00019A 00                    2325 	.db 0x00
      00019B 00                    2326 	.db 0x00
      00019C 00                    2327 	.db 0x00
      00019D 00                    2328 	.db 0x00
      00019E 00                    2329 	.db 0x00
      00019F 00                    2330 	.db 0x00
      0001A0 00                    2331 	.db 0x00
      0001A1 00                    2332 	.db 0x00
      0001A2 00                    2333 	.db 0x00
      0001A3 00                    2334 	.db 0x00
      0001A4 00                    2335 	.db 0x00
      0001A5 00                    2336 	.db 0x00
      0001A6 00                    2337 	.db 0x00
      0001A7 00                    2338 	.db 0x00
      0001A8 00                    2339 	.db 0x00
      0001A9 00                    2340 	.db 0x00
      0001AA 00                    2341 	.db 0x00
      0001AB 00                    2342 	.db 0x00
      0001AC 00                    2343 	.db 0x00
      0001AD 00                    2344 	.db 0x00
      0001AE 00                    2345 	.db 0x00
      0001AF 00                    2346 	.db 0x00
      0001B0 00                    2347 	.db 0x00
      0001B1 00                    2348 	.db 0x00
      0001B2 00                    2349 	.db 0x00
      0001B3 00                    2350 	.db 0x00
      0001B4 00                    2351 	.db 0x00
      0001B5 00                    2352 	.db 0x00
      0001B6 00                    2353 	.db 0x00
      0001B7 00                    2354 	.db 0x00
      0001B8 00                    2355 	.db 0x00
      0001B9 00                    2356 	.db 0x00
      0001BA 00                    2357 	.db 0x00
      0001BB 00                    2358 	.db 0x00
      0001BC 00                    2359 	.db 0x00
      0001BD 00                    2360 	.db 0x00
      0001BE 00                    2361 	.db 0x00
      0001BF 00                    2362 	.db 0x00
      0001C0 00                    2363 	.db 0x00
      0001C1 00                    2364 	.db 0x00
      0001C2 00                    2365 	.db 0x00
      0001C3 00                    2366 	.db 0x00
      0001C4 00                    2367 	.db 0x00
      0001C5 00                    2368 	.db 0x00
      0001C6 00                    2369 	.db 0x00
      0001C7 00                    2370 	.db 0x00
      0001C8 00                    2371 	.db 0x00
      0001C9 00                    2372 	.db 0x00
      0001CA 00                    2373 	.db 0x00
      0001CB 00                    2374 	.db 0x00
      0001CC 00                    2375 	.db 0x00
      0001CD 00                    2376 	.db 0x00
      0001CE 00                    2377 	.db 0x00
      0001CF 00                    2378 	.db 0x00
      0001D0 00                    2379 	.db 0x00
      0001D1 00                    2380 	.db 0x00
      0001D2 00                    2381 	.db 0x00
      0001D3 00                    2382 	.db 0x00
      0001D4 00                    2383 	.db 0x00
      0001D5 00                    2384 	.db 0x00
      0001D6 00                    2385 	.db 0x00
      0001D7 00                    2386 	.db 0x00
      0001D8 00                    2387 	.db 0x00
      0001D9 00                    2388 	.db 0x00
      0001DA 00                    2389 	.db 0x00
      0001DB 00                    2390 	.db 0x00
      0001DC 00                    2391 	.db 0x00
      0001DD 00                    2392 	.db 0x00
      0001DE 00                    2393 	.db 0x00
      0001DF 00                    2394 	.db 0x00
      0001E0 00                    2395 	.db 0x00
      0001E1 00                    2396 	.db 0x00
      0001E2 00                    2397 	.db 0x00
      0001E3 00                    2398 	.db 0x00
      0001E4 00                    2399 	.db 0x00
      0001E5 00                    2400 	.db 0x00
      0001E6 00                    2401 	.db 0x00
      0001E7 00                    2402 	.db 0x00
      0001E8 00                    2403 	.db 0x00
      0001E9 00                    2404 	.db 0x00
      0001EA 00                    2405 	.db 0x00
      0001EB 00                    2406 	.db 0x00
      0001EC 00                    2407 	.db 0x00
      0001ED 00                    2408 	.db 0x00
      0001EE 00                    2409 	.db 0x00
      0001EF 00                    2410 	.db 0x00
      0001F0 00                    2411 	.db 0x00
      0001F1 00                    2412 	.db 0x00
      0001F2 00                    2413 	.db 0x00
      0001F3 00                    2414 	.db 0x00
      0001F4 00                    2415 	.db 0x00
      0001F5 00                    2416 	.db 0x00
      0001F6 00                    2417 	.db 0x00
      0001F7 00                    2418 	.db 0x00
      0001F8 00                    2419 	.db 0x00
      0001F9 00                    2420 	.db 0x00
      0001FA 00                    2421 	.db 0x00
      0001FB 00                    2422 	.db 0x00
      0001FC 00                    2423 	.db 0x00
      0001FD 00                    2424 	.db 0x00
      0001FE 00                    2425 	.db 0x00
      0001FF 00                    2426 	.db 0x00
      000200 00                    2427 	.db 0x00
      000201 00                    2428 	.db 0x00
      000202 00                    2429 	.db 0x00
      000203 00                    2430 	.db 0x00
      000204 00                    2431 	.db 0x00
      000205 00                    2432 	.db 0x00
      000206 00                    2433 	.db 0x00
      000207                       2434 __xinit__current_dev:
      000207 00                    2435 	.db #0x00	; 0
                                   2436 	.area CABS (ABS)
